issue: --noStrictNullChecks in particaulr my tsconfig is super restrictive sorry, --strictNullChecks I mean I think it would be very nice to have a compiler flag that enforces exhaustiveness, though maybe that's hard for reasons not apparent to me right now 
solution: 

issue: Hello what is the correct way to use@types The npm folder In fact what I want to know is how to extend them Right now I have those definition types:  [<-LINK->] When another library uses karma-ts as dependency, and it compiles the TS code, it shows me some errors about not finding thed.tsfiles So my question is, how do I use the extendedd.tsfiles in dependent libraries 
solution: 

issue: lambda is more universal in my opinion To me it's like saying "statement block" or "curly braces" But I think in js officially they are arrow functions ? Coming to think of it, maybe arrow-function is the more generically appropriate term  since strictly speaking  something like: [<-CODE->] is not necessarily a lambdawhereas something like [<-CODE->] is a lambda but not an arrow function daslicht: you aren't returning the last line so the result of your arrow function is undefined daslicht: I'm surprised it even compiles for you. The typings should let you know that you are returning void and it expects boolean; Arrow functions don't  automatically return the last statement when using a block{} only if it's a single expression like [<-CODE->] 
solution: 

issue: How can I fix this error?error TS2307: Cannot find module 'http'. luisvt: that doesn't work for me? [<-CODE->] should it not be node ? 
solution: 

issue: how do we create a callable class? for example I have this code: [<-LINK->] it correctly works however it shows me an error in line 7 
solution: 

issue: I personally use both VSC for my client side Angular 2 and VS for my backend asp.net 
solution: 

issue: Hi guys. I was looking at Anders'smapObjexample of mapped types ( [<-ISSUE->] ):function mapObject<K extends string | number, T, U>(obj: Record<K, T>, f: (x: T) => U): Record<K, U>;. I was wondering how I might be able to generalize this toward separate types for each input/output key. I get the principle of reusing input types e.g.{ [P in keyof Item]: Item[P] }, but I'm not sure how to "separately apply the function" for each such type. Any clues? 
solution: 

issue: Z3roCoder: I have 2.1.1 already installed from npm. How would it help you to get rid of webpack? Z3roCoder: nevermind: npm has 2.0.10 atm, prob got mine from@next Z3roCoder: do you mean Babel? 
solution: 

issue: Question: Is there a reason TS seems to ignore generics that are not actually used in the value signature for the type?  [<-CODE->] this is not actually treated as a Foo<bool> IE, functions that only operate on Foo<bool> will happily accept Foo<string>, Foo<number>, etc BUT if I do this [<-CODE->] then we're all gravy that makes type-ghosting or phantom types a little awkward been resorting to [<-CODE->] that sort of thing, to create phantom types ( the above does NOT work however.  I am forced to in-line this adhoc solution everywhere ) [<-CODE->]  [<-CODE->] 
solution: 

issue: I'm trying to do a function overload but my second parameter doesn't get inferred as expected, can someone explain - [<-LINK->] 
solution: 

issue: Can TypeScript be configured to import NPM packages from a node_modules directory several levels above the tsconfig.json project file? [<-LINK->] 
solution: 

issue: It's highly doubtful, unless they eventually get added to ES kellytk: Typescript will use normal node_module resolution, so yes, it will walk up your folder tree and can pull from anything node would be able to pull. luisvt: There's not really any relationship between location of node_modules and tsconfig. node resolution will start at the current folder of the file that did the import and go up from there it will even continue going beyond the root of your project, all the way to the root of your drive. 
solution: 

issue: kirjs: if you wanted to be really fancy, you could hook into the Typescript Compiler API and traverse the AST looking for a constructor definition buuuut that'sreallyfancy, and checking the source file for the word "constructor" will work in most cases ;) 
solution: 

issue: I'm using the Google Maps API, which has an object atgoogle.mapsthat contains classes that I can call likenew google.maps.Map(),new google.maps.Marker(), etc.  The typings at [<-LINK->] havedeclare namespace google.mapsand I want to make my own variablemyGooglethat is a copy of the globalgoogle. How can I set the type ofmyGoogle? let myGoogle: google;doesn't work. I'm willing to edit the google.maps.d.ts file and make a pull request 
solution: 

issue: I just descovered VSCode this weekend 
solution: 

issue: hello, I'm getting a lot of errors with typscript 2.1.1 for example I'm getthing this one:Error:(39, 23) TS2339:Property 'length' does not exist on type '{}'. 
solution: also getting this other one:Error:(40, 20) TS2693:'Array' only refers to a type, but is being used as a value here.. 

issue: cdaringe: you might have thesinonpackage but you need the@types/sinonfor typescript to be able to import it. or a global typing file that otherwise declares the module EricDoherty: Are you sing resharper in visual studio? there's a pretty nasty bug in resharper's typescript support that causes extreme slow down in a lot of cases it's supposed to be fixed in the next release kellytk: Looks like you are usingvue-loaderto load.vueextension, shouldn't you be usingvue-ts-loader? I guess not judging from other examples. 
solution: but from some examples they seem to still load through vue-loader and then you configure vue-loader to delegate to ts or something. 

issue: Anyone know if it's possible to call an abstract method from a base class?  I getCannot read property 'myMethod' of undefined sure [<-CODE->] later on in BaseForm [<-CODE->] The class that extends it [<-CODE->] 
solution: 

issue: dtabuenc: hey, i dont want it for every function just for some functions so i dont know if a global setting inhelpfull aah ok with union types yeah 
solution: 

issue:  [<-CODE->]  [<-CODE->] is the same  [<-CODE->] with copy :) 
solution: but that will copy all properties of myObject. 

issue: hi i have an object{sum:0, arr:[]} how do i assign types at the same time? {sum:number:0,  arr:number[]:[] }??? this syntax doesnt work , can someone help. its not in my case can you give an example of a syntax that would work? thanks a million 
solution: 

issue: Hi, I've gotvar testNumber : number;Value of testNumber is undefined. Could I check is testNumber a number? Typeof and instanceof isn't of course working in this case.Essentially I would like to iterate through properties of object and if property TYPE is a number (even if value is undefined) then do something. kristho91: : Hm, my variable is already undefined without ? in type. My question was: is it possible to check is this variable number even if it's undefined. kristho91: : Additionally, I've got compiler error when declaring it like var testNumber?: number; kristho91: : But anyway, I didn't see a solution in it. 
solution: 

issue: that also clears up why we can't have nice things in TS, like proper pattern matching by types, not discriminant properties. Right? 
solution: 

issue: Does anyone know if you make an argument optional in where you use object destruction ? getValue({defaultValue = 'n/a', ...rest}:Context = {}){}    does not seem to work. Whenever I dont pass an argument to getValue() i  get an error. 
solution: 

issue: isnt this exacty my orginal ? yep, i did have the :Context in there though I have transpileonly enabled. wow, w8 no errors here Ah i had no error cause of the getValue({}) stil lin there ok so, it doesnt work :( 
solution: 

issue: dtabuenc: that link to that issue, is it saying that its no longer supported? mkay thanks man 
solution: 

issue: i assume you know the express module from node.js ? when i register a request for get like   app.get('/my/path', (req,res) => { do stuff here }); 
solution: i do this in a loop of for in of the instance. registering all properties with reflect-metadata keys to its specific paths. inside this for loop i have to cast my class which now works.. i changed  VAR myCastedInstance = ...  to LET myCastedInstance = ...  and used  the casted instance inside the anonymous function of the app.get(...) method.. 

issue: am i having the biggest brainfart of my life? 
solution: 

issue: is it possible to use a class decorator to assign a metadata value to a class?  [<-CODE->] it returns undefined at console.log() 
solution: but I'm still not sure you can attach metadata to the whole class. it should be something likeReflect.defineMetaData('ha_type', 'room', target.prototype, "methodName"). 

issue: Hey all, anyone have a good example of typescript + webpack + ES6 modules?   I'm failing to get the most basic environment running. I'm just trying to make this work: [<-CODE->]  [<-CODE->] 
solution: 

issue: guys, I'm desperately looking for a way to me to put my game project on TypeScript but I cant do so before solve one issue. Since in my game I'm using a components system, I need to have classes generated from few component classes  and here comes a problem. There are no multi inheritance in ts I can't use decorators for that because ts will know nothing about components types I was thinking about something like @Component([Components.Position,Components.Rotation]) I can't use mixins. Because following this  https://www.typescriptlang.org/docs/handbook/mixins.html I should put tedails of each component in each entity which is not a way to go because each time I change something in component, I should change it in each entities where it is applied so what is my ways to solve this? 
solution: 

issue: Hi, I'm trying to use protractor to test the code containing monaco editor, and can't find how to edit the code programmatically, has anybody done that before? 
solution: 

issue: This isn't really a problem so much as something that's annoying me. I configured my moduleResolution in mytsconfig.client.jsonto map all paths to [src/*,node_modules/*] so that in my client-side code i don't have to doimport { CoreModule } from '../../core/core.module'but rather `import { CoreModule } from 'client/core/core.module' it all works in my webpack ts-loaer but vscode keeps underlining the paths in red, saying it can't find the module name is there a way to get that error/underlining to go away? (it clearly does work since my app is working) 
solution: 

issue: VaseemMalik: cannot find module  'crypto-js'i have imported like thisimport { CryptoJS } from 'crypto-js';i'm working on crypto-js with angular2. i have installed crypto-js, when i try to import, it's throwing compile time error "cannot find module  'crypto-js'" 
solution: 

issue: VaseemMalik: In yourtsconfig.json, do you have"moduleResolution": "node"? 
solution: 

issue: PEsteves8: why can't? What compiler says? 
solution: 

issue: Hey everyone, I'm having a hell of a time gettingfilesglob to work intsconfig.json, was wondering if anyone could shed some light This is my config:"files": [ But when I runtscI get these errors:error TS6053: File '/Users/Arman/Desktop/proj/common/**/*.ts' not found. Nevermind! Solved my own issue. I needed to use theincludekey instead offilesfor globs to work. 
solution: 

issue:  [<-ISSUE->] another@ahejlsbergslamdunk 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: how do I enable generaotrs in tsconfig so when I use async / await in 2.1.1 so my code will take advantage of generators and thus create a lot less trasnpiled code (I am only targeting latest browsers)  ? found it sorry didn't find it I thought this will do it  [<-CODE->] but still I dont see it taking advantage of generators when used  [<-CODE->] same results also tried  [<-CODE->] 
solution: 

issue: anyone know how I can make something like this work:  [<-CODE->] How can I export f so it matches Foo<T> so I canimport Fooelsewhere and use it likeFoo<T>() I want to export a function that has some other function properties on it But they are generic that only exports the type; it's not callable Foo is generic, needs a type that needs a type for T :( at Foo<T> I want to be able to use this in modules like so:  [<-CODE->] I can't cast that to Foo<T> for the export weird, it seems to lose the generic... thinks the generic type is {} 
solution: but it just doens't make sense unless you are returning a separate instance of the function each time. 

issue: is there any way to get more information about an error message?: [<-CODE->] dtabuenc: these are the only errors i get: [<-CODE->] yeah@born2netasync/await targets es6. i think typescript 2.1 can but don't hold me to that typescript 2.1 can target es5* oh i thought typescript transpiled down to using a state machine instead of a generator anyway, so i'm not sure why those errors i get from webpack dont show up intsc this is my webpack config, am i doing something wrong? [<-CODE->] 
solution: 

issue: Hi! [<-CODE->]  [<-CODE->] 
solution: 

issue:  [<-LINK->] I'm facing first time. should i need to configure something else? dtabuenc: no, should I install? 
solution: 

issue: jeusdi: under near the same task atm, check this [<-LINK->] 
solution: 

issue: somehow organizationAddress is including the js? no that should be fine that error is a webpack error then right? 
solution: 

issue: ah@dtabuenci figured it out finally why it couldn't resolve my custom 3rd party deps in webpack i forgot to include.jsas an extension 48 hours debugging for that :( 
solution: 

issue: is this part of a class? where isthis.loginServiceset ... you never define the class this is going to be the global context, or in strict mode, it will throw an error 
solution: like how do you get access  tologinServicein other parts of your server-side code. 

issue: maheshk172: is your error at compile or during running? are you suingauthenticateUseras part of a callback to a promise? or a callback to anything really? and if so can you post the line where you do that? My guess is you are doing smething similar to this: [<-CODE->] if so that won't work... you need to do something like [<-CODE->] 
solution: this is  invoked from another file login.router.ts which is just the router and  calls this method on POST request from client... 

issue: hi, does anyone know if there's a way of getting typescript intellisense to understand stuctural changes made to an object by Object.assign? I tried this out on the typescript playground: [<-CODE->] it works fine as you would expect from valid javascript but the this.hello() in the constructor is not recognised by the intellisense Just thinking how I could use functional composition this way 
solution: 

issue: Hey! Is@types/angular-mocks removed? npmjs tells me that the latest version is "0.0.0" and I can't find it in DT on Github :D con-ssc: I see that :) But the latest version is stated as "0.0.0" True, but I can't find it on DT on github, that's why I think they maybe removed it. But could just be a mistake Oh... It's in another branch :D They pull it from types-2.0 branchs 
solution: 

issue:  [<-LINK->] well if they use that in their package json so it is  [<-LINK->]  [<-LINK->] oneillci:  [<-CODE->] 
solution: 

issue: Hi. I'm very new to typescript and trying to convert my node project to it. I'm having an error onArray(15).fill(0)that I don't understand.filldoes not seem to be defined but I don't understand why. ok nevermind, I've just learned about target in config file es6 does the trick 
solution: 

issue:  [<-CODE->] Here's the relevant output: [<-CODE->] So it seems to me it both finds and does not find the module. A Schrdinger's module :-) 
solution: Well, the following works just fine:const { immutableRenderDecorator } = require('react-immutable-render-mixin'). 

issue: Hi everybody, I have a problem: I would like to use the 'react-selector' component, but typescript say me:error TS2307: Cannot find module 'react-select'.I usemoduleResolution = nodeso it should find it. Any suggestions? dtabuenc: Thank you! But why Typescript need a declaration files?  [<-LINK->] 
solution: 

issue: Is tsconig.json taken into account on compilation in a Typescript Project in Visual Studio 2015 ? It seems not. ok thanks And what is my error in my using of herited method ? [<-LINK->] 
solution: 

issue: ASI is nicer asthetically, but working in larger teams,  I can't tell you how many times a stupid hard-to-find bug was caused by it, so we disallow it in our teams. 
solution: on personal stuff I never, ever run afoul of that stuff.  on professional work I generally use [<-LINK->]. 

issue: Also I wasn't able to persuade anyone for unitesting Admittedly, in my working scenario that might not be trivial 
solution: But I think they may help if you make changes to old code for example or if the framework you are working in has API changes. 

issue: donno what it exactly does, if i wrap my vars in {{var2}} it will be showin in a popup? like a "watch"? 
solution: in general it just provides a simple set of GUI controls for common types of variables in demos. 

issue: prolly true,  although i dont like to use libs at this moment since i am still  developing my own style 
solution: 

issue: I use webpack, the config can get a little hairy and confusing, but works very well 
solution: 

issue: Hello. I suggest divide "runtime" and "compiler" side parts, for example:  [<-CODE->] also, returning runtime means any casting But in 5-90% probablity possible runtime errors for example: ".x not defined" Also, I suggest typescript low level (i.e. runtime wrappers) libraries 
solution: 

issue: webpack isn't typically necessary for server-side since you aren't doing any bundling but I've seen some projects use webpack because they want to use specific loaders 
solution: 

issue: varunjayaraman: , yeah, no compile needed outside of the modules you create.  CommonJS or UMD work great with Node. 
solution: 

issue: Hey, is there native compiler for typescript? I see that on github compiler is written in typescript, and it takes a lot of time to distribute (and I guess native one would be faster?). By native I mean something written in c++ or c# compiled to dll or exe. 
solution: ShadowDancer: I think there is no other. 

issue: ik this is pretty much offtopic, but maybe someone is familiar with this: [<-LINK->] 
solution: 

issue: Hi all.  Any help with this error : [<-LINK->] TypeScript Type must have a method that returns an iterator. I don't really get it. It is an array... It should work well, hum? 
solution: 

issue: anyone know how to override Webpack Dev Server complaints about errors while compiling so a reload was prevented there was a typescript error but it's non fatal it's just like property x can't exist on type {} or whatever because i modified an object after i declared it 
solution: if you use awesome-typescript-loader with fork checker plugin you can split type checking from compilation. 

issue: I swear you could run a company on interview product 
solution: and they want you to write documentation LOL. 

issue: day4 get paid for 3 days work? It's only the state of the modern interview if developers let it be 
solution: 

issue: Anybody have a good example of TSX/React? Having hell clearing my terminal of[at-loader]errors. -_- I was receivingcannot find module "..."on everything, but I switched fromimport ... from ...torequire()and those are gone. Right now I am working to clear these out: [<-CODE->] It was mostly on.sassfiles, as I am using CSSModules.  [<-CODE->] Theprops: anything is just my latest tinker to try to get this to resolve. <{ any }, {}><any, {}>Neither of these fix the warning, but don't break my app either. No sir.  [<-CODE->] 
solution: 

issue: HerringtonDarkholme:  [<-ISSUE->] 
solution: 

issue: Hi guys! How can I acheive this inheritance without error? [<-LINK->] con-ssc: but then the constructor will be executed twice I use Angular 1, so I'm not sure that Injector decorator is relevant for me :) con-ssc: And also in this case, I should pass to super exact number of Parent's constructor arguments. dtabuenc: so your suggestion is [<-CODE->] 
solution: 

issue: Typescript 2.1.3 milestone is all cleaned out. TS2.1 final soon? pfrankov: you're using angular 1.x? my team has done something like this for a while: [<-CODE->] 
solution: 

issue: I have another approach and another failure [<-CODE->] TS2346: Supplied parameters do not match any signature of call target. But it works perfectly 
solution: 

issue: jacobus-brogly: you can't thats the problem of community driven typedefs, if author of js lib/framework do not provide them, you can't be sure, even it they are packed together in npm 
solution: jcimoch: okidoki. so how do i mix libraries with type decl and one without  type decl. 

issue: how do I specify node libs type decl in ts? npm install --save@types/node ? ok that worked next problem why isnt this working? npm ERR! fetch failed [<-LINK->] npm WARN retry will retry, error on last attempt: Error: fetch failed with status code 406 npm install --save@types/mongodb isnt working, I wonder why that is thats weird, the same command works now i installed@types/mongodb  successfully but the types aren't picked up by vscode  why is that? 
solution: 

issue: I have some problems with transpiling my angular2 project (created with angular cli webpack). When I run "ctrl + shift + b" in VSCode, I get the following: error TS5023: Unknown compiler option 'lib'.error TS5023: Unknown compiler option 'typeRoots'. When I run "tsc -v" in cmd line, I get Version 1.8.5 It seems that my globally installet tsc does not recognize 'lib' or 'typeRoots'... 
solution: 

issue: stevekane: is that JS? wait so we dont use "catch" anymore ok 
solution: main reason for .catch is people's love of in-lining anonymous functions for the handlers. 

issue: spacejack: Not sure, but the npm download count doesn't account for Visual Studio/NuGet users 
solution: 

issue: The TypeScript Coding Guidelines ( [<-LINK->] ) saysUse undefined, do not use null.Can anyone comment on this? What is the reason behind this? 
solution: 

issue: Hi whats the property forevent.target.checked? cool! thanks@spacejack. i did this: [<-CODE->] 
solution: 

issue:  [<-LINK->] romanroe: @con-ssc Whyundefinedand notnull? [<-CODE->] drew-r: Arrow functions don't get their ownthis so they can't be typed you'll need to use a regular function expression  [<-CODE->] drew-r: P.S. usestringnotString- one is the primitive, the other is the object that contains the methods/properties that strings have 
solution: 

issue: piq9117: cool. I think you might want to useevent.currentTargetthough, unless you're sure you wantevent.targetfor some reason. They have different nuances. 
solution: 

issue: hey folks you guys here are superesperienced and smart anyone work here with ArcGIS i hate it because it doesnt use commonJS DOJO and AMD 
solution: 

issue: i'm really struggling to include the definitions for a third-party lib... keep gettingCannot find module '<libname>' anyone have a couple of minutes to help me out? 
solution: 

issue: Why preferred? And if there is no .getTime() I guess t1 is not of  Date type 
solution: nadavsinai: valueOf() is not meant to be used explicitly. it's not speicif cto date's it's just a way to get the primitive value of any object.. but if you just need a diff you don't need either.... sincevalueOf()is called implicitly so you can just do [<-CODE->]. 

issue:  [<-CODE->]  [<-CODE->] 
solution: 

issue: I'm debating whether I should put the time into [<-ISSUE->] 
solution: 

issue: kristho91: yes that's how you do it.... I have stuff like this for example [<-CODE->] Rudde: younpm install typescript@rc scippio: You can't use variables in an import like that, but you can use path mapping to load things relative to a root though. You'll need to also configure your bundling tool to remap those paths as well 
solution: 

issue: DominicBoettger: What do you mean return something in the constructor? Java constructors never have return types do they? nunofreitasbotelho: Can't help you without knowing what your actual types are... judging from the error message your types aren't matching the structure of your data. jacobus-brogly: no I would not copy over the file into the@types/folder just don't use the@typesfor that one if there is no npm package available for it 
solution: 

issue: stevekane: he can't use import everywhere because of how the library is designed it's all AMD and virtual modules the library is just a pain to work with 
solution: they wrote their typings so that it issues require calls for stuff. 

issue: Hi all, I'm using TS browser compiler, and I set declarations: true in the compilerOptions  [<-CODE->] And now I can't find the declarations anywhere 
solution: 

issue: good thing I'm not in europe... aren't cookies illegal there? 
solution: Nexit, Grexit, brexit, frexit. total European pop + total american pop < total chinese pop. 

issue: What are your thoughts on having a static "name" on f.ex Angular 1.5 services - to not use "magic strings"? Do or Don't? :D I have some services that I use in multiple modules and multiple controllers - but inside the same app 
solution: 

issue: do you reuse that anywhere? if not don't. if you reuse the same string then consider it 
solution: 

issue: do I have a way to have generic typing forarguments? function<T>(...args: T) {} whereTis not an array dtabuenc: yeah, I don't want that I wantargsitself to beT 
solution: hmm no. 

issue: hi I am using jsx in my main.tsx it compiles correctly with gulp, no problem but my vs code is complaining the --jsx flag is not enabled wtf? "Cannot use JSX unless --jsx flag is provided" ```  let mainWindow = React.createClass({ [<-CODE->] hello? 
solution: yeah looks fine. 

issue: whats the error when you hover over the import error 
solution: 

issue: jacobus-brogly: are you just making up module names? there is no 'esri/MapConstructor' module Just put a bunch of const definitions for the global value types in a global definition file and be done with it.  [<-CODE->] or actually I see what you are doing now with the dojo thing... you don't need to import the typesjust do__esri.MapConstructor and I'd use destructuring for those args....  [<-CODE->] just don't use any imports for esri stuff if you don't like the ugly namespace__esri.Whateverthen you can alias them on top of the file instead of import: [<-CODE->] and then it just becomes: [<-CODE->] give it a shot should work fine for you the destructuring is much nicer syntax then theargsstuff you were doing before 
solution: 

issue:  [<-CODE->] Just for readability 
solution: 

issue: Hey guys ! I want to include J-I-C (https://github.com/brunobar79/J-I-C) into my Angular 2 app.. How can I do that? All that the library defines in /node_modules/j-i-c is: [<-CODE->] No exports or anything...  How would I import this to use jic in my .ts file? Uncaught Error: Cannot find module 'JIC.js'(…)  can I set allowJs in my tsconfig.json`? 
solution: can't I use require somehow to get that jic?. 

issue: dtabuenc: I just searched through the created bundle and it actually is in there: [<-CODE->] so it shouldn't be a bundling issue after all... so it should exist globally o.O I am getting confused it is wrapped in a closure though I created a gist of the bundle [<-LINK->] ... just search for "jic" 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] since when isfilesnecessary? basically i'm having trouble using path aliasing in webpack combined with vscode which is complaining that a module doesn't exist 
solution: 

issue: assuming you have the data somewhere in memory already? 
solution: yeah if it's already in memory just write it out using a stream. had to prepare the ArrayBuffer and TypedArrays then cast the ArrayBuffer to Buffer before writing. 

issue: ya - im going to find dev who sent me this tomorrow ;) ya now subObj is throwing errors Error:(40, 17) TS2322:Type 'number' is not assignable to type '{ [x: string]: number; }'. is there a way to bypass typing for this? this is dead simple in JS using for keys in 
solution: topicmatrix's type should be number[][]. and you should use array iteration to loop over it. 

issue: systemjs could do the compiling part but I don't know if it fits lightweight DerFlatulator: can't you just pick a different target for that? I'd try target ES2015 and --noResolve tsc --module commonjs --importHelpers a.ts You can also add importHelpers: true to compiler options 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: I just updated to TypeScript 2.1 and got hit witherror TS1059: Return expression in async function does not have a valid callable 'then' member.for code that compiled and ran successfully in TS v2.0.10. I've found [<-ISSUE->] -- can that get some attention? I was trying to see where in the code that error was thrown (thanks for having error IDs!) but this didn't seem to produce a hit: [<-LINK->] 
solution: 

issue: that's how  commonjs modules are declared a lot of the time when it's declared like that you have to useimport * as mapboxgl from 'mapbox-gl' 
solution: 

issue: well with advanced path resolution plugin you wouldn't add the folder to the modules it's probably recursive due to that 
solution: Yeah, maybe the problem was adding it to both.. I could try without adding it to modules, using their plugin, but I think I might as well leave well enough alone for now.. 

issue: Hello! I'm currently working on my first attempt at writing a TypeScript definition file. I'm wondering what the difference is betweenexporting and notexporting aninterfaceinside amodule.  If I don't export it I can still see it in the vscode autocomplete suggestion list. dtabuenc: it's for the cap package: [<-LINK->] yes, I suppose it is dtabuenc: I've got this so far and the types seem to be mostly correct, but I'm not sure if I'm usingmoduleright: [<-LINK->] 
solution: 

issue: What folder is your tsconfig.json in? hmm.. I don't get the same behavior as you. for me it outputs with absolute path to my parent folder with your options  [<-CODE->] where my actualstart.tslives inc:/dev/src/ts/src/start.ts don't see anyu issues with it what typescript version are you using? did that option exist on 1.8.10? I don't see it on the --help etsuo: Are you referring to an ES6 Proxy? 
solution: 

issue: I just upgraded to ts2.1and started facing this error — [<-CODE->] The complete code is available here — [<-LINK->] tsconfig.json [<-CODE->] The Error message is quitecryptic 
solution: 

issue: are you sure you need it on window though you are already importing it as a module 
solution: yes but it is a service, so requires to in every module I want to use it. 

issue: am I correct in thinking there is no export default for namespaces? if so that is rather... not awesome 
solution: 

issue: Gacnt: what are you trying to do? You can'tnew BrowserWindow()unless you actually declarea aBrowserWindowclass let window:BrowserWindow;just decalres a variable that can hold aBrowserWindow()but what's aBrowserWindow robertkraig: simply  var callbacks is defined as an empty object. empty object does not have any properties like success or error you want to define empty call back as something that has success an error properties and define what the actual type of success and error is 
solution: 

issue: jchandra74: you're right thanks! looks likeawaitworks as expected, the value gets set, i'm using it in an angular1 app and it looks like somehow the angular digest loop doesn't run again after theawaitin thecatchso no bindings are updated that's why i thought it wasn't working...console.log-ing shows it's actually working...now to figure out why the digest loop doesn't run anymore 
solution: 

issue: anyone else experiencing "Debug Failure. False expression" ? I have spent few hours messing with tsc and nothing seems to work: [<-ISSUE->] here is a reproducible gist: [<-LINK->] ```npm install apparently it happens with all blueprintjs/core things ( [<-ISSUE->] ) but this error message given by TypeScript is really unhelpful Even if it's fixed in blueprint's end, I think TypeScript should never fail with such a difficult error message:  [<-CODE->] it makes debugging so damn difficult, and I for one, have spent few hours figuring this out 
solution: 

issue: [this] is XMLHtttpRequestTarget not XMLHttpRequest 
solution: 

issue: i cant get my vscode to work with jsx its a mess 
solution: also tsx files used as modules are not picked up.  [<-LINK->]. 

issue: What exactly does @ mean when prefixing something e.g.@vts.blah(1) 
solution: Decorator. So like you're telling it that's it a class and has certain meta data attached to it. 

issue: jacobus-brogly: What OS do you use? 
solution: zoomed out. icons get smaller, that was nasty to do.  [<-LINK->]. 

issue: Let's say I have a typescript interface [<-CODE->] and I have a json file config.json, [<-CODE->] Is there any way to get, at compile time, a warning that config.json does not match the interface Config? 
solution: I don't think easily if it's just a plain json file. yeah, that's my fallback solution hehe. 

issue: Hi, a type question. How would I define an interface of an object that contain n property of the same object type ?  [<-CODE->] How would I define it? 
solution: 

issue: peeter-tomberg: can you make a plunker or something out of your setup? peeter-tomberg:  [<-ISSUE->] what is vue for again? 
solution: I would think you'd get types if you used tsx or hyperscript with vue. 

issue: con-ssc: : I updated my examples to be full fleged come examples @ [<-LINK->] I also looked over that ticket you posted and it did not help, I still couldn't figure out how to get it working. It might be outdated information since it was for version 1.3 and I'm on 2.1 Hmm I'm not following How does that work :I And why type alias, when RouterProps is an interface (I'm fairly new to TS) Whenver I declare my module as:{code} import * as React from 'react';import {Route, Router} from 'react-router'; [<-CODE->] I getERROR in ./src/Application.tsx(41,15): error TS2304: Cannot find name 'Router'. It no longer can find the Router How? 
solution: 

issue: Any idea why I get error: Arguments of type 'date' is not assignable to type string ? [<-CODE->] 
solution: 

issue: hello im desperately trying to get around types for html events specifically, im trying to be able to pass MouseEvent objects withpageXandpageYset already no matter what i try im always left with this kind of error: [<-CODE->] angular2 test code: [<-CODE->] its an attempt to remove the type information code that updates position and usespageXandpageY: [<-CODE->] im basically using pageX and pageY throughout this mouse event code it works fine in a real browser but i can't dispatch events properly because those parameters are read only. not sure how to get around that or an alternative im using karma and jasmine if that makes a difference 
solution: 

issue: god, you would like C++, they complete ape on Compile time expressions the things you can do with C11 anyway, not for this channel 
solution: ( and also abusable ).  [<-LINK->]. 

issue: I think 2.1 has a lib function to do that I think--importHelpers and you need tonpm intsall tslib or"importHelpers": truein tsconfig 
solution: 

issue: con-ssc: I just can't make Map work in the browser - because Map.prototype.get (and other methods on Map) is not supported :( 
solution: 

issue: doesbaseUrlin tsconfig also affectoutDir? or justpaths? 
solution: 

issue: Anyone have an idea why I'm getting this error when I compile my NG2 app using AoT? [<-CODE->] varunjayaraman: I've asked in NG and NG-Cli, not getting much of a response This appears to a typescript problem I'm using 2.0.10 
solution: 

issue: i want to import a custom package that is located in "src" directory. the files are transpiled to "dist"  folder. how must i import the custom packages?example: import {SomeThing} from 'src/package1/class1';i don't want to use "src" here because the folder changes in the end.. but without it typescript can't find the file :| hehe 
solution: 

issue: Does anyone have idea on why this code does not compile undernoImplicitAny?  [<-CODE->] dtabuenc: noteStrs<T>has an index signature if I delete the first overload ofmutations, it compiles This is a reduced example, in real world code the first argument is too complex to get manual annotation I guess there is some problem in overloading resolution and contextual inference, but cannot debugging further deeper. Probably this is a related issue to [<-ISSUE->] 
solution: 

issue: I'm not sure I understand, what do you mean "pull typings from an html file" ? you want intellisense for typescript in html file? You would need some sort of plugin for your editor that would support that. it wouldn't have anything to do with your tsconfig though really] typescript cannot parse html files they would fail if you tried adding them due to syntax errors I believe there are some editors where you can specify content in html file as being of a certain language. not sure if atom has  a plugin for this I think webstorm might 
solution: 

issue: sneek peek my progress so far, first "major" use of typescript,  [<-LINK->]  [<-LINK->] Some libraries didnt have type defs (npm-tracer etc) so I didnt learn how to do advanced type defs file yet, 
solution: 

issue: What error are you getting? 
solution: 

issue: Gacnt: what that type is saying is that justifyContent can be any one of those strings justifyContent: "space-between"looks completely valid, the error must be somewhere else 
solution: Looks like an interface with an optional justifyContent to me. 

issue:  [<-CODE->]  [<-CODE->] 
solution: 

issue: yeah i am. is there a way to make it not minimized when testing? heres the full code snippet [<-CODE->] probably doesnt make a lot of sense, looks like maybe the constructor for something is broke? 
solution: just keep tracing it up the callstack until you see code you recognize. 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: dhoepelman: I get a different error type 'Z' not assignable to type 'boolean' which makes senseto me singepath(x, "y", "z")should return typeZ have you tried this locally on your machine or only in the playground? This compiles fine for me on 2.1.4: [<-CODE->] 
solution: 

issue: steven: I meant the function compiles, but the call fails to compile@dtabuencSeems only the playground shows that error, thanks. (used the playground because I didn't have a 2.1 env yet) 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: I think only if the new type is based on the old type not just arbitrarily so likeTtoT[] would be fine 
solution: 

issue: nn that good I have already make that ok I'm really close I display all files  [<-CODE->] tsconfig.json [<-CODE->] and index.ts [<-CODE->] so I try to make a node.js wich just make that [<-CODE->] that return an error but with require that run so it's normal because it's a .js wich is used I just want can use in ES6 import syntax so I have to make two library one in es5 commonjs and another in es6 commonjs? 
solution: 

issue: Mosho1: say what about what function? What error do you get when you don't write it as any? what typings are you using for fetch? well what does response.json() return? I didn't think fetch was in the built-in es2015 lib are you using some other typing? 
solution: 

issue: dtabuenc: you said that decorators can't change types because they run at runtime, but every function runs at runtime and their signatures affect the types of their output (obviously) why should decorators be different? 
solution: Mosho1: Well decorators can make quite a bit of modifications to the function or change the function altogether, but all these modifications are runtime. It can change the function to return a different type of object at runtime, but it can't change the compile-time type of the function. But it seems unecessary to do that, because if you are putting a decorator on top of a function, then you are able to also change the type of the function manually at the same location.. 

issue: Hi folks. So I'm new to TypeScript, and I'm trying to write a simple web app that will assist me with learning another language (sort of like a quick, scribble book).I get the following error when I attempt to compile my project: [<-CODE->] I've searched the web, and I can't seem to find anything that hints at why I get this problem. [<-CODE->]  [<-CODE->] I've got time, no rush. 
solution: but in the use of the function DetermineWordGroup() it fails to resolve thereference.. 

issue: Hey does anyone know if there were any changes to module resolution in 2.1? I'm getting a ton of 'Cannot find module' errors only when compiling with 2.1 
solution: 

issue: Hi [<-CODE->]  [<-CODE->] 
solution: 

issue: Hi every I have install with typings dt~webrtc the problem don't find Promiseerror TS2304: Cannot find name 'Promise'. Do you know where d.ts install to find it? when I write typings search Promise I have lot of libs :s 
solution: 

issue: intellix: so hello is a global variable? then you can't import it like import { hello } from 'liveperson-chat-api' you should just [<-CODE->] and make some global declarations in there 
solution: so create a global hello interface with all the methods etc?. 

issue: If anyone has a moment I’d appreciate it. I’m in the middle of converting from using the typings CLI to npm with@types. This is an angular + typescript + webpack project. if I useimport angular from ‘angular’, angular is an empty object (presumably because TypeScript removes unused imports). If I don’t include that, I get error TS2686 related to using UMD globals. 
solution: 

issue: what are you using to bundle your source for web? did you turn sourcmaps on in the launch config for node? no I mean in your vscode launch config for the node app  [<-CODE->] something like that  [<-LINK->] you have that in your tsconfig.json what I posted is not tsconfig.json it's launch options for vscode 
solution: 

issue: tsconfig paths - having an issue with using similar names. [<-CODE->] Issue 1: Can't make reference to @core within components core.Issue 2: Would have the word @core in both confuse the compiler? 
solution: 

issue: Hi everyone! How would you configure typescript so it would detect typings from node_modules? (for example redux) dtabuenc: Thanks. So basicly if I removetypeRootsandtypesfromtsconfigeverything should work ok and typescript should detect modules and types fromnode_modules? ahh ok it's clear now, thank you for help yeah, I'm not setting it by meslef, but not sure if it's not overriden by target: 'es6' 
solution: and youa re getting a module not found?. 

issue: is there a way i can assign a typing to an object without importing the module source? i.e., i'm using Electron's "remote" API to pull the "serialport" module into the render process, but i can't get typings with it. my current code is: [<-CODE->] i'd like to be able to do something like the following, but i'm not sure how: [<-CODE->] it only brings the typings, but i'm only trying to import the typings in the build process. for electron's renderer process, i can't pull in native modules, you have to use the "remote" API to talk to things that need native code 
solution: 

issue: Can I reference home dir in ref tags E.g./// <reference path="~/.typings/typings/globals/jquery/index.d.ts"/> (Tilde does not work, in Windows at least) I have JS files lieing around everywhere, I'd like to gradually add reference tags to them, and this is easisest way (adding jsconfig.json and package.json is not) thanks, will do full path then it's not that hard 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: subvertallchris: there should be a package.json inside thenode_modules/@types/library directories that would have the version number in it, just like anything else from npm pretty much every package in the@typesscope is magically generated you have to actually go into the node_modules directory in your project 
solution: 

issue: but presumbly you would actually use the type "S" somehow to affect the return type of the function? 
solution: 

issue: jasonbiondo: did you trynpm i -S @types/jquery? doh, misread that. you should be able to merge your declarations on top of the jquery declarations like: [<-LINK->] huh. strange. still, glad that worked for you :) 
solution: 

issue: Hi guys! Why this code compiles? Any way to make compiler throw error on x=y assignment? [<-CODE->] 
solution: 

issue: @mseddon so this is weird.  This is what I have… [<-CODE->] then below that code I reference the clndr plugin.  When I remove the console.log then clndr is no longer available as a function.  Any idea why? I’m trying to use clndr in my ts file since the declaration file is not available 
solution: 

issue: I have install flexslider via:npm install -D @types/flexsliderbut I am getting the following error:node_modules/@types/flexslider/index.d.ts' is not a module. any idea? 
solution: 

issue: when do you get that? how are you trying to import it? and again you actually need to use generics? 
solution: so i do something liketype MyObject = number | string | boolean | Buffer. 

issue: hi all.. I found that moment have own definition file ... how I can use it in my project / tsconfig.json ? my tsconfig.json look like this: [<-CODE->] 
solution: 

issue: sneak peek  entry form almost done, the blood group selection is intuitive?  [<-LINK->]  [<-LINK->] nuuuh ARCGIs and its a pain, coz, ARCgis uses AMD and browserify uses CommonJS I made some glue 
solution: 

issue: jacobus-brogly: do you use [<-LINK->] ? kristho91:  [<-CODE->] you could use webpack 
solution: I have many mixed common-js/amd projects using webpack. dtabuenc: yeah, I know webpack can do it, I will transition when i finish this project)) almost done. 

issue: Hi I have an issue to generate my TS library wich use some NPM dependenciesI explain I import this moduleimport {WsJMSLib} from 'ws-jms-lib-echyzen';When I want to generate my CDN Lib in dist folder with WebPack I have the following TS error:error TS2305: Module '"/home/gborg/Bureau/privee/npm_lib/WebRTC/wRTCCDN/node_modules/ws-jms-lib-echyzen/dist/index"' has no exported member 'WsJMSLib' 
solution: 

issue: I’m getting '    Property 'format' does not exist on type 'Duration'.using @types/moment-duration-formatwhich contains [<-CODE->] any idea why I get this error? the code is used like [<-CODE->] 
solution: 

issue:  [<-CODE->] it's only execute webpack and not tsc? 
solution: 

issue: What is the current approach for getting nodejs typings? Can't find an@typespackagve 
solution: types: /node. 

issue: ugh i'm getting a path map / module resolution error with my tsconfig again  [<-CODE->] i want to require things from the dependencies folder withimport { someDep } from 'dependencies/someDep' and mytsconfig.jsonlives insrc/server/tsconfig.json, so 2 folders up should be root, so not sure why that path does not map to the correct dependency 
solution: 

issue: hopefully a super quick question - i'm trying to figure out how to import relative to baseUrl instead of relative to the current file (e.g.import { SomeComponent } from 'lib/components'as opposed toimport { SomeComponent } from '../../lib/components') is this something that i can do in my tsconfig? i've been trying to figure it out, but i'm struggling 
solution: i might need to mess with a webpack setting now to get it to 100%, but i think this brings me closer to a solution. 

issue: DirkWolthuis: on a frontend or node.js? It's not language specyfic feature, rather env specyfic 
solution: 

issue: I remember reading there is an option now to output code that gets runtime functions from a common module anyone got a reference? I can't seem to find it on the TS options page oh, was itimportHelpers 
solution: 

issue: hi everybody can someone explain me this type of a function parameter? Never seen before a parameter with {new(): } [<-CODE->] @nidu yes, but therefore a simple [<-CODE->] would be fine, or not? 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: so it dont regonize it as interface? 
solution: 

issue: Can't you use@types? 
solution: 

issue: Can somebody help, why this code is not valid?  [<-LINK->] 
solution: 

issue: Yes, with casting it is fine, but i wondered why it does not understand is without explicit casting? Because if i actually invoke this function then i see that i can only get this 2 types without any errors. Hmm, quite strange) Well, thank you anyway! 
solution: 

issue: I am trying this.  [<-CODE->] but index is -1 
solution: There's a CustomMatcherFactory. Is there a reason you're sticking to plain ES6 rather than just writing this all in TS? It would give you the typings for free if you did that.. 

issue: I'm getting errors when trying to run my angular-cli project with TypeScript 2.0.9 if I useyarnovernpmand I can't work out why it's different. Trying to debug it a little. I've created this gist to compare the difference between the package.json files generated by running both: [<-LINK->] main,typings,typescriptVersionfields seem to be the same between yarn/npm Node: 7.1.0npm: 3.10.9yarn: 0.18.1 
solution: 

issue: Doesn't the inject take care of newing up the objects too? Isn't that for IoC? 
solution: no. this shit. 

issue: frederikprijck: ok, i am not knowing exactly what i am doing :) I would like to make the import statement in my .ts script working. What i need to do? 
solution: i use browserify my script for generating [<-CODE->]. i do not see a module loader in there indeed :). 

issue: Bnaya: Can't you just use normal guard functions? 
solution: actually not sure if you can make it generic like I did. 

issue: lol i found a leak in npm-ws just sharing I am regular visitor in case anyone is using npm-ws its not really a showstopper just a "leak" 
solution: 

issue: a little confused about the JSX support forTS 2.1.4. I'm getting errors like:'>' expected  [<-CODE->]  [<-CODE->]  [<-CODE->] the output looks like it half worked, with it being: [<-CODE->] 
solution: 

issue: jacobus-brogly: yesdecalre global {}is used to declare things in the block in the global namespace while you re inside a module. scippio: I'm assuming you mean something like this? [<-CODE->] 
solution: you might just need to add some ambient declarations for how you want to use it. 

issue: I just don't like!==/===:D ... but why is retype needed with Lodash and not with=== undefined? 
solution: 

issue: because the compiler can't do type naroowing on the lodash function call they would have to add a user-defined typing to the typings for it This is the current typnig: [<-CODE->] it would need to be [<-CODE->] then it would let typescript narrow the type for you You could either try submitting a pull request or just augment it in your local code: [<-CODE->] obviously would be best if you move the declaration to it's own globally-loadedd.tsfile value is undefinedis equivalent to boolean; It's called a user-defined type guard  [<-LINK->] search for it there 
solution: 

issue: What is the best type to use to describe an Iterator object? Ie the one you get from FormData.entries()? Its not in lib.d.ts, so I can’t refer to it there 
solution: 

issue: I'm not sure I understand why you can't use generics  [<-CODE->] 
solution: 

issue: this._status =text (${ parseFloat( a number in a variable / 1000000).toPrecision(2) } text;Argument of type 'number' is not assignable to parameter of type 'string'.He's not wrong, just ….I'm not going to bloat the code by converting that number to a string, how can I just tell to TS to not give me an error there in a way that doesn't go beyond type checking (production code)? 
solution: not a good practice but you can. 

issue: Hello. Can i overwrite "Global"? i tried it with declare var Global: { ... } but i still receive error TS2339: Property 'server' does not exist on type 'Global'. global.server just a global variable 
solution: right, but it's not a type or a variable. you have to declare a variable in the global namespace. 

issue: Guys, why there is a mistake here? (need to enable strictNull) [<-LINK->] At first i thought it is null check, but you actually can call function parametr right at the start of function and it will be string, with no error 
solution: 

issue: So I have this data structure [<-CODE->] but I would like to only allow (and get IntelliSence) on specific string values for my tableName.So I tried something like the following but it didn't work: [<-CODE->] Thanks for reading,Sean 
solution: 

issue: WolfgangFurtado_twitter: but why it is possible to invoke this argument as a string right at the start? Without any errors. That is confusing part, not switch statement 
solution: 

issue: That link would be a lot shorter if they used Unix style line endings (not something that's configurable, just something I noticed and found interesting) More curious: [<-LINK->]  Or this one  [<-LINK->] 
solution: 

issue: HI all! Why webstorm/vscode marks this as error?Somewhere in declarations/index.d.ts [<-CODE->] then in other file [<-CODE->] 
solution: i mean likeimport whatever from 'whatever.ts'. 

issue: Copy/Paste made me do it! I swear...well I search for solutions, one referred to underscore, the other function was part of lodash, so I ended up using both; are you saying it like that to indicate they are the same? 
solution: Actually, _ should augment each other, sadly, the reality looks a bit different. 

issue:  [<-CODE->] What is the type of _cachedRights? My json is [<-CODE->] so I thought it would be _cachedRights: boolean[]But perhaps this is not the case? 
solution: 

issue: Who is doing work on modernization of the React typings? Would like to help out if possible. 
solution: 

issue: Hi guys I have a small mixin helper that returns both instance and static members: [<-CODE->] I "mix in" 2 classes [<-CODE->] When using, this is all valid: [<-CODE->]  [<-CODE->]  [<-CODE->] I get this error: [<-CODE->]  [<-CODE->] What am I missing here? 
solution: 

issue: lazarljubenovic: OOP meta-discussions aside, what were you trying to 'share' through multiple inheritance? a single color property? that's what I understood so you want them sharing 1 method and 1 property? 
solution: you can do all the multiple inheritance you want through interfaces, and then mixin functionality from different places into your class. 

issue: Hi guys,  how would I go about merging 2 interfaces that have the same property but are different types? This is what I have so far: [<-CODE->] any help would be appreciated! I want restrict the strings to either be'<'or'&' I was hoping to do it with just types :/ here's what the implementation must look like: [<-CODE->] I guess you can't do it in typescript 
solution: 

issue: Is there some way to have global/shared imports for all project files. E.g. I want react, async, etc in all my files and not write that again? 
solution: 

issue: what is your target  javascript version? ehh`? ok then"lib": ["DOM", "ES5", "ScriptHost"]  [<-LINK->] 
solution: 

issue: scippio: bluebird? why not stick with vanilla promises? 
solution: 

issue: ok, what neologism is relution? Oh and  for someone finally using TypeDoc :) 
solution: con-ssc:  [<-LINK->].  [<-LINK->].  [<-LINK->] last. 

issue: maybe lite server is caching? check the HTTP code in network tab. but it's not a compiling or language problem. More like a watching or serving problem. 
solution: Your generated .js file has to be requested at least. I was asking to check if that request was not being cached somehow (preventing getting new updates). Anyhow, I don't thinklite-serveris the culprit. Maybe its the watcher. Can you check compiling by hand solves the issue (at least to detect is the watcher somehow)?. 

issue: lodash_.get doesn't mesh well with typescript, does anyone else have this problem? Here's an example: [<-CODE->] typescript complains: [<-CODE->] i get that lodash can't tell what_.getwill return but is there anyway to get typescript to stop complaining about this? the only way i can think of is type coercing the_.getwith+  [<-CODE->] 
solution: varunjayaraman: use the third argument of_.getof1or some other default value. Typescript will use its type. Or explicitly give the type to get, something along the lines of_.get<number(...).. 

issue:  [<-CODE->] gives me an error when I setnoImplicitAny:true any way to make it work? 
solution: 

issue: is there a way to replace a definition file with your own, for badly written definitions? the definition file is in an npm package and I can't seem to exclude it  [<-CODE->] hot damn that's some beautiful code 
solution: 

issue: I have a npm project A that exports definitions via declarations. However the project depends on  another npm project  B which exposes an interface (vanilla-typescript). When I build A the output doesn't contain the interface from B, just the files declared in A. Is there a way I can include (vanilla-typescript) or will I just have to do a custom build step?  [<-LINK->] you can see how vanilla-typescript is not included in build/src, but is required when I use the smart-terminal project in another project C: sorry if this is long winded  [<-LINK->] kristho91: its not possible, you need a build tool stoffeastrom: did it work? might be my solution stoffeastrom: nah I can't reexport an interface: I tried  [<-LINK->] declarations:true ? 
solution: 

issue: you can try my 4 line framework?  [<-LINK->] 
solution: thx!. I might make a video about it, could be viral!!. 

issue: js error or type check error?  [<-LINK->] 
solution: 

issue: @Bnaya I tried your example it doesn't work, using typescript 2.1.5 [<-CODE->] There doesn't appear to be a way to construct thisIn your example you specifyinterface MyMapV2 extends Map<string, number> {}but don't use it Once again, I want to be able to specify my own Map based on those types If I try something bogus like [<-CODE->] That passes compilation but at a later point if I try to set on it [<-CODE->] I get the following errorProperty 'set' does not exist on type 'ModelMgrCollectionItems'. (2339) seems odd 
solution: 

issue: anyone know why destructuring an array always seems to ruin type inference ? if I use const [ x, ...xs ] = myArray I then always have to tell the typechecker about types that it should be able to infer but if I just change my code to the non-sugared version it's all god const x = myArray[0] const xs = myArray.slice(1) 
solution: 

issue: scippio: @con-ssc@typespackages do not follow semver. Using exact versions is correct. Typings can break in patch releases 
solution: 

issue: whats the lowest barrier to entry to use Maps in ts? I'm surprised I can't use it out the box  [<-LINK->] theres an old reddit post saying use/// <reference path="dts/typescript/lib.es6.d.ts" />but  not sure thats how you do it now spacejack: cool, and what is the best polyfill for this lib? 
solution: 

issue: im running grunt-ts for transpiling the ts filesbut im always getting complains on the ts files about ng namespaceshow do you include the typings? 
solution: 

issue: so this error is at webpack build time? 
solution: so the parent is. interface Router extends React.ComponentClass<Router.RouterProps> { }. it has no method:. componentWillMount. you might need to chain supers. 

issue: alse I try to merge declarations and do not found right way to do it. 
solution: 

issue: SamD:  [<-LINK->]  [<-CODE->] No error same for: [<-CODE->] 
solution: 

issue: hi guys! how can i save "this" context in typescript ?  [<-LINK->] - in callback need to send "this" context of overall message, not callback closure rasentry: cool, thanx, my mistake =] 
solution: 

issue: Can you still use function-based prototype inheritance with Typescript, or does it need to useclassfor types to work properly? I'm doing something like [<-CODE->]  [<-CODE->] 
solution: So I'd write an interface to describe the structure of the Foo instances, then I'd need to annotate the constructor that it constructs an instance of that interface?. 

issue: is it possible, using tsconfig.json, to compile a project to both UMD and CommonJS versions to different output folders? 
solution: 

issue: leozulfiu: do you have an example for the extra functionality you want to have on a class that extends str9ing? angular2? well there are a few versions you know ok that helps maybe this helps for getting your angular stuff into typescript  [<-LINK->] and maybe this for the asp.net integration [<-LINK->] leozulfiu: why not using find? or includes 
solution: 

issue: CodeLiftSleep: why do you//<referenceinsetad of import ? import *  as angular from 'angular' you are definining  _changeDetector twice essentially what doing private in the constructor is doing is creating something like this [<-CODE->] which is not legal yeah protected might work but it maskes more sense not to make it private in the child 
solution: 

issue: hi folks i have a question  [<-CODE->] what type should dispatch have, I dont want to give "any" (react-redux) Dispatch is defined like so [<-CODE->]  [<-CODE->] S from Dispatch<S> is not used,  note, this is the orignal "type" file of "react-redux" ok I see its related to this issue [<-ISSUE->] its a "fix" on Dispatch 
solution: 

issue:  [<-CODE->]  [<-CODE->] Types have separate declarations of a private propertyWhat am I doing... I see... if I make it a protected property does that work? 
solution: 

issue: hola  [<-CODE->] I have never seen a construct like this before they look like defaults, but what are they? dont think so no guess ing please anyone seen anything like this? this is from react-redux, connect.js file,    is this some extreem ES6? 
solution: 

issue: I would first try to usekeyof, but your code appears to get the job done too By the way, thanks for taking the time to follow up after you found a solution. I'm on my phone so I can't play with that idea right now Wow that's interesting! 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: CoderCat84: OK. What type of error can be made from having a implicit type of any? 
solution: so you can do things like let a : number = <any> "foo". 

issue: How do you type an immutablejs Map keys? How do you type an immutablejs Map keys, in my case to force an a key of 'id' and value of number?so I tried different variation, such as:let campaignSelected: Map<{id: string},numbe I will check again but so far been getting Error:(12, 13) TS2322:Type 'Map<string, number>' is not assignable to type 'Map<{ id: string; }, number>'.Type 'string' is not assignable to type '{ id: string; }'. also tried with no luck:type myIdType = {id: number} [<-CODE->] no luck I didnt see on their site TS mapping for keys  [<-LINK->] on Maps they show the assignment but not the typings  [<-CODE->] also posted on StackOverflow [<-LINK->] 
solution: 

issue:  [<-LINK->] hello! what could be the issue with window.addEventListener? It compiles and works fine. But visual studio editor complains with error. this error appeared after migration from typescript 1.8 to 2.5 con-ssc: yes. I'm going to try to create new empty project and check if the error still exists. Maybe it is something with the code. con-ssc: looks like it is Resharper issue 
solution: 

issue: heres a cheeky 10 lines of code router) [<-CODE->] wow good to see you here@DanielRosenwasserrespect! 
solution: 

issue: Hello is there anyone who got experience with publishing types? ok maybe i will tell you with what i got problem. Here is my question [<-LINK->] Alexandr u mean that u don't understand that code with => ? 
solution: 

issue: Hey there, I'm having some issues with my generic types and I don't see what I'm doing wrong.This is my code: [<-CODE->]  [<-CODE->] kube: in my actual code theXobject contains many more entries, and I really require that generic but I thought I'd slim it down for this purpose  [<-CODE->] kube: yea I was afraid so kube: doesn't that make K narrower? 
solution: no but I think in general the problem you are running into is typescript doesn't currently support higher-kinded types. 

issue: moment probably implements valueOf to type-coerce to number?  [<-ISSUE->] 
solution: But all implicit casting is not allowed at all by TypeScript. Right, that issue would add a way to define thevalueOf()type so typescript could deal with arithmetic like he's trying to do correctly. but it's still an open issue. 

issue: yes i program with JS code before [<-CODE->] Its possible to create more smaller code? to move format in first line not to make it on duration 
solution: I would focus on readability over conciseness. 

issue: having a weird path mapping error with my tsconfig again  [<-CODE->] my directory structure is: oops  [<-CODE->] vscode understands my tsconfig properly but when i run the compiler"tsc --project tsconfig.json --outDir dist --watch" i get this: [<-CODE->] even thoughdb.tslives withinlib/dependencies looks like the compiler isn't reading the path mapping correctly, because the transpiled JS looks like this:  [<-CODE->] 
solution: 

issue: What’s the easiest way to test/debug/step through a change to the compiler? There’s no VSCode launch.json for instance also, I can’t seem to get sourcemaps to work. :/ Hrm, had to build with jake (why are there two build tools?) and change it to no longer add -mapRoot … but it skips my breakpoints, even with stopOnEntry only works if i use “debugger;" 
solution: 

issue: Is there a way to narrow a type with an assertion? e.g [<-CODE->]  [<-CODE->] thanks@con-ssc 
solution: I don't think it's possible :/ but just in case if someone has an idea. 

issue: drew-r: no, would be also counterintuitive because the tests run at run time and typescript typechecks are at transpile time, you would have to really implement the types you want, that would be massive overhead 
solution: 

issue: Am I doing something dumb here? None of these events fire when key presses happen: [<-CODE->] Its called when the user wants to: [<-CODE->] adam-beck: its not a framework, its a library I made:  [<-LINK->]  [<-LINK->] but this sounds like a good analysis :) :attach it for you implicitly like that. I want to give the flexibility the user might want to detach I don't want to intrude in their app without them know what they are doing dtabuenc: why? 
solution: 

issue: dtabuenc: one last thing. not sure if you know why this doesn't work. but do you know why this file isn't working to override the module/namespace? [<-LINK->] I'm not able to reference through either ng.hotkeys or angular.hotkeys. SHould it be working, though? 
solution: 

issue: i really dont understand what's wrong with this code:  [<-CODE->] 
solution: 

issue: I have a little problem with a library that embeds types When I set in tsconfig.jsonmodule: “commonjs”everything works well But once I setmodule: “es6”it tells me it cannot find the module Is this a bug? Or just that I don’t get something? Nobody? 
solution: kube: You'd have to post an example, for the most part,module: "es6"controls the output of transpilation only, and it shouldn't affect module resolution. 

issue: hey, is there anyway to target es6+ while still emitting require(…) instead of import? i’d like to use async/await with node.js running with —harmony oh maybe i was messing that up that’d explain why it worked before :) but i messed with my tsconfig recently 
solution: 

issue: dtabuenc: awesome, it works! i was missing theimportin thed.tsof the mixin. Could you explain (or maybe point me to a source of information) why adding thatimportworks? i see... is this documented somewhere in the docs? exactly that's what i supposed it does...it's just a bit...magical thanks a lot for the help! 
solution: 

issue: QuantumInformation: I used to be in here a lot more but it's been tougher recently :) 
solution: 

issue: @hamednourhanihi i a problem with ts-loader of webpack i use VScode and typechecking work perfectly but when i run webapack i got errors with wrong line numbers  [<-CODE->] ``` let elems = document.querySelectorAll(".admin-only");        for (let counter = 0; counter < elems.length; counter++) {            var uio = elems[counter] as HTMLElement            uio.style.display = "block";        } [<-CODE->] ```ERROR in [at-loader] src/admin/admin.ts:31:17    Property 'style' does not exist on type 'Element'.ERROR in [at-loader] src/admin/admin.ts:41:68    Property 'files' does not exist on type 'HTMLElement'.ERROR in [at-loader] src/admin/admin.ts:43:28    Property 'files' does not exist on type 'HTMLElement'.ERROR in [at-loader] src/admin/admin.ts:68:42    Property 'files' does not exist on type 'HTMLElement'.ERROR in [at-loader] src/admin/admin.ts:70:28    Property 'files' does not exist on type 'HTMLElement'.``` 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: when i have tsc watch all my files I get this error [<-CODE->] does it make everything global? why? 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] Any ideas? 
solution: 

issue: How can i import single function from lodash, for exampleimport debouce from 'lodash/debounce', with latest lodash typings? I used to doimport * as debouce from 'lodash/debounce', but latest typings doesnt allow that anymore.allowSyntheticDefaultImportsalso doesnt help, imported module results in undefined for some reason (using webpack 1.14) It might work, but it is very ugly, what if i am like 10 levels deep? 
solution: 

issue: O4epegb: try import debounce from '../../node_modules/lodash/debounce'; "paths": {"lodash": ["node_modules/lodash"]} in tsconfig 
solution: 

issue: Gah. I am so confused by TS's namespaces, reference statements, imports, exports, etc. I'm just trying to set up a typical public namespace with some interfaces and a concrete class or two, and then a private impl namespace.. all spread out amongst multiple files This doesn't seem to be a common pattern 
solution: 

issue: I already posted this link here, but I would like some feedback on the README demo I just added, and know if this library solves problem some of you have  [<-LINK->] And if it exposes the problem well (If somebody uses Redux here) { [keyof InterfaceType]: any }? Matmo10: Did not try 
solution: 

issue: Hi everyone, I'm having a hard time understanding this line : [<-CODE->] what are the square bracket doing ? 
solution: is it somehow possible to loop with template strings?. 

issue: is there an example of setting up a project that has a bunch of internal implementation and types spread out amongst multiple files, but that publicly exports only some of these? I am totally lost in the many ways to do modules/namespaces/etc. e.g. something like this: [<-LINK->] -- I've tried multiple permutations, such as wrapping both files in a "namespace Internal", which then causes the type reference to work fine.. but I can't export things from the Internal namespace Note I'm not attached to any pattern, but I would like to have multiple files that all share the same namespace (essentially treated as one file) to avoid importing things all over the place (Then again, I explicitly import things in Rust on a per-file basis and it doesn't bother me there, hmmm....) 
solution: 

issue: hmm..error TS2339: Property 'from' does not exist on type 'typeof "buffer"'. ah.. I must use Buffer.Buffer ... :-| 
solution: 

issue: I am using nodejs and I want to use some typescript. I added a folder and now I am trying to add this line: import * as cradle from "./cradle"; but it's red, not resolving. 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] Local ugliness :( 
solution: I try to avoid it, but here you have an expression where the first part that shows the!is valid appears in the same expression as the use of!itself.. 

issue:  [<-CODE->] why would I get that exception var recs = require('./bld/reconcile');  [<-CODE->] is it because ES6 is the target? it doesn't seem to be compiling down C:\Sandbox\backendNode>tscprocessing/recks.ts(73,33): error TS2339: Property 'assign' does not exist on type 'ObjectConstructor'. 
solution: 

issue: What is the best/proper way to reference definition files inside node_modules? (not@types) 
solution: That doesn't work, it lists every other package without types as having missing types.. 

issue: well what version of js do you actually need to target? do you have a reason for targetting 2015? 
solution: but when do you see that? You shouldn't be editing the .js in webstorm should you?. 

issue: Can I write: [<-CODE->] ? It gives an error to  me. 
solution: 

issue: what are you running there? 
solution: there is some disconnect. Node starts, but why doesn't it see a breakpoint or stop there.. 

issue: emilaasa: Using npm/yarn by doing yarn add vue-bulma-slider it goes in node_modules and trying to doimport { Slider } from 'vue-bulma-slider'gives the error.. But if I copy the slider.vue from this folder into my project's folder and do aimport { Slider } from './slider'it works. dtabuenc: here my tsconfig: [<-LINK->] 
solution: 

issue:  [<-CODE->]  [<-CODE->] 
solution: you can't new one up. you probably need to do something like [<-CODE->]. but I do know you can't new up an interface.. 

issue: Hello, a question about declaration files. I am using the typings for Google Maps in my Angular2 application. In order to be able to import the stuff from the typing at all I ended up putting this in a declarations.t.ds file: [<-CODE->] In my component I'd then do: [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] Thank you! 
solution: 

issue: I'm having this: ".../app.ts” was blocked because of a disallowed MIME type. any ideas? 
solution: 

issue: assaftenen: huh? Angular2 components areclass's If you're going to bind data to a getter then no It's often a bad idea to bind to a function A getter is just a function with synxtaxtical sugar 
solution: which run every change detection is running so I guess it kind of bad prctice. 

issue: hmm... do you have any imports and exports in that file? ok that's your problem if you have an import, that makes it a module you can't declare an ambient module within another module so just make another declaration file with no import 
solution: 

issue: What version of typescript are you using? dtabuenc: I am on 2.1.5. Here is the def of TPromise [<-LINK->] you mean if you remove the cast, that is the error you get? 
solution: I tried a quick example with an isNumber() on item and it's actually a number. 

issue:  [<-CODE->]  [<-CODE->] but I can't seem to use it, even with the reference comment. Any ideas? 
solution: 

issue:  [<-LINK->] "Including declarations in your npm package" 
solution: That is about publishing, I was asking about generating typing info? is it still the same, do I need to make use of typings?. 

issue: spacejack:  [<-ISSUE->] I don't think so, not currently you would have to use type assertiions @mmmveggies you mean: [<-CODE->] ? 
solution: 

issue: How would you get atype stuffKey = "a" | "b"from aninterface stuff { "a":  string, "b": number }? dtabuenc: it's so perfect I'm mad I didn't think to try it. Thanks! spacejack: might be worth going forf(as: number[], b: string) looks like It's been open for a while type changes seem like a good reason to have a new version 
solution: 

issue: why not? I definitely do 
solution: 

issue:  [<-LINK->] ^ I can't figure out why it's not seeing my jasmine types (describe, beforeEach and it). I have another Angular-CLI project that doesn't have this problem any ideas? 
solution: 

issue: Hi, if to call this.hasOwnProperty in constructor, would it cover it's parent properties? If not, how to check both this and this' parent has some properties? 
solution: 

issue: im seeing some really weird behavior in one of my mocha unit test when running through the webstorm debugger  [<-LINK->] when i put a breakpoint on line 10 - lens is showing as a promise with no top level fields on it and modifiers only shows as__modifiers__  [<-LINK->] 
solution: 

issue: Is it possible to use plain JS decorators on TS classes? I tried writing the decorator in TS but it was impossible to get the type checking working so now I just want torequireit and use it, but webpack tells me it could not find the file (getValidSourceFilein typescript) It can definitely find the file I am requiring, it works with pure babel ;) And the issue is then I loose type checking on the entire component (it’s a decorator for React components) The fun thing was that when I used a regularimport rofl from ‘../decorators/rofl’, I got a typing error, but when I didrequire(‘../decorators/rofl’), I got the missing file error. 
solution: 

issue:  [<-CODE->] It's consistent with what I've said. If webpack says, "I can't find this file", it's not lying to you It didn't find the file and then pretend that it hasn't found it Yes, that's exactly what it has to do with I thought that part was clear "can't find file" means, "Can't find file" 
solution: 

issue: hi i get this error export type NavBarTabSelectType = 'JOBS' | 'STAFF' | 'ADMIN' | 'INVOICING' | 'FAQ' | '';^ParseError: 'import' and 'export' may appear only with 'sourceType: module' it says its an error on that line wut? 
solution: 

issue: jacobus-brogly:  [<-ISSUE->] 
solution: 

issue: dtabuenc: that’s how React Higher Order Components work :) masonk: Decorators are enabled, I know this because I already use third-party decorators for my react components And no, you don’t have to modify, you can return a new one as well. 
solution: And thats also why TS is complaining; the decorator returns a new class which wraps the inner component, and there’s no way (that I know of) to tell TS that this function returns aclass- not an instance of aclass, but the constructor itself.. 

issue: I've had problems typing decorators in TS as well. Specifically react-dnd decorators don't play nicely  [<-ISSUE->] typescript has some limitations with its type system that show up with decorators or really any time you need to talk about "A subclass of T". You can talk about a type that implements T, but not really about a subclass 
solution: 

issue: fhdhsni: can  you  post your entire tsconfig and also the line of code you areseeing that error in? DanielKucal: What you are saying is you want to iterate over a group of objects that might or might not have anoffsetHeightproperty. The type for that would be [<-CODE->] so what you could do in your call is [<-CODE->] There is aPartial<T>you could use. That makes all the properties ofToptional but you would have to use it on an intersection of types that have the properties you want. e.gPartial<HTMLInputElement & HTMLImageElement> or justPartial<HTMLElement>if all the properties you are using are there. drew-r: I'm not sure what you mean? Enforce type safety where? 
solution: 

issue: Hi, is it possible to define recursive tuple type in typescript?I can do it for Object but for tuples type checker complains about circular reference. [<-CODE->] Thanks for any suggestion, I haven't found any related issue on github... 
solution: 

issue: what folder is the tsconfig.json located relative to your code ? 
solution: 

issue: Hi, can someone experienced take a look and explain, please? [<-ISSUE->] 
solution: i know. 

issue: hi guys,  I am trying to type an object literal as  [<-CODE->] but it's not liking it  [<-CODE->] 
solution: 

issue: Hi guys,I'm trying to add a static method to a function (not a class, it doesn't need to me instantiated withnew), and can't figure out a way to do this.  I get aProperty 'foo' does not exist on type '(bar: any) => string'error. Is there an obvious way to do this that I'm missing? sure  [<-CODE->] I failed to mention that I exportfoo, so : [<-CODE->] If I do [<-CODE->]  [<-CODE->] 
solution: 

issue: Hi, could you please help me with the following conflict: [<-CODE->] i have the following dependencies [<-CODE->] and tsconfig.json [<-CODE->] Thanks, I'll try 
solution: 

issue: hello can some one please see my simple type definition file. This library exposes __RCS.Scrollbar using commonjs module. and also if included on a webpage in a global context [<-LINK->] is this good enough, this definition file will be included with my package 
solution: 

issue: dtabuenc: I was fixing another issue with promises, that's why I added es6-shim. I've already removed it. Thanks 
solution: 

issue: Doeskeyofnot work for indexed types using number?  [<-CODE->] K1 isneverthere.... 
solution: 

issue: Hi,I'm trying to do the following,  and can't figure out why I get an error: [<-CODE->] The error I get is: [<-CODE->] dtabuenc: , last line was missing a', but only here in reduce test case :) The two duplicate lines are my (obviously failed) attempt to define an overload which will allow two different signatures for the returned function Oh... Now I get it. Fixed by defining an overload interface for the returned value.Your answer really helped making it clear what the problem is.Thanks! 
solution: 

issue: Hello guys! What is the correct indentation?a) [<-CODE->] b) [<-CODE->] 
solution: 

issue: What is the correct method to add a property to an existing object?  "app.configuration = configuration;does not exist on type 'Express'" 
solution: 

issue: Following community conventions, is custom-declarations.d.ts used for domain declarations as well or only augmenting 3rd party declarations? dtabuenc: This is strange, I've added thefileskey and after restarting VS Code the property is recognized, but a few minutes later it reverts and is no longer recognized Not that I'm aware of My mistake, I had added thefileskey to thecompilerOptionskey 
solution: 

issue: Trying to do this: [<-CODE->] But I'm getting this error: [<-CODE->] Is there a way to get around this error? TS4023@con-ssc Line 3, column 14 
solution: 

issue: what number has the error? 
solution: 

issue: Hi, is there a simple way to map a Promise (like an Observable)? Or do I have to create new Promise each time? How to use it? Let's say I have a functiongetMessages(): Promise<Array<any>>and I want to return a messages.length ingetMessagesCount(): Promise<number> I think I've tried it and it didn't work but will try again Well, you are right, it works pretty well! Thanks@dtabuenc Just like you did. It should displayundefinedbecause you don't assign any value tofoo, just define its type (and types are lost during the compilation process). Change it tolet foo = 'bar'andbarwill be displayed. awc737: 
solution: 

issue: How do I allow my class to be used with index signature? I'm looking at interaces like Iterator, Iterable etc, but what I would need should rather look like this: [<-CODE->]  [<-CODE->] This is how I want it to work: [<-CODE->] Now I get following error:TS7017:Element implicitly has an 'any' type because type 'SomeDictionary' has no index signature. dtabuenc: That's sad. I even tried implementing a class, but it doesn't work too 
solution: 

issue: Unlawfulspoon: Hello I am 13 and and running a startup with revolutionary cyber security tecnology I am wondering if there is anyone my age that knows c looking to joinIf you are looking to join email me atnathan.parsons.js@gmail.com 
solution: 

issue: is [<-ISSUE->] still correct? That typeguards won't work for class properties no matter what? I would've assumed that readonly attributes work at least :/ 
solution: 

issue: does anyone have issues where vscode gives discriminated union types as an error BUT it actually compiles? actually my bad, when we are using classes discriminated unions dont seem to be detected, works with the interfaces 
solution: 

issue: Well guys, seems reassertion byanyalso doesn't help I've done some magic for the code above but anyway it fails. Let's see:  [<-CODE->] I think type assertion is for upcasting, and needs double-assertion@spacejack  See example above. It becomes totally messy. I would create an issue for just that simplified scenario.@dtabuenc Thanks but already I've done this. Challanging issue hah? Damn! This also doesn't work! [<-CODE->] xiamx:  [<-ISSUE->] ??? 
solution: 

issue: hmm... If I haveconst Mod_1 = require("Mod");it's looking into "main" prop in package.json? where I have"main": "lib/main.js",and in main.js I havevar Mod_1 = require("./Mod"); ... I get:Error: Cannot find module 'Mod' 
solution: codymullins: You have to load it likefrom 'lodash/find'. 

issue: Does anyone here use Lodash and Webpack for their solution? I'm seeing a large bundle size due to Lodash even if I use theimport {find} from 'lodash'syntax. The examples I'm seeing aren't exactly working with the@types/lodashannotation, so not sure if it's something to do with the typings or not. 
solution: 

issue: Hey folks, what's the best way to convert a enum value to a display value? Essentially, if I have a value that comes in from my web service as number 1, I'd like to display that as a display value in my gui. 
solution: jgornick: just doMyEnum[1]and you'll get the string value of it.. dtabuenc: So, if I wanted MyEnum.Foo to display string "This is Foo", what woudl MyEnum look like?. 

issue: Hi. I've got a (big) javascript project here and i'd like to add a.d.tsfile for intellisense in the jsdocs/etc. i can't get vscode to recognize the types inside the d.ts file though. Is there anything else I must do? types are currently declared in a single file as global types.declare interface X { } bytesnz: The main difference I've noticed between the 2 is that with interface you can later add extra properties. If you declare an interface twice they are merged, similarly to namespaces found out, it was just a specific file issue. jsdoc overmodule.exports = () => 
solution: bkinsey808: Yes you most certainly can, you just have to be aware of whether you are adding the metadata to the constructor, or to the prototype.. 

issue: @scippiooptions!.memcachedWhat does that mean? m98: What is your typescript version? All works well for me: [<-CODE->]  [<-LINK->] dtabuenc: Thanks but how does it work? [<-LINK->] I don't see anything changed in compiled code above. 
solution: 

issue: I am getting the following messages when I run tsc. declare var require: Require; ~~~node_modules/@types/requirejs/index.d.ts(416,13): error TS2403: Subsequent variable declarations must have the same type.  Variable 'require' must be of type 'NodeRequire', but here has type 'Require'.3:03:07 PM - Compilation complete. Watching for file changes. i have node_modules  as exclude in tsconfig.json 
solution: 

issue: tsconfig [<-CODE->]  [<-LINK->] And the error message i tried various combinations of libs but nothing seems to be working. My usecase is to integrate Service Workers with my code 
solution: 

issue: dtabuenc: That was actually kind of what i was looking for! Thank u very much! :) 
solution: 

issue: guys, can someone recommend any package that can call SOAP endpoint from JS/TS? I have a legacy system that I need to connect and it is using SOAP… everything I found is for nodejs only but my case is pure browser (react application) yeah, that is my though… was wondering if someone came with a workaround it is a 3rd party payment gateway I have to temporarely connect to from a react-native app there is a way in the react-native app… I can crete the “client” in Java and expose it to the TS using the react-native native bridge so for all means, it will be the java client talking to it you can have Java libraries on Android that are exposed to JS/TS part of your application using a bridge it is just more work :) and it is a temporary thing no need the server generate a URL exclusive for our usage including WSDL yeah they actually have a java client 
solution: 

issue: I am having a heck of a time getting my project to compile. It can't resolve the module 'child_process'. It can resolve the module with intellisense but it just won't compile. This is an electron project that is using Angular2 and Typescript. My tsconfig.json is as follows:  [<-CODE->] 
solution: I am running the command 'ng build' from the angular cli which uses webpack underneath.. 

issue: It appears to compile correctly using tsc. I would assume my problem is coming from some where else. I appreciate the assistance 
solution: 

issue: guys, any suggestion on docs for react-native using TypeScript? having a hard time to get the source maps to work with typescript + VSCode + react-native :( dtabuenc: have you ever tried that?  
solution: 

issue: scippio: If this is an existing npm package that returns a type directly when yourequire("system-sleep")then the correct way to declare/use is like this [<-CODE->]  [<-CODE->] bunnyvishal6: Interfaces only specify a minimum level of contract that users of the interfaces can expect an object to implement. That is, it can define things the underlying object should have, but not things that it should not have. So when an interface says that it doesn't expect the function to return anything it means just that.... it doesn't "EXPECT" it to return anything.... but it doesn't hurt if it does... users of the interface just won't be able to use that return In the other cases you do expect it to return something of a speicific type: [<-CODE->] says you expect the function to return astring... if the function does not return astringit violates the contract because I may write code like this: [<-CODE->] so you can't return a number from the function... it would break the contract but with void there is no contract broken because I can't do [<-CODE->] so the only way you can use it is to do [<-CODE->] and it doesn't matter if that returns or not... you can still call it because you are not doing anything with the return and can't do anything with the return (at least when called through that interface) 
solution: 

issue: Ask Questionup vote0down votefavoritewhy meow in case 1 is not highlighting as error as it has a return but it should not have according to its interface Lol. But it is highlighted meow2 and meow 3 as errors in case 2 and case 3 why? Why typescript IntelliSense is acting weird for void and basic types. here is the typescript's playground link: [<-LINK->]  [<-CODE->] dtabuenc: Then why it is error in case2 and case3 ? 
solution: 

issue: Is there a way to define an interface for an object with exactly 1 string keyed property with value any? like{ [key: string]: any }but drop the square braces 
solution: That's...not correct. 

issue: farism: It's not about "more semantic" those two options are not at all equivalent. Object != {} theObjecttype refers tot the javascriptObjectprototype that everything extends and has methods on it liketoString(),hasOwnProperty()etc... the{}type is simply an anonymous empty interface it's the sam as just doing [<-CODE->] it has no properties or methods and you can't do much of anything with it without casting it Maybe I'm wrong... it looks like it compiles... but with {} I don't get intellisense I think the most straight-forward way of declaring it is just to rely on the inference.... [<-CODE->] 
solution: 

issue: drew-r: I dunno your situation. In code provided you do not give x default value and what if there is an exception? Switch will fail with "x.type of undefined", won't it? 
solution: or rather x is a type discriminated by that union. 

issue: m = (col: Foo[]) => [].concat(col.slice(0, 2), "x", col.slice(2)) Argument of type Foo is not assignable to never[], why? Should work. 
solution: 

issue: is it possible to detect imports also for modules innode_modules? 
solution: honzabrecka: because you don't know what the type is and you are using strict null checks so the type is not widened to any[]. 

issue: Is it intended that the newobjecttype does not work with theinoperator?  [<-CODE->] 
solution: the only real intent of the new object type is to say "not a primitive type". dtabuenc: ifobjectmeans "not a primitive type" then it would make sense that it should work with theinoperator. 

issue: guys frustrating... I’m banging my head here  [<-CODE->] this is my tsconfig of a react-native application which uses typescript import axios from "axios”; this import say that there is no module found in fact, any module I install withnpm install  [<-LINK->] npm install axios it appear on node_modules 
solution: 

issue: Hiya! I've got question regarding functions with types.I have such example private function: [<-CODE->] If this function is called and first condition is unmet (i.e. value of this.mode is not equal the value of Category.Points), none results is returned, right?So is that mean, this function will not return anything? Or maybe return some kind of boolean constructor or something? 
solution: 

issue: open what? the js file?  [<-LINK->] 
solution: that link above covers the different type of declaration file formats depending on the type of library. 

issue: How come the latest release is listed as 2.2 here: [<-LINK->] But the version in npm is 2.1.5? [<-LINK->] woah, it literally just changed before my eyes... and yep,nownpm install typescriptpicks up 2.2 did it just change? or some kind of cache issue on my local? 
solution: 

issue: What could cause the error "error TS6053: File '/frontend/node_modules/typescript/lib/lib.scripthost.d.ts' not found." to appear? I'm trying to build our project on a docker container with Node node 6.10 and npm 3.10.10 - the Node packages are checked-in, so it can't be a version issue. I'm just doing a "npm rebuild". We're using Webpack for this, and locally on my Windows machine it works. It also works on co-workers mac machines. 
solution: 

issue: MartinJohns: isn't ScriptHost a Windows technology? Perhaps it is and you're trying to run it in a Linux container, where it does not exist and therefore the definition file is not made available? 
solution: 

issue: Yes, something is very weird. It was listed in the tsconfig lib section. I removed it, then it worked on Windows and in my docker container. I wonder why this never caused issued for my co-workers running mac. 
solution: 

issue: Deviad: You need core-js or a similar lib to add Promise support. 
solution: 

issue: Hi. I'm trying to build typescript from source, but I'm getting the following error: [<-CODE->] Is this a known issue? (I did exactly what the build instructions say, and have recent versions of node (6.9.2)) Nevermind, even working around that, it seems the code just can't be built normally Was able to compile it manually, though. 
solution: ghetolay: I think that doesn't has anything to do with string literals but with typescript expecting the property to exist on both types. 

issue: is circular imports something that is not supposed to work? I have [<-CODE->] and [<-CODE->]  [<-CODE->] it kinda makes sense that it wouldn’t work.. 
solution: 

issue: Hey all  [<-CODE->]  [<-CODE->] When i'm building the project  that uses the library The library generated d.ts file contains/// <reference types="@types/chrome" /> 
solution: 

issue: Given this: [<-CODE->] Why does this cause an error: [<-CODE->] But this does not: [<-CODE->] TS2365: Operator '===' cannot be applied to types 'TemplateType.Boolean | TemplateType.Date | TemplateType.Numeric | TemplateType.Text' and 'TemplateType.Complex'. Ah I see..that makes sense now Thank you :) 
solution: 

issue: Matmo10: ahh.. the dangers of javascript type coercion it's actually keeping you from doing a  subtle error TemplateType.Complexis equal to0 so when you do!templateTypeon aTemplateType.Complexit will actually return true which means on the right hand side of your||templateTypewill never be able to beTemplateType.Complex You should just always avoid doing shorthand!templateTypewhen you actually mean to do a null check you should always be explicit on your null checks, or you'll run into a lot of subtle js bugs. 
solution: 

issue: Deviad: as opposed to what? I'm sure that's not the only dependency injection library out there... ghetolay: sure.... .  [<-CODE->] 
solution: 

issue: is it possible to keep typings of function arguments free [<-CODE->] dtabuenc: yeah thks thought about that but unfortunately this won't work for my real case :( because I need to keep typings my minimal example is wrong 
solution: 

issue: hey there!QI'm on 2.1.6 and I can't know what is this insignifiant error : `Cannot read property 'length' of undefined TypeError: Cannot read property 'length' of undefined``Someone can help!? granak: may be this [<-LINK->] granak: lol maybe forget to update  this line, you can check difference and if what you need is inside... [<-LINK->] im not sure i dont use jquery 
solution: 

issue: language service plugins are in 2.2 or nightlies? everyone here mentions 2.2: [<-ISSUE->] but the Roadmap says Language Services in 2.3 aaand there's no mention in the "Announcing 2.2" post 
solution: 

issue: Anybody use phantomjs for testing while exporting to es2015 modules? 
solution: 

issue: at compile time? since interfaces can't do much at runtime it very much depends on context, but in general,thisis compiled to what you would expectthisto be in C#. 
solution: 

issue: Aye, I was a huge evangelist for MS tech for many many years (even way back when it was an underdog fighting against 'real' OSs like Unix). I am happy to see them moving away from theWindows-onlystance. I think even read somewhere they are porting SQL Server to linux? 
solution: 

issue: I'm trying what suggested @Bnaya and I think I came across a different issue: [<-CODE->]  [<-CODE->]  [<-CODE->] Any hints? It seems that putting theimportinside the module declaration block clears the error... 
solution: 

issue: alexw10: can you give me a larger code example, I use VSCode exclusively but I want to make sure we are talking about the same thing before I give you an answer. tommck: Ok that's what I thought, I don't think it can either but I'm generating an app from angular/cli to try it inside of the Insiders Build as well. I'll let you know in a few minutes. dtabuenc: is correct about native functionality see [<-ISSUE->] alexw10: @tommck I wasn't quickly able to find any relevant extensions either. robey: I didn't want to leave Atom either, but once I gave VSCode a fair shot I'll never go back to Atom.  It's not a steep learning curve either. Couple of hours at the most to get productive. 
solution: 

issue: i'm not in the market for a new editor, but the atom package's decline feels like a bad sign... for the last few months, it's had some bug that causes warning dialogs to pop up every time you open a new project 
solution: 

issue: Async iterator typecheck bug? [<-CODE->] I'm getting an error on fooBucket [<-CODE->]  [<-CODE->] Looks like fooBucket is checked against  Iterator and not AsyncIterator 
solution: 

issue: Hey folks,I have a stupid question!There is an JavaScript library,  a simplified version is : [<-CODE->] I added   'sample' : 'sample.js' to systemjs 's mapand trying  to import it with [<-CODE->] I got module not found in visual studio! I couldn't find any resources :( Any resource about module declaration !? 
solution: 

issue: Hi there! I'm getting this error while compiling my app:The right-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type. This is what I'm doing in my script... [<-CODE->] the line throwing error is: total -= rewardPointsValue.toFixed(2); 
solution: 

issue: Hi, I have to declare interface for server response with uploaded files. The thing is it can contain Array of files (thumbnail and original) or just one image without Array. I did this: [<-CODE->]  [<-CODE->] 
solution: type awsFiles<awsFile> = Array<awsFile> | awsFile. 

issue: Hi all! While compiling my app I get the following error: "The right-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type."  [<-CODE->] dtabuenc: the last line is the one throwing the error total -= rewardPointsValue.toFixed(2); typeof rewardPointsValue return "number" Ops... So, I need to cast it as number before? 
solution: 

issue: dtabuenc: I found this course about this argument: [<-LINK->] I am gonna watch it today, I found a coupon for that. 
solution: 

issue: Hi, is there a way to only generate the declaration files and not also transpile? 
solution: Caroga: i ameverywhere:). :). 

issue: Hello How can I return multiple results in this case:  [<-LINK->] The thing is that I have a subscriber but I’d like to have a function that boots all of the routes tried with:  [<-CODE->] But it says subscribe is not a function... 
solution: Work backwards from that error.... if it tells you that subscribe is not a function, what does that mean?. 

issue: Why not just make it a function, why is it a class? like just do [<-CODE->] as to how to return many.... just put the results in an array and return the array. BTW, you'd use that like.... [<-CODE->] I'm not sure what the genericTis for though. it's not currently being used 
solution: 

issue: is travis cloning from scratch ? or could there be left-over npm modules mightyiam: the error would be fixed if younpm install @types/node my guess is somehow that's installed on the server but not as part of the local install 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: That's what I was thinking but I just tried that exactRequiredtype in the Playground and it didn't work... optional props inIdon't raise an error when omitted inRequired<I> 
solution: 

issue: hello, newbie here, i have a question: const elements = document.querySelectorAll('.thing'); I got this error: error TS2339: Property 'forEach' does not exist on type 'NodeListOf<Element>' no idea how to cast an array of elements ok!@aaronbeall@sasxaI'll try 
solution: 

issue: is there typings for these? what typings are you using though? it should find it.. .but based on those typings I'm not sure what you are doing should work? oh wait n/m 
solution: 

issue: hey guys, is there a way to configure (somewhere inpackage.jsonortsconfig.json) that I want to use 'own typings (.d.tsfiles)' without having it inside thenode_modules/@typesfolder? when I copy the files to the node_modules directory my ng2 app finds it, but otherwise it is complaining about not finding the namespace 
solution: 

issue: what is the requirement to perform type subtraction? i.e.,type Foo = Bar - Baz; looks likeQueryList<T>is intended to be a read only observable iterator. though i am certainly not much of an angular guy, so i could be wrong 
solution: 

issue:  [<-CODE->]  [<-CODE->] TypeScript says: [<-CODE->] i think because filter returns a new array and not a QueryList... how do i transform it into a QueryList is the question? 
solution: 

issue:  [<-CODE->] that's the easiest way to validate json against a defined interface however, if your json is read and stored an ananythen you can't do anything, this type of type checking is only valid at compile time just add a$key?: ...to the interface 
solution: 

issue: does compiler offer an API for getting all classes extended from the node? mightyiam: class A extends Bcan I be "at" node B and get list of classes extended from it? building some custom lint rules (wrong person, Shawn) no probs  it's more about "tag the correct guy so he sees the message" :) although you got my hopes up, for a moment i was like "whaat it's only 2 lines" :) 
solution: aye. The fact that we have a single thread in here can make it confusing. What ever happened totopicsI read about as a new feature for gitter?. 

issue: Ok great. What's the advantage of usingPromise<void>overPromise<undefined>in this case? Where do they behave differently? 
solution: grovesNL: I don't think it will be different in practice, but void really indicates that you expect no value. even though in practice it won't make a difference, void is more semantically correct. 

issue: Guys, did anyone find properly working lib with Dispatcher? Like in Flux, but without react dependencies. Just Dispatcher. with interface, maybe?  [<-CODE->] 
solution: but you can explicitly  set reduce generic value. 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Hey guys, been a while.  How's it going? 
solution: 

issue: dtabuenc: one more thing - any idea how to create defs for a submodule? eg:import * as stream from 'mithril/stream' andimport {Stream} from 'mithril/stream' oh cool, thanks! hmm, can't find it oops nevermind, just vscode not keeping up 
solution: 

issue: johnfn: what exactly do you want to accomplish by doing this? If you're trying to create alias - just type [<-CODE->] my bad. did not understand that Foo was not a type 
solution: 

issue: Usually I copy them from MDN you could go and add to the ts helper I think or maybe change the target to es5 maybe they will get added then 
solution: 

issue: What are the valid characters for property names in TS? Cuneiform  is not (; Is there a list/rule-book I can check? yea, just realized... I found es6 character validator 
solution: 

issue: Is it possible to write a class that has method chaining? I guess that is currently not possible oh well there are quite a lot of those I guess node brings a d.ts and protractor as well I guess 
solution: 

issue: tsc build is failing for me on this command: [<-CODE->] the erros are [<-CODE->] If i add es6 to the --lib its works  [<-ISSUE->] 
solution: 

issue: vue-typescript-import-dts solved my problem with importing .vue files. 
solution: 

issue: the problem you have is how to integrate webpack if you need webpack to handle some transformations for css and stuff webpack is fine as long as you are running it only on your final app not on each package and just compile each package with plain tsc 
solution: 

issue: how do I declare a destructuring parameter as array? [<-CODE->]  [<-CODE->] for some reason it thinks 'msgs' is not an array 
solution: 

issue: I'm having trouble getting a method overload signature to work correctly. Here's the example I'd like to figure out: [<-CODE->] 
solution: 

issue: Overloads can't have multiple implementations - in other words, you can't have two methods namedbarthat have a body They can have multiple signatures each signature says "if you call me likethis, I returnthat" but not multiple bodies Basically, the idea is that the one method body is going to introspect the actual runtime arguments to reflect what the signatures say it'll do for instance [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->] I don't get how this should be compiled....StatelessComponentis a standard type of@types/react. Please let me know... KenavR: , thanks for the answer, but I' getting the same error (  [<-CODE->]  [<-CODE->] It's weird There is an issue [<-ISSUE->] Here is temporary solution: [<-CODE->] 
solution: 

issue: Hi everyone!Why returned type ofgetParseTreeNode( [<-LINK->] ) isNodebut actually (look at code (or JSDoc))Node | undefined? What is the reason for that? 
solution: 

issue: where do I find type definitions for node's module package? ie.const Module = require("module") because it's a module called... well, module - it's hard to google type definitions for it  [<-LINK->] this I'm pretty sure is the api well it's the api... I misspoke, I'm pretty sure it's the thing you get when yourequire("module") for some reason it's missing from node typedef  [<-LINK->] it's even got some undocumented stuff, but not"module", why?  [<-CODE->] it works in REPL 
solution: 

issue:  [<-CODE->]  [<-CODE->] Any ideas? @dany-on-demand yes, as an example I have the following class: [<-CODE->] I want it to be compiled to remove all decorators: [<-CODE->] To compile I use: [<-CODE->] and I get the following output instead: [<-CODE->] Any ideas? 
solution: 

issue: I have an issue [<-ISSUE->] that haven't been triaged for 9 days now while later issues i've opened are already resolved.Is it possible it got missed? There is upcoming feature to be able to import plain json to typescript until then you can change the extension to .tsand to something like:export default JSONCONTENT or if you are using any code bundler (webpack etc) you can use json-loader. but then the returned object won't pick the json structure byitself.  [<-CODE->]  [<-LINK->] And something maybe more simple: [<-CODE->] 
solution: 

issue: can someone help me with the "types" property intsconfig.json? 
solution: or rather not empty, but just not have that property at all. 

issue: No we build an enterprise product, and I think that you shouldn't rely on unstable polyfilled es7+ features automatically. I discussed it with my team, and we are going to include all available features through theliboption (like es2015.Promise) etc. what is the difference betweenes5andes2015? 
solution: 

issue:  [<-LINK->] the only reason to do that though would really be for smaller file-size if you using webpack or something you might not need to, because you can just import a sub-module patsissons: Yeah I'm not sure if there's an actual difference. It's weird because they have both a lib.es6.d.ts and an es2015.d.ts and I would expect that if they were identical, they would just reference each-other otherwise seems like a lot of duplication but I've used them interchangeably in the past without issues usually going es6 for when I need the full es6 lib, and es2015.FEATURE when I need just partial features. 
solution: es6 is the default when targetting es6, so probably should be the go-to option unless you want to import partial es2015 features. 

issue: Wow why typescript has such a complicated declaration system? i dont get it 
solution: theodesp: Typescript has an incredibly flexible type system to deal with a lot of the inconsistencies of javascript. If anything, it's one of the most powerful I've ever worked with.. 

issue: is it true that type guards don't work with constant boolean expressions?  [<-CODE->] but these work: [<-CODE->] fairly minor, i just like to avoid doing!boolnegations, but i don't need to do this very often so i can deal with it if the expression were constant, it's less of an issue, but im not sure if the AST can tell if it is const 
solution: 

issue: how to define a strict function? [<-CODE->] i try this but test assgin any type function dtabuenc: thanks ,yep it is strict in test2  ,but I don't know how define a function link BridgeConvFunction is must pass a input and a callback like BridgeConvFunction in my case 
solution: but the function you assign to test2 is not obligated to do anything with those parameters. 

issue: Someone in here asked me to share what I was building back when I asked questions, I just can't remember who it was. So, I hope this finds you, helpful stranger :p [<-LINK->] ( [<-LINK->] ) 
solution: 

issue: I can't getkarmaworking with typescript :( is there some basic configuration example? I don't need any browser - my tools is a command line tool for nodejs I just need to run somemochaunit tests on classes 
solution: loostro: have you configured a typescript pre-processor for karma?. 

issue: dtabuenc: This is perfect but why don't it work with interfaces? i need to usetype? 
solution: I don't suppose you can doimport * as f, {Foo} from 'foo'in one line somehow. 

issue: is there a way to write a function like this: [<-CODE->]  [<-CODE->] 
solution: 

issue: Is there a way to do something like conditional importing at compile time? Something like... [<-CODE->] This method seems to include in both in the resulting client bundle (even if client is the one that actually gets executed) 
solution: 

issue: dtabuenc: try inline source maps, i have found they are more reliable (when i do code coverage at least) 
solution: 

issue: dtabuenc: I've resolved my issue. It seems I did not need Karma at all. Mocha itself is enough to run unit tests. 
solution: 

issue: aronallen: Hi, I am trying to use TSX without using React, I am getting type warnings because TypeScript expects a JSX statement to return Element, even though it returns INode (my own interface)this is my tsconfig [<-CODE->] This is my custom factory [<-CODE->] I would expect that TypeScript understood that INode is my interface isntead of Element 
solution: 

issue: have you considered module declarations instead of ambient declarations? i have to say i've never written typings that used a path separator, but i assume it works the same way as you would expect i'll try and wrangle up something that ought to work in a moment 
solution: 

issue: i believe you have access to the array prototype viaArray.prototype so you can kinda get around this issue with the following [<-CODE->] but you won't be able to extendMyArray<T>either (without doing the same work-around again) 
solution: patsissons: you lose anything you defined in MyArray. just messng around, but that gets you types. 

issue: hi! anyone around? rickszyr: Hi!I'm having a hard type getting typings for request module in order to call a REST API from my node serveranyone who can give a hand? I installed "request": npm install request --save 
solution: rickszyr: you need install@types/request. 

issue: Where can I get the typescript project template for vs2017? I really need it. granak: yes I know, i found that too I need somebody to give me the old templates or something, I REALLY need it. I do not want to set all this up manually, with automatic build on save, debug in IE11, typescript settings file creation.. etc etc good idea, i thought of it too but I didnt think of checking. I do in fact have random TypescriptHTMLApp5 on my disk 
solution: 

issue: nosachamos: I think that usage ofthisas name can be the issue for arguments. Can you try it with other name for it? 
solution: 

issue: Hallo anyone any idea how to implement a fix on iOS private browsing window.localStorage “QuotaExceededError (DOM Exception 22): The quota has been exceeded” ????? Yes any idea to catch the error and maybe prompt an alert of it? ja I though so ok cool 
solution: 

issue: are you running it in private mode? local storage does not work in private mode for IOS there's no work-around other than convincing apple programmers they are being annoying. yeah you can catch it just try to access local storage and put a try-catch  around it what's it supposed to do?  [<-CODE->] does that work? 
solution: With your suggestion? Basically say I have a typePerson { name: string; age: number }I wantmatch<Person>("name", "foo")to work butmatch<Person>("name", 123)to fail. 

issue: How can I write this function without having to explicitly pass inP: [<-CODE->] You mean the function body? Basically creates a serialized expression for our API 
solution: but sinceTisn't a parameter itself it can't inferTso I have to passT, which is okay, but then it makes me passPas well, which is just redundant.... 

issue: Is it possible express a string as a valid property chain of an object? Something like keys ofUser { location: { address: string } }being"location.address"etc Why doesn't this function overload work? [<-CODE->] 
solution: Although... that particular overload doesn't make sense... 

issue: dont know if the "!" glob wildcard is supported. probably not 
solution: 

issue: aaronbeall: im guessing the issue is that you can't inferTfrom the signature? this seems to work [<-CODE->] is there a built-in type definition for a generic object map, i.e.,type Map<T> = { [ key: string]: T }; seemed like something i should have encountered before, but i don't see it inlib.d.ts 
solution: 

issue: Hi, I'm useing thetsconfig.jsoncompilerOptions.pathsoption to resolve my imports, on TypeScript level everything seems fine however, my Typescript is insrcdirectory, but I'm building Javascript todistdirectory when i runnpm run testim gettingError: Cannot find module '../src/context/xml/node/XmlFailureNode' Mypackage.jsonscripts are set up like this: [<-CODE->] 
solution: 

issue: somehow I'm having problems getting access to typings that are in an npm package not in@types 
solution: 

issue:  [<-LINK->] for some reason I can't do Array.from even though I import the interface: 
solution: 

issue: Hi guys! I'm  having a trouble with this configuration  [<-CODE->] When I try to import a module from npm it throws and error  [<-LINK->]  [<-LINK->] I can't get what the problem it also, It also happend with other libraries :/ 
solution: 

issue: i've got a similar problem can't get Vue typings working @types/vuetells me it's deprecated and there'stypesfolder right in the Vue repo but i can't figure out why it's not working for me and what i should configure and how i already tried to/// <reference>them and also tried to add their path totsconfig.json nothing helps i just ran out of ideas 
solution: 

issue: dtabuenc: what bundling tool would you recommend for CLI-only app? Yes Well I have a lot of imports of my own code To avoid importing.. / Yes 
solution: 

issue: i’m having trouble gettingan_object instanceof MyClassto work correctly, instanceof depends on the construct method of the class in order to correctly identify it, right? patsissons: what if it wasn'tnew()'d ... but it was cast<MyClass>an_object? new()appears to work for me... casting does not 
solution: 

issue: MalRD: are you trying to use 'traits' similarly to Scala? 
solution: 

issue: yeah it seems to be working, i actually wanted to use an array to get rid of this construction and i guess enum also fits here really well [<-CODE->] ...or maybe not, as a side effect '0', '1', '2' and '3' are also became valid types 
solution: 

issue: I actually saw some complex examples of generics, type mappings and stuff in the docs and they did some tricky transformations, so maybe some feature I am looking for is already here but I just can't figure it out just because I installed TS only yesterday. :D 
solution: 

issue: I played around a little but I can't find a way to do it. [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Hi, I'm using generics but it looks like types are not checked by the compiler.  [<-CODE->] Nevermind, it's because AbstractContent has no properties so it looks like it accepts anything 
solution: 

issue: Does simplyenm: {[prop: string]: number}work? 
solution: is there any decorator that can extract interface keys (likeObject.keysdoes for objects)? I am looking for something like this [<-CODE->]. 

issue: I've got a problem when extending a class with a super in constructor It looks like that when I'm extending an other class (in other package in typescript transpilled to es2015), when compiling my class and using it, I have Class constructor FlexError cannot be invoked without 'new' Here is the class that I'll extend [<-CODE->] And the extending class [<-CODE->] The two classes are on separate packages, The first one is published by compiled in es2015 The second one compiles in es2015 fine, but fails at runtime with the error mentioned above 
solution: that's just a workaround for when targetting es5 due to the lack of target.new. 

issue: dtabuenc: got it all working :) now my little  project is strongly typed and unit tested (plus Travis for CI) [<-LINK->] 
solution: 

issue: Do i consider dependencies of files as i compile my project ? Now, I compiled all source. whan some file was changed. 
solution: 

issue: Well, maybe the types are not correctly defined? Are you sure, that you also installed the nprogress module and not just the types? 
solution: 

issue:  [<-LINK->]  i was waiting to give the 20k'th star but i was late :( ok then 30k. 
solution: 

issue: It was like yesterday when I spot star = 9999 
solution: 

issue: hinell: did you not understand my polymorphism point? 
solution: 

issue: You can usets-nodewithmocha. I personally transpile and test withava patsissons: They are not all migrated over. Many are still waiting for [<-ISSUE->] 
solution: 

issue: What do we do about type defs that are in old typings project but not in@types? Do we have to still usetypings? In my case itstypes/npm-nightwatchie NighwatchJS 
solution: 

issue: why doesn't this code work?thisis undefined: [<-CODE->] thanks, I found documentation about that here: [<-LINK->] 
solution: 

issue: I have a question regarding TypeScript, I hope someone can provide some help…..In JavaScript, it is apossible to assign a variable's value by calling a method.e.g.myVariable = myMethod(parameter);how can this be achieved in TypeScript? if I do that and later on I try to use that variable  my compiler returns “Duplicate Identifier “ 
solution: 

issue: is there any way to extend a singleton class  [<-CODE->] but if a extend it , is will get error in multi layer extend  [<-CODE->] it rightbut this is wrong [<-CODE->] 
solution: 

issue: Is it possible to use map-types to effectively spread a type? Something like [<-CODE->] I know I can useextendswith interfaces but not with types and I can't declare it inline Wait... maybeBar = Foo & { bar: string }does what I want...  trying it Yep it seems to... though the error is kind of weird for string literal overrides (which is what I actually want), liketype Bar = Foo & { foo: "a" | "b" | "c" } 
solution: 

issue: Free fundamentals course until May: [<-LINK->] 
solution: 

issue: So I have this declaration file [<-CODE->] And then I use it like this: [<-CODE->] and that's  fine. but I want to export FooInterface alias. but when I try that I get an error [<-CODE->] hmm.. so maybe I have to put a declare global around the namespace let me try bingo! Thanks@unional 
solution: 

issue: Hi all! I have a question. If I have a tuple type I can get the second type in it like this [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue:  [<-ISSUE->] wkrueger: also [<-ISSUE->] 
solution: 

issue: I find myself writing code like this a little bit: [<-CODE->]  [<-CODE->] 
solution: 

issue: hinell: this case will get error  [<-CODE->] TestClass2.instance().getName() return is "TestClass1" 
solution: To be precise: don’t use the singleton pattern. And to be even more precise: don’t use teh singleton pattern on instances that carry state (mutable and immutable, doesn’t matter).. I mean, even if you can’t live without Singletons. 

issue: gastrodia: If you want to inherit it just export its constructor along your singleton instance. It's most simple way.In your code above all should work causegetName()overrides previous method. @unionalglobal-storeHoly crack! 
solution: 

issue: any ideas way path is not a property of MouseEvent?  [<-LINK->] Kamilius: why not start fresh with ng 4? migration sounds impossible even more so) 
solution: 

issue: I'm getting this error:Property 'serviceWorker' does not exist on type 'Navigator'. [<-CODE->]  [<-CODE->] Yea, but this is compiler error Started getting it today, worked for last few weeks without any problems VSCode isn't complaining and is giving me code completion... 
solution: 

issue: rlavoie: When I try that last thing you posted I get this error: [<-CODE->] aaronbeall: I think just symbols or rather built-in symbols as it says  [<-ISSUE->] It's a pretty difficult problem to have an interface with a computed property. 
solution: 

issue:  [<-CODE->] or if you’re not using modules, you can just use the global variable _ if you have a tsconfig.json around. [<-CODE->] 
solution: That is because thelodashdefinition has umd in itexport as namespace _. That’s why it works on global.. 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: or: [<-CODE->] as per https://www.typescriptlang.org/docs/handbook/interfaces.html#indexable-types. It works fine, thanks@alexjurkiewicz!. 

issue: Thanks@SammonsI'll experiment more with that. The issue I have is I still use npm to install some dependencies. So I have a file that depends on some npm packageA.Type declarations for PackageAincludes a///refthat has to reach intonode_modules/xxxto find a.d.tsfile. However, since I haven'tnpm installd from the Package A folder TSC errors because it can't resolve the sub dependency. Basically I have a dependency of a dependency who's type declarations are only available if I npm install fromnode_modules/A How does one deal with that? 
solution: 

issue: Exactly@Sammons- some of my.d.tsfiles are indeed ambient declarations 
solution: 

issue: Terminology cop here. All.d.tsare ambient declaration by definition. May be you means they are script file? All .d.ts are ambient declaration by definition [<-CODE->] 
solution: 

issue: I am a total newbie to chat and typscript. I have a question that seems to be typscript issue. I think i know what the issue is but I am unsure of how to do what i need to do. Is this the place to ask? here is my error.  "Subsequent variable declarations must have the same type.  Variable 'module' must be of type '{ id: string; }', but here has type 'NodeModule".  I am cloned from ( [<-LINK->] ) and have not been able to get angular to build. 
solution: 

issue: Ciantic: we're still using webpack 1.x due to compat issues that i don't have time to hash out yet i think i tried to upgrade to 2.x a couple of weeks ago, so i assume I ran into the same issue. we're using roughly that same stack 
solution: 

issue: say I have a file that contained interfaces like that: [<-CODE->] all interfaces in a file using underscore notationHow would you convert these in to Pascal Case automatically [<-CODE->] Sammons: yeah I was thinking about an extension, my editor is vscode dtabuenc: right ;) 
solution: 

issue: Hi all... I get this error:Property 'ChildProcess' does not exist on type 'typeof "child_process"'. when I check instance like that:if(module.fast instanceof ChildProcess.ChildProcess)  maybe a problem is withmoduleis just interface with:interface Module { fast: ChildProcess.ChildProcess }? 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Unfortunately, nope. [<-ISSUE->]  [<-ISSUE->]  [<-ISSUE->] 
solution: 

issue: in express they declare some empty ambient types (ex: Request Response Session) just for the purpose of extension. Those ambient types are then used in the module types. There must be a reason they do that... 
solution: 

issue: adrianhara: your augmentation looks correct (though you don't actually need to export the augmentation, it shouldn't have any effect). My only thought is perhaps the module file that you define your augmentation in is not observed by the typescript typing system. if you are indeed importing the augmentation file, then i don't really know why it wouldn't work (unless your editor's type cache has just become stale, which does happen sometimes with vscode for example) 
solution: 

issue: Hi! Has anyone here come up with a nice enough solution for [<-ISSUE->] ? To be more specific: Multiple “node” modules, each with a pacakge.json, each writtein in typescript “Go to definition” should not go to .d.ts file, instead it should recognize project and go into source and the second issue from a multiple module setup is very high RAM usage in watch mode 
solution: 

issue: I have a project that also use lerna. I have similar problem. One solution I can think of is properly partition the packages so that they are independently developable. Meaning you can run just a fewtsc -wwhen you are working on a particular subject.Introducing a cli tool to so that you can doltsc -w packageA packageB packageCwould be a bonus. Introducing a cli tool to so that you can do ltsc -w packageA packageB packageC would be a bonus.Or use npm script at lerna level. 
solution: Yeah, that sucks. I thought they close the issue and have it working.. 

issue: Whytypeof enum values does not work ? [<-LINK->] This should throw an error that300does not exist onCarStatus When I puttype CarStatus = 100 | 200;instead it works as expected. 
solution: 

issue: unional: have enums ever type-checked against a specific number? I think any value of number type is assignable to any enum type without regard for whether the number is actually part of the enum 
solution: 

issue: I'm missing something, how do you do global typings on a project ? I have a project with a.d.tsfile and it works but on another project it doesn't and I can't find what's wrong 
solution: For global consumption: [<-LINK->]. yeah I have asrc/pdf.d.tsand"include": { "src/**/*" }on my tsconfig. Not that I know of.include: [], not object thou.. 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Hello, is this possible to get error when I try to pass object with too many properties? E.g. [<-CODE->] I want to make sure I don't pass unnecessary data to React components. thanks @FabianLauer , it looks like it unfortunately only works for object literals so in my case [<-CODE->] and it is impossible to achieve what i want. 
solution: 

issue: I don't think so, because I don't think you can get at the return value of the original function in a mapped type expression I don't think it would have anything to do to switching to es6 or not well you don't hav e a node_modules in the same folder as your tsconfig.json Are these the ones it complains about for you? [<-CODE->] 
solution: 

issue:  [<-CODE->] Module not found: Error: Can't resolve 'crypto-js' in D:\www\angular2\angular2-localstorage\dist\utility [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: so in your project you are seeting resolution to classic? well why does it say that node_modules does not exist? so where is your node_modules ? can you put the full output of --traceResolution? can you specify node for your resolution strategy? "moduleResolution":"node" in compileOptions 
solution: but you should specify node. 

issue: actually, I think Atom is mostly written in coffeescript, assuming the language breakdown here is accurate: [<-LINK->] 
solution: 

issue: I actually glanced at the source for vscode and much of it looks like plain js ahh, cool.. Yes I just did a quick glance and apparently didn't pop into that VS folder :) 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: hi there got maybe known famous error  [<-CODE->] 
solution: 

issue: Is it possible to override a 3rd party def def ofanywith a specific type? I meant to say 3rd party type def ofany, and by that I mean: [<-CODE->] Basicallypropsis a placeholder value, I have specific props I want to type it to 
solution: 

issue: looks to me like the error you posted a moment ago is from a different part of your code [<-CODE->]  [<-CODE->] 
solution: 

issue: In the docs for string literals, they don't cast the string values to a type when they pass it into their function. But for some reason, I have to error TS2322 Type 'string' is not assignable to type 'ThumbRating'. is what I get when I dobmx_track.thumbRating = "UP" but bmx_track.thumbRating = "UP" as ThumbRating - works fine Any idea why the docs can get away with passing in a string? [<-LINK->]  [<-CODE->] Here is what I want to do:bmx_track.thumbRating = "UP"; and when you pass it a string that's not in ThumbRating, it should throw an error:bmx_track.thumbRating = "TEST"; Any idea what is wrong here? I'm trying to get away from checking and throwing exceptions within my setters I'm on 2.2.1 
solution: 

issue: will it cause any compilation issues? how can it not be a fatal error, I guess I'm asking 
solution: as it interprets the dependency as an expression. so it might load a bunch more scripts than you'd expect. 

issue: According to the docs type aliases can't be extended: [<-LINK->] But it seems that this works fine in the playground:  [<-CODE->] 
solution: 

issue: that would be nice to have, I want something similar for other markup languages too the intersection of the two types does not guarantee that string is satisfied 
solution: seanzer: that's a union not an intersection. oops I always mix it up. 

issue: How can I have this error? [<-CODE->] 
solution: 

issue: masaeedu: Looks like you are trying to infer generic by other generic And when you are passingftoindexByit still has a generic reference and not a type 
solution: 

issue: I am porting a 1.8 library that uses the compiler, and it appears NodeFlags.Static has moved or been replaced.  Does anyone know what I should use instead? 
solution: 

issue: where can I find the typings for a web api like FontFace? I'd like to think they already exist, but I'm not finding them using the typings tool namely this: [<-LINK->] 
solution: 

issue: Hi, This is probably asked a lot, but.. import * as moment from 'moment' gives error Cannot find module. I read TypeScript 2 supports npm@typesnatively so I don't need to install tsd/definitelytyped. So I did npm install@types/moment, but that does not help at all. ok.. this issue was that my tsconfig.json included compilerOptions.module="system" 
solution: 

issue: can only functions/interfaces be used to define types? I'd like to do something like const Foo = () => new Bar() and then be able to use Foo as the type Bar I guess I need to usetype Foo = Bar 
solution: 

issue: is there some way to make class property type to be inferred from what it's set to in the constructor? like class Foo { public bar; constructor() { this.bar = 'asd' } } and then the type ofFoo.barwould be inferred to bestring kalyanvgopal: for one thing, you should only use the Promise constructor if you're wrapping some async call so you should use the static Promise.reject() in this case kalyanvgopal: I also can't replicate the error you're getting I think it's a config problem, but I'm not sure what exactly it should work with "es6" lib in the compiler options kalyanvgopal: you could try adding the "dom" flag to libs although promises are part of es6 and not dom 
solution: slikts: I tried adding both dom and es6. But no change in behaviour.. 

issue: Hi all,I am facing an issue with Promise usage in Typescript (latest version). I posted in [<-LINK->] . I am not sure if this is the right forum? any help appreciated. slikts: Is the error anything to do with versions I am using? I did use Promise.reject and Promise.resolve in few other places in the code. I see the same error. 
solution: 

issue: con-ssc: would yeoman make my project more attractive to you? 
solution: 

issue: QuantumInformation: to me personally? no, but maybe to others when they can quickly generate own components 
solution: 

issue: Is there a way to constraint a type argument to havekey: Typeproperties, without using an index signature? Index signatures don't exist on most objects This seems to work... but I'm not sure it's right...<T extends { [K in keyof T]: string }> 
solution: 

issue: this doesn't work.do(([a:string, b:Item]) => ...). How can I set types in destructured params? 
solution: 

issue: I'd like to check it out....I'm trying to come up with decent tslint rules for  my team currently. unional: you got a link or something? 
solution: 

issue: like undeclare a variable? I'm making type definitions for the css font loading api, and this isn't working:interface Document {  fonts: FontFaceSet} I was expecting it to merge the interface with the Document interface, but I still get "property fonts does not exist on type Document" 
solution: 

issue: why not? 
solution: 

issue: transpilers add support tosyntaxthings that cant simply be shimmed by libsfor instancefunction(...a) { return '' }or async/await would throw a syntax error in an older engine. A transpiler will work on things like that.On the other hand, lets say the environment doesnt supportArray.prototype.values, orPromise. Those are just "native libs" not syntax changes. Not transpiler duty to support that 
solution: 

issue: what is the best way to solve this issue:  [<-LINK->]  [<-CODE->] error TS2693: 'Promise' only refers to a type, but is being used as a value here.  [<-LINK->] seems like a new problem [<-LINK->] 
solution: 

issue:  [<-CODE->] c'mon, what is this that's usingts-node import * as tape from 'tape'fixed it 
solution: 

issue: I would recommend staying away from cjs/es6 interop. As the confusion you have, that is not compatible with JS/Babel/Node/SystemJS 
solution: 

issue:  [<-CODE->] why doesn't it resolve the type ofthistoFooand allow using a typecheckedassign()function?  [<-CODE->]  [<-CODE->] 
solution: 

issue: i'd just copy and paste the vue definitions do another folder, add it to type_roots and edit them the hacky wayits not that hard do extend type definitions when they expose global types, but ive still not gotten the hang of extending module types 
solution: 

issue: is there a reason why we cant declare and export multiple interfaces per file ? 
solution: 

issue: Hm, seems like this should be an error but it isn't: [<-CODE->] Interestingly, the opposite is caught as an error: [<-CODE->] 
solution: 

issue: It's not an error. Things that satisfy interfaces don't have to be exactly the shape of the interface: They have to have all the properties specified in the interface but they can also have more loaded: true must have content. loaded:false need not 
solution: 

issue: Is it really necessary to mix modules and namespaces like that? 
solution: It's for a commonjs style JS lib. 

issue: I want  jest to only check for coverage in /artifacts/src and only on js files, but it seems to check other files as well, what Im I doing wrong? [<-LINK->] oh sorry, thought I was in react-native channel, Im using typescript, but guess the question is not that relevant here. 
solution: 

issue: I have a model that has atype: stringproperty.  For a specific type, that model has extra required properties, but for any other string, that property should not exist.  Is there a way to do that? I'm trying something like this: [<-CODE->] and would like{type: 'special', common: 'foo'}to error because there is noextraproperty ha. ya it is similar yup.  I get why that does work.  Is there a different way to do it? 
solution: 

issue: Hi Everyone! Anybody with successful history of  using tsconfig baseUrl+paths and webpack? It's driving me crazy: compiles just fine, but webpack is clearly ignoring/misreading configuration params and complains about not finding required modules... 
solution: 

issue: How to provide internationalizing on bootstrap datepicker? anyone has some experience in this? I'm trying to add like this [<-CODE->] but for bundling production this way is not working because is looking for node_modules. How to have this files global? 
solution: 

issue: Hey guys, I've checked all over Google and i can't find a good documentation on writing typscript definition files. Any help? 
solution: 

issue: Trying to compile some common shared components and services, but I’m having some compilation problems. [<-CODE->] It says that typescript can’t import @angular/core, etc. How can I tell the compiler to use the same node_modules folder that is being resolved by the login code? I edited out a mistake in my path diagram. The login directory is at the same level as the common directory. 
solution: 

issue: ShawnTalbert: thanks alot! I really can't seem to think that I didn't see that all this while 
solution: 

issue: QuantiumK:   though I can't say their documentation on the subject is asexhaustiveas I might like... 
solution: 

issue: Is it not possible to mix string index signatures with other keys that have other values? 
solution: I recall there was an issue with that question.One way is to do a union (yeah, Non-DRY): [<-CODE->] There may be better answers out there.. Um…….that seems to be wrong for this context. This means the following is valid:. 

issue: mightyiam: @unionalI like doing this to solve that problem [<-CODE->] 
solution: 

issue: Anyone with typescript, vue and requirejs experience? Can't load vue module. [<-CODE->] I loaded in knockout, since I'm familiar with it and just starting off with vue,  just to see if I was going crazy... I'm not. [<-CODE->] 
solution: 

issue: hmm okay. It's almost like vue doesn't want me to invest time into learning their system. when others like knockout just work. so frustrating when documentation is unclear. thank you guys 
solution: 

issue: typeRoots is style working on 2.2 ? 
solution: 

issue: skiabox: Which part of the statement does it die on? .Fees or .CalculateLateFees? I think it should be fine, but is the code from utilityFunctions being emitted before app1.ts? I assume you’re using a single outfile? 
solution: 

issue: I am using webpack Here is the web pack.config.js  [<-CODE->] dtabuenc: I am just watching a tutorial.I don’t use namespaces. 
solution: and put it somewhere that will get picked up. then you can either use [<-CODE->]. 

issue: btw I can see the Utility name inside compiled app1.js so I don’t know why I am getting this error from chrome console yes I can see these functions inside app1.js 
solution: 

issue: cool, plus you can still rest spread for partial extractions [<-CODE->] that file contains ambient declarations, so i don't think it's possible to bring in those types just for a single file interesting strategy. the types may still leak though from importing the module. keep us posted on the results italomaia: is your issue testing minified output, or just all three things (oxford comma question :)) i think there are some boilerplates for doing this with karma though they would use webpack for bundling (and minification) 
solution: 

issue: spion: for example to do a proper typing formergefunction that actually replaces values from later objectmerge({a: 1}, {a: 'str'})=> will be{a: 'str'}which is{a: string}not{a: number & string} 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: not running into any typing issues with this code. [<-CODE->] (on version2.2.2) 
solution: 

issue: If I have a class with a method called primaryKey like so: [<-CODE->] and then from a server I map some json objects to instances of Myclass [<-CODE->] and then I try to call [<-CODE->] I get an error that primaryKey isn't a function. Any ideas why? From what I'm reading, it's not really an instance of the Myclass class but still a pojo so it can't have this method unless I somehow explicitly set it as the object comes in. If it's not possible to have this method I'm guessing I should be using an interface instead? 
solution: 

issue: Is there a way to consume ambient declarations from a specific directory? I think that would solve my issue. this is my build directory layout now:`build└── testBuild    ├── src // declarations here    │   ├── definitions    │   └── platforms    └── tests // can't find declarations when run` yes, several namespaces but not exported as modules 
solution: 

issue: What are some good typescript based NPM modules I could look at? 
solution: inferno or kivi. and getting tests to run etc. 

issue: I have created a generator to scaffolding my projects. It’sgenerator-unionaland now moved tounional-cli. It is a bit flicky as I’m using it myself and does not have time to clean it up. You can use it as a base and customize the project to your liking (or just copy one of my project and modify it from there. :) 
solution: 

issue: has anyone ever tried to use the runtime compiler? it doesn’t seem to be doing type checking for me ts.transpileModule(source, …)will happily allow a source that wouldn’t pass type checking in tsc… is there some better API?  [<-CODE->] i would definitely expect a type error there 
solution: 

issue: Is it bad practice to use the following syntax when exporting modules for NPM consumption?export import MyExportedClass = require("./MyExportedClass"); I understand that if this is in my index.ts, it should make type completion work if I reference index.d.ts in "types" in my package.json, right? 
solution: 

issue: I am getting a tslint shadowing error although I am using let here is the code  [<-CODE->] Shadowed variable book1 and shadowed variable book2 
solution: I don't think let prevents shadowing at all. let just prevents a variable leaking out of your scope. solution is to not name variables in an inner scope the same as one in the outer scope. 

issue: I'm tyring to include a WebGL2 ambient definition into my project. [<-LINK->] But I keep getting an error when trying to use itError TS2304: Cannot find name 'WebGL2RenderingContext'. I downloaded theWebGL2.d.tsand put it in a folder./typesthen I includedtypeRoots: ["types"]in my tsconfig.json it works if i put the.d.tsfiles in myfilesportion oftsconfig.json, but that doesn't seem right. turns out myfilessetting was too exclusive 
solution: ahh... I guess I just assumed he was downloading it manually because it wasn't avail  in@cg-cnu. 

issue: dtabuenc: Not a question just a big thanks for your answers! 
solution: 

issue: If anyone finds this post in the future... the stacktrace is already fixed in 2.3.0 so what I'm trying will work 
solution: 

issue: Hi community  [<-LINK->]  [<-LINK->] In VS Community, error highlighted when importing some files from another project. Most of files imported fine, 2-3 of them with error :(  [<-LINK->]  [<-LINK->] 
solution: 

issue: Yerkon: the easiest way to trace down those sorts of issues is to runtscfrom the commandline with--traceResolutionon Not sure how that would work@QuantumInformation interfaces describe objects, and objects can't have static properites or rather the concept of a "static" property does not make sense in terms of objects, at that point a property is just a property QuantumInformation: so how would you use such a method? 
solution: 

issue: The interesting thing is, when I import these highlighted into another file, there is no error :) 
solution: I just don't see a whole lot of value for a static  "contract", I'd like to see some usecases of where it would be helpful to require a class to implement a static. 

issue: thought i’d ask once more on a new day :) — has anyone tried to use the typescript compiler as a library? i triedtranspileas described on the wiki, but it’s clearly not checking types 
solution: robey: I think you need to use other apis to get errors, likegetSyntacticDianostics(file)orgetSemanticDiagnostics(file)from the language service.. 

issue: robey: check out [<-LINK->] , it uses the TS api heavily  [<-LINK->] you need to follow the first example on the wiki, transpile does not do type checking 
solution: 

issue: what is the type ofimport * as X form ‘./x’? I want my API to accept that type: [<-CODE->] It does have certain type. [<-CODE->] 
solution: 

issue: Not totally caught up on the latest syntax. Is it possible to write a generic function that returns the current type, which takes a string, then returns ‘this,' unioned with an interface that adds that string as a property? something along the lines of a fluent function likewithField<T, Name extends string>(fieldName: Name): this & {???} Basically, I’m in a situation where I want to build a schema of sorts at run-time, but I’d like to be able to infer an object interface from it, too. Not thinking about RTTI, just composition. 
solution: 

issue: make it extend object, not any? also what's with posting code as a screenshot what do you mean it "doesn't work" err, "doesn't do anything" 
solution: 

issue: Can someone help figure out why it's not always possible to infer type from a generic class' function: [<-ISSUE->] ? related: [<-ISSUE->] 
solution: 

issue: is there an easy way to return a type enforced databag as a one liner, i.e. a cleaner way of doing this: [<-CODE->] i want to ensure that ifFoochanges and the databag is not updated, a compiler error occurrs the first method is simply casting, so it doesn't enforce the type structure the 2nd method affects only the return type, which solves the problem (kind of) but doesn't really solve theone-linerconstraint (for context, i am doing method 2 right now as it is the cleanest method i can think of, but it seems like there must be a way to constrain a databag to a type definition as an expression) im not sure if there is even a reasonable usecase for this, mostly just curious about capabilities i guess you could do something like this: [<-CODE->] this allows you to have type constrained databags as expressions 
solution: I don't really know ramda very well but it seems like one of the few legit criticisms against using Typescript. 

issue: Hi all. I'm on day 4 or 5 of the source maps not working for my Angular2+Webpack project. That's a real handicap indeed. Would anyone be able to offer some suggestions on things to try to fix this? Here is the branch with this problem: [<-LINK->] 
solution: 

issue: Hi guys. Is there any way to make error output message more verbose and accurate? Currently I see messages being shortened by ... (three dot) notation making it incomprehensible. daslicht: That is cause tsc doesn't know what json file means when node does. So try to use requrie() type polyfill declaration right in your code at the beginning. 
solution: 

issue:  [<-CODE->] SAD so i have to always splicitly type class members nops, it was another issue... sometimes it kills the returned type when I passthisas a function parameter. but that doesnt always happen. [<-CODE->] 
solution: 

issue: I have componentscomponents/partialsthat I am reusing in different components, when doing lazy loading how would you avoid of code duplication in the bundles?Say I have componentcomponents/partials/buttonI am using that inComponentAandComponentBso each of the related modules needcomponents/partials/buttonreference.So will I endup with a code duplication in my bundleschunk.compA.0.jsandchunk.compB.1.jseach contain mycomponents/partials/buttonwhen I am doing lazy loading? yes, just cli provides that yes 
solution: 

issue:  [<-CODE->]  [<-CODE->] However I'm getting a typescript error, that Map is a generic type and I have to specify the key/value types too. I'd like to make this helper method universal without explicitly specifying those types. What can I do then? Ah okay, that would be:getMapKeys(map: Map<any,any>) { ... } 
solution: 

issue: slikts: seemed not big speed difference herebut webpack watch seems a bit quirky 
solution: 

issue: hello guys I am trying to use Promises with tha latest typescript version and targeting es5 but I get an error typescript: error TS2693: 'Promise' only refers to a type, but is being used as a value here  [<-CODE->] I am targeting es5 
solution: 

issue: can this code work with these browsers? ( [<-LINK->] ) 
solution: 

issue: Does anyone else have issue with their breakpoints not clearing when using the WebStorm debugger? [<-LINK->] Please upvote if so Its a pretty critical workflow flaw Im hoping if we get enough upvotes Jetbrains will take a look at it 
solution: 

issue: that doesn't work in babel? crazy... 
solution: 

issue: Basic webpack question. How do you use that bundled file?I use webpack to bundle my library with global exports:  [<-CODE->] So I can use it directly in script tag. and reference code using global namespace. 
solution: 

issue: Or does type infer works in the AND clause? 
solution: Thenerror instanceof GlobalErrorwill not pass to begin with.. you need to do allglobalErrorrelated code inside theinstanceofcheck. 

issue: What if he wanted to rethrow the error instead of making a new error and losing all the information in response error? [<-CODE->] If you really want to just rethrow the error, you can be justthrow response.error, but don’t throw a non-error (anti practice. i.e. don’tthrow xwherex instanceof Error === false) 
solution: 

issue: BustyLoli-Chan: if inside the catch block you throw something, the error bubbles up.If you return a promise, it is delegated to that promise (if that promise fails, then the error bubbles up)if inside the catch block you return a non-promise, you are assuming the error was treated (or swallowed) and no error bubbles up so justthrow x 
solution: 

issue: I'm somewhat loathe to add a third party dependency for something so simple, but that's just my bias haha 
solution: 

issue: I'm trying to await on promise.all and then deconstruct those results like so: [<-CODE->] but I get this error: [<-CODE->] any ideas? hmm the error goes away if I remove  the return types for each of the promise functions as well as remove the types for the deconstructed vars: [<-CODE->] 
solution: 

issue: pantonis: you can't name the interfaces the same  [<-CODE->] 
solution: 

issue:  [<-CODE->] this.xis not defined. Is this expected behaviour? 
solution: you have to doFoo.x. 

issue: Can someone please help me understand this? [<-LINK->] I don't know why I can't call new on a type I know has to be one of a few classes 
solution: 

issue: Anyone using mysql here? 
solution: 

issue:  [<-CODE->]  [<-CODE->] 
solution: 

issue: is the following really not legit? [<-CODE->] 
solution: 

issue: I'm getting the following [<-CODE->]  [<-CODE->]  [<-CODE->] Am I doing anything wrong? 
solution: 

issue: dtabuenc: btw I posted a suggestion to RxJS based on your advice [<-ISSUE->] i.e., about how to make a fluid interface while maintaining type in inherited methods 
solution: 

issue: matthewharwood: what are you trying to do? 
solution: matthewharwood: i did this:. matthewharwood: in your case, you don't do keyof. 

issue:  [<-CODE->] Error:(74, 17) TS1066:In ambient enum declarations member initializer must be constant expression. What does this error mean ? 
solution: 

issue:  [<-LINK->] the value needs to be numeric 
solution: actually this is a typing for another module which is not in TS. 

issue: hello again guys I am looking for an asynchronous code typescript tutorial any ideas? I am looking for a typescript asynchronous code tutorial guys I am trying to use typescript with vue.js but I am getting an error Uncaught TypeError:WEBPACK_IMPORTED_MODULE_0_vueis not a constructor 
solution: there is a yeoman generator for webpack + typescript + vue: [<-LINK->]. 

issue: kwongdev: do you have a link to the tutorial you are following? why do you think.json()returns Promise? 
solution: When I took a look at the Response interface, I saw that it extends Body, which contains the methodjson(): Promise<any>. 

issue: The first attempt. [<-CODE->]  [<-CODE->] The  second attempt. [<-CODE->]  [<-CODE->] Why? :) 
solution: 

issue: Any way to extend built-in object's interfaces? When I try to use the code like this [<-CODE->] I get this:error TS2339: Property 'foo' does not exist on type 'any[]'. unional: Yep. Especially when using in nodejs environment. 
solution: 

issue: hinell: try this: [<-CODE->] aaronbeall: i doubt there is an easier way thanPick unless there is a way to do anUnpicktype extension, but im not sure if that would be possible that's just how global augmentations work, you can see more details at the bottom of this page: [<-LINK->] 
solution: 

issue: yet another reason to use real tabs ;-) 
solution: 

issue: Hi, guys,  is there any option to set something likedeclare module "*";? noImplicitAnyworks fine, but I don't want to skip all errors, only for external modules skipLibCheck does not work 
solution: 

issue: are the.d.tsfiles modules or scripts? i.e. do they import/export things? 
solution: 

issue: One example where Idouse inheritance is a hierarchy where classes are mostly data objects, but their properties all have decorators. I can't use interfaces because I need to inherit the decorator implementation and derived classes only add new properties (with apporpriate decorators) 
solution: I think modern programming languages should really incorporate better features to support for easier use of composition. 

issue: is there a way to re-export all interfaces defined in another module?  [<-CODE->] that's what I tried. Does not work though(no compiler error, but SomeInterface is not re-exported) 
solution: 

issue: Any way to extend Node global variable type? [<-CODE->] theduke: Try to useexport * from 'myinterfaces.ts' [<-LINK->] C'mon guys! I need thatNodename! 
solution: 

issue: If there is a type like this [<-CODE->] how can I use it? I'm seeing an error like this: [<-CODE->]  [<-CODE->] where styles.container comes from [<-CODE->] If I can get this blasted react-native working, I might have to write up a blog post and put a sample project up on Github at the point </frustrated> hmm maybe [<-CODE->] looking 
solution: Named styles is a mapped index type on mine. 

issue: Is there a way to decorate the short-hand constructor parameter syntax in TypeScript to get the metadata for it as a property? [<-CODE->] And if not, should I make an issue for it? 
solution: basherr: you around ?. 

issue: alexjurkiewicz: - you can't. You have either do JIT check or write some plugin which does that at compile 
solution: alexjurkiewicz: You might be able to do something with  custom-typeguards. or using a nominal type. 

issue:  [<-CODE->]  [<-CODE->] 
solution: 

issue: bherila: was yourAuthBaseclass perhaps not callingsuper(...)in the constructor? 
solution: 

issue: Hey folks, I'm using thenoUnusedLocalsandnoUnusedParametersoptions when compiling my TypeScript. I'm getting an error thatValidatorFnimport is not being used, even though I'm using it to assert an anonymous function to that type. Thoughts? So, essentially I am importing theValidatorFninterface and then using it like this in my source: [<-CODE->] 
solution: 

issue: I have a big problem with the latest version of webpack or typescript can't seem to find modules that normally resolve easily: in npm  [<-LINK->] 
solution: 

issue: dkushner: Maybe you can use [<-LINK->] If the definitions are lacking I usually just add my own that covers just what I need.... you can put your own type declarations in a folder that is structured likenode_modules/@typesand add it to path in tsconfig.json See [<-LINK->] 
solution: 

issue: methods lose references tothiswhen passed as callbacks if doing something like [<-CODE->] try changing it to [<-CODE->] Arrow functions capture the value ofthisfrom the outside 
solution: Right side expects only one parameter, but the actual value (left side) is going to need two. 

issue: I changed my tsc target from es2015 -> es2016 and get a lot of errors like this(20,16): error TS2304: Cannot find name 'document'.-- do I need to explicitly import something? Can't find a reference to this with google  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Specifylibin your tsconfig.json? 
solution: mrapogee: there is a tsconfig entry, lib. darn.. 

issue: darkbasic: Try entering something likeMath.abs("should error"). Does it highlight the error? 
solution: wz2b: I think you want a constructor type. 

issue: How do I ensure an option bag contains a method with specific signature? The following code doesn’t work:  [<-CODE->] 
solution: 

issue: can anyone help me with a react/typescript bug I have. I'm exporting a redux connected component, and importing it into my router. <MyComponent> is not assignable to type 'IntrinsicAttributes & IntrinsicClassAttributes<Route> & Readonly<{ children?: ReactNode; }> & Rea...'. Type ' 
solution: 

issue: If I have a genericfunction foo<T>() {... Is there a way to preclude a property on type T SoTcannot have propertybar Apparently not yet [<-ISSUE->] 
solution: 

issue: I'm working on a project that includes aWebWorker, so I need to add'webworker'to thelibsection of tsconfig.json. However, it looks like you can't use'dom'and'webworker'together, otherwise you get a bunch ofDuplicate identifiererrors. What should I do for a project that has both regular JS files and a WebWorker? Looks like I can put the worker files in a seperate folder with its own tsconfig file, and have it extend the main tsconfig file. However, now theoutDiroption isn't working. I just got rid of it and usedoutFileinstead. 
solution: 

issue: In terms of danger it really depends on your application security requirements, and what is being exposed by the entities (and what your definition of "entity" is). What I find though is that what usually happens is that client-side and server-side have different concerns that are not shared, and when these are are mixed in the same classes it can increase the complexitiy and brittleness of the code. If you are following proper separation of concerns and single-responsibility priniciple,  then it's not necessarily bad to share certain classes between client/server as long as the code or business logic is not proprietary, as obviously anything on the client side is potentially readable code to the users. 
solution: 

issue: Guys, how one can create some kind of container for class-object search and registration?I'm trying [<-CODE->] The problem is I kinda got lost, how to make this work. I'm getting too much copy-paste containers and I wanted to make one abstract class that will get interface for Objects and it will provide getting not only objects but also something like this// But type used in generics ProductInterfaceget(SubProduct): SubProduct instance I think I'm kinda overcomplicated my issue. Basic service container has [<-CODE->] I want it SomeClass also to be restricted to some instance Type Okay I solved it. If anyone interested I'll post it here. 
solution: 

issue:  [<-LINK->] you just install them there's not much to it though they go intonode_modules/@types/angular and they are automatically included unless you modify your typeRoots to not include them 
solution: can i delete the old /typings folder then. 

issue: hi, how do I reference a@typeswhen it has a subfolder? eg: lodash has a v3m which I want to use so wasnt clear how to reference that, or do i just install all thel@types/lodash and it will fiure things out on use? right now, i just include it manually into my project, and use <reference path=""...> sorry - type typo* v3  [<-LINK->] oops sorry - raw not useful - [<-LINK->] dtabuenc: 
solution: 

issue: Is there a way to identify the binary operator from thets.Node (BinaryExpression)instance while traversing the AST? Is there a doc or something describing the different SyntaxKinds from the tsc compiler. While most are obvious, others are very abstract and hard for me to infer there usage. 
solution: 

issue: But I cast it asany, so the typing ofITaskFactoryshould be what the checker uses? It rejects the string because it accepts another functionstring => number 
solution: well but the type of yourtis going to be(str:string) => number. 

issue: Hi, is it possible to declare lib dependencies in the file I have a project with mixed worker and dom modules, and I can't figure out a way to get propper typings ShawnTalbert: I found a solution, I justdeclare const self Worker;in the worker files,. 
solution: 

issue: Question: How can I add the same method to a bunch of classes without using extension? I tried using a Class Decorator, but they only appear to work on the Class blueprint itself - I can't access member properties. 
solution: 

issue: i have a class to define that has some constant values - not sure how to add it to me .d.ts? I tried defining the class and enum with same name thinking they would be merged, but that didn't work. any ideas [<-CODE->] TYPE_TEXT to is  4 - it can't be any number. or am i thinking about it wrong? 
solution: 

issue: hi there, I get :Identifier 'leaseAgreementId' is not defined. 'BreadcrumbElements' does not contain such a memberbut my interface looks like : [<-CODE->] 
solution: 

issue: Hey everyone ! [<-CODE->] alex-sherwin: I also thought that but I have anunexpected tokenerror triggered by an ES2015 import from lodash :/ alex-sherwin: It was working well withlodashdirectly. I'm using themapmodule.import { map } from 'lodash-es'. 
solution: 

issue: kellytk: likeprivate my_property:string = "hello";? kellytk: a simple test that you can do yourself: [<-LINK->] 
solution: kellytk:  [<-LINK->] is handy for that ;). 

issue: on constructor a param with no modifier is just a param it only becomes a property if you add a modifier 
solution: 

issue: I'm trying to setup my tsconfig.json but I'm getting this error:  Unexpected token } in JSON at position 217. [<-CODE->] 
solution: 

issue: note MDN specifically warns against using parseInt as a substitute for Math.floor [<-LINK->] 
solution: 

issue: With this can't we use extra key [<-CODE->] If I do this it throw me error :public a : BreadcrumbElements = {okay : "ok"}tellin identifier okay is not defiendBreadcrumbElementsdoes not contain such a member I have [<-CODE->] then somewhere in code, I do: [<-CODE->] is there another way todo this because my template complain when using onSelect(param) 
solution: 

issue: Within a class why wouldself.localgive an error about property local not existing on type Window?  It appears to ignore the class 
solution: 

issue: What would be the best way to create an array of integers between say 1-10 in Typescript? bang88: thanks Does .fill() work on mobile now? 
solution: 

issue: Hi Gentlemen! Can anyone help me with creating a mapped Type? http://bit.ly/2pCXXajI am trying to map this: [<-CODE->] to this: [<-CODE->] to type-check a tuple, e.g.: [<-CODE->] Help would be greatly appreciated }};@foxjazz 
solution: 

issue: this is messed up....  [<-CODE->] error, can't find the name rht WTHell 
solution: 

issue: Hi everyone, I try to type check some JSX children with 2.3.1 and 2.4.0 but all I get isProperty 'children' is missing in type '{}'. Is [<-ISSUE->] not in 2.3.1 or 2.4.0-dev? Am I missing something? Thanks 
solution: 

issue: What's causing the error in [<-LINK->] 
solution: 

issue: Can I use reflect-metadata to get the class name of a class?  I know that in chrome you can just use the ClassName.name but that doesn’t work in IE. 
solution: I don’t think so.. 

issue: unional: this not working to me :S y i mean index signature wait&see  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: istiti: you define an interface of type with what@unionalsaid do you get that error when compiling with tsc? also what version fo typescript are you using? older versions did not allow access to properties of index type like that. 
solution: 

issue: What is best practice for cloning deeply if the language doesn't offer sugar for it? 
solution: 

issue: Guyz I m getting this error  [<-LINK->]  [<-CODE->] this is my function, what I am doing wrong ok fine need to remove true bang88: I did it  (current == rider) but still getting error void is not assignable to parameter of type 
solution: 

issue: Whats this [<-CODE->] current is not a boolean type current == rider ? 
solution: 

issue: Has anyone ever seen this area? [<-CODE->]  [<-CODE->] package.json: [<-CODE->]  [<-CODE->] when I run tsc It doesn't say what file, but it doesn't really matter it just seems odd that those files don't exist in the lib folder. I have another project with the exact same version that has all of those files included in the package. One sec I'll the upgrade give it a shot. DanielRosenwasser: Yeah, same error. 
solution: 

issue: Hi ! I don't understand why : [<-CODE->]  [<-CODE->] and [<-CODE->] 
solution: 

issue: I have a strange error here after inheriting a class. [<-CODE->] This is the class in question: [<-CODE->] Any insights, anyone ? alex-sherwin:  [<-CODE->] dtabuenc: I don't think I understand :( alex-sherwin: I found that, too. Unfortunately the issue was closed for being a webpack issue and I am not using webpack since this is a node project. 
solution: 

issue: Is this the right way to declare a module using UMD?  [<-CODE->] 
solution: 

issue: Sorry I meant for a 3rd party lib... I'm just writing thed.tspart Yes, a declaration for a UMD module written in JS 
solution: 

issue: What would case the error at [<-LINK->] *cause 
solution: 

issue: anyone know how to filter nulls from an array of nullable elements when using strictnullchecks? var x= ['a', undefined, 'b'].filter(x => x)leaves x as(string | undefined)[]even though all undefined elements have been removed nevermind, found the answer! [<-ISSUE->] 
solution: 

issue: How can I override the typings, on a line like:expect(mockSock.getComments.calls.mostRecent().args[1].valueOf()).toEqual(today.valueOf);to avoid the issue:Property 'calls' does not exist on type '(uri: any, startT: any, endT: any) => Observable<IJobResp[]>'. 
solution: 

issue: Hmm, odd that they made a distinction between always evals as true vs always evals as false.. and that the error doesn't actual say its about never matching vs saying its about types. On top of that, its screwing up on Lodash, because the default is not always returned... I think I will put in a GH issue to dig in more 
solution: zdrummond: the difference I think is that if it's always true, then it's always the same type... the same isn't to be said if it's always false. You can create an issue, but I don't think they will change the behavior, but they may explain it more I suppose. 

issue: With someone's help I modified [<-LINK->] to have the method style [<-LINK->] in order to eliminate the error at [<-LINK->] but I don't understand why or what.  I get that it has something to do withthisand how arrow functions capture it, but I'd like to completely comprehend it.  Would someone ELI5? FFR: I've found help through the arrow function/this scoping question above.  I'd delete the comment but it's disabled I'm running into an error I'm not familiar with [<-LINK->] 
solution: 

issue: why doesn't TS inherit types when usingbind? can't find an issue for it  [<-ISSUE->] ah here it is 
solution: 

issue: Hi - can someone explain to me why this doesn't get flagged as an error: [<-LINK->] Basically, I'm thinking it should, because mapping is never initialized, so I am trying to assign to a property on undefined. So this is one type of error i thought TS should be able to catch, so wondering what I am doing wrong. pasted the TS and the generated JS from it I am new, so maybe i declared mapping wrong? (this is a simplified example from larger code) When I hover over for hint, it correctly identifies the type of it (Mapping) but this is the entirety of the file - so should it not be able to see that mapping is undefined, therefore trying to access undefined[index] is an error? is there a different way I should be writing this? westonpace: so am i wrong in expecting that to give a compile error? westonpace: Ill give it a shot. thanks. 
solution: 

issue: It's in a callback.  Maybe TypeScript can't know that each isn't somehow accessing that mapping variable? Sure, it is validly in scope but theoretically, since it is globally scoped then the each method could modify it before the callback is called. @meeech You are right.  It doesn't even matter if there is a callback. [<-CODE->] compiles just fine. meeech: Try adding--strictNullChecksto the compiler 
solution: 

issue:  [<-CODE->]  [<-CODE->] But when I try to import: [<-CODE->]  [<-CODE->] Error:(6, 33) TS2497:Module '"/node_modules/@types/highcharts/highcharts-more"' resolves to a non-module entity and cannot be imported using this construct. Seems that I must useimport HighchartsMore = require("highcharts/highcharts-more")since it doesn't export a namespace... lazarljubenovic: Right butimport * as HighchartsMoreworks, it just compiles with error in module context because the typings don'texport =a namespace. At least so it seems... 
solution: 

issue: does it build successfully from the command line? i.e. withtsc? 
solution: well, at leaset it's consistent!. 

issue: how can i create a type definition that captures a generic nullable type becoming non-nullable. i.e., [<-CODE->] ahhh nevermind, i just have to classify the input generic type as nullable via the input parameter, which would bethisin this case i suppose the challenge is how to get the function visibility restricted to generic types that are nullable nevermind that doesn't actually seem to work... yea im stuck trying to come up with a non-hacky way to do this the hacking version is something like this [<-CODE->] you can definitely write a function that performs the intended filtering: [<-CODE->] but i can't think of a way to augmentArray<T>with a similar function 
solution: 

issue: hello, I am creating a myMap = new Map<string, Profile>(), but when I do myMap.delete(key), it does not remove it from the map, I am using angular 2.4.1 with a CLI based project, anyone experienced this before? 
solution: 

issue: Hey all, I am putting together a talk and I recall watching a TypeScript talk a while back which talked about Monaco before TypeScript. There was a survey on where time was spent and the presenter mentioned about 70% of time was dedicated to code understanding. I can't find this talk but I was wondering if this was actually a thing and if this is documented anywhere? 
solution: 

issue: hey, guys, are you aware that Playground is broken? playground.js:29 Uncaught ReferenceError: monaco is not defined 
solution: 

issue: Hey everyone ! [<-CODE->] Any idea? 
solution: 

issue: jquintozamora: I don't think you can do that. For two reasons 1. interfaces don't emit anything so there is nothing to iterate over. ans 2. you can't iterate over a type (e.g.i in T), you iterate over a value. 
solution: 

issue: I'm trying to write a declaration file for a node_module that doesn't have one - I can't seem to get it working if I just have thesomeModule.d.tsin the project referenced under my"includes"or"files"options in mytsconfig.json... someone has to have encountered this right? What can I do to get the path to resolve correctly? 
solution: 

issue: hello all, if I have the following selector (export function candidateSelectedSelector(state: ApplicationState): boolean ), but I want to pass in additional parameter into it when I make the call to it from my component ( this.candidateSelected$ = this.store.select(candidateSelectedSelector);).. how can I do that please ? 
solution: 

issue: Hello,I'm trying to use this typing: https://www.npmjs.com/package/@types/passport. So I tried it out but I can't get it to work: [<-CODE->] This doesn't work either: [<-CODE->] oh weird let me try  [<-LINK->] No, didn't work :( I did runnpm install --save @types/passport I don't think there is. 
solution: 

issue: Is there a way to define types on a function like this: [<-CODE->] Effectively what it does it it allows for a function to work as a method (except on undefined) if called as a method, otherwise a plain function with value as first argument: [<-CODE->] No but according to the docs you can use.get(<number>) 
solution: 

issue: idchlife: Thanks! Will look into this... idchlife: not sure if I follow...so for someone to include this in their project, the will have to install it, then run npm build for the tsc compiler to generate the declaration files? 
solution: 

issue: Intersection type? [<-LINK->] Pretty close to what you've got 
solution: As I understand the thing I want to accomplish - "combine and fill properties of class and change their types in decorator". In case of extension and type extensions decorators are useless. 

issue: Hey guys. There is no way I can check at runtime that some property of instance without immidiate value - is property of instance? 
solution: It's just js. It does not even write it in constructor function. I don't know for better or worse, actually.. 

issue: Do you know where the rule about namespaces following classes is described in the manual? [<-LINK->] doesn't appear to mention it 
solution: 

issue: You mean so you don't have to pass T1 and T2 when calling the function? 
solution: 

issue: Is theconstructorfunction required in classes? That's just the behavior I'd hope for, thanks@NaridaL NaridaL: I've put together a more concrete example from yesterday's issue [<-LINK->] Yes [<-LINK->] 
solution: 

issue: Does someone know why this [<-CODE->] gives me [<-CODE->] ? 
solution: 

issue: thasmo: The error is being caused by the string type 
solution: 

issue: Hm, what type did I explicitely declare? 
solution: if you leave it out, TS infers the type of the field from the literal to be {entry: any[]}. So, it automatically infers the first type from'string | string[] | Entry'?. No, webpack.Configuration explicitly defines entry to bestring | string[] | Entry. 

issue: works in latest version of webstorm not sure how it work in intellij is the error from IDEA itself or actually from the language server (i.e. is the error prefixed with TSXXXX: ?) Yeah, you want to do that, then ignore the idea config, just add a tsconfig.json and set your settings there See also [<-LINK->] 
solution: 

issue: I'm new to TS and the configuration options in IntelliJ IDEA doesn't make it better. I've actually just figured out to enable the TS Service and I get different errors now, in different places. I'm on it to figure out what I need to change. Thanks so far for your help! A related question. When importing dependencies into TS files, e.g. thebrowser-syncnode package, it actually says it can't find definitions. I'm aware of the definitelytyped project and stuff. But in general, does that mean for every code that doesn't have types provided by itself, I absolutely have to provide type definitions? I can't opt out of that in any way? 
solution: 

issue: kolbma: Yes, it seems they weren't really done with the support for TypeScript upgrades when they released VS2017, but they seemed to have fixed it for the 15.2 version of VS2017 that is currently in preview mode: [<-ISSUE->] . Not sure when the 15.2 will be released, but maybe on the build conference later this week? 
solution: 

issue: in C# we can have [<-CODE->] what is the equivalent in typescript? unional: this does not work  [<-CODE->] found it:  [<-CODE->] 
solution: 

issue: Maybe this could help? [<-LINK->] It should work for TypeScript, not sure if this is what you're going for though. 
solution: 

issue: I'm trying to import a module written by somebody else ( [<-LINK->] ) but I get a "file does not define a module" error, even though the first line of that file ismodule Sprite {, am I understanding modules wrong? 
solution: 

issue: Hey guys, if you work with react/preact and heard about state management and want something easy for small-big sized projects, I wrote library recently. It goes very well with TypeScript and decorators. Building one huge project now and really wanted to use something simple but effective for my data and actions management. https://github.com/idchlife/nuclear-reactorMaybe I'm subjective, though. But it paid well for small apps I built (big one is in progress now) patsissons: you mean you have runtime error because of this? 
solution: 

issue: The compiler detects whether each module is used in the emitted JavaScript. If a module identifier is only ever used as part of a type annotations and never as an expression, then no require call is emitted for that module. This elision of unused references is a good performance optimization, and also allows for optional loading of those modules.  [<-LINK->] Are you sure it isn't just webpack not finding the module? 
solution: 

issue: What's the cause of the error in [<-LINK->] Silly me, thanks@NaridaL 
solution: 

issue: Is using a proxy for the other class and loading the properties wen they are accessed not an option? 
solution: An option would be to preload nothing, and when properties are accessed, begin the request loop on a timer. idchlife: The problem is that it makes it hard to reason about. If I do new MyClass().foo() I expect thatclass MyClass { foo() {/* this here */ }}will be executed. If you dynamically change what MyClass.prototype.foo is pointing to, it potentially becaomes necessary to look at the entire codebase to digure out what is going on.. 

issue: hello. I'm seeing an error on Windows onlyCould not find a declaration file for module 'url'. does anyone know anything about this and how to fix it? urlrefers to the node module. this same app compiles fine on Mac. 
solution: 

issue: LucianU: tsc has a traceResolution flag: it will output where it looks for modules. Helpful for debugging this.  [<-LINK->] 
solution: westonpace: I havenode_modules/@types/node. 

issue:  [<-LINK->] suggests the ambient modules are listed too 
solution: I see the events one and a bunch of others. but not url. 

issue: Cannot find name 'Iterable'.. I have included the lib in tsconfig. still cannot resolve the error. SKIPLIBCHECK: TRUE, removes the error but produces other errors 
solution: 

issue: Hey everybody! When writing [<-CODE->] I get the error: [<-CODE->]  [<-CODE->] rule.useis an Array. What I'm actually trying to do, is to add a new loader to the beginning of an existing loader array. That's what I try to find out, I guess. Does TypeScript only rely on the assigned types or does it analyze code to find that out? The whole file is here: [<-LINK->] Oh, i didn't intend to spam - can't that be collapsed? Ah, I found a way to collapse that, at least for me, I guess. 
solution: 

issue: thasmo: there was some error with spread operator recently, some bug Can you try with Object.assign please and check if error still persists? 
solution: Also, what's the insides of webpack.Rule? Can you paste it here from your editor/ide using"```" at the start and end (without quotes). 

issue: Dang, nope. I did miss thewebpack.Loader- I accidently usedwebpack.Rule. Thanks! Seems to work. Can I somewhere read about that kind of casting in the docs? NaridaL: Thanks. So, in my case, could this be considered as some kind of workaround or would you judge this to be a valid thing to do, in that case? 
solution: 

issue: NaridaL: I had tried that, but just realized I had extenuating circumstances that caused it not to work in my case, but not TypeScript's fault. Thanks! 
solution: 

issue: jump up the stack trace and check who is calling the class constructor it is probably not being callled using "new Fn()" 
solution: Darn. I used to put a function in there. But it's written so much like a class definition that i started using classes.. I guess app.run definition states something like arg1: FunctionBy the way, nice case. Is there possibility to check that type is function but not a class?. 

issue: wkrueger: Where's the issue? They're just syntax sugar around iterators. 
solution: 

issue: Can someone please tell me why the second variant does not work i.e. the type of themoduleis not set towebpack.NewModule: [<-CODE->] 
solution: thasmo: It's ignoring all type inferred after the=because youve explicitly set the type of the variable. 

issue: Hi! anyone knows any possible issues using Async / await functionality provided by TypeScript 2.3 ... Any problem with browser support ? I think its supported on IE11 but not sure in IE10 ? Thanks! 
solution: 

issue: Where do you put this condition? What kind of condition are you talking about? Can you write some code and explain?? what issue exactly? 
solution: 

issue: brittanyrutherford: whats ur question? im sure u will get help 
solution: 

issue: Really depends on your experience level with other languages I would start by just learning the type system... not so much the classes... that is.. learn to do the same things you do in js now in the same way just with type safety then move to new features in those two case syou don't HAVE to... but you can 
solution: You can but you don't need to.  I personally don't.  If the type can be inferred then let TS infer it.. And refactoring.  I just went through a major refactoring and it would have been much more difficult if I didn't have types.. 

issue: i guess not... NaridaL: there is refactorix plugin 
solution: 

issue: no better way to do that ? [<-CODE->] I can't cause ofdataEnd that's exactly the problem 
solution: which*. yeah but then I have to also create a var for anything beforelength. likeindexin that minimal example. 

issue: How do I tell TS that an object is an implementation of an interface, or an array of an implementation of an interface? [<-CODE->] why? I like to do interface[]. it reminds me of my java days 
solution: SailsJS has a function for a database calledfindOrCreate. the callback receives the one object created, or the many found results. 

issue: I guess I'm not seeing the issue with renaming it everywhere XD 
solution: 

issue: what's the use of revealing module pattern - constructor, if am not going to use "this" ? 
solution: 

issue:  [<-CODE->] Why does thing have typenumber | undefined?  I thought the flow control analysis would know the array cannot be empty at this point and thus can't returnundefined In order to access properties on thing I have to first make unnecessary if statementif (thing !== undefined) { ... }in order to let it konw it's safe to access Hmm, looks like it may be related to this one: [<-ISSUE->] 
solution: 

issue: question, what doesthisinModel: Model<this, TAttributes>;mean? i can't find any documentation for it it's inhttps://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/sequelize/index.d.tsfor example aha, i think i understand wouldModel<Instance<TAttributes>, TAttributes>have worked as well andModel<this, TAttributes>is just a shorthand?  
solution: 

issue:  [<-CODE->] Do you think this is something valid or do you think typescript prints an error ? :) No error :o ...  [<-LINK->] Well ... 
solution: 

issue: westonpace: isn't this supposed to throw an error ? ok it only throw on strict mode this one throw [<-CODE->] Attempting to delete or add properties to a sealed object, or to convert a data property to accessor or vice versa, will fail, either silently or by throwing a TypeError (most commonly, although not exclusively, when in strict mode code).not really clear 
solution: 

issue: Hey guys, property decorators cannot like replace method decorated with something else?  [<-CODE->] It doesn't log wrapping start. Maybe I missed something... It seems like it should work actually 
solution: 

issue: How would I augment the global type to addchai.assertso all of my tests can just callassert('foo')?  In pure js, I can just sayglobal.assert = chai.assert;in a bootstrap file; that doesn't seem to work for typescript. I've tried creating aglobals.d.tswithimport * as chai from 'chai'; 
solution: Then just doimport {assert} from 'chai'in any module which uses it.. 

issue: not using relative imports? 
solution: In that case using node as module resolution maybe isn't the best solution. 

issue: Question, for anyone listening... I need mocha or jest type definitions. The only way to get those is to install@types/whatever. Once I do that, types like "describe", "test" and "expect" suddenly become valid identifiers throughout my entire codebase. I can't exclude those type definitions because of "node" module resolution, and as far as I can tell, npm doesn't allow aliasing the install location, so I can't have them install to some alternate node_modules location. How can I install environment-specific type definitions without infecting the whole codebase? Asking here because half an hour of Googling has not yielded a useful result. 
solution: 

issue: But then Travis won't know to install those modules Also my project consists of a number of secondary modules, each with their own tests folders. e.g. /core/collections/map/tests 
solution: 

issue: Any thoughts on how would I convert this vanilla JS module to typescript? [<-CODE->] I tried the following, but my test complains thatHTMLElement is not defined: [<-CODE->] Specifically when I'm testing out theensure.htmlElementmethod.  Callingensureandensure.existsseem to work fine with this construct. Yes 
solution: 

issue: Yeah, there don't seem to be any typings for domino js and you can't set the type of global.window to the lib.d.ts Window because that doesn't include HTMLImageElement or HTMLElement in general 
solution: because Window.HTMLElement isn't defined. HTMLElement is a global, and in the browser window points to the global scope in most cases, which is why it works.. 

issue: .HTMLElement isn't  a property of window what are you trying to do? Where does the Window type come from? I thought it should be IWindow nevermind I'm being dumb westonpace: you can add it by merging with the Window interface same way you mergged with Global 
solution: NaridaL: That article is arguing against something very different,@chrisleckisn't running inside of jsdom is he?. 

issue: I have moduleResolution set to node, why can't TS find node's modules? 'Cannot find module 'zlib'.' this is garbage it's semi-working because it finds modules from node_modules, but not node's own modules what do you think? 
solution: 

issue: 'member when we used function and new and newcomers to JS observed this with wtf faces? I wish I played with coffeescript in times it was popular I think only people who wrote huge software and now they are like: well what? I wont rewrite 18000 lines of code because it's not mainstream anymore 
solution: classes are one of the most overrated, misued (for structure) and dangerous (state hell) features of a programming language :D. gionkunz: Douglas Crockford said classes aren't that useful .. he said they made them for Java people. 

issue: anyone using coffeescript nowadays? 
solution: 

issue: Agree with@dtabuencLearning and working on a project has one thing is common. It is iterative. Don’t think that you will work on one and be done with it / master it. 
solution: 

issue: NaridaL: actually@dtabuenchelped me in the same tasks the other day, so I followed same steps, and cheated by looking at the code :S :( 
solution: I wouldn't worry about it, setting up the dev environment is always the least fun bit XD. 

issue: Hi everybody! I faced up some strange behaviour in the type system: [<-CODE->] https://goo.gl/cxbFtq - playground link. 
solution: 

issue: Anyone else find themselves wishing they could embed pictures in comments? Sometimes ASCII art doesn't quite cut it... 
solution: NaridaL: yah I've often thought of something similar, where you could imbed code/links.. relate to specs, etc.  But not sure if it would be maintainable /practical.. The simplest would be to have something like[relative/path/to/img]and an IDE which paints the image under that line or something. I should file a feature request for webstorm.... 

issue: My god do you even sleep guys? 
solution: 

issue: but protecting me by preventing me from using ternary operators and lang features? :( 
solution: 

issue: Hey guys, how can one make this:type State = typeof SomeClass & { var?: boolean }this is everything in type State should be optional.But SomeClass should not have optional types.How can I defined that "typeof SomeClass *optional"? 
solution: is SomeClass a type already? why typeof SomeClass ?. yeah, it should work, I did something that broke everything@unional. 

issue: Hi all! I think I might be missing something here. Can you make a decorator that can only be applied to fields, not property accessors? I could’ve sworn you could. 
solution: That's an example from [<-LINK->]. Yeah, in this case, I’d like to constrain it so that the decorator can’t be applied toget greeting() {…. 

issue: Not really.. just a light wrapper which sticks arguments into a json, does an ajax request and passes results/error back as a promise. 
solution: 

issue: @brittanyrutherford I think it should be: [<-CODE->] see, this is exactly what TypeScript protects you from over time you learn to trust the compiler - if it tells you something's wrong, it probably is (with some exceptions when dealing with 3rd party types) 
solution: 

issue: Actually would you still suggest to use enum? I feel like keeping it as it is not part of JS 
solution: Yeah, string literal union types. i.e. just strings.I try to “sell” TypeScript as “Just JS with Type". 

issue: This fails if I want to test if an obj is instanceof an abstract class... anyone got an idea?function assertInstanceOf<T>(what: { new(...args: any[]): T }, ...objs: T[]) And you can't iterate over States at runtime... 
solution: 

issue: unional: Shouldn't be a problem, just add the new members at the end... if you foresee it happening a lot, set the members explicitly to avoid confusion. kellytk: Why are you declaring marketConditions$ as a function if you're only calling it once? kellytk: In general, I'd use lambdas instead of declaring a function you're only going to use once. tradeRequest$ can be simplified withconst v = inventory.filter(car => car.priceRange == PriceRange.Low).map(car => new TradeRequest(car)) 
solution: 

issue: Hello, is [<-CODE->] equal to [<-CODE->] ? I have an error on the second but not on the first. idchlife: Thanks I will check what typecasting is. 
solution: 

issue: M-Pixel:  [<-LINK->] new thing. Maybe will be useful GreenMonkeyBoy: First you are typecasting. Second you say: hero should be this type. But apparently in the second line your value does not meat requirenments for type 
solution: 

issue: Guys if you will make it works please mention me. I'll gladly to know this solution too, for future. unional: the problem he has that he want to use library like [<-CODE->] But main and types are needed indeed. The questions tho remains: will it be usable if sources and types and dist will be in the same root folder of library and npm package? 
solution: will it be usable if sources and types and dist will be in the same root folder of library and npm package?I don’t think it matters. When you import, your code is resolving based on resolution strategy. And it resolves to js/ts depends on what’s available.. 

issue: Hey and what if just source dir and dist dir in this case will be at the same place? Like root dir. For the sake of usage. just npm post install will build those files and that's all why not, lol 
solution: 

issue:  [<-CODE->] Still getting the "Namespace ... has no exported member ..." errors, but the exported members are indeed there 
solution: 

issue: Hey how can I override overloaded method?  [<-CODE->] I wanna override this method It occurs error at super.subscribe(observerOrNext < ) [<-CODE->] 
solution: 

issue: what do we assign as the types for callbacks? for example, I have this in mongo.ts: [<-CODE->] and this in server file: [<-CODE->] I am assigning any, to anything that needs a type i think that's wrong for example, should I assign a type to req, res, error, result? 
solution: brittanyrutherford: There are ways to write types for functions.  So in your first example, it depends what type db is, lets just assume for the sake of argument it is DB.  hen you could do:callback: (db: DB) => void. 

issue: how calling this:mdb.connect((db: any) => { 
solution: It's not something generated by typescript. It might look like it because the var is 'db' and the type 'Db', but that's just a coincidence.. 

issue: NaridaL: Unfortunately the Chrome audit will only look at a single page in its current state (so it may report a rule as unused even though that rule is used on a different page) and will also include unused rules from 3rd party libraries (so I can't see any of my own rules that are unused because the angular material unused rules drown them out in noise). brittanyrutherford: @NaridaLSupposedly [<-LINK->] works well in most cases but you will have to wire it into webpack. 
solution: 

issue:  [<-CODE->] Anyone that can tell me why i get a "this is undefined" in my console from this code? 
solution: 

issue: So I have this internal service("Kowari") which basically provides a unified interface to all of the company's data. I'm writing a whole bunch of different web applications that use different parts of Kowari, so I'm writing a package to provide an API that I can drop in to any app. This package needs to know which endpoint to use (dev, prod, staging, etc) on a per-build basis: in the past I've done this by setting the KOWARI_URL variable and then writing '${KOWARI_URL}/route/to/thing' but that doesn't work if the package is in node_modules. Does that make sense at all? 
solution: 

issue: I suspect that this approach is somewhat "relying on globals" with different packages with different responsibilities. If they are reusable it's easier to do in entry file [<-CODE->] Yes you are going to do this every time you build different parts of application but you are tracking your dependencies and aware what they are up to. 
solution: 

issue: Push for [<-ISSUE->] It is hard to write all types in one file, and rely on/// <ref 
solution: 

issue: How do I write the type for a constructor? e.g.  Can I do something like... [<-CODE->] idchlife: How can I type x so it is generic though?  I haveFoo,Bar,Baz, etc.  They all have no-arg constructors.  I have a factory function that returns one of the constructors and I'm trying to write a type for it. 
solution: 

issue: Would setnameas optional param work? 
solution: 

issue: Toxicable: you want to check primitive types or your exact interfaces/classes? Wait a minute... And you want to check this at runtime? How would you even know what you passed as type to generic at runtime? Toxicable: so what exactly do you want? To check if generics do work? It's compile time thingy. Compiler will tell you if you're suddenly passing something that is not desired there I guess you cannot even pass random thing and use generics TS will just tell you that it's not going to work Or... if you want to check returned type well, I'm using VSCode and I have this when hovering mouse (i'm checking return types in generics like this)  [<-LINK->] Toxicable: well it will give you an error compile time, wouldn't it? runtime type checks... well. it's a dead horse 
solution: 

issue: So any ideas why im gettingType 'null' is not assignable to type 'T' [<-CODE->] tried reproducing it in the playground but did not succeed nvm, script null checks :/ Object.keys() is probably what you're after 
solution: 

issue: I am trying to deserialize this thing from json using angular http json().  It looks like this:  [<-CODE->] but the thing is, the links might come in not as an array so I was going to try to .map() over the its keys and if not instanceof Array put that element into an array Can I do that?  Is [key: string]: WikiLink[] basically the same as a map? _links though has no apparent .keys() and no apparent t ype that's why I'm confused In javascriptland it looks like:    Object {  key1: something,  key2: [something, something] } When I do that [key: string] : typeofsomething  in my interface; what is the name for that construct? is that an "index type" ? 
solution: 

issue: ran into an augmentation issue the other day when generating declaration files  [<-CODE->] i assume this issue is logged somewhere since it seems like a fairly common pattern, but just in case it isn't im mentioning it 
solution: 

issue: When would a string union be preferrable over an enum with string member values? Coming in 2.4 [<-ISSUE->] 
solution: 

issue: npm installtypescript@nextwill install the latest 2.4 build, not sure if it will have the feature or not. kellytk: 
solution: 

issue: Hey guys, I have a little issue .if i have this class [<-CODE->]  [<-CODE->] I could use it like that yes, however, for my situation it needs to be able to work without defining the generic type Since it’s an API that needs to be backwards combatible 
solution: 

issue: Hello, guys. I'm struggling to make a declaration file fornode-tapwhere export could be simplified toexports = new A(); exports.A = A; I'm pretty sure this is a common issue. Could someone point me to the correct way of declaration merging to achieve this? There is an existing declaration file ( [<-ISSUE->] ), but theTestit exposed is a field and is not a type. I've asked a question on SO here ( [<-LINK->] ) 
solution: 

issue: polkovnikov-ph: Does this work? 
solution: There might be a better way to do it, I'm not a TS expert :). 

issue: from 4/23 @ryanbas21 : > can anyone help me with a react/typescript bug I have. I'm exporting a redux connected component, and importing it into my router. <MyComponent> is not assignable to type 'IntrinsicAttributes & IntrinsicClassAttributes<Route> & Readonly<{ children?: ReactNode; }> & Rea...'. Type 'i'm sort of resurrecting the dead with this, but was wondering if anybody had any ideas, as there weren't any answers and i'm hitting the same issue now  [<-LINK->] the component i had was a bit more complex and not using React.Component<any,any> but i figured this was a simple an example I could make of what I'm seeing  [<-CODE->] running typescript 2.3.2 as well and using webpack for the build if that helps NaridaL: thanks by the way; been banging against this for awhile now. fwiw,<Route path="/" component={ foo } />will work, just not connectedFoo 
solution: 

issue: hi guys I have a question, not directly related to TS is material design the same as materialize? 
solution: AFAIK material design is a design and materialize is an implementation of that design.. 

issue: is there a group here to review code? like a channel where I can post a project on github and they can tell me what I need to fix? 
solution: Don’t know.. gd night@unional. . 

issue: pantonis: there a "noUnusedVars" thing on  the tsconfig, but it is not turned on by defaultI mean, these features end up turned off by default because when they are added they dont want to change the compiler previous behavior unless you explicitly tell it so before no unused vars got implements ppl used tslint for that implemented* 
solution: 

issue: IDE doesn't? Or are you running tsc on the command line? 
solution: NaridaL: command-line approach. 

issue: Hey - writing a declaration file for a library that uses HTMLElements, how do I import that type into my declaration file? Tried:import {HTMLElement} from 'lib', since it lives in lib.d.ts as far as I can tell but there's no corresponding@types/lib and it can't find the type as written 
solution: Well, there are no DOM elements in node.. 

issue: Quick question. I'm experimenting with thecreate*api for Typescript and I can't find acreateInterfaceDeclaration. is there an alternative? I'm checking in before I open a Issue and a Pull Request. 
solution: 

issue: tslint is giving me this error on a d.Ts fileFile has only 1 module declaration — write it as an external module.  [<-LINK->] File has only 1 module declaration - write it as an external module wut? what does it mean I works but ts lint seems to want me to be less verbose its not an error read the message the module has only 1 declare module statement,  it seems tslint doesnt like this regardless 
solution: 

issue: tslint is nagging me 
solution: [tslint] Identifier 'lArcFlag' is never reassigned; use 'const' instead of 'let'. (prefer-const). 

issue: anyone got an opinion on this? [<-ISSUE->] tsc (inside a webpack loader) should respect files on the webpack exclude matches 
solution: 

issue: afaik outputting to the same dir isn't recommended anyways... is there an issue with outDir? dtabuenc: But then tsc will complain when you use symbols which are defined in js files? ( with no allowJS) 
solution: NaridaL: I don't think allowJS changes how typescript interacts with JS in terms of symbols. so if you are using webpack or something else that handles the output of the files, then it is not necessary. 

issue: I guess that makes sense from a "does it satisfy the requirements" standpoint, my mindset is stuck in nomial typed languages 
solution: dtabuenc: Yeah, it was a (bad) joke. I can't think of an occasion where you'd have anameprop which wasnt a string.. 

issue: The advantage is if your library will be used through script tag directly.If you expect all your consumer uses CJS/ESM to load your library, then you don’t need to do bundling. 
solution: 

issue: once you start using the code in a browser context the bundling benefits become much more significant. 
solution: 

issue: istypesa peer directory totsconfig.json? 
solution: hopefully it was just that. 

issue:  [<-CODE->] Shouldn't it benumber | boolean? 
solution: I mean, there's probably an issue that explains in depth why this makes sense, but googling "typescript binary expression type" didn't go anywhere XD. Yeah, but aren't there also other things which ts marks as incorrect altough it works in JS?. 

issue: What is not the correct way? probably an issue that explains in depth why this makes sense  [<-LINK->] 
solution: 

issue: Hi there! I am trying to capture the generic type parameter of a method parameter. However, the type seems to be lost once I use it in a union type: [<-CODE->]  [<-CODE->] NaridaL: Yes :-/ This was a simplified demo. In my case in need theA 
solution: 

issue:  [<-CODE->] Is there an issue with doing that? 
solution: 

issue: Hello, small question. Do you use 'readonly' or 'get' properties in your code ? [<-CODE->] I understand that. The main part is that readonly is read-write at runtime cause JS doens't have such thing. romanroe: If there was a shorthand for get property I would prefer it instead:   get x: string; 
solution: 

issue: romanroe: Maybe this is what you are saying but it appearstscis not inferringT1correctly.  It works if you dotest<number, Sub<number>, string>(new Sub(1), "a"); NN---: That is whatreadonlyis for.  You can't shorthandgetbecause it is meant to be used for more complex returns,  for example: [<-CODE->] NN---: Nevermind, I didn't read all your comments, I see your problem now. romanroe: Just change your test function to be: [<-CODE->] 
solution: 

issue: How would I look up a Foo using a "Foo.Bak" string from the JSON? I use the enum like:this.foos = [Foo.Bar, Foo.Bak];and I would like to be able to use "Foo.Bar" as a key in the JSON file.  Does that make sense? 
solution: 

issue: in a react typescript project and i'm trying to avoid some really long import paths that keep occurring several folders deep to get some really common types.is it best practice to just create a global type I.Edeclare global {type: xxxx}or is there any reason i should avoid this? 
solution: 

issue: Do you know why the error "Cannot find name 'global'" is generated? 
solution: 

issue: Hi everybody! I'mimporting a local node module, which I copied into thenode_modulesdirectory but the TS compiler (service) says it can't find the module. Why could  that be? NaridaL: The imported module is all written in TypeScript. 
solution: NaridaL: mode isnodeyes,traceResolutionis set intsconfig.jsonbut the error message from the TS service doesn't change.. 

issue: Ok, so I'm trying to import [<-LINK->] .  The [<-LINK->] is fairly small.  If I import withimport deepEqual = require('deep-equal')then I get an errorImport assignment cannot be used when targeting ECMAScript 2015 modules.If I import with any other syntax (e.g.import * as deepEqual from 'deep-equal') then I get the error Module'"/home/pace/workspace/cygnet-thin-ui/node_modules/@types/deep-equal/index"' resolves to a non-module entity and cannot be imported using this construct. Can I use this module while targetting ECMAScript 2015? NaridaL: Right, I haveES5which I thought was a superset of all the other types 
solution: 

issue: The issue withdeep-equalis tracked. Search "Namespace hack" 
solution: 

issue: Hi all, I'm using jest and ts-jest trying to run some tests. VS Code is complaining that it can't find my custom type declarations that exist in my src folder. It seems to work if I add my tests folder to "include" in tsconfig.json, but I don't want my tests to get included in the build 
solution: 

issue: Does having an IDE-tsconfig also work if I have multiple module/repos in my workspace and I want declaration lookups etc to work correctly? (@unional) 
solution: 

issue:  [<-CODE->] I can use the!operator, but I really don't understand why? 
solution: 

issue: Hey - I'm using a module whose .d.ts file is inaccurate, I'm trying to fix this locally but having trouble matching it to: [<-LINK->] The defs are here: [<-LINK->] And I'm trying to augment its TestController interface To provide an overload ala: [<-CODE->] But when I do this, it ends up using my declaration INSTEAD of the provided one, that is to say, TestControlleronlyhas my overload and loses all of the original declaration Is there something I'm missing regarding this or is it not supported? 
solution: 

issue: have you tried explicitly imoprting it by adding a //ref or an import in the patch? can you paste some example calls youre doing Im testing it^^ 
solution: 

issue: And if I need to patch any existing declarations, I really just need to reverse engineer it however they did it So, if this testcafe library properly used export interface TestController {} ... my patch would do the same? That's the part that's still a bit of voodoo magic to me, fixing others' declarations Because of the node module resolution stuff, it is tricky to track down 
solution: afaik if it was doing that, your original patch was correct. 

issue: I’m not sure if this is possible but wondering if anyone knows:  What i am trying to do reexport a namespaced export with an additonal typing [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->] What am I missing here. 
solution: 

issue: Hi everyone! I'm developing a node module locally and usednpm linkto install it as a dependency in a project. Whenimporting a *.ts file from the linked node module from within the project, I get the errorYou should not need to recompile .ts files in node_modules.. I also followed the given link to the github issue and read it, but I'm not sure how to solve this. Does this mean I have to compile my node module locally to JS first so I can use it in my project? NaridaL: So it's generally not recommended to publishtsfiles only but provide compiledjsandd.tsfiles? 
solution: 

issue: Hi everybody! I'm trying to add types viatypeRootsandtypesin thetsconfig.jsonfile but it's not working as I expect. I want to still use types from@typesbut I want to add another module innode_modules. Someone knows how I would do that? I tried this, but it seems it has not the desired effect: [<-CODE->] 
solution: 

issue: Line [<-LINK->] generates a type error, theColorsNamesreturn type ofgenerateColorsNamesis not making its way through forcombineLatestto wrap in an observable.@NaridaLshowed me theassyntax recently to type assert but what would the angle bracket syntax look like?  I've tried prepending "<ColorsNames>" tothis.generateColorsNames.bind(this))to no avail Do I comprehend that correctly that the arrow function notation in the type assertion is the function type being described? 
solution: 

issue: Yes, I would suggest don’t over stress about it, unless you have profile it. If you keep your class small, following SRP, in most case you won’t have an issue on that anyway@ShanonJackson I don't think that changes anything. Are they concern about the definition of those functions (memory cost, which is the same) or the binding cost (which is likely not significant compare to the frequency of that class to be initiated). The overall design would play a much bigger impact. Remember this: your primary value as an engineer is to make the code maintainable. Secondary value is making it work. Others are much down the line Correction:definition of those functionsdeclaration of those arrow functions 
solution: 

issue: hello. I have the following errorTS7016: Could not find a declaration file for module 'url'.the strange thing is I get this error only on Windows and only when using webpack with at-loader. if I run tsc directly, the error doesn't occur. anyone have tips on how I can debug this? 
solution: 

issue: Hey guys, is there any chance to fix playground  error tooltip in Safari? :( as of now - its empty gray box in Safari 10.1.1 
solution: 

issue: hello is this not supposed to generate a type error?: interface X { test: number; }const a: Partial<X> = '5'; 
solution: FredrikNoren: '5' is an object. You can do '5'.toUpperCase(). 

issue: radixidchlife: you can consider thatfunction () {... }is just syntactic shorthand forfunction (_: T1, _: T2) {...}when the function type accepts arguments radixin other words, you're not missing any type-safety with this feature, since the body {..} is not actually using those parameters anyway 
solution: 

issue: Does your IDE not auto import stuff? 
solution: 

issue: Anyone can help me about this? some projects have acustom-typings.d.tsinside thesrcfolder, i have it on some angular projects, but i'm still unable to determine when or how typescript compiler and sometimes VSCode pick it's content by itself, i want to do the same for a React project but it just doesn't get picked by VSCode, help? 
solution: 

issue: hi, what about combine files for UMD modules? 
solution: NaridaL: but for AMD i can use ts. Do you catch?. 

issue: felher: yes, that's a public method. It returns the type of object from someValue, TypeScript determines this by type inference. In your editor, you may be able to hover over the method name and see the type information 
solution: 

issue: I need help Probably very simple, but I have no idea There’s this modulecli-tableI want to use but it doesn’t have a declaration file what do I do? how do I write one? where do I put it? tyyy I’ve only found pages on how to write declaration files for you own module, but this is not the case Thanks@unional! 
solution: 

issue: Error:(43, 33) TS2349:Cannot invoke an expression whose type lacks a call signature. Type '((coords: any) => any) | ((coords: { x: number; y: number; }) => any) | ((coords: any) => number)' has no compatible call signatures.Am I missing something...?  [<-CODE->]  [<-LINK->] No I'm actually calling o.method() where o is A | B | C 
solution: 

issue: Any Idea why  a strict compiler setting will complain about document possibly being null even though i asserted it that its not? [<-CODE->] 
solution: 

issue: In this code: [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Just starting work on my first ever TypeScript PR. I'm looking for resources I can read up on to help me get started. Any suggestions? 
solution: 

issue: @kamranayubremember JSX gets translated to vanilla JS, React.createElement()i undestend you, but JS not have generics =) and instansing will make in react engine, i only pass constructor for engine =) kamranayub: in version 2.2 it is properly understood 
solution: 

issue: hmm how do I get that to format correctly?  [<-CODE->] sweet that's with nodemon --debug --inspect dist/server.js never mind :) it started working for some reason Thank you for the help, Adrian 
solution: it works with both react components and html elements afaik. 

issue: dtweedle: Made some good progress. I think this is more a react problem I'm just trying to get a value from within an element (NavLink) and I'm not having much luck. To set the value? Does that work with all elements? If it does I feel dumb. 
solution: 

issue: Is there any reason why a file that is successfully compiled and imported not execute appropriately? I have a config/passport.ts file that contains the following:```  [<-CODE->] Importing it asimport * as passportConfig from "../config/passport";does not extend passport to contain those methods no error is thrown indicating the import was unsuccessful. How should I debug this? 
solution: passport.serializeUser is not called unless I put the definition in the file (as opposed to importing the file that contains the extensions). 

issue: If the entire dts is for express-session, why are only part of the declarations in the declare module '' part? jacobus-brogly: oh man  that dts... XD not sure why it's exporting both globals and modules... anywayss  [<-LINK->] works with: [<-CODE->] 
solution: 

issue: Looks like I can't use TypeScript / ES6 style imports if I want target ES2015+ on node 6.9. Is there a newer version of Node that does understand 2015+ imports? 
solution: 

issue: why isn't this inferring the tuple[string, number]but(string | number)[]? [<-CODE->] does tuples must always be specified as such ? 
solution: ghetolay: yeah basically. 

issue: Hmm.  I'm having an odd issue with a decorator. The decorator is pretty simple:  [<-CODE->] And when used like: [<-CODE->] It generates:  [<-CODE->] The import forjlooks correct, and that method seems to exist But the problem only arises in minified files But I'm also a bit surprised that it just inlines it like that 
solution: 

issue: got somewhat big project, language service keeps dieing and i have to restart VS code ;( 
solution: 

issue: radixHey all, is there any documentation that might elucidate how refinement interacts with closures? (e.g. checking that a string|undefined is actually a string, withif (s !== undefined) {...}) radixI'm struggling a bit in some React code that's checking a prop for being undefined, and then using that prop in an onClick handler radixI'm not sure if "refinement" is the right word for that either radixhere's my code that won't compile: [<-LINK->] - the error is in the use ofscenein the call toonAddToScene radixit's saying thatscene, which isstring|undefined, can't be passed to onAddToScene, which expects astring... but as you can see I'm checking that it's notundefinedahead of that radixand I suspect it has something to do with the fact that this is inside a closure 
solution: 

issue: It is correct. Since it is any, you get any. Can't force it t to shape. Are you looking forT extends Shape? 
solution: I want the second want to behave as the first one. yeah, but If I change the return type, then I'm going to lose intellisense for T when different than any. 

issue: AlgusDark: Where's the issue with the first screenshot you posted? You get intelisense for a.B...? unless you change the return type to just Shape that wont work... But it should be possible to type the upstream stuff. Try inlining the functino  [<-CODE->] and dont you mean withHelpers here? 
solution: 

issue: Is restify a function?  Beware of interop issue. Use require if you are not outputting es6 
solution: 

issue: What would cause the error "TypeError: data[Symbol.iterator] is not a function" to be occasionally generated from the codefor (const item of data) {? NaridaL: Is there a part in specific I should read? 
solution: 

issue: NaridaL: I'm running the 'not Array' logging code now.  It's an uncommon error dealing with how network requests I make are handled NaridaL: I've found the cause and I don't know why it's happening, but in [<-LINK->] you can see the Axios error that makes it through 
solution: 

issue: kellytk: Is it possible that that is actually the "data" and the error is from further upstream, e.g. the server itsefl had a connection error when connecting to the database? felher: in that case "any" is the type of the expression... felher: what IDE are you using? felher: vs code will tell you the type of an expression when you hover over it. webstorm has something similar. Those would be the "best" options If vim offers nothing similar, that would work... Although note [<-CODE->] fehler: if you dolet x: never = expressionyou wil always get an error, even if it is any felher: lol 
solution: 

issue:  [<-CODE->] ais inferred asconst a: (string | number)[]Is there any trick to make it a tuple? :) no inferring  :( 
solution: 

issue: just noticed I am getting this from tsc:error TS2484: Export declaration conflicts with exported declaration of 'IFoo'.` 
solution: yeah@NaridaL, your suggestion fixed it. I am unsure if I understand why -- there is an export right above it. 

issue: ispublic variable?: stringthe same aspublic variable : string | undefined? So I can access string operations on a optinal property? Good to know. This isn't what I want anyways, so I guess I'll go withstring | undefinedinstead ofproperty?. Thanks :) Yeah, I think I got it. Thanks :) NaridaL: nice. I have 2.3--stricton whenever I can anyways 
solution: 

issue: Hey, I'm using this library: [<-LINK->] and it comes with a typescript header file: [<-LINK->] but I can't figure out how to import it properly.  Any ideas?  I've tried various styles of import, but I keep getting errors similar to'.../keycloak-js/dist/keycloak.d.ts' is not a module 
solution: the dts doesnt declare a module, but rather a global namespace. 

issue: kamranayub: can't you just use Pick to chose non-function members? possibly wrap it in a prop-loop to automate for all types you want dunno the details, but should be possible 
solution: 

issue: @jibbers42not sure I understand. How do you use such function? string literal type is a type and will be gone in runtime. I would do something differently. More modular. e.g.  [<-CODE->]  [<-CODE->] These are not the complete code, but you should be able to get the idea. 
solution: 

issue: hello, anyone here using typeorm in production? 
solution: Well in development yes, but my project will be in production I think in about 3-4 months. 

issue: skiabox: why do you need es2015.promise in lib? Wouldn't package.json (--save) be enough? 
solution: 

issue: guys any ideas on the above code? 
solution: I am thinking of disabling tslint rule of expecting to declare a typedef for arrow function parameter. 

issue: NaridaL: it seems likemaybethis feature might help my case? [<-ISSUE->] 
solution: 

issue: Hi!I need help with some advanced types. It's a short helper for reducing boilerplate in redux, but I loose type-safety.I've made a short playground [<-LINK->] and I'm so close to make it work but am now stuck.It's basically just a map over an object, creating functions that know the key they are at, plus type-safe extra parameters.(The idea is from [<-LINK->] ) NaridaL: yes, but the types work only ifthe last examples don't You're a star@NaridaL! Did not expect that to work 
solution: 

issue: Hi all,  I can't  understand this case; [<-LINK->] - typescript playgroundCan someone help me? @NaridaL thanks you!I really want this "input and output types to be same" ;)So typescript don't automatically watch input type if input is union?  Will it support this in future or this is too complicated? 
solution: 

issue:  [<-CODE->]  [<-CODE->] Logs: [<-CODE->]  [<-CODE->] 
solution: 

issue: NaridaL: I was just considering a short hand, to make code more concise. 
solution: HeavyStorm: There isn't anytig like that afaik. I wouldn't consider it good practice anyways.... 

issue: I’m searching around google trying to figure out if there’s a way to tell typescipt to allow anything that is not a type of something is that possible? something like a Union Type, but the inverse 
solution: yes, upon further reflection, you’re right… that doesn’t make sense.... 

issue: NaridaL: , I have the functionprop( [<-LINK->] ) that is used in the implementation of the methodsType.prop( [<-LINK->] ) andProp.prop( [<-LINK->] ).  These methods are used to build the path to inner props like this:type(TypeObject).prop("a").prop("b"). And the compiler checks that the type described by theTypeObjecthas propertyaand the type of the propertyahas the propertyb. But if the propertyais optional (T|undefined), I used to write the path like this:optional(type(TypeObject).prop("a")).prop("b")because I can't implement the functionoptional( [<-LINK->] ) as the method ofTypeandProp. The reason is that I have typeT[K]that is optional. And I need to return the type that is not optional version ofT[K] NaridaL: thanks! 
solution: 

issue: ronzeidman: what are you trying to do? 
solution: ronzeidman: you can type the whole function as returningIterableIterator<Foo>. but theyielditself is not type checked currently. 

issue: I am trying to use therepeatfunction, as described here [<-LINK->] I understand it is part of ES2017...I switched my compiler option to target ES2017, but still I get compilation error "Error:(37, 26) TS2339:Property 'repeat' does not exist on type '"xuz"'. any ideas where the problem is from? 
solution: 

issue:  [<-CODE->] Any way to get around this? It shouldn't error since both types havefilter 
solution: number[] | string[] !=== (number | string)[]. 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: Assuming client.listTags() is async. 

issue: add async before it? 
solution: Haven't worked with immutablejs, but it looks like the outermost map really should be a record. 

issue: How do i setup the "Type" of my parent most object here in my states structure when using ImmutableJS? if theres any Immutable pros out there.Basically this mock setup has at the moment a   Map<string,Map<string,campaign>> and Map<string,Map<string,task>> after iv'e using "fromJS" so its basically a Map<string,Map<string,any>> because i can't have 2 types in that last clause. so i need to change the parent most component to a data structure that allows me to specificy multiple types as my children. [<-LINK->] Record hasn't go enough documentation though for me to work out how to set up a record that allows for mutiple types 
solution: 

issue: Hi, more about devDependencies: [<-ISSUE->] 
solution: 

issue: Any ideas when I publish this to npm [<-LINK->] I get the d.ts files when downloading?  [<-LINK->]  [<-LINK->] 
solution: I also can't import it like so when runningtsc:.  [<-LINK->].  [<-LINK->]. 

issue: can you import other non relative modules? 
solution: having an index.d.ts in the root should actually just work... 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] brilliant! Redeemed :) Thanks man 
solution: 

issue: The BigInteger library has its d.ts file here [<-LINK->] but not sure how to now include this in my project Sincenpm install --save @types/foowont work any ideas how to go about including this in my project? NaridaL: nope...not working out of the box...i should also add that, my IDE sees the types alright, and autocomplete works fine...but the reference error to the BigInteger types only occur when running the tests ReferenceError: bigInt is not defined  [<-CODE->] 'well how are you including the lib in your project?' I do do npm install to install the dependencies then I have this line in my tsonfig"files": ["src","test"] also these: [<-CODE->] in the tsconfig 
solution: 

issue: georgeedwards: If I'm not mistaken, "moment" becomes sort of a type because of the import, not a variable. 
solution: 

issue: Hey everyone! What is your oppinion on naming-conventions for TypeScript classes and interfaces regarding the files and the actual class/interface names itself? Do you name your filesMyName.interface.ts,my-name.interface.js,MyNameInterface.ts,interfaces/MyName.tsetc. - and what about the Interface itself? Do you prepend/appendInterfaceto the name or do you skip it completely? I haven't found a lot of information about best practices and/or (dis)advantages regarding naming conventions for ES2015/TS modules and would love to hear some of your oppinions about this. Thanks a lot for your input! 
solution: 

issue: I'm having problems with parameter hints with tsc 2.3.4 and code 1.13.0. For some parameters, the description I write doesn't show. Sometimes, if I try to use the@param foo {number=123} A foo.syntax it fails to parse once it gets to123, seemingly etc. etc. Not sure whether this is a TypeScript or a VS Code issue but I couldn't find a place to chat about VS Code 
solution: 

issue: What's the difference between [<-CODE->] and [<-CODE->]  [<-CODE->] 
solution: 

issue: Yes, you won't see that MyNamespace outside your module 
solution: 

issue: If I use ES2015.Promise in the "lib" - does this mean I don't need to include the Promise polyfill? Not sure if I'm understanding correctly or if this is just type checking. 
solution: 

issue: Good find@NaridaL.  I'll watch that issue for development What am I missing in the property access at [<-LINK->] 
solution: 

issue: hi all.  i'm not using a library, but i am using its types/interfaces indirectly.  ive installed the types,@types/flux-standard-action, and added/// <reference path="..." />to my file, but types don't show up in VSCode.  tips?  [<-CODE->] ^^ works 
solution: 

issue: yarn is getting a new workspaces feature, I hope VS Code supports them, they aregreat  [<-ISSUE->] seeks to include the Lerna workflow in the structure, I think major changes that may require changes in VS Code and TS are the way the node_modules are located "If workspaces is enabled and yarn install is run at the root level of jest Yarn would install dependencies as if the package.json contained all the dependencies of all the package.json files combined, i.e."  [<-LINK->] 
solution: 

issue: Is there any GH issue open that would allow the type checker to catch this error: [<-CODE->] 
solution: 

issue: Hey guys, what is actual latest TS stable version? GH releases say that it is 2.3.4 and 2.4 is in RC, but npm / yarn registries says that 2.4.0 is stable since June 12 ah, gh is also having 2.4, but without notes. my bad 
solution: 

issue:  [<-CODE->] ``` decorators don't like arrow function  as class members is there a way around it? 
solution: then you need to omit the@. 

issue: Decorators only work on function declarations i guess  [<-CODE->] maybe that way I don't see why you'd need an arrow function there? 
solution: 

issue: is there any way to hook into tsc -w runs? I want to run a node script every time tsc does a pass (im adding .js file extensions to import decs) 
solution: https://www.npmjs.com/package/concurrently. and analyze it and figure when its about new changes. no, that's a function call..., but you'd need to remove the @. 

issue: Hi guys, do anyone know if I can declare decorator on a protected abstract accessor in my base class? And when I declare it, is it inhereited? 
solution: 

issue: con-ssc: thx but does that re-run the && (command) when tsc -w reruns? 
solution: 

issue: hi @NaridaL, i don't fully understand your question back at mehere's some code that explains what im trying to do [<-CODE->] 
solution: 

issue: just giving TS 2.4 a bash and wondering why this from my@angular/routerusage fails now :)I'm using the events property from here: [<-LINK->]  [<-CODE->]  [<-CODE->] I think it's not understanding the instanceof filter? The event type is a union of: [<-CODE->] 
solution: 

issue: suppose i have a json file with entries like this { "a" : jim ,"b":"john","c":"Jason"} i want to return jim what do i do? it is not exactly a json file . it is a string array 
solution: transform(values, args:string[]) : any {let keys = [];for (let value in values) {keys.push(value);}return keys[0];}. 

issue: Usage of typings for react redux' connect decoratorTypescript with react redux is hard! Making it work with the correct typings is even harder!For a long time I ignored the @connect() error, if someone knows the correct type defiinitions for @connect  please share. [<-CODE->]  [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] thanks 
solution: 

issue: why am I getting an error "Cannot find name 'result'" even though I setresultin all branches? [<-CODE->] 
solution: 

issue: anyone know what the exact semantics are? Or what to google? "javasript method call when is this bound" isn't returning anything helpful? [<-CODE->] my issue is that the 2nd example behaves like the first, but with the usual brackets  semantics I'd expect it to behave like the third example and I do mean 'doesn't work, as expected', and not 'doesn't work as expected' 
solution: 

issue: I think it's becausethisis undefined when it's assigned to a method like that--it loses its context you're just literally assigning the function definition to a variable, so when you call it naked like that it has no bound context JS is fun! :D 
solution: 

issue: I want to build single file with respect to a project root. like [<-CODE->] or [<-CODE->] but it no work! using vscode to setup a quick compile for a preLanchTask source base is huge so build whole thing evertime takes ages any help? 
solution: justin-romano: you probably want the --rootDir option, not baseUrl. That will also compile any files imported / referred to by the file you want to compile, which is necessary as TS needs to know about the types you are using in my.ts. For faster compilation, put tsc in watch mode.. 

issue: anyone managed to use sqlite in an aurelia app? i'm getting a list of dependencies that are not loaded notsonotso: please leave.. 
solution: 

issue: it seems to me this shouldn't be valid, but it is: [<-LINK->] 
solution: 

issue: Lareolan: I've actually done this before. And webpack was still showing me the paths missing. To solve, i had to use both thepathsfrom typescript as well as babel-plugin-module-resolver. Then setup my .babelrc similar to the paths in tsconfig tsconfig: [<-CODE->] babelrc: [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->] 
solution: 

issue: Are there any decent strategies for keeping clean import paths in Typescript like using alias in webpack? 
solution: you can add "paths" in the tsconfig which behaves similarly, check the docs. I hear ya.. but I really really really really hate writing things like ../../../../utils/theDastardlyFile.ts. 

issue: Hi! I have found this code snippet,  but can't seem to find any documentation regarding this feature: [<-CODE->]  [<-CODE->] 
solution: 

issue: so when transpiled it will be something like this?control.validator ? control.validator : undefined? so transpiling[control.validator !, dir.validator]will output[control.validator, dir.validator]? 
solution: 

issue: so we are using jsdoc typescript parsing. Is there a way to solve the problem where the jsdoc refers to a type as a function parameter that is not being imported into the file? /**@param {Immutable.Map} data -*/export const getMap = (data) => {...}; complains Immutable is unknown, but I can't do import {Map} from 'immutable';  since the code doesn't actually use Map 
solution: 

issue: aaronbeall: It's still stage 2 ES proposal. The last time I checked they were discussing static initialisers execution order and how that will affect the decorators. Use at your own risk 
solution: 

issue: aaronbeall: Angular is also using a lot of polyfills as fallbacks, so I'm sure the code will keep working while they make the "under the hood" modifications to make it compatible with whatever changes the final release of decorators will have. A simple (I think) question. [<-CODE->]  [<-CODE->] But I want it to change 
solution: 

issue: How? I'm very new to decorators What doc?My only introduction to decorators so far has been Angular, and only in what parameters they take, not how to create new ones. OK, I'll go check those out. Thanks. 
solution: 

issue: Hi all, There is a bug about sessionStorage api,  sessionStorage can not share between browser tab even if these tab is belong to same domain 
solution: 

issue: Probably just because it is not typed. If it is internal, it should be included in@types/node 
solution: 

issue: OK, another question - say I have a class, with typeTpassed in as a generic type parameter. Is there a way to say 'I promise that this class will have all the properties inTat runtime'? (Oh, andTis an interface in this case) Ooh... right I've realized that mixins are probably a bit too janky for my use case anyway Right now I'm working on the above issue - I feel like index signatures are what I want, but it doesn't seem like they have good support on classes OK, thanks! I don't see how this answers my second question though 
solution: 

issue: right but if I do Foo.create({}) I wouldn't have them anyway?  [<-ISSUE->] rel issue 
solution: 

issue: wimbarelds: do you have "lib": ["dom"] in your tsconfig? 
solution: can you find the corresponding part of the transpiled output for the last bit of code you posted?. 

issue: function definition    NavigationComponent.prototype.handleArrowKeyPress = function (event) {        var $event = event;and futher downNavigationComponent.propDecorators = {( ...  ) 'handleArrowKeyPress': [{ type: core_2.HostListener, args: ['document:keydown.ArrowRight', ['$event'],] }, { type: core_2.HostListener, args: ['document:keydown.ArrowLeft', ['$event'],] },], It would make sense for the server to not understand KeyboardEvent, butI dont really understand how the annotation ends up causing it to break 
solution: 

issue: Has anyone been successful using "mixins"  to replicate "partial class" concept in Angular?  My file is huge and I want to split it just like partial classes in C# do. 
solution: 

issue:  [<-LINK->] anybody tell me what is wrong here my interface is like  [<-LINK->] and the code is throwing error  in lines:private inboxContent: IInbox[]; and also when used like :this.inboxContent.push(..._res); please help me what is wrong in these lines 
solution: 

issue: I've got on 2.4.1 : [<-CODE->] with no errors have you updated rxjs to the latest version? 
solution: 

issue: try shoving those functions into a class as methods instead. I was on the latest rxjs. (have now rolled back, but I can reinstall if you can't make a repro) 
solution: 

issue: do the transformation functions have to hae type T->T or can they change the type? docs dont really make that clear 
solution: 

issue: Moment is a library worth using, I would say. Oftentimes you want to avoid dependencies. But no one should ever write date and time manipulation crap. Use something well-tested, like Moment. Because time and date is quite a hard problem actually and you will screw it up. Yes, but actually do research or you'll end up doing three rewrites in the space of a week because you chose the wrong library twice. Like me. 
solution: 

issue: thanks fols, unfortunately momejs is not what I am after; i use syncfusion and their formats are different.  from what i can see i need to use globalize.  Has anyone used this? 
solution: 

issue: Why should it matter what other files are in the project? It will just work for files that are.tspresumably? 
solution: 

issue:  [<-LINK->] Hey all! I'm trying to write an async/await function to return a tuple consisting of a salt and an encrypted password. I have two questions:Am I using promises correctly here? 
solution: 

issue: [string, number] is basically the same as {0: string 1: number} and typechecks accordingly 
solution: 

issue: sustained: it does make sense that Promise.resolve does return a promise. It is just a promise whichwillresolve instantly. This is needed for cases where you have a function which is supposed to return a promise but doesnt really have to do async work in some edge case. So you can just return a promise which will resolve but still is one. (The same is done with Promise.reject in case of an error). Another use of the Promise.resolve would be to just initiate an empty promise to start a chain. For this it also has to return a promise raulk: sidenote: returning a normal value from a function declared as async would still return a promise  [<-CODE->] Totally legit :D @raulk I just made a test and it looks like this may also be your problem. [<-CODE->] Raises an error while [<-CODE->] works 
solution: 

issue: I'm attempting to migrate a Revealing Module Pattern to TypeScript namespaces; are there any decent resources to explain? con-ssc: this was my starting explanation: [<-LINK->] although I'm starting to wonder if what I'm after just isn't the 'done' thing! 
solution: 

issue: Can anyone help me in getting a config object working? I'm trying to usedotenvso that I can haz env vars in my.envfile No one seemed to be here@NaridaL I want to set up a config object for a simple twitter bot using the twit node package So, I have a.envfile with my keys in there and I have aconfig.tsfile set up like so: [<-CODE->] I want to use the keys from that in abot.tsfile  [<-CODE->] I get an error fromtwitsaying that it needs the keys although they are in theconfigvar I'f I do a console log I can see the keys output 
solution: 

issue: mreis1:  [<-ISSUE->] also you can shorten the above in js to foo = a && a.b && a.b.c  [<-ISSUE->] this issue seems similar@joostverdoorn 
solution: yeah only workaround I see is to  cast to any^^. 

issue: Hi there! I'm running into an issue which can best be explained by the following code: [<-CODE->]  [<-CODE->] also doesn't work when using a switch-case: [<-CODE->] NaridaL: unfortunately not. My use case is somewhat like the following: [<-CODE->] return doThingsToGetX();outputs an error because of the issue detailed above Type 'Result<"X">' is not assignable to type 'Result<A>'. Types of property 'result' are incompatible. Type '"X"' is not assignable to type 'A'.to be precise 
solution: 

issue: Why is this considered null with the "strictNullChecks": true, in the json config file?If I use type assertion on simon it works [<-CODE->] 
solution: 

issue: I can't get SVG<animateTransform>to work in a TSX file, it says its not part ofJSX.IntrinsicElements NaridaL: How exactly do I "add it myself"?  [<-CODE->] 
solution: 

issue: Hi guys, is there a way to convert my path mapping into relative paths:import {} from 'shared/date-util'==>import {} from '../../shared/date-util'? 
solution: I have used the paths option in tsconfig to define the 'shared' path relative to the baseUrl, but in d.ts file that are generated the paths aren't replaced by relative paths. NaridaL: correct, when bundling the js files with webpack I have already configured the same paths. So that works. But how do I treat thed.tsfiles?. 

issue: Hi anyone has worked on JSONP here? 
solution: 

issue: Hey everyone! I got a class with twoasyncmethods. One works well but for the other method, the TypeScript compiler throws the errorTS2304:Cannot find name 'await'.when using theawaitkeyword. I don't understand why this would work for one method, but not for the other. Oh, nevermind; found the issue. All working as it should. :) 
solution: 

issue:  [<-CODE->] Larger example / use case is something like this: [<-CODE->]  [<-CODE->] Now I found myself doing things like this: [<-CODE->]  [<-CODE->] 
solution: 

issue: Im trying to do alet wtv = document.getElementsByClassName('business-loading-bar');but complains about HTMLCollectionOf have tried this [<-LINK->] but no success 
solution: 

issue: I'm having issues with react-router-dom and typescript if anyone can help me with this issue export default withRouter(connect(    mapStateToProps)(Detail));Typescript is throwing an error that prevents me from injecting the component to my Routes never mind, figured the issue out 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] ? 
solution: 

issue: one idea: you can use few starting points like main-chrome.ts, main-firefox.ts and then run many builds with different starting files. Inside you pass configuration using dependency injection using just TS. 
solution: 

issue: Hello, I tried to make a Singleton using generics, I was able to implement it by passing the type to the get function: [<-CODE->] But the following does not work: [<-CODE->] If I would try it with just T it says it cannot create a new instance. Is there a way to implement this? Yeah I figured after trying that 
solution: 

issue: Hi there! Are there any papers about compiler internals, how to debug it or log the typechecker's work for example? I need to fix the problem described here: [<-ISSUE->] by myself, because the project in which the error occures is closed source and I can't reproduce it within the smaller project jauco: try this: [<-CODE->] 
solution: 

issue: Hello! I just have a quick question. Ever since upgrading to typescript 2.4.1, I am getting a strange "implicit any"-Error. [<-CODE->] Am I missing something here perhaps?  [<-LINK->] This is why I am confused Is that a bug? In TypeScript 2.3 it worked just fine, and I do not want "x: any" in my code Using any would, IMO, totally defy one of the core reasons of using typescript  [<-LINK->] No, it isn't Ah, I found the problem. Seems that I updated PouchDB dependencies which then caused an error somewhere completely else 
solution: 

issue: wkrueger: actually,col.onClickcan be undefined sincecol.onClick ? ..., isn't? wz2b: that's weird, there is noclearAllfunction atArrayprototype. to clear an array, you should doarray = []. 
solution: 

issue: Actually, there is noclearAllmethod atMapprototype... isclear.@NaridaLlink has other ways to clear an array in js. 
solution: 

issue: AlgusDark: I can't do  arr = [] in this case because I have a reference to an existing array that I don't want to throw away to make a new one.  Unless I made some kind of wrapper object around it like ... if there was some way to make a reference variable or ... something? 
solution: 

issue: Isn't Array.length awritableproperty? can't you do arr.length = 0; ? 
solution: wz2b: So you want to clear your array... but not losing your existing one? I'm a little confused now.. I guess@wz2bwants to clear the array, but keep the reference.. 

issue: I can't resolve this method, I want it to returnReadableStream<T[]>if second parameter is not provided: [<-CODE->] it fails becauselist: T[]is not assignable toUI would like to do [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: doesmapper?: ...do anything? otherwise just cast itas any amatiasq: something like this?  [<-CODE->] if overload the signatures, the last one will actually be ignored... so using any there is generally fine but this works without it 
solution: 

issue: Can you ignore all node modules folders? [<-CODE->] 
solution: 

issue: (reposting) Hi, I have@typesfor threejs, which is not in es6 module format. Threejs also has a build version thatisin es6 module format, which I am using. Is there anyway I can use the typings for the non-module threejs with threejs's module build? The export structure of three.module.js is the same as the namespace structure created by the threejs@types This is a toughy, can't seem to find a way to interpret the docs in anyway that's relevant to this situation 
solution: 

issue: multiple signatures, one for each number of arguments because you're exporting a const which only defines a runtime value, not a type 
solution: 

issue: Premise: I know I'm overdoing it, but I'm experimenting./main.ts [<-CODE->] /routes.ts [<-CODE->] /routes/sale.route.ts [<-CODE->] Why I'm getting that error? I supposed that the const was the problem how do I fix it? 
solution: that works, thanks@NaridaL, it's a bit overly verbose now though, it already was tbh. 

issue: Is there a good convention for export names when exporting the class vs exporting the instance? i.e: [<-CODE->] 
solution: 

issue: hello! a question if you dont mind: how do I import a type from an external library and patch the type with another name ? 
solution: So you want to  augment an interface?. 

issue:  [<-CODE->] Isn't there a short hand for that?if I try [<-CODE->]  [<-CODE->] Well it doesn't work with bind either just tried 
solution: but isn't bind bad to use?. 

issue: anyone facing this issue? [<-CODE->] 
solution: 

issue: Hi guys! Could anybody help me? I'm trying to write declaration for module that does not have it. I have this documentation reference [<-LINK->] and this module [<-LINK->] I need a declaration because I have to use TS because of project requirements but can't figure out what type of template could fit for my case NaridaL: yes, sir. And I'm slightly confused - it could be 'global' or 'module-class' type NaridaL: i don't think so, my guess it is CommonJS module NaridaL:  [<-LINK->] 
solution: then the callbar(new KEventAudio())would be valid according to bar's signature, but at runtime it would error because foo expects a KEventVideo. 

issue: Given a constructornew (SOME ARGS) => T,  is there any way within the type system to convert this to(THOSE SAME ARGS) => T? That is, take a constructor function and map it to a standard non-constructor function with the same args. NaridaL: Thanks, yeah okay, I guess that's the best I can do.  I feels a little hacky, but variadic functions are on the roadmap so hopefully it will be temporary. 
solution: 

issue:  [<-LINK->] does that work? 
solution: and this will probably fix it [<-ISSUE->]. you dont need to clone it... filter returns a copy. 

issue: babeal: due to how JS works, classes (not only the instances of those classes) need to be assignable to their parents hmm actually, thats not necessarily due to JS but still by design [<-ISSUE->] 
solution: 

issue: Anyone having issues with latest VSCode update today? Mine freezing every time since i updated today. 
solution: 

issue:  [<-CODE->]  [<-CODE->] Couldn't that just be: [<-CODE->] ? 
solution: 

issue: hey guys, is there any way how to constraint generic type only to enums? but I need to pass whole enum to a function, not only value of this enum 
solution: 

issue: hey guys, is there any way how to specify return type of this function? I think that 'any' is too weak, but I can't figure how to correctly write return type for it [<-CODE->] 
solution: 

issue: Can someone please clear up for me when the declare keyword is actually needed in a declarations file? Seems so often in the typings I look through it is either totally omitted or spammed on every line. Documentation isn't getting me any closer to an answer. 
solution: 

issue: Sorry for being dense, but what am i missing??? I'm trying to targetes6, module typecommonjs....  compiles fine, but i getReferenceError: exports is not defined... everything i see says to remove the module declaration in the tsoptions file, but a) that seems wrong, and b) with it removed node complains withSyntaxError: Unexpected token import. I swear I had a very simpleimportworking previously, but now it's... not... 
solution: 

issue: Is there an issue already tracking discrimination of unions based on missing properties? limpep: You need two strings with which to index the nested map (i.e._invoice_map.get(foo).get(bar)), and you'll obtain anInvoice[]as a result I don't know what kind ofMapthat is, the builtin [<-CODE->] type supportsgetandset It looks like yourMapis just an object after all, not actually aMap limpep: Yeah, that's just a regular JSON-deserialized object. You can't send aMapover the wire. 
solution: 

issue: Hey, why can you write thisconst myNumber: number = 3but have to write thisconst myElement = <HTMLElement> document.querySelector('#myElement')? I'm new to TypeScript and wondering why it couldn't also be like thisconst myElement: HTMLElement = document.querySelector() That would be my next question :D 
solution: 

issue: because of the way querySelector is defined? its not entirely clear what youre asking querySelector returnsElement, which is a superclass of htmlelement, and as such not assignable to it as to why it does that, probably because it can also be used with non-html documents such as SVG if you find yourself using that often, you could write a wrapper function but in most cases you're going to be casting to something more specific such as HTMLDivElement so that's not going to be helpful^^ 
solution: 

issue: hey, guys. question:  why isfoundstillProducto | undefinedat this point?  [<-LINK->] I'm getting the error that is possible undefined ok but then:  [<-CODE->] 
solution: 

issue: jasonboggess: looking at your SO question, you're running a single file with mocha/ts-node you're not including the actual lib youre testing anywhere 
solution: 

issue: what's the script your are loading? you probably can't load a module as a script does the script you are loading contain thedefineProperty? if so that's probably your issue 
solution: 

issue: hi, why am I getting an error here: [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: can anyone help me with this issue? [<-ISSUE->] gives a really cryptic compiler error See, the issue with these complex issues is that there's hardly anyone that even comprehends them makes it really hard to find help 
solution: 

issue: Is there an intuitive meaning to what you're trying to accomplish Because I'm having trouble wrapping my head around your code Doing justtype HKTof<URIHKTof extends HKTS, A> = URI2HKT<A>[URIHKTof] works but I assume you're trying to get some type of type checking so I can't do  [<-CODE->] type X = HKTof<"Bar", number> I don't think that could work like that 
solution: I mean, the type system itself is turing complete, TypeScript is crazy powerful, but I doubt it'll let me do this. 

issue: can you give me a fiddle with the full example? That's really interesting or just a paste here :) heh, this is all code that you would never ever want a user to write :D it's like read-only stuff write-only, sorry wow, that actually seems to work crazy 
solution: 

issue: Anymore? It's not an union at this pointyetas far as I can understand what I wrote. Yeah 
solution: hmmm. definitely a bug, now the question is if we can trick it to do the right thing. 

issue: I might have tricked it just a sec nope you just can't hand a generic type to an indexer or it breaks lol, I can make it blow up like crazy using this bug generate super nonsense types definitely wrong behavior 
solution: 

issue: what happens if you cast to array? NaridaL: So what's the issue then? if it behaves exactly like arrays, then that's correct behavior tuples are just arrays 
solution: there was an issue on the github, tuples behaving exactly like arrays is intended and will never change. 

issue: Hi MasberAccording to this [<-LINK->] They are almost identical. 
solution: 

issue: doeskeyofnot work in interfaces? and why not?  [<-CODE->] that doesn't work, neither does[k in keyof T]or[k in T] withtypeit works 
solution: 

issue: basically I'm trying to create an interface/type where there's a "magic" prop key, and any other key is something else, e.g., [<-CODE->] but I can't figure out how to do it. 
solution: 

issue: if baseresolver needs those implemented can't declare them as abstract methods in BaseREsolver? 
solution: 

issue: did this all the sudden start happening ? ...if it did, did you implement something in the api recently?  a new endpoint or something? did you create new classes and interfaces and forget to register them in startup.cs ? could be something along those liens lines oh wait, you're not using .net core? 
solution: 

issue: I'm having trouble with union types and promise, can someone check that I am doing it right? [<-LINK->] (sorry can't get the url formatter working) just an example. In my real code sometimes it will return a promise and sometimes it will return a boolean 
solution: 

issue: josh18: whyPromise<boolean> | boolean? Just doPromise<boolean> .then()doesn't exist onboolean, so that's why you get an error what are you trying to do exactly here? 
solution: 

issue: Google doesn't show anyone else having this error.. try reinstalling TS and vs code? also, try asking on the vscode gitter 
solution: I might try that. In the meantime, maybe I'll go back to v0.1.. rickmed: no, you get a "Cannot invoke an expression whose type lacks a call signature" if you try to call a union type. 

issue: Pwornt_twitter: I have it working withawesome-typescript-loader, any reason you can't use it with it instead? Anyone how do i tellawesome-typescript-loaderto ignore thenode_modulesfolder of a git SubModule? that SubModule is fromexpress-graphql, however i had to make changes to it, now i have it compiled and working, but each time i run the build i get this warnings all over the place: [<-CODE->] Btw i put it into the Webpack externals. 
solution: Re-export to extendOften you will need to extend functionality on a module. A common JS pattern is to augment the original object with extensions, similar to how JQuery extensions work. As we’ve mentioned before, modules do not merge like global namespace objects would. The recommended solution is to not mutate the original object, but rather export a new entity that provides the new functionality.. 

issue: What did they mean by this: [<-LINK->] Use undefined. Do not use null. 
solution: I thoughtmyVar = undefinedwas bad practice. also note that those are just the guidelines for working on the TS codebase, they aren't general guidelines. and it's probably for consistency, so some use null while others undefined. 

issue: blocka:  [<-LINK->] maybe related? Kloranthy: the syntax is more comfortable when using getters, but there's no other differences... 
solution: no, lookup index signatures. 

issue: If you run standard js through the typescript compiler, will it cause any problems. I have a project written in js for nodejs, then will it throw errors if some of my code is written in typescript and some is written in js? If this will throw errors when using the compiler, is there a tool to convert javascript into typescript code quickly? I have a nodejs bot written in native js, but I want to start using typescript with the project. Into compiler? So you will not be able to run the compiler until you have fully converted@timothyallan 
solution: 

issue: hey, guys. can someone look at [<-LINK->] and tell me if I should be able to accessunitOfTime.Diff? VS Code is not seeing it 
solution: 

issue: are there any messages from me here today? I swear I was posting earlier but can't find any haha 
solution: 

issue: I can't seem to get typings working with rxjs filter anymore if I do [<-CODE->] everything is fine andbis of typeObservable<string> but how can I get the same behavior with an inline arrow function ? a.filter(v => v !== null)this one don't work must tell him it's ais stringguard amatiasq: oh that's how you define the return type inline thks since I'm using this a lot either on arrays or observable I think I'll go with a type guard [<-CODE->] 
solution: 

issue: amatiasq: there's definitely an issue about that on github 
solution: 

issue: Hello. Question about compiler api and TypeChecker.How can I get type of expression?For example PropertyAccessExpression::expression can points to Parenthesized expression for example. And I have to detect type of this expression for my task. For exaplelet a = { q: 'qq' }; (a).q [<-LINK->] this code is valid.checker.getSymbolAtLocation(node) is not suitable here because there is no symbol here.Is there an api to infer type of exporession? 
solution: 

issue: opinion:Useless returns but flat, possible warnings for function with too much branching [<-CODE->] Block hard to read, no useless returns [<-CODE->] Nested, no useless returns [<-CODE->] they are all equivalent 
solution: 

issue: the TS disable flags aren't working for me :(  [<-LINK->] Any thoughts? I found a work around was getting an error for setting a window func 
solution: 

issue: hey guys! question: why is x of typenulland no longernumber | nullinside the catch there? after the typeguard, it's actually  nownever:  [<-CODE->] x.toString()produces a compile error  [<-LINK->] setstrictNullChecks 
solution: 

issue: what's wrong here ? [<-CODE->] I could do this differently like [<-CODE->]  [<-CODE->] not understanding this one too : [<-CODE->] playground 
solution: 

issue: jaen: custom attributes aren't really allowed for basic elements afaik... could you usedata-styleNameinstead, that would work without modification? 
solution: 

issue: How do I implement this interface?  [<-CODE->] (class) I can't call a class instance then? const x = new Test();x(); I'm spoiled by C++ i thought it was possible somehow I just wanted to avoid calling a method name to retrive a member of the class its a normal class instance with several methods and properties i just wanted to call the instance itself as a function like c++ functors  [<-CODE->] yeah, I thought it was possible :( like c++ functors nevermind... I'll think something else 
solution: 

issue: Anybody that uses/has used ts-node and knows if it has overheads, if it's slower or should not be used for production for any other reason? 
solution: 

issue: hi all, regarding Typescript's module resolution, is there something similar to "modulesDirectories" in webpack? I'm trying to include the "/app" directory in my project's root, so that I can import like "app/actions/my-action" 
solution: 

issue: theatrain: Is that the exact error message? 
solution: 

issue: hello. I'm trying to use some types for a library installed withnpm. I've addedinclude: ["types/*.ts]to my tsconfig and a/// <reference pathin the file where I'm importing the lib. however, typescript complains about not finding a declaration file for the module weird. now it can't find the types for any package. I had omitted to uncommentbaseDirpreviously ok, I found the issue.node_modulesitself shouldn't be intypeRoots. that's what was causing the error 
solution: 

issue: does the dts have "declare module 'hyperapp'" in it? right, that declares a global symbol hyperapp that doesnt work when you use it with the "import from 'hyperapp'" syntax 
solution: LucianU: have a look at [<-LINK->]. 

issue:  [<-CODE->]  [<-CODE->] but when I use it like [<-CODE->]  [<-CODE->] 
solution: 

issue: ghetolay: remove the this, it's find. The error is a bug. Also, on@nextyou don't need to add that typing yourself 
solution: 

issue: Why String enums are not working on playground ? [<-LINK->] 
solution: 

issue: try using a cast? 
solution: I guess it's a better idea. 

issue: Hey folks, the 2.4 release notes talk about a new feature "Strict contravariance for callback parameters" which talks about "callback types" ... but it's not clear to me what a "callback type" is? Anyone have an idea? wkrueger: I get the impression it doesn't just apply to promises though... but I can't seem to trigger the stronger type checking on my code, when providing a parameter that is a function it seems like they're looking for a specific type, but it's not clear what that type is, when they say "callback type" 
solution: 

issue: starting with decorators here. How can  get, say, all of the 'design:type' metadata keys a class has? [<-CODE->] would i have to save the keys manually? 
solution: but that just says it gets the type inference wrong; now it doesn't even compile!. 

issue: Hey, i'm new  in typescript and will use jquery but don't can't fix this [<-CODE->]  [<-CODE->] 
solution: 

issue: i have add "dom" to tsconfig but the Error is still present, any other ideas? 
solution: 

issue: Is there a way to solve this implicit any error without adding  an index signature? [<-CODE->] Is there some way to specify thatkey[0]is a valid key? 
solution: 

issue: what@spacejackbut you dont need to declare Test explicitely, you can do (keyof typeof test)[] 
solution: 

issue: createDialog(dialogComponent: { new(): DialogComponent }) what does the "new()" really do here? ncphi_twitter: sure, but why not pass DialogComponent directly? I wonder if it's to avoid name mangling (AOT compiler on angular) oh, i see, they implement a factory, and need something they can callnew Somethingon thanks@ncphi_twitter ncphi_twitter: well: [<-CODE->] is apparently legal  [<-LINK->] mentions the idiom as well cool trick 
solution: 

issue: With TS 2.4.2, existing code is now throwing a compilation error when trying to extend an interface and use the original interface as a generic parameter. I cannot make sense of why this is happening, if anyone wants to take a look that would be greatly appreciated.  [<-CODE->]  [<-CODE->] Converted to StackOverflow: [<-LINK->] 
solution: 

issue: ancashoria: not getting that error in 2.5.0 I get that error in the playground, but string enums are only supported since 2.4 
solution: 

issue: Does anyone know if it's possible to declare enum's ind.tsfiles? As i've found examples where people have. But also people saying you can't. And i just get acan't read x of undefinedwhen i try to export an enum usingexport declare enum.... 
solution: 

issue: chrisber: new module or writing a declaration file for an existing module? QuentinFchx: are you importing the separate module? The error is a compile time right? run tsc with --listFiles to make sure it's loading the augmentation before you're using it 
solution: 

issue: I recall someone asked a question about inner class. Here is my answer: [<-LINK->] 
solution: Remember that the class syntax is just sugar of es5 prototypal inheritance. How would you represent an inner class in prototypal inheritance? Do you put is as an instance variable? or under Outer.prototype.???. 

issue: Is there a workaround for this invalid type error: [<-CODE->] 
solution: 

issue:  [<-CODE->] Is something wrong? I think the T is{ [fieldName: string]: any }too 
solution: 

issue:  [<-CODE->] I add the following declaration: [<-CODE->] but I get this error:Augmentations for the global scope can only be directly nested in external modules or ambient module declarations. i’m unsure how to make sense of this error, do I need to wrap it in another module declaration? If anyone can help me understand how these declarations work I would be forever grateful :) This is typescript 2.4.2. (I can also just typecast window when I need to but I’d like to take this as an opportunity to better understand how module declarations work in this case) 
solution: 

issue: stefdelec: you can check easily by copying that in the playground and comparing the output wolfgang98: the issue isn't conections, it's that the "this" wont be bound correctly when this.connection is called you need to dothis.server.on('connection', (s, r) => this.connection(s, r)); or define the connection method on the object itself, not on the prototype private connection = (socket: ws, request: http.IncomingMessage) => { ... this.server.on('connection', this.connection);is equivaent tothis.server.on('connection', SocketServer.prototype.connection); 
solution: 

issue: Hi. Can someone explain this code: [<-CODE->]  [<-CODE->] 
solution: 

issue: because T is a type parameter, and state is a value, not a type Yasaa: no, you just use all the JS stuff 
solution: NaridaL: that makes everything so much more easier...thanks a lot,Adrian.Angular won't be that hard to get a good grasp on now.. 

issue: can someone point my to docs to understand whats going on here:  [<-CODE->] it looks like theres some kind of instance declaration for var Chart but i dont understand the syntax 
solution: 

issue: Isn't typescript uses only ES6 module syntax( and always used) and just transpiles down to any you've chosen? 
solution: 

issue: Hello guys Check my new article  [<-LINK->] 
solution: 

issue: Good morning, i'm trying to create a global.d.ts that should declare a global scope variable.I'm trying to include that as with a triple slash directive but I still see errors. [<-CODE->] used as: [<-CODE->] dposUtils is marked as an error (at least in intelliJ) haha! thanks 
solution: 

issue: Guys, I really need help.  [<-CODE->] I'm using lodash with  my angular 4 app. I'm getting this error when compiling:  [<-CODE->] line 46 is this:.mapValues(i => _.groupBy(i, 'status')) 
solution: the_.groupBy(*i*, 'status'). 

issue: Why can't I mix into a generic type?  [<-CODE->] Hmm, on further investigation, looks like it's not supported for now :( 
solution: 

issue: how do I convert Object [<-CODE->] buta.b = nulla.b is not equal to []It is not gettign converted? how do i convert it? It is not getting typecasted 
solution: 

issue: NaridaL: yeah this i true, the problem I am running in to is how to maintain types when loading dynamicly usingSystem.import NaridaL: and pull each lass out by hand is necessary?  [<-CODE->] ClusterKlass = src.Cluster 
solution: 

issue: Hey guys I got this error on following code. [<-CODE->] Property 'style' does not exist on type 'Element' Any suggestions? 
solution: 

issue: i am having a problem with@typesand visual studio anyone wanna help? i am getting build errors on type files in the@typesdirectory but the node modules aren't even included in the project 
solution: Syntactual: skipLibCheck in tsconfig. 

issue: hey guys, so that aot compile issue seems to be because of how typescript compiles the script and due to unresolved circular dependencies. here is the code snippet, can anyone look what am i doing wrong to get that error?Code snippet herehttps://github.com/Microsoft/TypeScript/issues/14734#issuecomment-319099254issue with unresolved deps.https://github.com/webpack/webpack/issues/4520#issuecomment-288228218 
solution: 

issue: Guys, how can I add string that in the variable to object as key? Within typeslike [<-CODE->] NaridaL: here is the code I'm trying but of course it's not working, but you'll get what I'm trying to do: [<-CODE->] I've got syntax error :(@NaridaL oh I saw why, testing now... NaridaL: wow this is working! Thank you very much! 
solution: 

issue: hello!  can anyone help explain what I'm not understanding?  I am a relative newbie to typescript but my understanding is that this should work: [<-CODE->] no implementation, just getting a compile-time error withs.method('c') also any suggestions to get what i'm trying to do to work :) in my real-world case,FooandBarare classes that i dont have control over, and they each have a bunch ofmethods that have compatible type signatures 
solution: 

issue: sdebaun: read [<-ISSUE->] and a couple of other issues QuantumInformation: eslint has a fix mode, that might work 
solution: the default is breaking it on AWS node, normally we writeuuid_1.v1(),. 

issue: Is there a way to do a union type with a function? [<-CODE->] Nevermind, I think it just needs to be wrapped in bracketslet foo: (() => boolean) | boolean; 
solution: 

issue: Hello, I would like to use react-css-modules but gotUncaught TypeError: Class constructor TopBar cannot be invoked without 'new' There is an open issue here : [<-ISSUE->] AFAIK issue is the wayclass extendsis compiled do I need to add something in tsconfig ? 
solution: 

issue: This piece of code works on the Typescript playground: [<-CODE->] but when I include it in a project I am working on, I get the following compiler error: [<-CODE->] I am not sure why this is the case :/ 
solution: 

issue: NaridaL: type: [boolean, string]via Intellij's type hint adding "es2015.iterable" to lib in tsconfig fixed it.Cant say I can explain why this worked though...just figured that it might be due to Typescript not being provided with the needed typings...looked around and picked the one that looked mostly related to iterator (since that is in the error message) added a couple and after a while picking on "es2015.iterable" fixed the error 
solution: 

issue: | is a bitwise operator in js, but it's a union operator in typescript. Are unions bitwise operations or are there cases where typescript can't handle bitwise o_o 
solution: 

issue: NaridaL: yeah I know how to do serialize/deserialize but I was trying to avoid it. Now I think my problem is an FP problem rather than a typing problem. I don't have enough knowledge and I'm probably going all wrong about this. yeah that's also something that's bothering me it can't be that easy, I have to run a lookup on array with a match function a string isn't enough, I need a function to find the right transformation function 
solution: 

issue: NaridaL: i don't want@observableannotations. I need to work on third party plain old Javascript objects NaridaL: Proxy: do you mean [<-LINK->] no IE support, but I guess there are shims available? 
solution: You don't need annotations if you're working with podo. 

issue: MariMax: you can't String enums are one-way, otherwise the following wouldn't work:  [<-CODE->] the playground has an old version which doesnt support string unions (you should be getting an error) and the output is just a best effort MyWay: nice hack :-P and how are you getting config? TS has no concept of commonjs modules... yeah, don't mix es6 imports and commonjs exports doexport function config(app) { andimport {config} from "./path/config" 
solution: or directly assign it to something of type opts. 

issue: I'm new to Typescript, just playing with express, I did [<-CODE->] and then, on my config file: [<-CODE->] But I'm getting:  error TS2349: Cannot invoke an expression whose type lacks a call signature.  [<-CODE->] so imports' syntax depends on what I am importing I can't, for example, do [<-CODE->] because express does not support it, right? 
solution: 

issue: Hey guys. I've got a variable [<-CODE->] that I'm passing around to other functions. Is there any way to "alias" the type so that I don't have to keep repeating {[id: string]: string | Object} ah, thanks. I actually just thought of the word alias while I was asking my question. I guess I just needed to ask the question. Appreciate it. 
solution: 

issue: Maybe someone has an idea how to fix this, but I am running into the following error when I run the unit tests on my TS project: [<-CODE->]  [<-CODE->] Yes it looks like an issue with typings, but I have the following typings: [<-CODE->] in the devDeps section in my package.json and I can confirm that the jasmine and node typings are in the@typesdirectory in the node_modules and from what I understand in the test files I do not need any specially directive to import this types, as they will be automatically included anyways, I toyed with adding this: [<-CODE->] but the problem still persisted :/ 
solution: 

issue: Hoping I can get some advice on adding a function to a prototype? I created a sum extension to array: [<-CODE->] but I get the following error when I try to use it: [<-CODE->]  [<-CODE->] Ideally, this would just be on <number>, but I get an error in VScode when I try that 
solution: I have aexport {};at the top. 

issue: Why is the second overload signature in this overloaded function definition incompatible with the implementation signature? [<-CODE->] Durr, just spotted the mistake 
solution: 

issue: Is it possible to make the compiler to not implicitly cast a promise to a string in the following sample: [<-CODE->] it looks like you can concatenate (almost?) anything with a string with no warning 
solution: 

issue: hi, why do I get TS2306:@types/node/index.d.ts is not a module  when I use import {fs} from 'node'; ? oh, it is import * as fs from 'fs'; 
solution: 

issue: nspaeth: no, for module resolution and stuff the exported symbols need to be constant with export styles, the actually imported stuff could be runtime-dependent, and static analysis etc wouldnt work actually exported* 
solution: const {some, keys}= styles. 

issue: export as namespaceis typically used for UMD modules, in most cases it's not the desired typing mechanism 
solution: 

issue: has anyone successfully used react-toolbox using webpack 3.x config by any chance? I kind of know I need this PostCSS plugin, but I can't seem to make it work :/ [<-CODE->] 
solution: vadi2: Are you using typeRoots? You shouldn’t need to import from@typeslike that. See my example above.. 

issue: vadi2: not until [<-ISSUE->] 
solution: 

issue: I have a simple es2017 Map():new Map([ ['1', 1], ['2', '2'] ]);What should I add with JSDoc so tsc with checkJs doesn't throw an error like this: [<-CODE->] (happens using typescript 2.4.2 and@nextas well) 
solution: set the type of the map toMap<[string, number | string]>. it looks like@typedoesn't work :(. 

issue: Hey, I have a question for you guys -- I don't know how to explain it in words so that I havent asked on stackoverflow -- why doesnt this work? [<-CODE->] 
solution: 

issue: Using tsconfig.json   By invoking tsc with no input files, in which case the compiler searches for the tsconfig.json file starting in the current directory and continuing up the parent directory chain.  [<-LINK->] 
solution: 

issue: Now I moved tsconfig one level above, and want to specify only 2 folders to transpile I tried files, seems to work but need files not dir rootDirs doesn't work  [<-CODE->] 
solution: you want "includes", you can do glob patterns. 

issue: Am I doing anything wrong here with Partial Types? [<-CODE->]  [<-CODE->]  [<-CODE->] It seems like I am using the Partial type exactly as intended and the webpack compiler does not give any issues, however, WebStorm complains and gives me the error above when I try and pass the partial object. Any thoughts or ideas would be greatly appreciated. 
solution: 

issue: when I install typescript 2.4.2 using *npm installtypescript@2.4.2it came back with invalid anyone has any ideas why? 
solution: 

issue: KhoaSydney: showing the error message would help a lot! 
solution: 

issue: Hey guys, any idea whats up with this: [<-CODE->]  [<-CODE->] NaridaL: its in my root index file:that webpack uses  [<-LINK->] 
solution: PhpStorm does not complain and compiles to Javascript just fine. 

issue: kamranayub: yes [<-LINK->] why does this not allow me to fo "foo".toDashed? [<-CODE->] 
solution: 

issue: schoening: I just cleared node module and did install again. everything is fine Is it possible to use Typescript 2.4 dynamic import to import scss ? When I try this, it throw an error saying you may need an appropriate loader to handle this file type Im not sure if this question should be direct to webpack channel 
solution: 

issue: How come typescript won't allow me to iterate the objects keys? I can't usefor (let value of object) that gives me the keys then, doesn't it? not their value 
solution: So I have to do: [<-CODE->] Which is kind of silly?. 

issue: Hello everyone Any way to to restrict a string in length? I mean, as a type 
solution: 

issue: does anybody know how to import package.json from src folder? 
solution:  [<-LINK->]. 

issue: Require it assuming you want you to load and parse It's not a module of js file so require() will work It's not a module 
solution: 

issue: JMwill: I just tested the declare module "*.json" and it works. Make sure your tsc is updated where are you getting the default from? oh, the hacker moon articel lol the screenshot you posted doesnt say that it couldnt find the module though it just says .version doesnt exist because you're doing export default instead of export = JMwill: ok bu it worked n the other screenshot restart vs code or something ar you using the same version in vs code as tsc A-STAR: two generic parameters? 
solution: 

issue: notsonotso: if you are talking about webpacks lazy loading then you probably can't.. you could use an interface or export a .d.ts file 
solution: 

issue: NaridaL: is there any alternative to theimport R = require();syntax? I'm getting the error: [<-CODE->] 
solution: 

issue: i thinkimport x = require()is only for UMD modules (or at least that's the only case where i use it) 
solution: 

issue: is there any benefit to using that syntax? maybe it was just my linter yelling at me previously 
solution: 

issue: is there anyway to add validation to an interface like must be max 3 letter? [<-CODE->] Is this dev time or run time? this brand type* 
solution: Or if they in turn have asked for aThreeOrLessinstead of a plain string, etc.. 

issue: HiI got this errorProperty 'getAll' does not exist on type 'FormData'.Any idea ?My aim is to send files via multipart. So any alternative is welcome too. (Angularish) schoening: we have pretty much the same issue 
solution: 

issue: hi all, i use webpack 3.0 and typescript 2.4.1webpack.config.jstsconfig.json [<-CODE->] lazy load import(), but all I want to load with a lazy load is included in the main bundle, non a lazy 
solution: 

issue: hi i have a question about type i have [<-CODE->] then i try to use it as data param in my class with this [<-CODE->] string is not assignable i dont understand why what wrong ? 
solution: 

issue: I'm reading through this page of the typescript documentation: [<-LINK->] Specifically under the "Type Guards and Differentiating Types" section.I have tslint enabled in my project. How can I make the following code satisfy the "no-angle-bracket-type-assertion-rule" (without having the disable the rule like I did below)? [<-CODE->] 
solution: 

issue: anyone knowledgeable of vim and ale for linting? Im getting an issue where it looks for an eslint file when i have a tsline file and theres an error 
solution: 

issue: Hi, can anyone help me using the compiler api? i'm looking for a way to read a tsconfig.json file (and any tsconfig.json file that is possibly extended) and extract from it the files in scope of the project and the combined compiler options i want to use that to create a Program usingts.createProgram I think i found the solution, it is already in the (public) compiler api:ts.parseJsonConfigFileContent if you send it over TLS (and verify the certificate, and trust the backend to not leak the password) it should be fine. that is your gmail account's password i persume? 
solution: 

issue: Can anyone please tell me if this way to send a json is OK:  [<-CODE->] ? I am concerned about the contents of data 
solution: 

issue: Deviad: I'm not really sure what your goal is? Because if you want to send JSON you don't need to escape it, it's just a string... 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Is there an issue that requests makingdeclare const x: { foo: string } | { bar: number }; console.log(x.foo)not a type error? I'd expectx.footo simply bestring | undefined Similarly, I can't dox.foo ? x.foo : x.bar, because it's a type error to accessfoo 
solution: if you doconst x: { foo: string } | { bar: number, foo: undefined }. 

issue: paprikka: You should not be including anything under node_modules in "paths" under your tsconfig importing the modules shoudl be all you need (assuming they are modules) 
solution: 

issue: Hi, how to import types of a module without importing the implement? Does importingindex.d.tsdirectly work? 
solution: NaridaL: yeah I would thing so, thanks. 

issue: What version of typescript work with this option? --emitDecoratorMetadata 
solution: 

issue: Hello all, I run into a small issue when writing my own library. Namely, the library itself has got dependencies that are not typed, so I created my own typings in the./typingsfolder. I publish mydistandtypingsfolder, but when the lib is imported into another project, compilation of that project fails, because TS can't locate custom typings for dependencies of my library. Any idea of how to tackle this? to give you a specific example: [<-CODE->] 
solution: NaridaL: it seems that even at compile time, the type ofresultin the last line could be known to beFoo.. 

issue: NaridaL: @matthewharwoodI solved problem with reflection, I did not properly understood how it works. Now all work fine. Thanks. Why typescript don't set default value for properties? [<-CODE->] 
solution: 

issue: hi, is this supposed to work in TypeScript 2.4? [<-CODE->] I'm getting "Cannot find module './my-module'" 
solution: 

issue: bmb0205: matter of preference undefined is the default if you dont assing anything to it thomhos: because it's a mapped "type" that's just the syntax and you get that error because CSSProperties doesn't have a call signature you need to make sure that you actually have a function before calling it  [<-CODE->] 
solution: 

issue: is there a nice way to fill a map with values or do I have to call set() over and over? would be nice, but: 'Argument of type 'string[][]' is not assignable to parameter of type 'Iterable<[string, string]>' it works when I pass that in directly but not through a variable found the related issue: [<-ISSUE->] 
solution: could cast it for now and mention the issue in a comment /shrug. 

issue: I’m working on migrating a nodejs js project to typescript. We are doing it gradually. I have managed to remove babel and only use tsc to compile the source code. That is working fine. I’m having some issues with thepathsoption in the tsconfig file. When I add the following paths, all the node_modules folder are being copied to the outDir. Is that the expected behaviour ?  [<-CODE->] 
solution: 

issue: AngryPowman: Can't you just transpile the code and then feed it to whatever jsdoc tool you like? razvan-panda: Well, sure, I just said that in case he/she won't find any 
solution: 

issue: Seems like the publishedtypescript@2.5.0does not match the tagged v2.5.0 source in the repo. Not sure if this is known, or if I should report an issue? reported in [<-ISSUE->] 
solution: 

issue: Im trying to use namespaces in Typescript project and it keep showing me an error: "ReferenceError: App is not defined" for this line: [<-CODE->] i do add a reference in the top of the file: [<-CODE->] any idea what might be the cause? 
solution: 

issue: lihaibh: are you using modules? 
solution: try runningtsc --listFiles. to see if the config is being read. You should not mix///< referene>withimport. aluanhaddad: in this case it should be fine... withoutfromit's not ncesseraily a module, it's like const x = except types get copied too. 

issue:  [<-CODE->] Does this work if that isnt a module with a declare global block? 
solution: If you are writing the module, it is indentified by its url/file path. 

issue: Hello. How I can using template for creating typed arrays? For example<T>means any ofUint8Array,Uint16Array, etc. ? i.e.new T() array = glbuffer.getsubdata<Uint8Array>(0, 4)i.e. get 4 uint8 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: NaridaL: thats just one place it's used. it does make sense there... I was simply looking for an example of usage I've got some code that I can make more generic and I'd like to move it into it's own package bare with me bear*  [<-LINK->] dynamic-element is what I want i'm typescriptifying it  [<-CODE->] I've got it fixed as aDynamicTreeNodebut I'd rather keep it as aDynamicElement, thetypeis simply a class I want to assign a class to the type property this.type.nameneeds to work to get the constructor name no idea if this makes any sense hence I tried t keep the question basic and simple Is there a base type oftypeof SomeClass something that infers it's a class type but is not an instance 
solution: 

issue: does async await return a promise or a value? im trying to pass a functionpublic async foo(): Promise<number> {}to RxJsfromPromise(foo) but im gettingTypeError: promise.then is not a function 
solution: and do your template stuff in the .then. right... the instance returned is the promise. 

issue:  [<-CODE->] -> is this expected error given this line 11? [<-CODE->] Seems fine to me... 
solution: 

issue: bm-stschneider: I did this，but not work。Is it must to bundle that I can get the module in web? NaridaL: Justimport * as crypto from crypto 
solution: i guess i want higher kinded types, which don't seem to exist in TS. my examples weren't quite right: I want to be able to callmyFn<Array>(value: number): Array<number>andmyFn<Map>(value: number): Map<string, number>. 

issue: Does anyone have any recommendations for Travis CI with TS? Should I have the npm test script betsc && mocha? Or should I run tsc as a postinstall script? Or a separate test script for travis? ghetolay:  [<-ISSUE->] 
solution: 

issue: oh my bad this was easily findable not my best day 
solution: 

issue: emitDecoratorMetadata don't work for classes? Example for receive list of properties and this properties types. 
solution: 

issue: Hi! Can someone look, what's wrong with this little snippet? [<-CODE->] 
solution: 

issue: NaridaL: @notsonotsoalso the type of x is an object which has all properties of X and A as optional. So propertyaexists inPartial<X & A>and none ofXproperties are required? Am I wrong? notsonotso: still blows my mind notsonotso: what part exactly is wrong? 
solution: tommck: dude, just ignore it. The point of a polyfill is that you can add it later. You can shim or babel-it-down later in the project.. 

issue: Are you having a compile time or runtime issue? I thought my-lib was under vendor/ try tsc --traceResolution to see where it's looking 
solution: 

issue: I run into a different problem after using the solution I mentioned above. When running CI the vendor folder doens’t have the compiled code, just the source. What I’m wondring now is why ts is not able to find the typings in the node_modules/my-lib/lib folder :( Any ideas@NaridaL? 
solution: 

issue: What would be suggested for extending JSON data on the client side given a similar implementation? Would I need to new up each instance in a map function on the service? 
solution: 

issue: Hi guys, I turned on strict:true in tsconfig.json and expect to see alot of error in VS2015 but i dont see anything 
solution: 

issue: Q.it's my ide or when writingcompte : BuildingAccountDTO | any = null;then I lost autocompletion when writingthis.compte.[here I expect list from BuildingAccountDTO interface]it only works when I remove| anyfrom type. (can't remove it in code due to some reasons) 
solution: 

issue: How can I create definitions for this type of module? [<-CODE->] I tried: [<-CODE->] @NaridaL that gives "A 'declare' modifier cannot be used in an already ambient context."And if I do: [<-CODE->] then I get another error: [<-CODE->] NaridaL: that works! Thanks :) 
solution: 

issue: Hi folks - im trying to figure out the signature matching when creating custom observable - im trying to wrap the request library as follows  [<-LINK->] bit im getting'Error:(158, 5) TS2322:Type '(url: string) => any' is not assignable to type 'Observable<Response>'. gotcha - i see so its a func right now and i'd pass that into something like mergeMap 
solution: actually that subscribers not hitting. 

issue: Hey @NaridaL re our earlier conversation. [<-CODE->]  [<-CODE->] 
solution: yeah. 

issue: I'm trying to figure out where to put types I have to write for other modules in my project plenty of information on how to write a .d.ts... no information on where to put it in your project I've tried in my /src folder, in a /typings folder at the root.  Can't get it picked up 
solution: 

issue: NaridaL: , If you're interested, I have updated the [<-LINK->] that I created for my particular issue. It documents the thought process that went into using generics / interfaces to construct everything the way I did, then demonstrates the failed approach of directly pushing JSON objects into aBehaviorSubject<T[]>, the approach of explicitly instantiating each object into a new array during anObservable.map()function, and just providing the expected interface property directly on the server-side model returned by the Web API call. 
solution: 

issue: I have a module that hasmodule.exports = { ... }. But when Irequireit in another file, auto-complete is not available. Is there anyway to get it working?  [<-LINK->] I triedimportbut received that error 
solution: 

issue: Ok. I just have constants in there (my db credentials). Is there an alternative I can do?  [<-LINK->] it's all weird 
solution: 

issue: I do have a type let say A.type A = A1 | A2 | A3;Then, I need to define an object which can be [<-CODE->]  [<-CODE->] But it doesn't. I think I need to say something like "this object is of type A1 & {someProperty: string} OR A2 & {someProperty: string} OR A3 & {someProperty: string}. But obvisouly I don't want to repeat like that.Any idea? @notsonotso I tried that according to what you said: [<-CODE->] But it's not OK. Am I missing something? ghetolay: I'm looking your example thx I tried the parenthesis thing also but it didn't work. Let me try again with the new type :) Tried [<-CODE->] Not working either 
solution: 

issue: What is X supposed to be? You aren't using it in the declaration 
solution: dwickern: you can hack a subtraction type. 

issue: NaridaL: Awesome, I'll try to wrap my head around this. Did you miss something on line 29? Nevermind, gitter was chopping it off 
solution: dwickern: in your case you only need L1-20. 

issue: deegles: elision refers to import statements getting removed if they are only being used to import types You're going to need to mention the modules at least once though... youmightbe able to do something like this by just having all files be entry points in your bundling step but I really wouldn't recommend that also, you're mixing requires and imports, that's weird... and using both export and module.exports = you should probably choose one and stick to it. 
solution: 

issue: LabEG: trycreate<T>(this:T) { return new this() } Theres absolutely no reason to use singleton pattern in js Any var simply exported in a commonjs module is a "singleton" itself Since a module will only load once and cache itself 
solution: 

issue: the manual enforcement of exhaustiveness ( [<-LINK->] ) is disgusting. No plans to add compiler support for this? as it stands, you have to remember something in order to not forget something 
solution: 

issue: Good evening guys! If you have time, would you be so kind to give an eye to this stacj overflow thread? [<-LINK->] Can someone give me some tip? 
solution: But your issue doesn't have enough details @Giavarco@DanielRosenwasser  I wrote you a comment on the thread. Hopefully now it would be easier to understand :). 

issue: notsonotso: you can add a lint rule, hopefully the pattern matching proposal makes this nicer and also,@Giovarcodidn't really get an answer That error message doesn't look related to TypeScript, its not clear where it's coming from But your issue doesn't have enough details@Giavarco 
solution: 

issue: What's the best sourcemap to use with webpack? I was using inline-source-map without problems. Then it stopped working. 
solution: 

issue: Should modules start with uppercase? 
solution: 

issue: I wonder why async is required when I use await while it is not required when I use then(). Don't those two do fundamentally the same thing? Thanks Adrian 
solution: 

issue: pueaau: If you use await the function always returns a promise I get the async is just to mark that patsissons: change it to anthing not "any" and copy the type from the error message :-P | number ? If you're accepting anything then you don't need to be more specific content: {} might work too 
solution: 

issue: is there a recommended type to use for react components when defining a prop that consumes another react component? I useanyall the time, but curious if there is a better strat. i.e. something like this: [<-CODE->] well i mean, what ifcontentcan be a number, or a string, or a react component, blah blah I have usedReactInstancein the past, but if i need to type against both react components and non-react constructs then i end up withReactInstance | anywhich is meaningless haha yea that's my assumption too, just curious if there was a better way, i can't think of one i think that blocks scalar types? can't recall tho 
solution: {} is possibly shorthand for Object. 

issue: @Progdomcontext? you can write to it in a constructor or when creating an object... otherwise you should be able to subvert the readonly check by doing (x as any).readonlyProp = ... maybe a getter/setter is a better solution in your case... well then the above is best solution I can think of^^ lommez: not in tsc itself 
solution: 

issue: to import a component is required to this component be a class?  [<-CODE->] this is my component or I think that it is a component  [<-CODE->]  [<-CODE->] someone? 
solution: wesleyguirra: you didn't export inAC. yes everything not exported is local to the file. 

issue: but i'll need to add a script tag? 
solution: and TS also hasimport Segment = require('segment-js')which is what you want in this case. 

issue: Hey guys - im trying to figure out why my tsc is double publishing  [<-LINK->] i end up with /dist/dist 
solution: after setting a src. 

issue: @NaridaLok but where I log inside imported file, or in file that is importing? 
solution: NaridaL: I can't create instance of Segment when importing it. 

issue: if your this.data is a ref and not a slice/copy you could just increment seeing as you are always setting value to 1 ... increment with ++? Might throw the same error though. 
solution: 

issue: wesleyguirra: you only need to do .get(0) for pathA, because the new Segment constructor expects a SVGPathELement, not a jquery thing keep using jquery normally everywhere else you want to copy all the params? 
solution: but the paramenter is undefined. 

issue: is there a simple way to convert an array of strings into a union string type or vice versa?  [<-CODE->] ie. get  from one to the other without having to type things out twice 
solution: it would be ideal if calling the new constructor would actually create the values withnullwithout having to type it out for each. 

issue: Do you guys know if it exists a good guide to write typing files for JS libraries WITH simple examples? I've read a lot on them, but I still struggle since there aren't simple example 
solution: 

issue: Hi, I have a ~30kLOC TS project and I use piping for live-reload but that takes +5-10s. I am trying to switch to nodemon to see if it's better but I am having some difficulties getting started. Can anyone help? Doesn't have to be nodemon, I just want a faster restart time in dev. 10s seems unacceptable 
solution: 

issue: NaridaL: so I tried using/// <reference types="monaco-editor" />, but that didn't get rid of the compile errors due tomonacobeing undefined NaridaL: about to push the file in question; will provide a link in a moment. I'm trying to use interfaces exported from monaco.d.ts in my own TS file. Adding a /// <ref types="..." /> only causes concrete types to show up NaridaL:  [<-LINK->] Ah, I think I see (part of) my problem. I don't statically load the library at compile time, so I can't combine the /// declaration with a normal import, I don't think. NaridaL: <3 thank you! NaridaL: I want to give users of the component access to the monaco namespace after it's loaded 
solution: 

issue:  [<-ISSUE->] 
solution: 

issue: are modules implicit? i am importing other libraries but im not declaring a module anywhere and im not loading this file into anything else nice i thought module declaration was explicit i'll need to re read that section of the docs 
solution: 

issue:  [<-CODE->] Buttschas this error,Left side of comma operator is unused and has no side effects.Can someone help, thanks. 
solution: I like es6 syntax , it can write with out;. 

issue: Ah, I see! I see that TSLint has a default rule to disable namespaces; are there any hidden gotchas to using them? Ok, that could also work. Thanks a lot! 
solution: 

issue: what is the proper way to typechildrenin a react component? i think it is viaReact.ReactElement<T> | Array<React.ReactElement<T>>but i can't find any documentation the confirm 
solution: 

issue: Hello,I have the following “typing” problem that I’m not sure how to resolve.I have to constructur that need to call the super class constructor. The superclass constructor has 3 overloads.1) string2) string, Option3) OptionI made this auxiliary function to build the arguments that need to be sent to the super constructor. [<-CODE->] Then in the constructor I do: [<-CODE->] The problem I’m having is that is seems that the args are not being deconstructed with the correct types. The compiler complains about the calling signature. Is it even possible to do this ? Cool. Let me check that! super(...(constructorArgs(config)) as any)This is giving me the same error “Suplied parameters don’t match any signature call" Can I useapplywhen calling super ? super.apply(this, constructorArgs(config))? 
solution: 

issue: NaridaL: it makes sense when dealing with children dynamically (also im pretty sure there is a proposal to limit JSX composition of children). in my case, i am processing children in therenderand dynamically composing the rendered output based on the declarative input. in these cases, it's handy to define a specific children type in your props interface so that you can use that prop type in composition functions ahh this is what i am remembering: [<-ISSUE->] not sure what came of this PR from a quick check it looks like react does not do JSX type checking ofchildren, and if you specify a prop type forchildrenit is unioned with defaultchildrentypings.  [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->] Shouldn’t having a parameter of a specific (narrow) type make a function type non-substitutable for one with a parameter of a more general (wide) type? Am I missing something? 
solution: 

issue: Hi all, any ideas how I might go about annotating this? [<-CODE->] Thanks 
solution: 

issue: hello. can anyone explain a workaround for this? [<-ISSUE->] 
solution: Free typescript webinar by me: [<-LINK->] (edited). 

issue: i've got@bindable selectedand a function called selectedChanged(){}. Yet when selected changes, the function isn't called. Note: selected is a variable i get via injection 
solution: 

issue: I am running the same version of TS on my local machine, and in the CI environment (travis-ci), and I am getting an error in CI compilation of my TS, but not locally  [<-CODE->] theResolutionclass has all properties as optional I am not getting this error when I compile locally on my Mac I tried using just{sentRemedies} but the compiler complained about not having theidfield (one of the properties of the class) So above is from travis (TS v 2.1.6) and this is locally: [<-CODE->] so they are both using the same version from what I see I did notice that my globaltscversion was 2.3, but I went back to 2.1.6 globally, and still getting no problems locally Resolution class: [<-CODE->] So, I got the compiler in CI to work by casting the{sentRemedies} as Resolution I am not sure why that cast was needed, and still dont understand why I am not getting the same errors locally vs in the CI service 
solution: 

issue: Hello,Is anyone using an error reporting tool like Airbrake or Sentry for server side typescript that supports sourcemaps ? I coudn’t find a single SAAS that supports server side sourcemaps for nodejs :( At the moment every time we get an error we need to manually compile the code and trace the error in the compiled code :( 
solution: 

issue: is there a library that exposesfsin a more promise oriented approach - using bluebird promisify all makes intellisense sad ;( 
solution: 

issue: Is it possible to specify overloads for a function returned from another function when the returned function is dependant on some arguments of the first. [<-CODE->] Ahh yup, seems obvious now. Ha thanks 
solution: 

issue: Oh didn't realize you were using the API. Can you share the source code you're using? Hmmm... checking the syntax here: [<-LINK->] Looks like maybe this will work: [<-CODE->] Sweet 
solution: 

issue: Anyone faced the following error [<-CODE->] 
solution: 

issue: What version of typescript do I get or, am I able to have multipul versions of typscript on my machine?I have installed a version of typescript (v2.4.2) installed with the global flag but I have installed typescript v2.3.2 installed in my packages.json for the project in this directory on the file system I am in.  But, the only one I seem to see it the global version, even whn I'm in directory that I have installed 2.3.2.  Is this right? 
solution: 

issue: Anyone know how to pass a property declared in a constructor to a propert decoratorfor example, except that throws an error: [<-CODE->] 
solution: 

issue: Hello@all. Do you know 'jsx-no-lambda' warning of tslint? [tslint] Lambdas are forbidden in JSX attributes due to their rendering performance impact (jsx-no-lambda) use return(<div id="textarea" contenteditable="true" ></div>); And if you dont have any state, use function component instead of class component  [<-LINK->] 
solution: 

issue:  [<-CODE->]  [<-CODE->] Error: [<-CODE->] any idea? 
solution: 

issue: limhowe: using the parenthesis didn't work.@NaridaLcontentEditableis a valid attribute on div. [<-LINK->] . Its also defined in@types/react: [<-LINK->] I tried both camelCase and smallcase, but couldn't get it to work. 
solution: 

issue: 0.0 
solution: 

issue:  [<-CODE->]  [<-CODE->] Now, if I instead publish those types directly to the "foo" package, I can no longer resolve the module augmentations for "bar".Is there a way to make this work without messing with tsconfig?  [<-LINK->] 
solution: 

issue: NaridaL: I think you are right, I tested it in the playground but in Visual Studio it gives me the error. I thik something is messed up in visual studio, I compiled it outside and it compiles without errors. thanks for the help 
solution: 

issue: Hey all, is there any sort of (sane) workaround for Mapped Conditional Types( [<-ISSUE->] )?  I'm trying to read through that thread and finding it a bit tricky to follow I'm trying to take a nested object structure and wrap each of its properties in a KnockoutComputed. What I've currently got is this: [<-CODE->]  [<-CODE->]  [<-CODE->] But instead I'm getting: [<-CODE->] Because it iterates over all the keys of the number and tries to wrap them in knockout computeds. Yeah, mapped conditional types sounded like exactly what I needed.  I know they're not really in yet, but I was wondering if there was any sort of sane workaround (I see a lot of crazy stuff in that thread, most of which flies way over my head, and a lot of it seems tangential, but I didn't know if there was some basic workaround that could be used) Huh, I've been playing with it, and it appears that [<-LINK->] can be adapted to make my case work... I'm just not sure if it's a good idea or not. 
solution: 

issue: Hello,Is anyone using an error reporting tool like Airbrake or Sentry for server side typescript that supports sourcemaps ? I coudn’t find a single SAAS that supports server side sourcemaps for nodejs :(At the moment every time we get an error we need to manually compile the code and trace the error in the compiled code :( 
solution: 

issue: did you try inlinesourcemap ? in your tsconfig ? i use it it and my vscode debugger shows me the right script npm i ups 
solution: 

issue: Hello,Is it possible to destruct tuple union types?eg: [<-CODE->] In this case I get the error ongetHighfunctionType '[number, number, number] | [number, number]' has no property '2' NaridaL: getHigh({ range: [1,  2,  4] })I am expecting the value 4. 
solution: 

issue: hey guys, I've got problem with this code: [<-CODE->]  [<-CODE->] 
solution: 

issue: Is there any option that allow you to turn of logging to the console ? when running tsc, it emits too  much logging info to the console causing Visual studio Task runner explorer error 
solution: 

issue: good afternoon, I am new to typescript and I am getting an error saying that padstart is not a property of stringdoes it means that I can't use padstart on typescript? if yes, what alternative do I have? Hi@TedDriggsI got around it changing to es2017 thanks! 
solution: And = null! is iffy. You need to figure out whether foo can be undefined, in which case you should change it's type to CurrentType | undefined. If not you need to initialize it to a sensible value.. 

issue: A coworker just updated our codebase forstrictNullTypesbut basically just added!on everything that was giving an error, including things likefoo = null!... this can't be good? 
solution: 

issue: 2 u 3 2 [<-ISSUE->] 
solution: 

issue:  [<-LINK->] NaridaL: sadly that partialrecursive doesn't work, for primitive types it generates a huge interface and breaks them message: 'Type 'Partial<{ toString: Partial<any>; charAt: Partial<any>; charCodeAt: Partial<any>; concat: Partial...' is not assignable to type 'string'.' leading to messages like this heh, this is the second time I've ran into a case where mapped conditional types would solve the issue elegantly 
solution: 

issue:  [<-ISSUE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->] querySelectorAll just takes a string, so this is confusing there must be some clever stuff going on I'll just make the type element 
solution: I just donelet inputs: HTMLInputElement|HTMLTextAreaElement[] = Array.from(form.querySelectorAll('input,textarea')). 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: wondering if I can get some help debugging tsserver. I have a debug build of vscode running and another instance with a local build of typescript open and attempting to debug. I can get 'Debugger attached' but my breakpoints are still saying "Breakpoint set but not yet bound" 
solution: 

issue: masaeedu: Why do you think there should be an error thrown? 
solution: It should be a type error, not a thrown. masaeedu: shouldn't it be like [<-CODE->]. 

issue: ancashoria: that's what they all do, unless I'm misunderstanding you... No but without those what you want to do isn't going to work very well 
solution: 

issue: Hi ! Is there anyone familiar with the typescript lib :) ? stevekane: or you can import it likeimport * as types from "./types"ans access it liketypes.yourExport 
solution: jannisg: well, typescript does not evaluate all possible outcomes. The thing is TypeScript does not know which variant is picked and cannot infer it that way.. 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue:  [<-ISSUE->] 
solution: 

issue: doesn't the error usually go into more detail with which member is problematic? I can't reproduce it  [<-CODE->] works both in the playground and 2.6.0 I'd guess it's because SClass has a type param and CClass doesn't haha [<-LINK->] btw@wa-rufio [<-CODE->] no wait nvm 
solution: 

issue: After reading the whole documentation, I still don't quite understand how to consume and use declarations/interfaces from 3rd party libraries. For example, I'm getting this error: [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] And how do you consume@types/*declaration modules? 
solution: 

issue: Does anyone in here use Webstorm to  interactively debug TypeScript inside a Docker Container? Hi folks, working with TypeScript and having some trouble with source maps:https://stackoverflow.com/questions/46307661/how-do-i-get-typescript-source-files-to-show-up-in-node-inspector node-inspector runs in chrome i'll clean that up though 
solution: 

issue: @NaridaL with [<-CODE->] I get [<-CODE->] Any thoughts on the best way to modify Dissoc to accept that? 
solution: 

issue: Is there a way to define an array of functions?function[]doesnt work why a spread operator? firdausng: that worked, thanks, ill bare that in mind for the future 
solution: 

issue: rohitsodhia: have you tried ((any) => any)[]  [<-CODE->] 
solution: 

issue: Hello all,I am facing an issueI am trying to import angular file using // import * as angular from 'angular';But it does not import my angular file. It instead imports angular_mock file. What can I do? 
solution: 

issue: Why can't{id: 1}be cast to<Partial<Record<"id" | K, any>>>? Where K is some generic typeK extends string Or a simpler example 
solution: However, the following doesn't work:const a: Partial<Record<"id" | K, any>> = {id: 1}. 

issue: hey folks! I'm wondering why i get compile errors with the following: [<-CODE->]  [<-CODE->] Try to declare a type or interface like so [<-CODE->]  [<-CODE->] ouch, that makes sense. Thanks! :) 
solution: 

issue: Ok question on the AST api. I am trying to execute ts.createModuleDeclaration with ts.NodeFlags.GlobalAugmentation and for some reason the flag on the node is set to 520 not 512. And I can't seem to figure out what a flag of 520 is. 
solution: jthoms1: well it would be NodeFlags.Synthesized & NodeFlags.GlobalAugmentation. 

issue: grofit: it looks like a bug... check if there's an issue in gh 
solution: hmm odd, have just made an isolated project and run it to confirm it and there is an __awaiter there. 

issue: NaridaL: Ha yes, great source... anything that is in favor of not using strictNullChecks? The reason I ask is because I'm getting a lot of push back from my team after turning strictNullChecks on... some strong feelings its not in JS nature. I'm trying to be fair, but so far don't see any reason not to have it enabled. 
solution: 

issue: I can't tell if I screwed something up in typescript or there's some piece of logic I'm missing, but I have: [<-CODE->]  [<-CODE->] 
solution: rohitsodhia:  [<-LINK->]. sam-s4s: google "polymorphic this type". and it should be assignable to MyClass. but not the other way around.... 

issue: NaridaL: Thanks for that. It's a good explanation of why the code is bad, though now I have to figure out a work around, heh. 
solution: 

issue: Hello guys! When I'm using an overloaded method with optional parameters from another function... will it always be invoked right or do i have to check it? Eg.: [<-CODE->]  [<-CODE->] 
solution: 

issue: const dotOne = (document.querySelector("#icon-ellipsis > path.icon-ellipsis-dotone")[0]) as SVGPathElement;giving implicit any error? why is this giving an implicit any error* thanks missed it 
solution: 

issue: I use TypeScript to prototype. It's worth it to me to update the interfaces whenever the API changes. Then the compiler can tell me where the API changes break my code. 
solution: 

issue: Hi all! How to deal with npm package without definitely type? I Have a reactjs project and installedredux-ormnow I'm getting errorimport { ORM } from 'redux-orm'saying that redux-orm does not have the type declared 
solution: 

issue: I've installed@types/stripe-v2 ( [<-LINK->] ) but I'm not sure how to use it. I assumed it would make the names stripe and Stripe declared globally, but when I reference either of those, the Typescript compiler says it cannot find them. I've also tried every approach to importing the file that I can think of, but given that it has no exports, I'm pretty sure that is not the solution 
solution: 

issue: Hi TypeScript friends. I have a question about ts-check... Let's say I have the following JS... [<-CODE->] Here's the problem I'm having... The Definitely Typed lib forhandleActionsis defined as follows...  [<-CODE->] Which gives me the following error onconst poi =  [<-CODE->] So, it's like, the@type {Reducer<IPoiState, any>}is not correctly setting the generic forhandleActions<State>. Is there any way to fix that? 
solution: 

issue: Hiya! I (through my boss) used DocuSign to sign the Microsoft CLA, but my PR seems to be blocked by not having signed the CLA. Is DocuSign not supported anymore? For posterity: I got approval to agree via the link in my PR so this isn’t a pressing issue anymore, but figuring it out may help someone else in the future :) 
solution: 

issue: package.json and god  knows what will need to be revisited, right? 
solution: 

issue: Hey folks, is there a way to define a class field as a function? Right now it seems as if it's being treated as a class method when I dopublic foo = (id) => id; I guess doesfoo(id) { return id; }transpile to the same thing aspublic foo = (id) => id? I would expect to seefoo(id)as an instance method. NaridaL: This might be a tslint issue actually. But one should be an instance method vs a field, right? 
solution: 

issue: Can you modify a type after declaration? can't do  [<-LINK->] 
solution: no you can't merge types. 

issue: Hi!Maybe some one have explanation why this code gets compiled without errors? [<-CODE->]  [<-CODE->] NaridaL: not exactly, this fails: [<-CODE->] so why it fails when property comes from plain object and doesn’t fail when it comes from class instance? but class instance is an object too still don’t get it  [<-CODE->] if I do this ^^^ then a is not of ITest becauseITestdoesn’t haveforbiddenForITestandanow has it 
solution: 

issue: shivinsky: I believe you are trying to make a decorator at second one so (you dont need a common interface but I would recommend it for clarity and definite type) [<-CODE->] 
solution: 

issue: is there any reason why padStart()/padEnd() isn’t available in my TS code?  [<-LINK->]  [<-CODE->] NaridaL: :( AHHH that did the trick Thanks! :) 
solution: 

issue: is there any way to create a circular type?i need to create a special kind of tuple, let's call it "dynamicTuple" that allows elements of [<-CODE->] kind of like this  [<-CODE->] the problem is i can't make the nested case work obviously is there some trick to make it work? 
solution: 

issue: Hello guys. I have a some questions about typescript definitions and maybe you can help me with solving this questions. I have a typescript class and in this class I use JQuery with special JQuery plugin "Tubular" which I'm not have in type definitions in npm etc. For example: $('#wrapper').tubular(options); and of course now I have an error, because JQuery not understanding that JQuery has this method 'tubular'.Some people told me that you need to write self type definitions for this library, but if I'm not have a time to create this *.d.ts file or this library (which not has type definitions) very big, do I have a solutions to specify this property in JQuery?For example to 'declare' or do special import with this js file? For compiling typescript I'm using webpack, and now I can't compile my files without this library that I'm expecting... 
solution: 

issue: PavelPenkov: if you are having a custom implementation that will not use Node.js's functionalities for net.Server you should type it and I believe there was a proposal on substraction type and someone has posted a way around for current TS compiler so you can define a custom interface excluding the methodlisten.  But if you want something to use with common Node.js functionality then you should implement all methods that the interface requires since they should be used internally in Node code or any other library. 
solution: ozyinc: I want to add some functionality toServerclass and have something likefunction decorate(server: net.Server): DecoratedServer. At the moment the code does something along the lines offunction decorade(server: net.Server): { server: net.Server, extensionMethod: ... }. 

issue: is anyone actually using the router for anything more complex than the tutorial describes? I would love to see an example of a reasonably complex router for a realistic application like, it appears to be impossible for an auxiliary outlet  route to be a child of anything but the root. The configuration is accepted, router.navigate seems to have no idea how to generate the URL, and it can't resolve any sensible URLs either. 
solution: 

issue: Hi, I'm trying to write and test typings for@okta/okta-auth-jsbut I'm running into an issue. I can't seem to figure out how to get tsc to find my declarations. I've put my tsconfig.json and the typings file in a gist and I'd appreciate any help/guidance: [<-LINK->] 
solution: 

issue:  [<-CODE->] Property 'aclService' does not exist on type 'ListComponent'how to disable this error in tslint.json? 
solution: 

issue: robertmain: if you're using es6 modules you need a bundler if you're targeting the browser 
solution: if you're targeting node you can just compile to commonjs. 

issue: Does anyone know the answer to my question above?  [<-LINK->] 
solution: 

issue: hey guys, im getting some weird reslts with typescript path mapping. I'm noticing that the path mapping doesnt actually work when transpiling. So the compiler understands the paths, but my transpiled assets dont import correctly and the server wont start up (im transpiling the server to adistfolder) so if I have a tsconfig.json like this: [<-CODE->] is there anyway to make it work in the transpiled assets? or do i need to use a bundler like webpack/browserify to do that ugh, dont want to use webpack for the server :/ 
solution: 

issue: idk about you, but I'd probably end up gitignoring my source code and only realizing when I dogit clean -xdf I use [<-LINK->] , like I said, YMMV 
solution: Yeah, just easier to docd project && git init && gitignore node. 

issue: It is a bad idea to put first party code in a directory that tools and other developers assume to only contain third party code.@masaeedugives a compelling reason but there are others. 
solution: you could either follow the conventions for that environment (dependencies innode_modules) and live with the lack of baseUrl support or even the concept of a project as such, or adopt a different tool.. 

issue: I remember fighting to make relative imports + TypeScript + JSPM work together a while ago because it was The One True Way TM. Then I just gave up and started using webpack for the server side because it works well with [<-ISSUE->] 
solution: 

issue: Hey guys, any of you had issues with Jest, where some of theimportstatements don’t work / resolve ? 
solution: 

issue: How do I check that an observable has unsubscribed? Specifically for a unit test. Testing that my takeWhile worked. 
solution: 

issue: When following the Styled-Components docs for TypeScript I can't get my props into the styled component itself (StyledLight) [<-CODE->] I'm stumped and have exhausted Google const StyledLight doesn't have any of the Props passed into it from styled(Light) 
solution: 

issue: I have an electron project using typescript, but I'm having a tough decision to make... The "main" process is node only and does not have DOM apis (like Buffer, HTMLElement, etc) but the electron.d.ts refers to those, so I can't get it to build. Is there any guidance on how to make this work? Or, do I just need to add DOM to the main process libs? 
solution: 

issue: Just add"lib": ["dom"]or you could declare stubs. 
solution: that's the tough choice, so if i declare DOM, then there's APIs that don't always exist, but i guess it still beats untyped javascript. i have a class that extends Error, but the methods defined on class don't make it onto the instances. I noticed the __extends helper has changed, did I miss a memo?. 

issue: So optional and| undefinedare different? Is it possible to make it work without cast? 
solution: 

issue: Is it possible to get Typescript to work with Webpack loaders? I want to do something like: [<-CODE->] I found https://webpack.js.org/guides/typescript/#importing-other-assets but I'm still getting 'Cannot find module'; it looks like there might be some sort of additional config I have to do but I can't figure out what. NaridaL: I don't understand what you mean--pug is being imported there so I can get the type definition out of it, should I have done that some other way? NaridaL: It's working now, but why does where I import it make a difference? 
solution: 

issue:  [<-CODE->] What am I doing wrong? I'm getting an error:TS2322:Type 'string[]' is not assignable to type '[string, string]'. Property '0' is missing in type 'string[]'. 
solution: 

issue: Can I get the typename from a template ?  [<-CODE->] 
solution: soga. 

issue: how to call function from  <md-tab> <md-tab (click)="getData(id)"> not working ok 
solution: 

issue: would this work on <button>  ?<button (keydown)="$event.keyCode == 107 ? this.buttonClick(true) : null"or should i use ng-keyup=? 
solution: 

issue: When using ES6 modules, do TypeScript namespaces have any use ? Collegue is adding it everywhere as root of a module to avoid "naming collision". But iirc you can't have naming collision when working with ES6 modules (doesn't even mater if it's TypeScript or pure ES6 I guess) LOL Thanks :D I was reading through the docs, couldn't find it Cheers! 
solution: 

issue: Why isbanumberand not anumber | undefinedin strictNullChecks ? [<-CODE->] 
solution: 

issue: Currently I am using interfaces when working with data where the type can't be inferred. Like this: "let food: IBurger = inferredAsAny"  is this the correct way ? It works... But is that an anti-pattern to use interfaces like that ? 
solution: 

issue: HELLO THERE  I am facing problem with my angular 4 ..... it's giving an error Left side of comma operator is unused and has no side effects. what does it mean 
solution: 

issue: Can anyone here advise me about DefinitelyTyped? I tried forking DT and making a change (to react-bootstrap) but when I try to runnpm run tslint react-bootstrapI getError: Cannot find module 'typescript'... so instead I tried runningtscdirectly and gottsconfig.json(11,9): error TS5023: Unknown compiler option 'strictFunctionTypes'.-- I havetsc 2.5.3but I guess this is compiler option for the not yet released 2.6?? 
solution: 

issue: doesn't babel trip on the type declarations? those aren't part of the emit 
solution: 

issue:  [<-LINK->] Looks like that's what they're doing Seems to work fine for me, it just looks like you can't usenameas a property 
solution: 

issue: Hey folks, is there an easy way to get a string union type from an array of strings? This is what I have now, but there's a lot of baggage here. [<-CODE->] 
solution: 

issue: I'm getting an odd error I was hoping I could get help with. [<-CODE->]  [<-CODE->] 
solution: 

issue: hi, how do i set available values for the object param correctly?  [<-CODE->] a direction can only be a string and only yeap/nope well, done  [<-CODE->] how do i makeenumto be uppercase? I want this: [<-CODE->] but the compiler throws an error and suggests me to use camel-case oh, i’ll check this 
solution: 

issue: Is it possible to extend interfaces? My API responses always follow a common top level structure, with the data inside differing, and im trying to figure out the best way to model that in case the top level ever changes, so that I don't have to change x number of files, heh NaridaL: is that to me? I triedUserResponse extends CoreResponseand it didn't work... is the syntax different? 
solution: 

issue: Am I doing something wrong or this is not supported in TS: [<-CODE->] now returns error:'string' only refers to a type, but is being used as a value here. 
solution: 

issue: Hello. I'm trying to use mapped types, plus one specific required type, however this does not seem to be allowed. Something to the effect of: [<-CODE->] Is there something similar I can do in order to achieve this? @skyjur @rhys-vdw I'm using the keys to pluck from an object stored in context. Different component instances will have want to pluck different keys so I can't explicitly set the props.I'm using true to check for the presence of the prop, I don't care about anything more. That may change. However, the issue still arises with boolean. Okay. Thanks for the help. I thought it would keep it a little cleaner the way I had set out, but if it can't be represented with types maybe if wasn't clear enough to begin with. Oh that's a good point! I'll play with it. Thanks again. 
solution: 

issue: nickbreaton: why not explicitly state all available keys, instead of having any-key=>true for props? 
solution: 

issue: What is the purpose of a prop that can only take a single value,@nickbreaton? trueas opposed toboolean Right, in that case maybe it might make more sense to do this: [<-CODE->] Unfortunately you can't restrict the values like this:[key: keyof TheObject]: truewhich seems like what you want. btw you can do this...  [<-CODE->] I'm pretty sure SinceJSX.Elementis a validany Bit it doesn't give you much 
solution: 

issue: I have a demo of something I think should work but does not However, before I post an issue on github I would like to see if anyone here has some insight.  [<-LINK->] wow… may as well have just pasted the code Simpilfied:  [<-CODE->] 
solution: 

issue: Hi guys, what do I have to do to tell TS that I got some global variable in window?I did install types by npm install --save-dev @types/jquery, editor guesses correctly that '$' is JqueryStatic, but compiler throws this error at me: [<-CODE->] What to do? I got type roots atnode_modules/@types 
solution: 

issue: rhys-vdw:  [<-ISSUE->] 
solution: 

issue:  [<-CODE->] Sure thing 
solution: 

issue: Hey guys  [<-LINK->] I'm getting this error - does anyone know of a good way to solve this? 
solution: 

issue: so change my test script to set the project to false before each run? NaridaL: also - it occurs to me that I'm not actually callingts-nodedirectly im calling mocha, which callsts-node and I can't set environment vars from my package.json (I'm trying to encapsulate the test command intonpm run test NaridaL: got it! I used theincludeandexcludeproperties oftsconfig.jsonto tell it where to look for source files :) 
solution: 

issue: Hey guys I have a question. Is there any code hot reloading solution for using typescript for backend Nodejs project? I'm currently using nodemon, which works fine but it has to restart the node process each time there is a code change thanks 
solution: 

issue:  [<-ISSUE->] where's the issue with what you have? exact error? 
solution: 

issue: Hello, I would like to ask for some help with something I'm trying to do.Basically I want to have a component that will render a text field that whenever changes will update a property in an object that is of generic type.  [<-CODE->] there's obviously more code there, to initialize state and the rendering an all. But basically, onChanged will be invoked whenever the text field in this component changes. the prolem is that the call [<-CODE->] won't compile because can't assign new value to T[K] Argument of type 'string' is not assignable to parameter of type TSource[keyof Tsource] is there a way for me to restrict the key as to say "sourceKey: keyof TSource 'that has value of string' " or something? 
solution: 

issue: Hello,I have some problem with pipe method from ramda. First example work correctly, but in second case x and y is any. I think this is probably bug in TS, but can't find any similar issue on github.  Does anyone have similar problem or recall any issue pointing to this problem? [<-CODE->] 
solution: 

issue: NaridaL: I asked this last night, but since I'm more awake this afternoon, Im going to try asking again 
solution: 

issue: Are you trying to model that API at a type level or are you trying to implement it? Can I assume there are many classes likeItem? 
solution: So, at minimum, you client class has to expose a property for each class at the instance/prototype level.. That does not seem scalable.. and the class generation I hate. 

issue: hey guys, im getting a weird issue where I'm not importingangularorjqueryor anything client-side, but when i try to transpile my assets with typescript, i get a bunch of errors (and understandably so, bc its a server-side folder calledcronand doesnt have the DOM) the errors are related to DOM features that aren't found on the server so it saysCannot find name ____ the architecture is: [<-CODE->]  [<-CODE->] and im transpiling withtsc --watch --project ./lib/cron/tsconfig.json here are some samples of errors im getting fromtsc  [<-CODE->] also i can easily fix it by including"dom"in my cron folder's tsconfig, but i'm not sure why i would need to its not importing anything using the DOM 
solution: 

issue: An "onkeydown" event is of type KeyboardEvent.What types do you get from "onchange" and "oninput"?(I cannot find it listed anywhere...) Oh I see now how silly I was being - of course, it is visible in the intellisense in my IDE lol Thank you :D Yes, looks like plain old Event 
solution: 

issue: hm, can I make this not compile? [<-LINK->] - I'd like Typescript to yell at me for passing in extra properties 
solution: the actual code is a combination of form values and GraphQL mutation. I only want to pass parts of the form value object to the mutation call (GraphQL doesn't allow extra properties). I should really be able to do this at compile time, after all I know both types (FormData type and "MutationInput" type) :/. yeah it's weird that it doesn't error on the const assignment considering you have the type explicit. 

issue: Do you guys know of a way to mock outimportdependencies likefset. al so that I can test my code that uses them so I'm not touching a real file system 
solution: 

issue: How do I write a type definition for a module that exports a RegExp literal?  [<-LINK->] export default /^[a-z\d](?:[a-z\d]|-(?=[a-z\d])){0,38}$/i; I triedexport default RegExp, but that resolves to an alias forRegExpConstructor, whereas I need the RegExp prototype/interface. When I triedexport default RegExp.prototype, sometimes it compiles, and sometimes I get an error thatRegExpis a type but it's being used as a namespace. 
solution: RegExpt is both a type and a value of type RexExpConstructor. 

issue:  [<-CODE->]  [<-CODE->] results in this: [<-CODE->] Any idea what I might be doing wrong? 
solution: 

issue: nspaeth: what version are you using? the npm one? 
solution:  [<-LINK->]. 

issue: hi guys, im trying to get TypeScript working for me with Meteor. In Meteor it uses absolute import paths as relative to the source root of the application. Is there some way to configure Typescript so that'/imports/logging'would point to'<my src dir>/imports/logging.js'? I have tried all the examples I found from StackOverflow using thepathssetting intsconfig.jsonbut with no luck yet 
solution: 

issue: NaridaL: So here's the issue...I'm going to need to use mock require...a lot. I'm going to need to mockfs,streamand possibly more.  [<-CODE->] That's my test file. I need to mock the fs module in the first text so that I can make the test think the file exists ...but not in the second one. 
solution: 

issue: so i guess...args: any[]will work for all then? i do not know the number of args 
solution: &keeps sounding like an intersection to me. 

issue: Does typescript cache types or something? I'm still stuck trying to figure out why my app won't load a types package I installed, just throwing darts at this point did that, along with restarting my pc this is going to end up being something really simple, and ill hate life for a bit thanks to it NaridaL: you've been undoubtably helpful in most bugs ive come across so far, but this one is just... bah 
solution: 

issue: WhyNotificationsis available as global variable but not on window.Notifications declarations? 
solution: 

issue: I'm trying to copy a javascript example to TypeScript, but can't figure out how to do this.. Can anyone help me out? :) First, the code in javascript: [<-CODE->] Then my "work in progress" TypeScript version: [<-CODE->] How do I render the react component here in stead of Route? RouteProps is from react-router and looks like this: [<-CODE->] I don't understand this part in javascript: component: ComponentI guess this picks the component prop, but what does :Component do? Ok, so almost the same in TypeScript: [<-CODE->] gives me an error on <Component {...props} />: TS2604: JSX element type 'Component' does not have any construct or call signatures same error hmm... changed it to component:Componentx   and <Componentx {...props} /> and warning is gone ok, so component:Componentx means destructure component prop, give new name Componentx, and now I can render it with jsx since it has capital letter? :) 
solution: 

issue: how would await a series of calls, collect the results in an array, then return the final array as an async function? (I don't really care if they are called in parallel or sequentially) 
solution: 

issue: is it possible to do something like java enums ( [<-LINK->] ) in ts? sam-s4s: yeah. looking through [<-ISSUE->] , found this workaround: [<-CODE->] 
solution: 

issue: I am having trouble withthis.files("Property 'files' does not exist on type 'HTMLElement'"). I am usingthisin a callback function of an "on change" event. ...(function (this: HTMLInputElement, EventTarget evt) { ... }seems to do it. But, should I? 
solution: `setAttribute('file', myFile) doesn't work because set attribute creates attributes that receive strings, it seems.. Yeah, looks like it. Just that then if I doelem.querySelector('img').fileit says it could be null in a case I am sure it will not be. Can that be worked around or I have to change my approach?. 

issue: Has anyone else had issues with lodash/fp? I dunno if I am just missing something but seems they don't provide types for it.. Yes.. that is for good ol' lodash. "lodash/fp" however does not use those types. 
solution: 

issue: It was mentioned earlier that the following wouldn't work [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-LINK->] 
solution: 

issue: I'd like to compile the node-style es2015 modules in my project dependencies either to es5 or to browser-native modules that I can import from relative paths. Can I do that with tsc alone, or do I need to tack rollup on? What for avoiding browser errors likeUncaught TypeError: Failed to resolve module specifier 'redux' 
solution: 

issue: I'm guessing this isn't really a typescript thing, but is there a way of figuring out what type a variable is? I have a variable coming in from an angular decorator, but im not sure what type it is, so i cant cast it 
solution: DrSammyD: I think that's working as intended -- TypeScript does its best to infer a type that will satisfy the signature, and treatingClaimas aContract<IContract>(which it is) allows it to do that.. 

issue: Hey - anyone got a minute to help my with my naming convention? My object/interface names kinda suck. Interface: [<-CODE->] Concrete implementation: [<-CODE->] Not only do my names for these things suck - they are also confusing (even to me!) Ideally, my interface would be calledFooable but I can't get the right word 
solution: 

issue: Actually about to put together an API and I'm trying to figure out the best way to do it   [<-CODE->] Seem reasonable? 
solution: 

issue: I am compiling a class just fine, but getting a_this._posInfois undefined at runtime:  [<-CODE->] The error is on thestartmethod. 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] Here,Programe.tsalways remind meArgument of type 'typeof Program' is not assignable to parameter of type 'Program’. Property 'run' is missing in type 'typeof Program’..Is anything wrong in my class-decorator Application? Yes, I try it. But I got'Program' is referenced directly or indirectly in its own type annotation. [<-CODE->] 
solution: 

issue: Definitions question for someone...I am using [<-CODE->]  [<-CODE->] jez9999: , are you familiar with dts-gen? Is that what you're looking for? 
solution: 

issue: waTeim:  [<-ISSUE->] doesn't seem to be supported I had a look through the code 
solution: 

issue: can anyone answer my query? 
solution: 

issue:  [<-CODE->] Is is possible to make itsomeof P keys and not necessarily all? hmm ok making it optional i think will work  [<-CODE->] 
solution: 

issue: Yep, I think@robertmainwants to do route handling with decorators (based on something he showed me yesterday) eg.@route('/users/:userId') So it would make sense to group them with the other modules that manage that routing data in the project aluanhaddad: tbh I've never used decorators 
solution: 

issue: Is anyone here doing unit testing?I am looking at integrating tests with either tape or jest into my project.The issue I am having is that they seem to require Babel. While I am using webpack. So.. do I now have to switch to babel or have a both webpack and babel? Or is it possible to use webpack?disclaimer: I am not a hipster.. I just want to get my work done. Not brag about how many config scripts I have to keep track of... 
solution: 

issue: Jasmine, Mocha, Chai, chai-as-promised, jest, jest-vue, jest-ts, tape, ava, gulp, browserify, webpack, babel, rollup, npm, yarnIs the entire front-end world conspiring to prevent me from ever getting any work done? Hahaha.. 
solution: 

issue: How come Im getting an error with: [<-CODE->] type string cannot be used as an index type and some string is 1 word FYI 
solution: bradtaniguchi: lookup index signature types. 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] is it work as expected? How to make Triple-Slash Directives only take effect in one file 
solution: 

issue: hi, how do i include all Cordova typings into global typings?  [<-LINK->] they generated a reference tag and commented it, but i dunno what to do to really include those typings i also runnpm install @types/cordova --savebut still getting anProperty 'cordova' does not exist on type 'Window’errors 
solution: 

issue: just a quick noob question. How would you compare enums? I was trying to do it like this:x.enumProp == 1, but I'm getting an error that states==can't be used like that..... 
solution: clemf: turns out it should be compared byx.enumProp == Enum.Value. 

issue: is it possible to prevent empty arguments when using rest notation ? [<-CODE->] I could overload signature with 1, 2, 3, 4, 5 etc... arguments but meh :/ y 
solution: foo(a1: string, ...as: string[])foo(...args) { ... }. 

issue: you want at least one? brittanyrutherford: hi! fine, thx Color[1] is a string the type annotation doesn't change runtime behavior^^ you should be getting an error though robertmain: don't you want typeRoots? if you have types it will only load those you have to list them individually why did you add reflect metadata in the first place? 
solution: because it says to. 

issue: hi! NaridaL: how are u? been a while! how come this code prints a string? [<-CODE->] Although I specified that colorName is a number NaridaL: ah, I was trying that in codepen, it never gave me an error NaridaL: thank you 
solution: 

issue: when overriding method signatures, how can i ignore the impl signature? i wanna do sth like [<-CODE->] but the last one will make it allow any even if i do onlystring | numberinstead ofany, it would still allowstring, stringto return anumber what i need is to make sure that two numbers return a number and two strings return a string this is a very broken down example, i actually have pairs of interfaces, so although it looks like im looking for generics, im not lemme know if you need a more detailed explanation :) 
solution: 

issue: Seeking help using aws-sdk with typescript. Followed directions at [<-LINK->] to add/// <reference types="aws-sdk" />, but still geterror TS2686: 'AWS' refers to a UMD global, but the current file is a module. Consider adding an import instead. That causes bundling issues: rollup complains thatS3 is not exported by node_modules/aws-sdk/lib/aws.js 
solution: 

issue: I do have the following function: [<-CODE->] It's working fine but I'd like to be more specific with my types. [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Hi, I have some trouble using the compiler API to resolve imports. I have a node (ts.ImportDeclaration) which hasnamedBindingsand now I want to iterate over them to see whether they are of type interface or something else. ApparentlygetTypeAtLocationonly returnsany/intrinsicName: 'unknown'. Could someone please provide a hint on how to resolve the import to get the type? (I found [<-ISSUE->] but it seems to using some older API) The following code works for me. Not sure if it's best practice though. Would still appreciate feedback: [<-CODE->] 
solution: 

issue: hello , i have an issue with typings.where i  can see typings.d.ts file in node typescript project ?tsc version 2.4.1 Is there any one ? I can't see it inside src folder 
solution: 

issue: Is there any way for me toimporta module inside a try/catch block? I'm importing a platform-specific Node module which may not exist on certain platforms, so it is expected to throw aMODULE_NOT_FOUNDerror on import. 
solution: jez9999: for browsers, mainly. 

issue: Hi guys, I am facing an issue and need your help please. I am trying to add the property with type dictionary of numbers [<-CODE->] and using this type as follows, [<-CODE->] But I am getting error like this, [<-CODE->] 
solution: 

issue: I don't see anameproperty 
solution: 

issue: Hey, would this be an appropriate channel to talk about problems with a VSTS extension if it possibly could be related to typescript? I wrote an extension and I'm using typescript to generate my js, but I'm not sure how to use the files correctly. 
solution: 

issue:  [<-CODE->]  [<-LINK->] basvandenheuvel: 
solution: 

issue:  [<-CODE->] Is there a better way to work around this problem? 
solution: 

issue: DrMabuse23: It's been a while since I did any unix admin, but I think what you want is a [<-LINK->] 
solution: 

issue: Hi,I'm getting this error:bundle.main.66939d13e202c3d1062b.js:73 Uncaught Error: Module build failed: error while parsing tsconfig.jsonthis is my tsconfig [<-LINK->] Thanks 
solution: 

issue: avifatal: usually it's more specific.. try running tsc on it's own 
solution: 

issue: ok...can you try itwithoutvisual studio for a sec? i.e: Just run the relevant commands in your terminal 
solution: for some reason, node cmd is not recognizing 'webpack'. either that ornpx webpack. 'npx' is not recognized as an internal or external command,. 

issue: rolling back will be a problem? ok  [<-LINK->] the new errors now tsc worked. im running webpack 
solution: 

issue: How to interpret this error? [<-CODE->] 
solution: 

issue: Hi to all! I try to extends array with method but I get runtime error '...clear is not a function'. What I did wrong? [<-CODE->] 
solution: 

issue: I have a module that I am importing which doesn't have a top level name space, but basically a very large number of exports so I am importing it with*. I would like the puppeteer object to be a property on my class.  If I specify the type as "any" this works fine but obviously isn't ideal. I could create an interface that contains every single export contained in puppeteer but given there are so many and the API is likely to change this seems very impractical - is there any work around I am missing here? [<-CODE->] Ha yep just found the answer [<-LINK->] Thank! *thanks 
solution: 

issue: robertleeplummerjr: totally missed your'@mention'. That looks nice. tobiash: as@NaridaLsays, you need to use an augmentation. Here is an example [<-CODE->] I feel like we are making things more complicated, not simpler ... I recommend the latter. A few reasons really. 1. it increases consistency, and reduces the overhead of thinking about scoping when there are two spaces, the type space and the value space already. 2. If you decide to refactor an interface into a class or vice versa then you won't need to restructure your application. 3. You can leverage declaration merging, to reduce the number of names that you have to keep track of. And last but not least, it encourages grouping the interfaces with the functions that use them. This is very helpful for organization and discoverability that's my opinionated answer. You can in fact do either or both no problem 
solution: 

issue:  [<-LINK->]  [<-LINK->] NaridaL: thanks, but still doesn't work This works: [<-CODE->] I'm doing the string thing 
solution: 

issue: I added a type definiton file for my vue files. [<-CODE->] But there is no autocompletion while writing the import...  mycomponent from "./mycomponent.vue" why? 
solution: 

issue: so when you setnoImplicitThishow do you resolve implicit this ? since you can't really give it any type 
solution: ghetolay: foo(this: Type). but as soon as I put a type here instead ofany. 

issue: I want to describe something like this with JSDoc: [<-ISSUE->] is it supported by Typescript? ( [<-LINK->] ) the destructuring parameter has no name so I get error: "...there is no parameter with that name" oh found [<-ISSUE->] and [<-ISSUE->] 
solution: 

issue: aaronbeall:  [<-ISSUE->] 
solution: 

issue: TS, why I can do that: [<-CODE->] and [<-CODE->] but can't do that: [<-CODE->]  [<-CODE->] that is what I've got now, seams to be all good: [<-CODE->] skyjur: what the difference if I add[key: string]instead of havinglist?  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Having a mental block, with TS (which I dont use every day) say if I have: [<-CODE->] How would I cleanly access teamArray.listTeamOne 
solution: 

issue: Can anyone tell me if typescript intellisense can / is supposed to suggest modules based on compilerOptions.paths?  If I set moduleResolution to node, npm modules are displayed; setting moduleResolution to classic and all I see are files and folders 
solution: 

issue: wolfgang42: rel issue, maybe there's a workaround [<-ISSUE->] 
solution: 

issue: Having a bit of a problem. I have a form embedded in some TSX, and I'm trying to make the onSubmit callback for that. I just want to extract the text from an input field and store it away. I've got this code [<-CODE->] And this is the TSX [<-CODE->] At the 2 lines where I reference node.value, I get the error "Property 'value' does not exist on type 'HTMLInputElement'" 
solution: 

issue: hey guys how do i deal with unused function arugments? I can't It's not my lib no you don't understand like  [<-CODE->] 
solution: In this instance, I have no need for thereqparam but if I don't use it....I get yelled at from typescript. yeah you can't really get around that you can just ignore that its unused. 

issue: I am trying to use a map object in TS: [<-CODE->] But I get the typescript error: "[ts] Unexpected token. A constructor, method, accessor, or property was expected" have I missed anything? Error on linethis.vArray.set(.... Yes, (well I think so)  [<-CODE->] NaridaL: I haven't written any TS in about 4 months and Im just having a few mental blocks, I am sure this is very easy 
solution: 

issue: Can you narrow a variable to a function with typescript type guards? function isFn(input: any): input is function {}doesn't seem to work NaridaL: But I'm passing in anany soTypedoesn't exist 
solution: 

issue: kind of new to typescript myself but a pojo and a class are very different. what is the error? first guess, if you control the class, you might need to have a conversion method yeah, looked at the code, it's doingfor (var name in methods), methods being the first argument tojayson.server, and that kind of loop doesn't work with classes same issue? or something else 
solution: 

issue: NaridaL: Did you see my reply? 
solution: 

issue: anyone able to lend their expertise here a sec? same issue  [<-CODE->] 
solution: doesgetSonghave athisreference in it. so, you're passing it a class method but removing any class instance reference from it. 

issue: Is there some reason this code compiles with an error? [<-CODE->] I mean, why can't TS see thatobj.colorexists in the union type and narrow the type inside the block? 
solution: as for why -- not sure, but I'd assume the complexity/overhead of trying to determine if you were actually using it or just checking existence might get to be too much to be practical. yeah so far I've been writing custom type guards which ends up flowing well, but custom type guards need to be written and maintained.... 

issue: robertmain: getSong is weird.. wouldn't it be better as a static method? in any case if you want it to work as is you should probably declare getSong like react helpers getSong = (args: any, callback: Function) => { that way this will be bound and you can pass instances to jayson 
solution: 

issue: Could somebody explain this error to me? [<-CODE->] I'm primarily confused about why this module (@types/node) is being read at all. I'm building for web. 
solution: 

issue: Is there any way to get around thenever[]when I initialize an array in the constructor for an initial state and want to fill in something later on?  [<-CODE->] I guess that should do it noImplicitAny needs to be active ehh strictnullchecks I mean 
solution: 

issue: I have a question about httpclient, when i use the get function i can supply an interface for type checking like “httpclient.get<ModelInterface>(..)”, but this will not transform types like Date correctly at run time right? I need to do this through map or Json.parse reviver so that the field is the correct type. 
solution: 

issue: There's a weakness with strict null check [<-CODE->] I wonder if there's any Proposal about it I think TS should revoke type guards narrow-downs on by-reference stuff after  function calls for the rest of the block aaronbeall: there's a lot lived issue about that, let me a sec i will find it  [<-LINK->] But for some of my use-cases i've make my own function,typedObjectKeys that returns  Array<keyof T> 
solution: 

issue: It would be nice ifObject.keys()returnedkeyof T... is there some reason it can't be defined that way? 
solution: 

issue: hi all i m trying to implement service worker for existing angular app written in typescript, i m seeing a type script error when i m trying to initialize any advise?  [<-LINK->] ts23339: property service worker doesnot exist on type navigator 
solution: 

issue:  [<-CODE->]  [<-CODE->] 
solution: 

issue: OH there's a gitter! Was surprised at how quiet IRC was... lol Well hello folks, I'm creating my initial state and setting recipients to [] (empty array). but the interface says recipients is [Recipient]. As a result, it's throwing an error about never[] not being compatible with [Recipient]. Huh? 
solution: 

issue: honestly no clue, but i am curious, what benefit or reason is there to use commonJS style at this point? (simply not very familiar with it) short of just the existing codebase i guess 
solution: and will i need to use 2 separate import statements to pull in the function and interfaces, or can i do it in one?. 

issue: brianjorden: Recipient[]did it. I was doing[Recipient]before, like graphql style. wonder why it didn't throw an error. thanks 
solution: timwis: single element tuple type. 

issue:  [<-LINK->] mattmazzola: seems like the issue has to do with generic syntax and actually affect Flow users as well. I am conjecturing based on the above 
solution: 

issue: I've got ansrcdirectory withindex.tsthat imports other files likeimport { Class } from './Class';. WithoutDirit compiles everything under adistdirectory. Now I tried to set up a monorepo like [<-LINK->] Suddenly it breaks and imported files don't get compiled Inalle, all packages belonging to the monorepo are stored under a directory callednode_modulesso the node module resolution finds everything without needingnpm link. But TypeScript doesn't seem to like that... If I renamenode_modulesthen TypeScript starts compiling everything but modules cannot see each other. If I tell TypeScript to compile a.tsfile undernode_modules, it should also compile further.tsfiles imported from inside the same module It seems to work if I removefilesfromtsconfig.json(it used to just specifyindex.tsand let the compiler find everything else) 
solution: 

issue: I just installed the types, do I need to do anything else to stop this error:  [<-LINK->]  [<-LINK->] i done"noImplicitAny": false,which fixed it for some reason any ideas why? 
solution: 

issue: skeate: just a quick questionIs there a way to make it work? response is not defined when appended to the DOM [<-CODE->] I'm developing an extension and I don't have access to GLOBAL functions / vars 
solution: you would probably have to stringify the response to inject it into the page. that kind of code injection is a bit funky though. 

issue: Shouldn't this maintain non-nullness? is this a bug/limitation in the control flow analysis? [<-CODE->] what are you expectingato be after that? 
solution: Tried various additions toTlikeT extends objectand couldn't get it to work.... 

issue: Could somebody explain what I'm missing here?  [<-CODE->] 'Spread types may only be created from object types.' On{ ...foo } I think I might be hitting [<-ISSUE->] seems I can work around by callingObject.assign({}, foo) Ah, right. 
solution: 

issue: rhys-vdw: this doesn't work either  [<-CODE->] 
solution: 

issue: anyone know what is wrong with this tsx? [<-CODE->]  [<-LINK->] 
solution: afterreturn {. you are inside a "object literal definition" contexxt. 

issue: Is there any way to specify something like a "rest" type for a tuple? [<-CODE->] From the docs on tuple types seems there's no way... is there any workaround? 
solution: 

issue: They arehighlyexperimental The current implementation is based on a superseded decorators proposal. The new proposal has yet to be implemented but when it is the old emit should be deprecated. aaronbeall: no you can't specify a tuple type for a rest argument yet. This feature has been requested before though 
solution: NaridaL: yeah I had to add RequestInit. 

issue: Hi! Is this correct syntax for type definition? interface Signal<T = any> Visual Studio ca't compile Signals typings with this syntax Error    TS2314    Generic type 'Signal<T, any>' requires 2 type argument(s). typescript 2.5.2 
solution: 

issue: wkrueger: 'Augmentations for the global scope can only be directly nested in external modules or ambient module declarations' So I can't put in typings ? Actually I have this error, wherver I put this lines 
solution: 

issue: ah, you can't cast like so:const { turbine as TurbineState, loaded } = this.propswould have been nice in redux, will have to do it the slow wayconst turbines =( this.props.turbine as TurbineState).turbines 
solution: const { turbine , loaded } = this.props as {turbine :TurbineState, loaded: any}. I assume you'd need to specify a type. Or make the function generic also. 

issue: TheReact.SFC<Propstype is not playing nicely with connect:  [<-LINK->] ill try a map to props first no use 
solution: 

issue: Having some trouble with VSCode TypeScript type checking...  [<-LINK->]  [<-CODE->] Ah, actually it's happening in compile too, not just in VSCode I've added the"lib"options to try to supportArray#includesbut it isn't working... Oops, I see it's meant to be"es7", but still the same problem remains. So now the project is compiling with"es7"as a target, but I'm still getting the error in VSCode. 
solution: 

issue: React.Componentis a generic that takes two types: props and state you'll need to define the state types in an interface (like props) and add it into the<> actually my guess is that it's too strongly typed for what you had specified. you might need to clarify that theeventparameter is aMouseEvent<HTMLTableRowElement>, not just anyMouseEvent or possibly make it generic, e.g. [<-CODE->] 
solution: 

issue: seriously you guys are a God send If I need to hire react+ts devs I know where to come anyone seen this error before?Argument of type 'MouseEvent<HTMLTableRowElement>' is not assignable to parameter of type 'MouseEvent'. Im using material UI, i don't think its too strongly typed ill just go with: any 
solution: 

issue: I have a bunch of classes that I'd like to organize into groups. What's the best way to do this? Is this what namespaces do? I can't use module.exports at the moment since this is for a web browser and I'm not using any bundling tool 
solution: you shouldn't be using module.exports at all in TS. Now TSLint is saying don't use namespaces because exports is available. 

issue: Why exactly does TS allowlet foo: string; //  no initial valueinstrictNullChecks, ie shouldn't it be an error withoutlet foo: string | undefined;if you don't initialize it? 
solution: 

issue: have you worked with any compilers? 
solution: 

issue: So I'm having issues with type casting. [<-CODE->] Wot? Sorry, should readState[] 
solution: 

issue: GoodNewsState is a type, State[] expects instances. ie, you need [ new GoodNewsState(); ] 
solution: HA. Right you are. 

issue: Is it possible to get a compile-time error on a non-exhaustive switch statement for an enum? eg. [<-CODE->] ooh, this is supported. 
solution: 

issue: anyone used this.setState in typescript + react? It usessetState<K extends keyof S>(state: Pick<S, K>, callback?: () => any): void; setting the state like this: NaridaL: thx, the state is: [<-CODE->] selectedItem: Turbine | undefinedremoves the error, but why do they require the undefined type? I guess is cause it can be undefined at times mainnika: webstorm ah cool thx, I forced the find toas Turbine 
solution: 

issue: Is there anyone around to help me figure out a strict null check issue? I'm not sure I quite understand where my problem is coming and very new to typescript My code makes use of the aws-lambda type:  [<-CODE->] And it keeps coming back with telling me that object is possibly undefined at the callback, even if i replace the undefined with a value in the parameters passed My first though was that its an issue with the definition and I'd need to just turn strict null checking off but would like to avoid that as i feel it adds a lot of value callback (undefined, response) even if i alter that line to becallback (new Error("New Error value"), response)it still has the same error 
solution: callback could be undefined. 

issue:  [<-ISSUE->] @aaronbeall 
solution: 

issue: IMO there are so many holes already because of JS's nature this is a piddly one. And the reason its not done is that it would require either:1) Static checking of string literals which could be easily bypassed by using an intermediarly variable.2) Run time code, which would bloat things for little benefit.If you want code safety, run from anything even remotely connected to Javascript, espeically something that transpiles to it. But yes, its the situation and TS does an amaznig job, but it can only do so much to such a poorly designed lang like JS. I mean heck, the date function has 0 based for months! And the original date while being designed in the mid 90s still only gave a 2 digit year.... tslint has a rule and if it finds any string literal access like htat will throw an error, but of course you can turn it off or bypass it by using a variable instead of the string literal and it cant detect that. 
solution: 

issue: hello folks i uploaded typescript from 2.3.2 to 2.4.2 as per angular 5 upgrade documentation, but while compiling the app through webpack i see the following error with respect node error TS2304: Cannot find name 'describe'. and karma (12,15): error TS2304: Cannot find name 'require'. any help will be appreciate 
solution: 

issue: panicst8:  [<-ISSUE->] 
solution: 

issue: Hi All, I am new to typescript and was wondering if someone can guide me I want to use the types defined by a third party library e.g: jasmine and I want to write custom matchers using those types for jasmine in order to do that do I need to import the typings in my file ? 
solution: 

issue: Is this a current limitation of TypeScript?  [<-CODE->]  [<-CODE->] The error is coming fromwhitelist.includes(value) valueis guaranteed to be non-null at.includes(value)due to boolean operators 
solution: 

issue: Not really, if whitelist has length 0 the.includeswill be evaluated 
solution: 

issue: and if not using vscode? 
solution: you dont need it then. Its only for VSCode, helps it show you only the files you care about.. 

issue: Meh, I'll look into it later. Can't justify learning everything just yet. Perhaps I'll contribute to DT later. Sweet. I think I'll try to find some time to fix the DefinitelyTyped defs later I was replacing them entirely Because they're broken, but I've just decided to go down theanyroute for now 
solution: 

issue: Is there any way to force a variable to be an (unkown) object type? Currently I just haveparams: any;, but this would let anything through - a boolean, number, string, array, etc... So I'm wondering if there's a way to limit it to only objects...{ ... } 
solution: It's a relatively recent feature of the language (within the last year or so).. 

issue: Is there any way to reference the return type of a function without defining the return type? In my case, a bunch of angular factory functions that return some object, and inject that object shape in other modules... I want to annotated the injected shape in those other modules, but not the factory function itself (ie typeofmyFactoryFnis not right), thereturn valueof the function (iemyDep: returntypeof myFactoryFn) 
solution: 

issue: Anyone got a clue on why I am getting the error "Unexpected token var" indeclare var Remote;? That line is in a script that I am loading through thescriptsoption in my ng-cli configangular-cli.json 
solution: 

issue: DevItWithDavid: does that not expect js files? 
solution: 

issue: Hey, @NaridaL , is this possible ? [<-CODE->]  [<-CODE->] Basically I have a Schema of type T that I want to rename one key. The resulting Schema should be of typeT - K + J I'm not sure how to use J here. And BTW, Sub and Dissoc are really useful! 
solution: vekexasia: that doesn't really make sense? proxy always intercepts assignments/reads from properties. 

issue: is there a way to typeguard an object property value based on the property key ? NaridaL: I'll come to it but I'm having another problem first 
solution: 

issue: alippai: my pleasure. 
solution: 

issue:  [<-CODE->] Type ofinfohere isany. Do any1 know if there’s some way to get proper type inference with this syntax? NaridaL: I have created a proper index signature. but when destructuring, the destructured data is of typeanyinstead ofstring. So I’m thinking the type inference isn’t working properly with dynamic keys when destructruring 
solution: 

issue: (window as any).devToolsExtension !== undefined put that in an if 
solution: 

issue: hum is there a reason for it to work that way and not my way 
solution: 

issue: timwis:  [<-LINK->] declare module "ww" {export = any} or  just supress the error on the import line 
solution: 

issue: Hey guys whats an elegant way to solve this problem?: http://prntscr.com/harok2The for loop is definitely going to catch a value to return, if it doesn't, the tests will catch it.But the compiler is complaining, I could fix by adding an assert or just logging the error and returning a default value Just wondered if there is a better way to approach these types of problems NaridaL: whats the suggested way of throwing errors like these? yes. I'm guessing that error is supposed to halt at development env and ignore in production? 
solution: return player. 

issue: Is there a general style preference when it comes tofunctionvsconstwhen declaring functions? 
solution: 

issue: stuck again import {TranslateService, LangChangeEvent} from "@ngx-translate/core";class ExportLanguageFun {    public currentLang : string;    constructor(private translate : TranslateService) {    }    public static setValue(): string {        this.translate        .onLangChange        .subscribe(lang => {          this.currentLang = lang;        })        return this.currentLang;    }}export let exportLanguage = ExportLanguageFun.setValue();//Error:  Property 'setValue' does not exist on type 'typeof ExportLanguageFun'. ```import {TranslateService, LangChangeEvent} from "@ngx-translate/core";class ExportLanguageFun {    public currentLang : string;    constructor(private translate : TranslateService) {    }    public static setValue(): string {        this.translate        .onLangChange        .subscribe(lang => {          this.currentLang = lang;        })        return this.currentLang;    }}export let exportLanguage = ExportLanguageFun.setValue();//Error:  Property 'setValue' does not exist on type 'typeof ExportLanguageFun'.``` 
solution: 

issue: How can I make anifstatement that disambiguates this type:Array<number> | Array<Array<number>>?I triedArray.isArray(foo[0])but it didn't work. By anifI meantypeguard=]  [<-CODE->] I just learned aboutUser Defined Type Guards:) 
solution: 

issue: NaridaL: What about [<-LINK->] The .ts files are not compiled, but I'm not sure how they are at install time. 
solution: 

issue: QuantumInformation: I don't use redux dekryptic: .d.ts don't need to be compiled. Just include them in your package so the types work 
solution: It'd be cool if TSC type-checked my jsdoc comments against the actual types :P. I used to annotate the callback param askeyofbut that doesn't work anymore withstrictFunctionTypes, now I usually just write an assertion in the callback.... 

issue: Hey, does anyone have experience with making typescript work with React HOC and Redux in particular? I've started a bit of a skunkworks project at work to convert some of my team's code base to TS to show wonderful it is. However I'm running into some problems with incorrect types being inferred from my calls to redux's connect function. I end up with this: [<-CODE->] After calling connect 
solution: 

issue: Can someone point me to the correct documentation for adding typings for methods and properties that are added by decorators? I have a decorator that proxies the constructor of a class and adds a bunch of stuff… right now, I’m having to extend an abstract class that defines those mixins as optional properties and methods — but that’s inellegant because then I have to use super() if I declare a constructor. btw… the reason I’m using an abstract class to extend a class that has a decorator is that some of the properties being injected are static, so I can’t use an interface… oh… nvm, looks like there’s a discussion about this that’s still open here: [<-ISSUE->] 
solution: 

issue: How can I solve this compilation error when dealing with an async map and promises? [<-CODE->]  [<-CODE->] drewwyatt: good catch. Alsoas FileInterface[]solved my problem. 
solution: 

issue: bossqone: undefined var/kw is proper way to check, not string literal 
solution: 

issue: brianjorden: I'm not sure what a Readonly<string> is supposed to be... strings are immutable anyways And there's an extended discussion [<-ISSUE->] currently juststatic readonly table: string and then remember to actually declare it in subclasses brianjorden: you also need to do 'constructor': {table: string} or'constructor': typeof Model  [<-CODE->] it's just a non-static prop declaration the quotes are so it doesn't mistake it for the actualy constructor same as if you did "prop with spaces": string that's not really how it works? let x = "foo" as Readonly<string> x = "bar" as Readonly<string> if you don't want x to change you need to do const x = ... Readonly<string> prevents you from doingx.substr = function () ... but that's not really an issue Readonly<string> still allows w.trim() it just doesn't allow you to change trim w.trim = function() {... @tobiashyou are going to need to include the error yeah just cast it 
solution: 

issue:  [<-CODE->] eh ok, so in your const example...valid point...fixing just a touch of extra enforcement with theReadonly<string>that would not allow the.trim/.toLowerCase/etc ahh hmm thought i had a different example of some sort of mutation that slipped through, but not completely sure now 
solution: 

issue: Is it possible to make this work somehow: [<-CODE->] Is it a limitation of typescript that this doesnt compile, or am I doing it wrong? Oh sure,Type '{ [x: string]: () => void; } ' is not assignable to type 'Record<FnName, () => {}>' 
solution: 

issue: intellix: it's not clear to me why you need the associations key? Doesn't sequelize just use that itself in the background? 
solution: 

issue: I have atsconfig.jsonthat uses extend. Is there any way to analyze the finalcompilerOptionsafter the extend is applied? 
solution: 

issue: bossqone: what is the definition ofMorphismin your example and why are you using a type assertion? 
solution: 

issue: QuantumInformation: does disable next line for tslint not work? 
solution: 

issue: I have a set of custom property classes that I use for such props and they support aggregate notifications of changes, data binding, and more. 
solution: 

issue: is it actually possible to separate a type definition completely from it's value? say I have a functionconst f = () => true;and I'd like to type it  at some other place for readablity reasons.. It should work somehow, since imported types from e.g. 'definitely typed' have also that kind of separation. Any hints for me? I just want to say on top of the file sth. like:f: () => boolean; 
solution: if the errors you are getting are in .d.ts fles you can enable skipLibCheck. 

issue: Hey, can I do "inline" type assertion in higher order function? Like: [<-CODE->] My example does not work Even [<-CODE->] does not work 
solution: 

issue: I've got 4 other components similar to this but I'm missing smth here 
solution: 

issue: you can probably do it with default arguments but Id have to play with it to be sure. Or you could have an entry method, but then it calls an implementation method which is abstract in the base and overridden in your subclasses. do you mean the async keyword? yes just stick it before the name. dont remmeber which position but the comipler will tell you where it goes.l  [<-LINK->] 
solution: 

issue: xenoterracide: Assignation of the undefined is not possible to any type ifstrictNullChecksin yourtsconfigis enabled. Check it out. 
solution: 

issue: I'm getting error while running Reflect.getMetadata is not a function but TSC doesn't gives any error on compilation czhower: I'm using reflect-metadata npm package as the ES6 Reflect doesn't have getMetadata function not sure if the ES6 Reflect is causing the issue as I am not able to import any of the Reflect 
solution: If its something that doesnt haev a typed interface for TS, you can just cast it to any if it isnt already and "use" JS that way.. 

issue:  [<-CODE->]  [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] Couldn't get it to work.  [<-CODE->]  [<-CODE->] ...to work as a solution I'm trying to wrap my head around something: [<-CODE->] 
solution: 

issue: Is there any way to tell what compiler version the Playground is using? I have some code that gives me an error locally but not in the Playground... not sure if this is fixed or something other funky in my local: [<-CODE->] Doh, I take it back. That error appears in Playground, too, when I choosestrictNullChecks 
solution: 

issue: is there any kind of a data container similar toAtomicReferencein java? 
solution: NaridaL: I don't I don't need it for thread safety, just looking for something that I can set and unset (although doesn't js have workers now that are multi threaded). trying to think of a good way to deal with this strict not liking me setting a variable to null in order ro clear it. 

issue:  [<-CODE->]  [<-CODE->] 
solution: 

issue: NaridaL: language service? looks like I have the "use typescript service" checked also, I'd expect it to return undef, I guess, I noticed I need to add a boolean method to it as well hasAuth or whatever I'm betting the latter is  just a typo while monkeying with it, the former is a lesson I learned in not typescript land, always define the methods right, I forget if when I wrote this there was another reason 'cause I wrote it before --strict was an option seriously idea that is not an error refresh your nonsense 
solution: 

issue: @aluanhaddad [<-CODE->]  [<-CODE->] 
solution: 

issue: ghetolay: Did making it 1,2,3 work otherwise? or do you still have a compiler error? The problem ie becuse R could be same as T in such a case, it cant disambiguate. 
solution: 

issue: czhower: I'd be interested in hearing why you feel TS will stick around after WASM takes over. Wouldn't all TS devs then move to something like C#/Java (or it's derivatives) ? Is TS as a language really that worthwhile to keep around after JS is no longer being used? Why not just continue with C#, the language in whose image it was built? 
solution: 

issue: hi,I have a css issue. 
solution: 

issue: well generics aren't really meant as type variable so no I can't see another way 
solution: 

issue: My editor gives errors on this code: [<-CODE->]  [<-CODE->] I'm using angular-cli which requires a version of Typescript <2.4.0 is the issue above fixed in a version >=2.4.0? :O 
solution: but the errorType '"success"' is not assignable to type 'Severity'.is in my editor. 

issue: on the code your provided ? 
solution: oohhh. 

issue: hi all I can't really understand the < > that's added when I extend a class for example: [<-CODE->] ghetolay: if I get rid of it , what would happen? 
solution: 

issue: Above code is normal. Ypu You never extrnd Type so of course str wont be there 
solution: 

issue: brittanyrutherford: are you familiar with generics? This is a pretty good page on it: [<-LINK->] 
solution: One way to think about it is like howfunction(arg) { return arg+1; }returns a new value,interface Foo<T>{ ... }returns a new type. 

issue: sohailsomani: T will always be the type you "pass" the generic. So its impl inst whihc is ISpecific which inherits from Generic<T>. Generic<T> does not descend from Type and T is never even used in Generic<T>, you just throw it away basically. Generics are not inheritance. sohailsomani: Doesnt matter Generic<T> never uses T Generic<T> is the same as Generic in your usage. You never actually use Type 
solution: extract(impl).__generic.str =. extract(impl).type.str. 

issue: brittanyrutherford: interfaces dont exist at runtime, so TS will removeimport { ISPList } from './HelloWorldWebPart';in this case 
solution: 

issue: Not really. Its a fairly straightforward OOP lang. 
solution: "requirement for everything to be typed"That is the hallmark of a good language. Its fixing a garbage lang like JS.. If you dont want types and want to write bad code, use JS. But most JS programs are like documents in which no one knows how to spell and then you end up with garbage.. 

issue: @jods4yes, TS uses the same resolution logic for the .d.ts files as node for the .js files 
solution: 

issue: ghetolay: I'm not finding the multiple signatures in the source [<-LINK->] nvm wrong branch for some reason 
solution: I forgot to mention this is linked to the pipe operator. if you change the order to the one you suggested, then the 2nd and 3d overloads will never get used. 

issue: brittanyrutherford: are you learning programming in general? Just curious, your enthusiasm is contagious 
solution: Well if its one thing MS is too often good about - thats overcomplicating things.. esp the C++ and COM guys there.. MS was big on JS in Metro stuff. I would bet TS is a direct result of the MS devs having to use JS and it driving them insane, so they asked Anders to make TS. Just speculation.. 

issue: Hi, I'm trying to migrate to Typescript 2 and this bit of code 'typeof resp === "String"' is throwing an error TS2365: Operator '===' cannot be applied to types. Not sure why this is an issue ? oh nm that was silly 
solution: 

issue: Why cant I doArray.from(someGenerator)without typescript complaining that argument of type Generator is not assignable to Iterator, what tsconfig option allows this. The code runs perfectly fine, just unsure how to get rid of this error from my IDE. 
solution: 

issue: How do we read data from JSON file in TypeScript?I am working on Protractor and I want to pass data from JSON to Textbox.Plz suggest. 
solution: 

issue: anyone had luck with Jest debugging in webstorm? [<-LINK->] how do I have a type that is either an array of arrays, or array of objects? I can't do({}|[])[] 
solution: 

issue: es5 doesnt have promises does it? isnt that new to es6?  [<-LINK->] if you set target to es6 does it work? it controls how TS generates JS output. What features it can use. Promises were not part of JS itself till es6. es5 has lots of little restrictions and es6 is pretty widespread so unless you have a need to use es5, in most cases better to use es6 not sure then.. would have to look at your code directly which I dont have time to do. 
solution: 

issue: really? I find it overly pedantic, trying to dictate every whitespace character 
solution: 

issue: czhower: officially no but I'm pretty sure you can put comments in your tslint config... yes JSON doesn't support comments but the format of a tslint.json file isn't actual json, it's "JSON with JS style comments" 
solution: aah, well then it works in that one case :). 

issue: It does make it difficult to make parser assumptions based on the file extension though. Then again, I suppose Babel already had that effect on JS files so it's a little late to start worrying about 
solution: 

issue: Hi guys, I am using intersection types and they are not working. It only takes first type into consideration.Please help 
solution: 

issue: Is there a way to validate and convert a string to a string enum value at runtime? I had to resort to this: [<-CODE->]  [<-CODE->] 
solution: 

issue: Does anyone make typescript worked with rollup and babel ? I just wanttsto do the type checking work,rollupandbabelhandle the rest ( module resolving , syntax transforming).  Can't make it work . 
solution: 

issue: Hi guys, I have a problem with generating .d.ts files for my library. I have "declaration": true in tsconfig.json, but it doesn't generate declaration file for me but it doesn't show any error either :( 
solution: 

issue: czhower: ?? "".split(".") returns [""] and [""].pop() returns "" and I'm not sure what you're expecting it to return if the array is empty except undefined and the reason you aren't getting the same error is probably you dont have strictNullChcks on aaronbeall: this is a case that calls for.pop()! thasmo: Look into proxies 
solution: 

issue: anyone know why visual studio code only add things to the "Problems" panel for opened files? -- is there any way to get it to check things project-wide? 
solution: 

issue: pselden: Apparently not: [<-ISSUE->] Although apparently there's stuff you can add to yourtasks.jsonto be able to manually run the compiler and present aggregated errors in the problems window 
solution: 

issue: fhdhsni: no. You can target es7 and run babel in a separate step 
solution: 

issue: I'm using atom-typescript and we are importing a  js module, but I can't get any type information from typescript. "allowJs" is set to true in the compiler options, so I'm wondering if this is a bug or the expected behavior. TypeScript seems to be able to find the module and doesn't complain about any of the imports, but doesn't provide any information about the imported symbols. 
solution: 

issue: rohyadav:  [<-LINK->] what i am doing wrong?getting erroranybody there?? got it 
solution: 

issue: Is there any way to make this work besides renaming something? [<-CODE->] 
solution: 

issue: aaronbeall: I think the issue is the constructor param is shadowing the external var just rename the costructor param 
solution: 

issue: with something like [<-CODE->] if I wanted to make the "children" generic, how could I go about that? I've tried things like [<-CODE->] fails because can't reference type parameters of containing types? [<-CODE->]  [<-CODE->] why not 
solution: 

issue: is there any way to type a function (wrapper) in a way that when you wrap another function (x) with thewrapper, the type ofxwill be passed through, unaffected? [<-CODE->] 
solution: 

issue: qm3ster: yeah [x, y] decays to an array type unless you cast it [undefined, void] as [any, any] or assign it directly to a type... not sure that's possible in this case Teodor_ASA_twitter: what you were describing isn't really something that should be an issue and you didn't say why you were attempting to do what you were so I can't really help you any further qm3ster: actually, ignore the above the issue is that{[key: string]: [any, any]}isn't a supertype of Aap qm3ster: because index signatures expect "all" properties to by of that type qm3ster: tryActions<ActionMap extends Record<keyof ActionMap, [any, any]>> 
solution: 

issue: no I copied your code to the playground and added Job2 
solution: I have misspell. I will kill myself. 

issue: Hi, I'm having trouble with interface meta types. Any have a sec to walk me through how to implement them? Or even just link to documentation 
solution: Soc: CalendarEvent<number>would have ametaproperty of typenumber. 

issue: Hi! How would I type an object that can either have a known property{hello?: string}OR custom properties[custom: string]: (v?: any) => boolean(ie. custom props must be functions)? NaridaL: interesting! so is there a way to mix a set of declared properties (eg. "hello: string") with arbitrary props that have a fixed signature (eg:[custom: string]: () => void)? grofit: interface Demo { hello?: string, [key: string]: () => void }doesn't work the point is to try support{hello: 'joe', randomKey: () => 'woo!'} This fails: [<-LINK->] 
solution: 

issue: and classes methods can't be arrow funcs? 
solution: well for your last question, it's just that the syntax for class methods is like what you have at the end. so I can't use arrow functions. 

issue: Is there any documentation on what's included with the various "lib" options? [<-LINK->] 
solution: 

issue: Anyone having this problem with WebStorm? [<-LINK->] 
solution: 

issue: am trying to make 2 static methods in a class, call each other, but am unable to make it work this is my caller function: [<-CODE->] it calls a static method in Calculate class called process() process looks like this  [<-CODE->] i tried with this.process, not working as well 
solution: 

issue: NaridaL: why does this work:type Operation = "+"|"-"|"*"|"/";? Aren't those values and not types? 
solution: BehindTheMath: in that context'+'is a literal type. (a string that equals '+') See "literal types" [<-LINK->]. If you think of types as sets of values, types like"+"are sets that only consist of one element, the corresponding value ("+"). 

issue: Pszekl: latest types? Pszek: I'm not really sure where you're getting<Fragment> from ?  [<-LINK->] according to this the syntax is different but you shouldn't even need that in your above eample? BrowserRouter can take multiple sub elements? 
solution: but only a single child, and I want to avoid using div/etc.. 

issue: is it possible to use an enum inside another enum?  [<-CODE->] I want to provide another validation for message with sent | received 
solution: 

issue: Is it possible to provide a type definition resolver for the compiler, so that for example when it encounters a module it doesn't understand likeimport foo from "./foo.css"I can parse the file myself and return a type-def? I'm aware oftyped-css-modulesfor the.cssfile type case, but it doesn't work great to do it disjointed from thetsccompile step, and there are other file types 
solution: 

issue: no [<-ISSUE->] @aaronbeall 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: I’m stuck with discriiminated unions, hope someone can help...  [<-CODE->] what would be the reason this doesn’t work? 
solution: would there be anyway to concisely say something like this. rectangles can only hold rectangles, and circle can only hold circles. 

issue: aaronbeall: Does this work?type a = "a" | "b" | string; 
solution: 

issue: I've got a question- I'm trying to write HttpRequest<any> but a Typescript error says that the datatype is not recognized...any idea why? Suggestions would be greatly appreciated intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>  [<-LINK->] Suggestions welcome! 
solution: 

issue: I have a class ... [<-CODE->] and in that I have a variable... [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] I get the error [<-CODE->] 
solution: 

issue: pbadenski: try this  [<-CODE->] 
solution: Not really. It is more that, when you instantiate a generic, i.e.ExtendedShape, you fix the Type Parameter. Since we specify a Union type, it uses the union type, it doesn't regenerify the type later. 

issue: hiya, question, what is your preference to variables? public, or private with getters/setters? Why pick one over the other? 
solution: I usually create private variables, and add getters and/or setters as needed, I've been doing this since forever. But usually it meant instead of doinginstance.publicVar, writing something likeinstance.getPublicVar(). So to change my variable to private and adding getters/setters was absolute fuckery. 

issue:   [<-CODE->]  [<-CODE->] I’d like to be able to write a type – not a function! – representing the unproxied type: [<-CODE->]  [<-CODE->] (The above way of writing the type isn’t right, either; the fact that there’s not even syntax for writing out what I want, as far as I can tell, is strong evidence there’s no way to write this type.) 
solution: 

issue: so we can do [<-CODE->] And I would like to to the same inside a class [<-CODE->] I guess it's because I can't setvaluesas a const oh If I set it static it works good enough for me oh brackets 
solution: 

issue: Hey all. I have a class method like so: [<-CODE->] I'm confused about this error:'event' is referenced directly or indirectly in its own type annotation.I don't know what type notation it's referring to... What does it mean that the argument is referenced in its own type notation? never mind, I think I'm on the right track now... :/ 
solution: 

issue: anyone know if it's possible to "ignore" (pass-through) a generic type like this?Barhas one generic parameter, but I don't care what kind ofBarit is in this instance [<-CODE->] itwantsme to do this, but it seems unnecessary [<-CODE->] can't do this either, of course [<-CODE->] 
solution: (that syntax isn't allowed, btw). ghetolay: it can certainly be of any type, but it could also be of a particular type, too, and I want the return type (Promise<T>) to be properly typed. 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Is there any way to use a library that is consumed directly as a class or function, when using ES6 module export?e.g. the library would be typically used like: [<-CODE->] I know the ES6 spec doesn't support this, but surely there must be some workaround! import * as SomeClass from 'someclass'doesn't work in this case, andvar SomeClass = require('someclass')doesn't work when using ES6 modules 
solution: It's not a valid es module so you're going to have to futz it somewhere. webpack-fix-default-import-plugin. 

issue: hmm does it just not work for classes? I think it works for other types 
solution: doesn't work for functions either. NaridaL: Right OK. So if my research is correct, this is relying on standards breaking behaviour in the module handler (webpack in my case?). 

issue: anyone know why I can't do this? [<-LINK->] replace theV = CommandInput, W = CommandOptionin namespace withV extends CommandInput, W extends CommandOption, and it works 
solution: 

issue:  [<-CODE->]  [<-CODE->] and what do you think about this code, i know it must be stinky, i'm just playing with code. 
solution: vent(eventID: number): never gets used. ..because you never use it?. 

issue:  [<-LINK->] @DirtyCheck [<-CODE->] or what? 
solution: 

issue: ok.. so now that’s annoying, why won’t this work: [<-CODE->] 
solution: 

issue: @NaridaL didn't understand what you said here:@saurabhnanda like all interfaces, additional props are fine... rhys-vdw: oh, interesting. So a[number, number, number]can actually typecheck against[1, 2, 3, 4, 5..]but not against[1]or[1, 2] rhys-vdw: is this an undocumented or undefined behaviour, or, is this according to spec? 
solution: 

issue: aaronbeall: thanks, I'll take a peek. Any mechanism to call out multiple props? or just keep extending 
solution: Under the hood its using some fancy map-types to give you a type with those keys and their original types form the first type arg (FooPropsin this case). Perfect! one last question (and this one I understand is a bit of a stretch). Assume I had two child components I was rendering, each with a "team" param. This param is defined in two different components which both accept it. Is there a mechanism to say "pick this prop from two places and ensure it's the same". 

issue: Is it possible to wildcard export everything from a directory? I currently have an index.tsx with export { Foo } from './Foo'; export { Bar } from './Bar'; and so on I mean automatically export everything So that I don't have to add the module each time but is there a way of exporting them all at once? like a wildcard export Well that's for a single file and not for a whole directory 
solution: 

issue:  [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->] Where the Signup component actually requires additional props, but the compiler doesn't complain. Does anyone have experience using those typings? okay, the following solves my problem: [<-CODE->] 
solution: 

issue: Is there any way to do something likeimport {hash as bcrypt.hash} from 'bcrypt'? IMO it makes the code easier to read when there's a namespace, so I can see it's a library function. But then everything gets imported. Won't that prevent tree-shaking? 
solution: I agree. I wanted to use named imports and still have the namespace. But if it doesn't affect tree-shaking, I might as well useimport *.. 

issue: Given a type like this: [<-CODE->]  [<-CODE->] 
solution: 

issue: hello, is it possible to get string enum entry by value? First of all, I have an enum which I'm using for mapping of json config.. for example: [<-CODE->]  [<-CODE->] mapping is done by this function: [<-CODE->] and now I need to getBackendProviderby url btw, TypeScript v2.4.2 I've tried this: [<-CODE->] but it throws an error -> Element implicitly has an 'any' type because index expression is not of type 'number'. 
solution: 

issue:  [<-CODE->]  [<-CODE->] is that the JS Doc way to write it is not yet supported. http://usejsdoc.org/tags-param.html#parameters-with-propertiesThat way is [<-CODE->]  [<-CODE->] You can't add a private method, but you can add a public one. 
solution: 

issue: Hi! It is possible (or planned) to tell the compiler to always infer thethistype of methods implicitly? In the example below I specified thethistype explicitly so that the last line is  reported as an error. However, I would like the compiler to do this for all my class methods automatically. [<-CODE->] mmmveggies: In your code I would get a runtime exception starting ataMet().thiswill be undefined. That's why I like thethistype declaration but its not really practical to always specify them explitily 
solution: 

issue: Yeah,, I was trying to be polite... :) 
solution: 

issue: Hello, I'm trying to pass the credentials parameter to fetch: [<-CODE->] But I'm getting the error “error TS2345: Argument of type '{ method: string; credentials: string; }' is not assignable to parameter of type 'RequestInit | undefined'.” unless I specify it as “'include' as RequestCredentials” 
solution: 

issue: czhower: agreed but I think the flaws in the unquestionably rushed and undiscplined design of JS were not necessarily in the type system. It is more behavior, largely coersions of things like dates and arrays in ways that make no sense. 
solution: 

issue: Cool you worked at Borland@czhower. I enjoyed their original C++ tools up through C++ Builder 
solution: Cool. Yeah.. if you know where the easter eggs are you can find my name in Delphi and C++ Builder :)  Indy and IntraWeb are also mine which yiou might know of if yiou are from the Borland world.. 

issue: I could not deliver a test for a job, because all my .net core project with angular just messed up, dont why i still using angular 2 
solution: 

issue: add another generic? add<T>toIFnMapdefinition and pass it to theIFnproperty value, thenexec<T, Fns extends IFnMap<T>, ... ? I have not seen that generic syntax (i.e.<T = {}>) before -- what is that 
solution: It's a default type for the generic.. 

issue: Is there a cleaner way to write this using array spread? [<-CODE->] I guess usingconcatis cleaner: [<-CODE->] 
solution: 

issue: aaronbeall: Does it work when you try to run it? The type annotations that are used in the example can actually be parsed by Babel because they fall in the intersection of TypeScript & Flow syntax. I wonder if that has something to do with it? Nevermind what I said it's now documented [<-LINK->] 
solution: 

issue: is there an equivalent toObject.keys(SomeInterface)? obviously you can't treat an interface/type as a value, but it would be nice to not have to maintain an interface and a redundant list of keys when using (for example)_.pick 
solution: drewwyatt: I think it's fine. But you could also use separate interfaces since now you have a series of overloads you don't need to even have the default.. 

issue: Is there a proper way to type the return values / arguments for promise callback chains? @aluanhaddad to help document & enforce what's coming back from a promise e.g. [<-CODE->] What's the best way to enforce a type on non-typescript modules or globals.  This seems to work but it s a bit verbose [<-CODE->] is there a faster way to declare an interface for a sub-property e.g.process.env 
solution: this gets back to my initial reaction, where the type of the property allows undefined, but still requires it to be declared. 

issue: Can someone explain this behavior for me? [<-LINK->] basically: why don't properties of implemented interfaces in abstract classes become abstract if not implemented? (automatically) 
solution: dwieeb: it's a limitation/design decision. You can always use declaration merging: [<-LINK->]. 

issue:  [<-CODE->] Anyways I'm unable to get interface merging to work... [<-CODE->] Should make it possible to do [<-CODE->]  [<-CODE->] NaridaL: Thanks. This is what worked but wasn't obvious to me: [<-CODE->] NaridaL: What I did not realize was I have to import React... otherwise these typings would effectively wipe them out 
solution: 

issue: jasonkuhrt: as you're importing a module you need to extend the module, not a namespace merge 
solution: 

issue: I came across the following issue, which might be related: [<-CODE->] Any way to make this work? The error isType '{ [x: string]: T; }' is not assignable to type 'Record<K, T>'. 
solution: 

issue: hey guysI have a typescript question: how can I1) allow multiple enum types for a class field AND2) evaluate the specific enum type of a value?e.g. [<-CODE->] I understand thattypeofwould only return a string and this is why it fails the only solution I found to be working - but it's very unflexible - is this: [<-CODE->] is there a better solution? I'm also fine with not using enums at all btw 
solution: 

issue: honestly I thoughtx[]was just syntactic sugar forArray<x> 
solution: mmerfort: Jonathan Skeate is right. 

issue: what are actual possible api responses for example 1? shouldhmm1be valid? probably not, right? is that what you are saying is your expected result? onlyyay1should actually be valid? 
solution: 

issue: here the fuck is  [<-LINK->]  [<-CODE->] wtf is this? 
solution: 

issue: tslint has its own config file and is fully documented and suports completion, so just find the docs and add the option tslint.json, in same dir as tsconfig.json ex: [<-CODE->] 
solution: 

issue: heyo anyone know why thisaddBreakpoints(breakpoints: Array<Array<number, string>>): Debugger;would be returning 'a parameter initializer is only allowed in a function or constructor implementation'. i'm trying to declare typings for nodejs it's in a namespace i declared, and then under an interface i'll post a gist real quick BehindTheMath:  [<-LINK->] line 15 Hm ok, seems like it's not letting me use Map 'name Map not found' ahh i was using map wrong, thanks! lol more of a typo really 
solution: 

issue: InsidiousMind: Where is that line? mhov: what happens if you add them to the_namespace? InsidiousMind: I'm getting an error thatArrayonly takes 1 type argument. Did you mean to useMap? Also, I don't think you can assign values insideinterface types. Maybe use a string enum? 
solution: 

issue: Hm, could someone help me understand why I'm not getting a type error in this code?  [<-CODE->] This is the type ofgetScreenshotById: [<-CODE->] And of lodash'sDictionary: [<-CODE->] I do have"strictNullChecks": true,in mytsconfig.json. 
solution: InsidiousMind: It works in Playground: [<-LINK->]. 

issue: So I got a function that appends dom nodes: [<-CODE->] And I want to use it in a function that has HTMLElements [<-CODE->]  [<-CODE->] 
solution: InsidiousMind: You want typings for the object's structure, or the values as well?. 

issue: Oh hey Sorry@BehindTheMath! Um, well that was a toy example, but in reality I was trying to customize the prop name that is inserted into a component 
solution: 

issue: hello I have some issue with ramda and tyscript [<-CODE->] this results in the following error Type 'string[][]' is not assignable to type 'string[]'. 
solution: 

issue: schfkt: I don't know why that doesn't work, but here's a workaround:  [<-CODE->] 
solution: 

issue: BehindTheMath: You can do away with the else, its not needed in that example. you could also use a ternary operator:```  [<-CODE->] 
solution: 

issue: Can anyone help with this simple question: [<-CODE->] It saysType   "{data: Pizza[];  loaded: false;  loading: false;}" is not assignable to type 'PizzaState' . Types of property "loading" are incompatible. Type 'true' is not assignable to type 'false'. TS is showing this error on [<-CODE->] not able to get the reason whats happening here just converted my interface to following and it works: [<-CODE->] yeah did the same. thanks 
solution: eldem: falsecan be a type too. It's not documented well, but it works similar to string literal types and number literal types.. 

issue: is it possible to supply type parameters to a function without invoking it?f<number>(1)g = f<number> f<number>gives'number' only refers to a type, but is being used as a value here. 
solution: Works fine withR.mapinsideR.pipebecause it gets called with one argument inside to yield another function.So I can doR.map<number>(x => x + 1). Kind of a weird problem. 

issue: This is true of any of the lifecycle methods I define on the class... QuantumInformation: actually if I went down that route (and I've had to) the correct fix is({ graph }: Props), but that's not really the fix I need. The type definitions are misbehaving - which means I'm not getting tooltips etc. QuantumInformation:  [<-CODE->] But bear in mind that this code does nothing 
solution: 

issue: I used to like assembly, but I quit it to finish my soft science degree (( should have left uni 
solution: 

issue: rhys-vdw: classes kind of suck... you can't infer argument types in methods. interfaces and objects work much better this way... but I guess react can't use pojos rhys-vdw: one reason I like Mithril is you can use pojo components (or classes or closures)  [<-CODE->] much better inference 
solution: 

issue: rhys-vdw: You could probably use a decorator. But why do you want the type guard? Why can't you do that without the type guard? 
solution: 

issue: BehindTheMath: Nice, that does work actually! 
solution: 

issue:  [<-CODE->]  [<-CODE->] or [<-CODE->] 
solution: 

issue: rightisleft: Did you see this? [<-ISSUE->] 
solution: 

issue: How can I fix a wrong typing, which I've installed innode_modules/@typings? In my case an error callback is incorrectly defined.  [<-CODE->] I've added this to ./typings in my root folder, and my type roots in tsconfig.json are defined as"typeRoots": ["node_modules/@types/", "./typings"]I was hoping this would overwrite the typing defined in (this case)./node_modules/@types/cordova-plugin-device-motion Solving it by copying the types to ./typings and removing@types/cordova-plugin-device-motion, which works, but not so pretty I guess. Nevermind, removed typeRoots and made sure typings was actually found by the include glob. It's not what the docs say though: [<-LINK->] Ok, merging works pretty well, even for minor differences in extends, which is pretty cool :-) sgronblo: my include is defined as"include": [ "src/**/*.ts" ], so I moved mytypings/folder intosrc/as well and removed typeRoots. Interface merging works now. It's also by trial and error, so not even sure if this is the way of doing things. 
solution: 

issue: Object doesn't support property or method createShadowRoot edge. So any way around to make it work? 
solution: 

issue: Hi,is it appropriate to ask for help in solving TypeScript related issues here?If so, I have a decorator [<-CODE->] and decorated object [<-CODE->] Also I have an error TS2304: Cannot find name 'User', in case I use it like that [<-CODE->]  [<-CODE->] It is exported, in other words [<-CODE->] or I misunderstood you 
solution: 

issue: HeyI have error with iterators [<-CODE->] should i specify the undefind in the generic? 
solution: 

issue: @czhower [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: MathanKA: Lodash has a lot of useful array/collection methods. Looks like intersectionWith will do what you need: [<-LINK->] cjrutherford: What do you mean by "boolean comparison with date objects"? What are you trying to do? You may need to be more specific with your question then. 
solution: 

issue: Hi all, I am in development and am getting "variable is declared but never used" errors from tsc-watch, how can I suppress the error and let everything to compile? I have a lot of variables I will need to use, but aren't setup to use yet 
solution: 

issue: MrCroft: Static methods are referenced using the class name, e.g.SomeClass.staticMethod()(since they are methods on the singleton instance of the static class). Instance methods are referenced usingthisinside the class (e.g.this.instanceMethod(), or an instance of the class when outside it (e.g.someClass.instanceMethod(). 
solution: MrCroft: MyClass.myStaticMethod() is the correct syntax.  A static method belongs to the Class and not an instance of the class.  That is the whole point of a method being static, and writing something like this.myStaticMethod() would be very misleading.. 

issue: yak77: Which line is causing the error? 
solution: 

issue: MathanKA: Why can't you use lodash? Why re-invent the wheel? You could read lodash's code for an example of how to do it. 
solution: 

issue:  [<-CODE->] I've solved the problem by extending FakeModel that fakes  Model interface implementation, using Model annotation and export User as you've suggested. [<-CODE->] Again thanks a lot for your help 
solution: 

issue: I HERE 
solution: 

issue: it's an IDE task and importing everything from angular isn't the best you should import each prop you use import { Component, Input, ... } from '@angular/core' oh this is angularjs code well doesn't change much 
solution: 

issue: I'm using tslint with the airbnb settings, any idea how I can allow variable names starting with a capital letter? I want that for react stateless functional components 
solution: 

issue: static members cannot access class type parameters can anyone explain why this is? i'm working around it by making them instance members, but it makes for a lot of unnecessary code simplest example:``` oops  [<-CODE->] ? 
solution: 

issue: I made simple typescript skeleton using a type checker/tslint'er I made before. (now it also emits the files)Dunno if anyone cares, but here it is: [<-LINK->] Included launch settings etc, image how error outputs look like in readme file 
solution: 

issue: I actually couldn't find consistent documentation on where to put the declaration file. I'm somehow working withsrc/types/[module-name].d.tsat the moment-- with the hopes of getting the declaration files contributed later I'm not entirely sure why that's working, yet... but its working Is there a way to write definition files with arrow functions? I see arrow declarations to the right of the ":", ala:callback: () -> string, but not any forexport function () -> string 
solution: 

issue: I've cloned the TypeScript repo... Can, please one point me were to start to understand how that code is structured so I can contribute? Also, were can I find the changes that have been accepted to be implemented, to work on... Or I should just work on anything I want and submit?Thanks,happy2018,Somehow young with versioning and open project contribution. 
solution: 

issue: Yeah not sure I follow how bootstrapping means the compiler arguments are case insensitive And I can't find the JS framework called "boostrap", everything thinks I mean "bootstrap" :) Yes JS is case sensitive I'm not using CLI either :) I'm using tsconfig 
solution: 

issue: I've been playing with the compiler options page and I seem to be missing something... getting parameter initializers for destructured arguments. Given this function: [<-CODE->]  [<-CODE->] 
solution: 

issue: Do you need a pipe to get out as well? :) 
solution: Very authentic joke... Long since I last heard one like that. No but... I'm used to understand things without the doc by reading the sources... Except that this time, it is larger that Ionic or Angular. 

issue: and who's the geezer that once said: "...code should be self documenting"?    (where's my pitchfork) 
solution: 

issue: +1@ShawnTalbert Help needed urgently [<-CODE->]  [<-CODE->] Transpiled code : [<-CODE->] OUTPUT : [<-CODE->] Where, pls 
solution: 

issue: anyone experienced with using typescript with docker? I'm getting an annoying error when i try to usetscin a docker container that I don't get outside of it: most of them are related to mongoose and a few other dependencies when it says "Duplicate Identifier" here's a sample list of errors: [<-CODE->] could this be a problem with the@types/mongoose package? if so, not sure why the error would occur only in docker nvm i've resolved my issue 
solution: 

issue: Fusebox 3.0 have been released :-)Great support for typescript, kinda nice to know about :-) [<-LINK->] Fusebox is great, its using the ts source in one project Im having fun with :-) great when developing something an need to test right away 
solution: 

issue: Why is it non compiled? Why not just compile it? Am I missing something? 
solution: 

issue:  [<-CODE->]  [<-CODE->] But nothing happens. The debugger seems to start, then stops immediately, and I see this in the Debug Console: [<-CODE->] (And the breakpoint I set is not getting hit.)Am I trying it incorrectly? 
solution: 

issue: So I'm trying to get a feel for TS patterns. Developing a simple process automation script that's composed of several "adapter" modules to communicate with different services I use at work (github, pivotal tracker, etc.) I started by making interfaces for these services and dummy implementations, but now I want to fill out the actual implementation of each service while keeping mocks for testing. And it's starting to feel weird, like I'm doubling up on stuff. Looks like typemoq can't just generate a mock based on an interface, right? So what would you guys do in this situation? Feels weird to implement each interface twice, once for tests and once for real 
solution: 

issue: wow thank you for this! rjoydip: so you code with named exports only? :D also what is your opinion on* as exampleimports? I guess they are called umbrella imports what disadvantages there are when importing all exports? so for example I use lot of Ramda js library if I import whole R and use functions likeR.map,R.filterinstead ofmapandfilter with first solution I get full Ramda library to my js bundle? 
solution: 

issue: tsc -wdoes not appear to delete compiled files when the source file is deleted. 
solution: 

issue: helo anyone know how to get type parameter inference sorta like this?  [<-CODE->] like, when I pass Foo<number> into Bar's type parameters, I should then be able to use the inner part of the foo type (<number>) the only way i can get it to work currently is by passing a separate type parameter  so how do you do it then ;-) right, but im concerned TS can't even infer B anyways 
solution: 

issue: Looks like Ramda'sevolveis broken with TS  [<-CODE->] with that code I get error: [<-CODE->] so looks like I can't change Card types withevolve? damn so basically I should add issue to Ramda's repo? thx! I commented on that issue also :) 
solution: 

issue: Given the type declaration, yea, looks like that isn't possible. [<-CODE->] An attempt at improving the types, which failed but might be useful: [<-CODE->] Missed this:const toExponential = (v: number) => v.toExponential(2) I'm not sure if it is possible to type it to cover your case currently, I found [<-ISSUE->] which seems to agree. Ramda doesn't maintain the types themselves, so I don't think opening an issue there would help 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: BehindTheMath: Hi, sorry I missed your messages. But in our case its a TS lib for a TS project but it mixes in React, not sure how to set things up there.Do I need TS-loader if I am writing a library or is it just for apps?How can I avoid the polyfil and let the application deal with that?How does tree shaking work for ES modules? It doesn't seem to tree shake whatever TSC outputs. I see code that shouldn't be there.I import that module into an index.js file but the application never imports, e.g the button from the library yet its production build contains the button code Hey I got some questions about building a UI lib with React and TS and I didn't get any questions yesterday.Given two separate projects: TS React Library & TS ReactApp1) Why would a TypeScript React.js Library need webpack or tsloader?2) What is the Library supposed to output? ES5, ES6 or just plain TS files?3) Is the Library supposed to include shims & polyfils, or is that the Apps responsibility? I feel like the library should not polyfill in risk of duplicate polyfill from other libraries used in the end application.4) How should the React TS library be structured? Right now we got an index.ts file that imports each module and rexports it.5) Doing  as I mentioned above, the applications production build doesn't seem to tree shake the modules the app doesn't import from the library.thanks @BehindTheMath for previous answers! It cleared a few things up and removed almost half my questions. I can't seem to get tree shaking to work  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] Gerrit0: You can't output ES6 code and expect it to be usable in other projects. Most projects don't transpile theirnode_modulesfolder Gerrit0: I got targetES5and modulesEsnext 
solution: 

issue: Hey guys, I'm having a bit of trouble gettingredux-thunk's extension of thereduxnamespace to play nicely.  [<-LINK->] For some reason VSCode and TypeScript can't seem to see that overload. Actually at some stage I definitely saw both when I did a "jump to definition" onDispatchin VSCode, but now just one. I'm getting this error: [<-CODE->] Ah ha! Apparently if I do this it will augment the type: [<-CODE->] Hello. 
solution: 

issue: not sure if this is what you're looking for? [<-CODE->]  [<-CODE->] 
solution: 

issue: "This syntax requires an imported helper but module tslib cannot be found" Ugh I can't get tree shaking to work at all It seems like the output of tsc (target: ES5, module: ES2015) doesn't work well with  tree shaking, does anyone have any experience with this? Has anyone managed to get Tree Shaking to work with React and TypeScript? 
solution: 

issue:  [<-CODE->]  [<-CODE->] https://gist.github.com/basherr/537ca5459cb02dcaea9a247fe58969f6 
solution: 

issue: hi,I am trying to include the appdyanmics in my app. 
solution: 

issue: Your error isn't in that code,  looks like a http request is failing. What are you trying to do? There's probably a better way to handle it. You've probably already seen this, but Thilo's answer has a good rationale for why you can't do this: [<-LINK->] 
solution: 

issue: I totally agree with you@rhys-vdw HummmAllowedEnumObjects NotAllowedEnumTypes Ok, got it 
solution: I didn't realizetypeofworked that way. I was trying to do something similar at one point but had trouble getting the types to work.. tl;dr - I had similar problems. Enum object types are a bit awkward to  use like this.. 

issue: Dear lord: [<-CODE->] LOLOL! That was all caused by passing aScreenshot[]instead of aReadonlyArray<Screenshot> I can't believe I worked it out 
solution: 

issue: Hello! Why do I get this errorProperty 'length' does not exist on type 'Object'.when I try to loop through an array with objects?Code: [<-CODE->] 
solution: 

issue: magiskaoskar: it means that what you're trying to loop on is not anArraybut anObjectyou should print outingredientsto see what it contains 
solution: 

issue:  [<-CODE->]  [<-CODE->] What am I missing? ah… got it… thanks Gerrit! @Gerrit0 that didn’t seem to resolve the issue… it’s being included, but I still get the error: [<-CODE->] any other hints? yup same error oooooI got it, it’s supposed to go in the file where I’m implemennting the mixin, not where I define the mixin does that sound right? 
solution: 

issue: If I get you well,@Alber70gYou want that keys of the returned state are keys defined in bothstateandactionsparameters Alloh,@Alber70g? 
solution: 

issue: Personally, I wouldn't useexport =... 
solution: 

issue: renewooller: sorry, had to go earlier. I think I'm starting to understand what you are going for here. I don't think there is a way to automatically make everything work... I might have an idea that could work better though. Playing with it. Cutting out everything that isn't necessary, here's one way to make it work, that unfortunately introduces a dummy property [<-CODE->] Beyond that I'm sorry to say I can't seem to think of anything neater. 
solution: 

issue: hello guys how can I input this 100,000 and return this 100k on typescript?n<1000 = As it is100,000>n>1000 = 1k, 2k, 9.8k, 99.1k … etc1,000,000,000 >n> 100,000 = 0.1 m, 40.4 m … etcn> 1,000,000,000 = Error message (Beyond Scope)Any help? 
solution: 

issue: hum why is(number | number[])[]not equivalent tonumber[] | number[][]? 
solution: 

issue: you then invoke it with something likefecthData<GridDersData>(url) cjrutherford: maybe something like this [<-LINK->] though I'm not an active angular developer atm I also hear WebStorm debugging experience is top notch 
solution: 

issue: hey all, having a little trouble debugging my angular app. Any suggestions for a debugger tool? ShawnTalbert: sorry posted that in the wrong chat.... meant to do it in the Angular one.... (doing Angular not AngularJS[1.x]) 
solution: 

issue: Type checking can only do so much... and not necessarily. What if you called shift twice? It makes the compiler's job much more difficult. Consider this: [<-CODE->] You could do this: [<-CODE->] rhys-vdw: use this: [<-CODE->] 
solution: 

issue: Hey all, is there a way to disablenoUnusedLocalswith a line comment?  [<-CODE->] Looks like there isn't Didn't work for some reason.; I tried that already. Works for params only it seems 
solution: 

issue:  [<-ISSUE->] 
solution: 

issue: you're missing the location where you're using the mixin 
solution: 

issue: Failed to load [<-LINK->] : No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin ' [<-LINK->] ' is therefore not allowed access. The response had HTTP status code 400. I'm trying to post data from angular 4 to mlab But when i posted data from postman the data is passing can some one plz help 
solution: 

issue: I agree for testing it's the easiest way.. for prod i would not recommend using* 
solution: 

issue:  [<-CODE->] The two lines inside theif (typeofgive out errors, how do you fix them?  I believe that the first one is a bug that is set to be fixed in 2.8, but am not sure about it. 
solution: 

issue: hi,I am trying to use intercom in my app. 
solution: 

issue: hey guys, im trying to understand abstract classes i'd like to do something like this  [<-CODE->] essentially, i'd like anyone who extends Foo forced to fill in a value for initialValue, and have that value copied over when the constructor is called 
solution: 

issue: nieltg: Where? How'd you find that? And what npm version does it correspond to? It says its forreact-split-pane v0.1.64but that version doesn't exist in npm 
solution: 

issue: Acidic9: interface Array<T>is not a prototype ofArrayso you can't don like thisArray.prototype.delete 
solution: 

issue: NaridaL: I use"strict": trueon mytsconfig.jsonwhich [<-CODE->] and there is no compilation error. 
solution: 

issue: I have a question about the map constructor based on an error I am getting...  [<-CODE->] is valid ES6 syntax But I am getting a tyepscript error: 'Map<number, number>' is not an array type. When trying do spread like this in the constructor Link for context: [<-LINK->] PMs welcome since I am going to sleep and will probably lose this question by the morning 
solution: 

issue: Opened an issue: [<-ISSUE->] 
solution: yes, specify the type explicity.... except it looks like your function wants to accept either a string or number representation?. 

issue: ShawnTalbert: can i make it so its not inferred as type number? yes, i dont know whatvaluecontains 
solution: I'd recommend_.isInteger()or similar from lodash. Will take a look at lodash. Thanks. I suspect you will find it useful! best of luck!. 

issue: Hello, just want to check here before submitting an issue: Is this a bug or should I make a feature request? [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Hi, i found an issue and was wondering if its known and if it could be a bug in typescript-loader (for webpack) and not typescriptI found that typescript (with webpack) doesn't import a class properly if its found in a file that has "-" in its file name if the file has a "-" in the filename, then using the imported class withnew MyClass()results inis not a constructorerror in the browser no errors are coming from tslint or typescript compiler would love some feedback on this, if i should open an issue or not. 
solution: 

issue: jamespacileo: try the linked issues in [<-ISSUE->] 
solution: 

issue: adding the private member works around structural subtyping (i.e.Idsupertype is not chosen) 
solution: 

issue: Hello. I am trying to figure out how to type a class member. Any pointers? Here is what I'm trying to accomplish: [<-CODE->]  [<-CODE->] It seems like I may need something like: [<-CODE->] But that doesn't work either (can't specify the generic of the function explicitly when calling it?). 
solution: 

issue: rcjsuen: no, and it's not necessary usually 
solution: and then it all works as expected. 

issue: Hi. I have some code that looks like this: [<-CODE->]  [<-CODE->] Right, but my questions aboutwhyit can't be converted. The error doesn't give me any info about that. If they are incompatible some how, in what way? Yeah, I was able to do something similar with: [<-CODE->]  [<-CODE->] 
solution: 

issue: Has anybody else had problems with their editor not detecting/applying tsconfig.json settings? I'm seeing the same behavior in both vscode and sublime. So completions, etc. work with relative paths, but not absolute ones because it isn't loading my config. It also errors whenever I use getters and such, even though I've set my target to ES5 lol nevermind I didn't include some of my files ininclude 
solution: 

issue: I appreciate your help.  i should have opened a repl like the playground and tried it out. 
solution: 

issue: Not right now eyelidlessness: [<-ISSUE->] 
solution: 

issue: SalathielGenese: It's another solution. But - sorry - an ugly solution. :) It's confusion to read and agianst clean code etc. But thanks for support. 
solution: 

issue: Here's a very old SO post: [<-LINK->] . Anyone know if this is possible, nowadays? (The accepted answer seems like a work around, to me.) PedroEsperanca: You can type the callback that you are passing in as typeanyso that it can be assignable to() => ReactNode. Show me the line generating the error. 
solution: 

issue: persists :s here is the code: [<-ISSUE->] the tricky thing is that it has multiple tsconfigs thanks for the help already@itbrandonsilva! my big question is how to add an as any to the component 
solution: 

issue: hi all what's the problem in this code ? public castToTreeModel(entities: any[]): TreeModel {let  treeObject: TreeModel;for (let element of entities){treeObject.children.push({value: element.topic, id: element.id});} [<-CODE->] after it's build it says that can not find treeObject variable 
solution: you're casting treeObject but not creating one. 

issue: Anyone hit this before?  I'm struggling with debugging it "Interface 'Element' cannot simultaneously extend types 'ReactElement<any>' and 'ReactElement<any>'" Worked around this by reverting a bunch of packages.  However, it would be nice to know how to debug it in the future.  There's room for a more useful compiler error here I'm sure 
solution: 

issue: is there an equivalent for flow'stype-at-posfor typescript? a way to get the (inferred) type of an identifier found a partial answer to my question here: [<-LINK->] 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] I'm hoping to make it possible to import files relative to my project root like this: [<-CODE->]  [<-CODE->] When I useyarn run tsc --traceResolutionit doesn't look it even tries to remap the path. 
solution: 

issue: GongT: but when i do this in ngOnInit i get the same error 
solution: 

issue: How would I do the following correctly? [<-CODE->]  [<-CODE->] Tried looking for a solution but haven't really found anything useful :( 
solution: 

issue: traverse: you can't types are at compile time, using a variable doesn't make sense 
solution: 

issue: Hi everyone. is this a good syntax for module augmentation import * as ReactRouterDOM from 'react-router-dom';declare module 'react-router-dom' {    interface RouteProps {        meta: {            icon?: string,            name?: string,            sidebarVisible?: boolean,        }    }} and in my tsconfig "typeRoots": ["node_modules/@types","webpack_config/types","src/common/types"], when I put src/common/types first my declaration file is used vice versa declaration from node_modules is used either when merging is not happening either way* 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Sorry for the late response. Im travelling and have limited access to my laptop. [<-LINK->] @thepheerThe solution doesn't really work because the typings of the original function is lost :(  [<-LINK->] @NaridaLThis seems like can not be made generic? 
solution: 

issue: tusharmath: ah, i see there is probably no way at least i can't see any 
solution: 

issue: I seem to be struggling with using TypeScript to write a Node module test.ts [<-CODE->]  [<-CODE->] as far as i can tell, it's telling me I can't export something I'm trying to export, because I'm not exporting it? Phantom190: that is unfortunately not possible because I need a CommonJS-style export NaridaL: in the actual code, I'm trying to export multiple things specifically I'm trying to export a function this is closer to what it looks like in practice  [<-CODE->] I'm writing a module you can if you use CommonJS modules! but apparently you can't generate declaration files for CommonJS modules that's the limitation I'm running up against 
solution: 

issue: new Test()is going to be a lot more clear in its intent 
solution: 

issue: can't you make the default export a function and namespace by typing it as an interface with a call signature? ah ok, just caught the jquery response above 
solution: 

issue: can someone help me out here [<-LINK->] my head hurts. i feel like this is supposed to work (even tho my typescript knowledge is 2 days old) eyelidlessness: I tried finding an online web that supports both react/typescript but failed at that too nop change ReactElement to React.ReactElement Yeah that's almost exactly the error I got on the typescriptlang url The first line is exactly the same at least 
solution: 

issue: Is there a way to supress specific warnings like " TS7016: Could not find a declaration file for module" in my case i wanna use UIkit 3, but there are only type definitions for 2... afaik NaridaL: thanks, seems to work, so just to be sure - ending up with something like [<-LINK->] would be "best practice" outside of writing &  commiting definitions yourself ofc makes my IDE happy ;) 
solution: 

issue: What is the proper way to debug a type definition?  I'm trying to fix this type definition to submit a PR [<-LINK->] I've used this [<-LINK->] as well as sinon-chai ( [<-LINK->] ) as references to try and figure out what's going wrong, but I just can't seem to get the definitions attached to the library object 
solution: 

issue: can someone help me understand this error? [<-CODE->] i cannot imagine a scenario wherexis not an object type am i doing something wrong? 
solution: i want something that matchesinterface Fooand i want to spread it into a return object. 

issue: eyelidlessness: see [<-ISSUE->] 
solution: generally you work around it using Object.assign. 

issue: Hi, i just run into an issue while inheriting Array in my own class, was able to solve that as suggested inhttps://github.com/Microsoft/TypeScript/wiki/FAQ#why-doesnt-extending-built-ins-like-error-array-and-map-work. now i have a few questions.Why above suggestions are not made part of compiler it self. 
solution: 

issue: goyaltushar92: Since there are no runtime types, arrays/numbers etc. are all indistinguishable. The unique type annotations you've applied to your constructor are not taken into account, since there is no runtime-type driven dispatch 
solution: 

issue: I agree with@eyelidlessnessabout not extending built-ins 
solution: 

issue: @eyelidlessness [<-CODE->] please explain i am still not very much satisfied, why shouldn't we extend Built In classes (it seems supported inES6)? and If it is due toES5issues as explained inhttps://github.com/Microsoft/TypeScript/wiki/FAQ#why-doesnt-extending-built-ins-like-error-array-and-map-work. so, compiler should show error, when targetingES5, as currently compiler does not prevents users doing (there are other features that are restricted by compiler if we target lower versions). @masaeeduSince there are no runtime types, arrays/numbers etc. are all indistinguishable. The unique type annotations you've applied to your constructor are not taken into account, since there is no runtime-type driven dispatchI can't get that too. 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] the error I'm getting when trying to compile the primary package is: [<-CODE->]  [<-CODE->] 
solution: 

issue: hi, I currently have TypeScript compiler complaining: [<-CODE->]  [<-CODE->] I have dom already. my tsconfig: [<-CODE->] btw, the tsc compiler itself doesn't complain. It's failing when running tests withjest. Hummm 
solution: Simplest solution is probably to not use them, I'm not sure I see any advantage to it... However you could augment theHTMLDivElementinterface. [<-CODE->]. (Not actually sure if that works with React, but I think it should). 

issue: NaridaL: Anyway, thanks a lot for the response! 
solution: 

issue: hi any idea how i can get rid of the circular reference error if im not circular referencing because im using Pick and im not choosing myself [<-LINK->] 
solution: 

issue: hello, good to be here for the first time ;-)I am coming in need, I cannot wrap my head around one thing.I have an interface : [<-CODE->]  [<-CODE->] 
solution: NaridaL: I am trying to get this running, it does not yell anything at type/interface declaration but there's problem with exhaustive checking inswitch. 

issue: Can anyone explain this behavior?  [<-CODE->] I understand that TS does not have "exclusive unions" so that as long as the value can be assigned to one of the union constituents then its allowed ( [<-LINK->] ), but I don't follow the assignability rules because the same value can't be assigned directly to the matched union constituent directly? 
solution: 

issue: NaridaL: Hi Adrian ... Thanks for the reply ... its seems that the isConstructor method returns true for both cases: passing in a Class (constructor) or a callback function (as an arrow function) ... I can't seem to figure out how to distinguish between the two 
solution: 

issue: I'm writing definitions for a non-TypeScript library. It looks like they're using submodules, so the import looks likeimport * as library from "project/submodule";I get an errorCould not find a declaration file for module 'project/submodule', even though theproject/submodulefolder contains anindex.d.tsfile. Any ideas? 
solution: 

issue: NaridaL:  [<-ISSUE->] 
solution: 

issue: UselessPickles: yes correct, Im using a slightly different code that’s why I made a mistake here. But issue remains, if implementor does not containvaluescompiler does not give errors 
solution: 

issue: I might be missing something obvious... but can anyone tell me what the point of an abstract property is? This is apparently fine, but I can't think of any instance in which it would be useful... [<-CODE->] 
solution: 

issue: Actually, it makes some sense to me for something like this: [<-CODE->] Salathiel, can you point me to some code that uses it for something useful? Some [<-LINK->] that make some sense I guess.. But still, that's a getter, not a property... I guess it could be useful in a.d.tsfile with defining area asabstract readonly area: number 
solution: Though you could still just declare it without the abstract keyword, you can still override it... declaring it abstract only makes sense when you have to override it... and I still have a hard time believing that's useful very often. [<-CODE->]. 

issue: thomaskempel: x!.length thomaskempel: the implementation looks correct but with your init, I'm guessin TS infers T asnull so you basically have value: undefined | null tbh I wouldn't recommend using null at all alternatively you can do [<-CODE->] 
solution: 

issue: You should instead usenew Optional<string>(null);, otherwise the type inference won't work as you expect. [<-CODE->] 
solution: 

issue: yeah, worked for me, thanks guys! 
solution: 

issue: ok, this is just annoying now [<-CODE->] Each decorator line fails with [<-CODE->] This is confusing, I'm not calling the decorator as an expression I can't provide a playground link since I can't enable decorators there thanks@NaridaLI was used to build method decorators, didn't know it was different for properties 
solution: 

issue:  [<-CODE->]  [<-CODE->] ...im assuming because it's not exported? anyone know how I would export it ? or what Im missing in order for me to import it? NaridaL: No I assume I need one? I guess thats what "exports" the module? Is there an easy way to export the module without having to make type definitions for everything? the modules im trying to use are huge and have a lot of functions and typings dont exist for it write what in ts? I guess my question is, can I do something such asdeclare module "test??"  {  import = test: ..?? ;   export = test  }I am not fully aware of how to export the amd modules as I don't have type defintions.   im guessing with the following above ^ I was hoping for a concrete example 
solution: 

issue: Hey all :) Fun question... This works fine: [<-CODE->] But this does not: [<-CODE->] Is there anything I can do to fix that problem? In my case I have either an array of one type, or an array of the other type... (I'm in the second camp) 
solution: It appears to be fine :D And I think it should run, because they both have the same map functions a the end of the day.... 

issue: in my TS project im gettingReferenceError: define is not definedim using dojo toolkit and dojo modules(amd). and have type definitions via@types/dojoany idea what to do for me to fix this error? 
solution: 

issue: How can I define an abstract method with a known signature?  [<-CODE->] ^^ Is not correct as BarMethod is the return signature So what is the correct way? 
solution: I can use "Reflect.getMetadata('design:type', target, 'age')" to get the type of a decorated property called 'age'. Is it possible to get a string[] of all property keys with metadata, so I can specify the property keys in a loop and get the metadata for all decorated properties?. 

issue: hmm, maybe it's an issue with Angular's typings? 
solution: 

issue: tstackhouse: Can you copy paste some logs 
solution: 

issue: Okay this is really bizarre... I'm going to chalk this up toyarndoing something odd.  By simply removing and re-adding@types/sinon-chaias a dependency,  everything magically worked.  Mypackage.jsondidn't change, nor did myyarn.lock... I'm wondering if I ran some command incorrectly after bumping a version in my package.json... Sorry if I'm spamming folks with theorizing, hopefully it will help someone else 
solution: 

issue: If I publish a module that uses a specific version of a@typeslibrary (say@types/react@15), and a module consumer uses@types/react@16(or any other version really), that would make all the types incompatible, correct? Because I'm getting errors like this: [<-CODE->] 
solution: 

issue: Error: Debug Failure. 2.7.1 multiple projects 
solution: 

issue: NaridaL: Yeap, it does. rhys-vdw: Yikes. Maybe this? [<-ISSUE->] Seems hack-y, though. 
solution: 

issue: skalinic: is the !something a bundler directive? like for webstorm? ok. you could add adeclare module '*!something' { ... } block 
solution: Yeah. In our JS we whitelist globals in our.eslintrc.. 

issue: hi guys. i cant remember if i wrote yesterday about a problem i have with t4 templates... i would like to know if someone here can make it work with mono on linux... if no i could maybe try to make it work and por a solution or whatever 
solution: 

issue: Hi, interesting behavior for the never type: [<-CODE->] only the 3rd one throws an error  [<-LINK->] Bug? Works as expected? 
solution: you forgot the .king in 3rd example ?. 

issue: sam-s4s: this isn't exactly what you're trying to do but maybe you'll be able to adapt it  [<-LINK->] SalathielGenese: you install it... either globally or locally click on the version in the bottom right to choose it 
solution: click on the version in the bottom right to choose itAwesome.+5 clapsThank you so much. 

issue: Hi everyone! I've a question that I asked on stackoverflow, but no one answered. I almost reached the deep web to find a solution, but nothing... The problem is that I have a  set of files like this: [<-CODE->] What can I do to solve this problem?? (I've already found this issue that gave me a glimmer of hope, but then it seems not to help..)Sorry for the long text and thanks in advice! :D *this issue: [<-ISSUE->] 
solution: 

issue: Bummer, but thank you :) 
solution: 

issue: Pajn: what have you got so far? 
solution: voltcode: the general rule that seems to hold: typings files can't have any top-levelimportorexportto be used in ano module systemsetup. classDeclaration.heritageClauses. 

issue: boompig: using the modules using import etc doesn't prevent you from including them with script tags from cdns with rollup you can declare modules as external and specify under which global they are accessible webpack probably does too can't remember right now... that would be more flexible blindmonkey: you can't force non-class instances but you can doA extends object which will disallow strings and numbers 
solution: 

issue: boompig: if you can't find a solution with your bundler you can add a small .d.ts file to your project. Eg:  [<-CODE->] Either include it in your tsconfig, or add this to files that use the global:  [<-CODE->] 
solution: 

issue:  [<-CODE->] 
solution: Inside the body of the function I would like to access constructor to replace a function on the prototype. The interface of the function agument enforce a class method, where the specs of the new replacement function is defined. jacobmadsen: You need a decorator that will provide you with the prototype. 

issue:  [<-CODE->] 
solution: ...and you're doing right. Hmm of cource. 

issue: Hi! Anyone can help me?This is 3 examples: a, b, c. For first and second "arg" type is true (number). For third version typescript can't resolve type for "arg". [<-CODE->] 
solution: 

issue: Hey all. I've found what I believe is a reportable (but minor) issue with either laravel or another library I'm using, but I can't determine which it is. How can I figure it out? 
solution: 

issue: qm3ster: I think, it is right behavior. When function has called, one argument can't be dependence to another. 
solution: qm3ster: No, because, i need keys for second argument from first argument only.. 

issue:  [<-CODE->] Right now I'm using a private property with a getter but it's getting annoying when you have many of this kind of properties: [<-CODE->] 
solution: amatiasq: afaik, it works like in C# where you have readonly for constructor initialized stuff and const for the rest. Nothing like Final in Java :(. in factreadonlybehaves like Java'sfinalbut I'm not going that way but more like:A property that is normal for this class but readonly for any other code.. 

issue: Hi there, I've just updated to TS 2.7.1 and have some Problems with the noUnusedLocals=true flag. I import some functions and do actually call them. But TS is complaining that they are never read. Shouldn't calling be treated like actually reading the value? 
solution: 

issue: I cant really reproduce it in a small example.  [<-CODE->] but I found out, that it is happens often (or always) in arrow functions 
solution: 

issue: I think this is it. [<-ISSUE->]  [<-CODE->] 
solution: 

issue: google into "es6 modules" [<-CODE->] 
solution: 

issue: TS had the namescpace thing, but i dont think it works on conjuction with es modules...  [<-CODE->] it was something useful when es modules (webpack and etcetera) werent a thing and you simply concatenated JS files for browser use if I recall elm also allowed for imports like thati guess its just a JS design decision 
solution: 

issue: How can I match the right interface of the handler, when making Proxy extendable? [<-CODE->] I get the error : [<-CODE->] 
solution: 

issue: Hello, I'm having troubles while writing a declaration file for node-opencv, is anyone here to helpme? please :D 
solution: 

issue: IpiVasquez: i can give it a try 
solution: In order to test if my declaration files are correct I had to put them innode_modules/@types/opencv. 

issue: therehasto be an issue about it :) 
solution: you may be able to write a compiler plugin for that or do it with an external tool?. 

issue: Does anyone knows a nice documentation generator for TypeScript? Except for typedoc, because i am usingtypescript@nextand there is this issue [<-ISSUE->] . Why on earth is typescript unhappy with [<-LINK->] code when strictNullChecks is set to true?  [<-LINK->] actually works. Now i wonder why isArray type guard has such strange behavior? 
solution: 

issue: When isdiagnostic.categoryset to anything butDiagnosticCategory.Error? When do we get warnings and messages? My experiments show that toggling thestrictcompiler option toggles between error diagnostics and no diagnostics forstrictviolations, so that's not it. 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] Workaround: [<-CODE->] Is there a better way? [<-CODE->]  [<-CODE->] sam-s4s: thing : { [x in "dog"|"cat"|"thing"] : Blah }? 
solution: 

issue:  [<-CODE->] ? 
solution: I just want to enforce that an optional param of the CrxButton class is an object that has an arbitraty list of CrxDropdownItem properties. But it turned out I wanted to access them from outside anyway, so a generic type was the solution... if I didn't need to do that, I thinkitems?: { [x: string]: CrxDropdownItem }would have suited. 

issue: Is it possible to use the types inside_Handsontablein this type-def file? [<-LINK->] Well bummer Actually... it looks like in that version you can access those things onimport * as Handsontable... but the version I have (installed byreact-handsontable) lacks theexport as namespaceat the bottom and I can't get it to work 
solution: 

issue: Is myoutDirbeing ignored when I useextends? I dont get why this is not working [<-LINK->]  [<-LINK->] Stupid me, I usednoEmiton my file 
solution: 

issue: Hey folks, with string enums, can't I use a string value to map to the enum value? For example, let's say I haveenum Foo { BAR = 'bar', BAZ = 'baz' }and can't I doconst value: Foo = Foo['baz'] // Foo.BAZ? 
solution: 

issue: I assume you would getQUUX Something about the order of the keys being defined affects the order they appear in. eyelidlessness: If it was simply, [<-CODE->]  [<-CODE->] Or looking at_.invert's implementation https://github.com/jashkenas/underscore/blob/master/underscore.js#L1051 [<-CODE->] 
solution: 

issue: how are you runnning your tests@alexesca jacobmadsen: you've defined address as optional, so yeah, propMap can be undefined in this case... nvm I see the issue... although, propMap might not undefined, bt map.address might be... 
solution: 

issue: @godenjiAbout your instance method not echoing in the console...The reaso is that in ES6 classes, methods are non-enumerable  Sorry then 
solution: 

issue: SalathielGenese: meant to reply to someone else? Is there a way to use typed keys in an interface? [<-CODE->] Results in:A computed property name in an interface must directly refer to a built-in symbol 
solution: 

issue: hi ) i have simple local store class with such method [<-CODE->] state object [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] here is an example [<-LINK->] how can i fix it? also there is no error with[ userId: string ]: {, but i cant mark it as string cause i need typechecking for number here and i cant convert number->string any time i need to get/select smthing also i have no keys autocompletion after second keythis.wordsService.store$.get("loadingState", studentId.toString(), 'smth');will not throw an error with[ userId: string ] 
solution: 

issue: hmm Card is not [string, string] 
solution: can is just have this:. casting string to enum?. 

issue: @jy95tsconfig.json  [in your root folder] [<-CODE->] Note: If I recall correctly, using "es6" instead of "es2015" will also work 
solution: 

issue: Hi! I am using typescript on a react native app that for now is just a prototype, but I plan to reuse presentation and types in the real one. Actually I want to use the very same types with apollo. I am right now working on the app forms and I was wondering if there is a way to generate them from the types. Maybe via decorators? (Although it seems that types can't be decorated :() Maybe there is a pattern I can use 
solution: 

issue:  hi ) why i cant do this? [<-CODE->] error for on returned value [<-CODE->]  [<-CODE->] 
solution: 

issue: Whats the proper way to import a JSON file? 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: jy95: You need to name the property in the interface Or maybe you are trying to do atype WhichCategoryFunction = (object: TPN) => Category? Not sure what TPN is though 
solution: another interface : in short, an object with properties. 

issue: I keep the interface and set the types for the function ( I try to write my own index.d.ts )  [<-LINK->] I don't understand : ES6 Set has size property : [<-LINK->] Anyone know how to fix this error (or a workaround like the Array.from type) ? Found my ugly solution : [<-CODE->] yes but this error just doesn't care about it ^^ Now, I try to understand how to make a namespace because a devdependancy use a sameName that one of my interface ^^ 
solution: Is there a better way to export member types that to import the module you're currently in? [<-LINK->]. 

issue: mrdziuban: I may not understand your inquiry, but is this what you're after? [<-LINK->] 
solution: 

issue: Hey guys, im trying to implement a simple config file that gets variables from my environment, the way I did this is just exporting a const variable that mapped to my environment,  but in typescript when I try to import this in another file I get a linting error saying that the property im trying to use does not exist on type 'config/file/url', can anyone guide me as to what Im doing wrong? 
solution: 

issue: Hey all, can anyone help me with this pattern?  [<-LINK->] Seems thatAudiois defined as a global but not onwindow. 
solution: TravCav: you can surround your code in quotes like so:. Makes sense@TravCavthanks :). 

issue: yea thats wrong promise usage. Only use "new Promise" to convert something to a promise format. Its a bit misleading, but for starting promises you usually dont use "new Promise" 
solution: 

issue: n3u3w3lt: , is there a reason why you're notusingawaiting the returned promise instead? [<-CODE->] 
solution: 

issue: jethrolarson: Do you have examples of your code rather than just the error message? emilia-friedberg: Are you actually importing the interface anywhere in the new project yet? 
solution: 

issue: have you tried theimport { ConceptResult } from "quill-marking-logic"style? Good luck alright, I haven't done react, but can't you specify the type somehow: [<-CODE->] 
solution: 

issue: any idea how to get visual studio to build typescript files correctlythe tsc.exe build works with out error but visual studio throws a hissy  saying it can't find modules  [<-LINK->]  [<-CODE->] note i am also using webpack  [<-CODE->] another weird thing is visual studio shows everything as not installed under npm dependencies when using yarn 
solution: 

issue: Also vscode shows no errors either They are installed they just don't show up in vs for some reason when I use yarn Doesn't change anything already tried that I get the same errors Also using latest vs and type script 
solution: 

issue: So Typescript completely missed the ball on this type checking... [<-CODE->] and it was called like this... [<-CODE->] where subscriptions is a Subscription[] (rxjs) - and the parameter is supposed to be the CrxDropdownContainer type... [<-CODE->] Why did it not pick this obvious type mismatch up as an error? Yeah was jsut about to say - the only thing that comes to mind is Decorators...  [<-LINK->] but you'd need to actually put the decorator on each object/class that you want it to execute... 
solution: 

issue: denisemauldin: No. DragEvent is not generic(despite the error message implying otherwise) so I just get a different error. 
solution: 

issue: a little specific, but with react and recompose -- if I have a component with a generic (e.g.class FooComponent<T> extends React.Component<Props<T>> { ... }), and then Icomposethat with some other things .. is there a way to lift that generic up to the recomposed version?  [<-CODE->] 
solution: 

issue: Given the following, does it make sense the definition has anevertype instead of the property names in thePicktype? [<-CODE->] 
solution: 

issue: weird - so that type is failing :( Error:(35, 39) TS2551: Property 'key' does not exist on type 'File & File[]'. Did you mean 'keys'? 
solution: 

issue: so i think Express.MulterS3.File[] is actually incorrect its a dictionary of field names that each point to a File so it should be like req.files['my-field-name'].key 
solution: is there a way to enforce static class properties? [<-LINK->]. 

issue: I am cross posting here a little but patching stopped working for me at some point [<-CODE->] has there been any changes in augmenting types?  When i try to import global in another project I get the method is not available on type observable.  This use to work. 
solution: 

issue: I'm getting a weird type error from a React project  [<-CODE->] The "<View style={ screen }>" line outputs the following error:  [<-CODE->] However, if I just put the screen style inline, there's no error:  [<-CODE->] 
solution: 

issue: I just upgrade from TypeScript 2.6.2 to 2.7.2 and suddenly I'm getting errors like this:TS2339: Property 'matchMedia' does not exist on type 'typeof window'. Basically getting this for every use ofwindow. Googling is getting me no where. 
solution: 

issue: technically they can have other keys too, like [Symbol.iterator] 
solution: either way, even if I use object or {} as the initialStore type it doesn't complain when I try to create a new PubSub with an array. 

issue: Bnaya: I can't reproduce it here import * as retry from 'retry'works Not sure what you mean, it type checks correctly with TSC And my editor gives completions for .createTimeout, .operation, etc hmm lemme see what do you mean? it seems that theretrylibrary exposes an operation function 
solution: 

issue: ...  Theorically, beforeAll part should set up the state for the file tests "Runs a function before any of the tests in this file run. If the function returns a promise or is a generator, Jest waits for that promise to resolve before running tests." 
solution: 

issue: A suggestion about 'writeonly' has issued. What do you think about the suggestion 'writeonly' ?  [<-ISSUE->] 
solution: 

issue: Should I omit the function return type when it is void?  [<-CODE->] or [<-CODE->] Ah yeah right Also Is there a setting for tsc to make it super strict and show errors if paramters or functions do not have types? 
solution: 

issue: For my issue I resume it on babel github : [<-ISSUE->] 
solution: 

issue: eyelidlessness: that example was obviously a bit contrived, but i was working on something sorta related and just kept getting weird messages like the "Expected 3 arguments, but got 0 or more", last i checked, 3 was more than 0...isn't that how many arguments you got? and with a fixed length tuple, seems like the number should be available when exploding out slikts: may also want to look at the new ! operator introduced in 2.7  [<-CODE->]  [<-LINK->] gotcha, i have that sort of issue frequently enough that it is quite a pain as for your types thing, cant you just do animport { whateverType } from './../node_modules/@types/whatever/something'or likely justimport {whateverType } from '@types/something' oh, then just add to yourtsconfig.jsonfile  [<-LINK->] check the "files" section, you can easily just specify a.d.tsfile or filename pattern yea, it is, but may not be a sufficient one lol 
solution: 

issue: yeah, the!operator is neat, but it didn't solve my issue; I solved it instead by defining an extended definition of the class and used it with type assertion like<FormDataExtended> <any> FormData now I'd like to know if there's some way for tripple slash notation to reference@typesdefinitions the specific issue is this: [<-ISSUE->] I'd also like to know if there's a way to pass node flags like--harmonyto ts-node ts-node --harmony bla.tsputs me in a repl for some reason apparently it'snode --harmony -r ts-node/register bla.tsbut that gives me a ts-node/register module not found error I guess it doesn't import global modules brianjorden: I'm not sure if that works in.d.tsfiles that's not a solution 
solution: 

issue: denisemauldin: the dom libs are all global, you dont need to import them 
solution: 

issue: hmm... when I tell angular that an element is a DOMRect, then it says that it can't find DOMRect 
solution: 

issue: anyone else finding a behavior change with typescript 2.7 around the array spread operator?  [<-LINK->]  [<-CODE->] thefooline throws an error now Expected 3 arguments, but got 0 or more. 
solution: 

issue: Anyone can tell me if TypeDoc allows some ESDoc/JsDoc annotations like 'example' and 'description' ? Thanks Do you have tried this [<-LINK->] (probably not working too) ? 
solution: 

issue: Hello! I got issues when trying to build (prod enabled) app with Ionic, Angular and Ramda: [<-CODE->]  [<-CODE->] 
solution: 

issue: hi, were are stuck with some legacy jquery stuff and am trying to get a plugin to work with jquery.The code we are trying is [<-CODE->]  [<-CODE->] TS2304: Cannot find name 'JsonRpcClient'.any ideas? 
solution: 

issue: WilcoBakker: areinterfaces intended primarily for classes?  I wanted to use it to define astyleprop on a React component.  The intent was to be able for components to limit which styles they would accept.  I also wanted to allow wrapper components to have more restrictive styles while still being able to pass their style to descendant components with less restrictive styles.  It be nice if this could be done in a type safe many that actually catches bugs.  I like thatconst fooStyle1: FooStyle = {color: 'blue', fontFamily: 'serif'};is an error.  I wish thatconst fooStyle2: FooStyle = barStyle;was as well. 
solution: 

issue: Hi all. I have an issue with intellij not recognizing the non-null assertion operator. Anyone had this issue before? It just saysexpecting semicolon or newlineon the exclamation point  [<-LINK->] NaridaL: I'm using 2.6, with language server All other typescript related things appear to get picked up properly apart from the non-null The error message isexpecting semicolon or newline So it doesn't recognize the!at all I really don't want to disable that check@NaridaL 
solution: 

issue: JenteVH: are you using the language server? And have you got the latest version of TS? if you do alt+enter, you should have the option to disable the check? whats the error message? 
solution: 

issue:  [<-CODE->] any idea why this producesType must have a '[Symbol.iterator]()' method that returns an iterator.? the error is on[k, v] for some reason the type isT | string 
solution: I guess I also don't needObject.create(null)since the spread syntax will restore the prototype. 

issue: is there some way to make TS see{a: 1} + 'asd'as an error? same in string interpolation not a fan of finding [object Object] where it doesn't belong 
solution: slikts: you might have better luck with tslint (suggested in a GH thread on the subject). 

issue: bioball: Ok cool. So I need to comb through the module and find all properties and functions etc.. and just do something like your suggestion? In the meantime I set "noImplicitAny" to false. 
solution: 

issue: Yup, that's what I've got. :) Yeah, for some reason that doesn't work... despite what I tried. I think because "props" is on the instance instead of the constructor? Not sure. 
solution: 

issue: Why would this code [<-LINK->] result in aIdentifier 'links' is never reassigned; use 'const' instead of 'let’.error? 
solution: 

issue: I'm working with the following code: [<-CODE->]  [<-CODE->] 
solution: Acidic9: If you try something like this [<-CODE->]. 

issue: So... when you guys find a bug in a TypeScript definition, and you can't augment it, you create a PR... what do you do while you wait for the PR to be accepted and merged? Some libraries this can take days... 
solution: 

issue: how do i tell typesript, for a function deinition, that an argument is optional to use, as in, this is something advanced and i dont expect to use it so often, but it will always actually be defined? its a function given to a framework that has two arguments,aandb. it's very common to use onlyaso the consumer is expected to 90% of time use a functiona => {}, but sometimes,bcan be helpful so(a, b) => {}should be accepted to 
solution: 

issue: I saw this example : [<-LINK->] . I build a lib but didn't know if Webpack or Rollup will be the best for that ... 
solution: 

issue: anyone have experience with typed ORM solutions (particularly for RDBMS, esp looking at postgres)? i'm looking at [<-LINK->] as the best candidate i've found so far, but wanted to inquire with folks who might have direct experience of this lib or others 
solution: 

issue: is it possible to run directly a .ts file in Webstorm? and debug it? when i compile typescript to Javascript and put the result files in a folder like "build" when im trying to run these js files it cannot resolve modules i used path alias for modules in my src directory like running "node build/my-script.js" doesnt work because it cannot find the module "@app/my-dep.js" how can i make node work with path alias? 
solution: 

issue: lihaibh: you have to use a module bundler like webpack or parcel 
solution: 

issue:  [<-CODE->]  [<-CODE->] 
solution: 

issue: Why does this work? [<-CODE->]  [<-CODE->] 
solution: dekryptic: Protected can be used in extends but private can't. 

issue:  [<-CODE->] trying to compile that throws an error:'"RED"' is not assignable to type 'ColorsEnum'.what am I doing wrong? 
solution: 

issue: is there a way withtsc -wto run a pre-build script? without a build tool like grunt or gulp or whatever 
solution: 

issue:  [<-CODE->] how is this possible? this is a tautology oh no it's not, im stupid :( im using value as key why does it make sense only after copy pasting here 
solution: 

issue: Is there any way to debug Typescript easily? without building everything into javascript? i just want to run simple script written in Typescript and be able to debug it 
solution: 

issue: Why is this failing in the playground? I'm gettingUncaught TypeError: myArray.getFirst is not a function. [<-CODE->] 
solution: 

issue: my understanding ofemitDecoratorMetadatais that it's supposed to emit only concrete runtime types (i.e. native primitive -> constructor, class). Is there a reason that it emitsundefinedif the annotation isnull? nullis a real value it also emitsundefinedfor union types, which is not terribly surprising but pretty disappointing sorry that last bit is not true... was looking at the wrong output it appears to emitObjectwhich is also not surprising, but pretty unhelpful 
solution: 

issue: yes, that looks like my best option. I am considering opening an issue for this since I also saw a couple of StackOverflow questions with insufficient answers. 
solution: 

issue:  [<-CODE->] this usage of generic type has error:error TS2416: Property 'outputs' in type 'WorkflowStep<T>' is not assignable to the same property in base type 'WorkflowStepBase'.why? typescript version is over 2.4.1 
solution: then output commonjs modules after you're webpack build pipeline finishes?. 

issue: Is there any reason that i should prefer this: [<-CODE->] over this: [<-CODE->] I know the difference. Sometimes optional props cause some little inconvenience here and there, but i can't remember concrete case. Maybe i just overthinking? 
solution: 

issue: I just started to use TypeScript and I'm converting a few files to tsx. I have the following issue: [<-CODE->] Shows the following error: [<-CODE->]  [<-CODE->] 
solution: 

issue:  [<-CODE->] how to not lose types here?  [<-LINK->] 
solution: 

issue: i dont see howFoois not subtype ofStringDict 
solution: 

issue: bioball: ..its within node and this error is coming in  my unit test file. Backbone is available as global Namespace in my calculator.ts...calculator.ts is part of my codebase which is not throwing error individually...when i am trying to run a unit test for calculator.ts then mocha is throwing this error 
solution: 

issue: ysael: they bindthisto the instance so you can use them a little easier as event handlers or other callbacks. But you lose the optimization benefit of a prototype method (which only has one copy for all instances.) For a component the optimization doesn't likely matter Weird, I use that a lot where is your tsconfig? 
solution: 

issue: hi everyone, is it possible to use a lot of exported const string from some file as somee kind of a Type/Interface? Like import * as Pages from "pages";  And then use Pages as type? because pages file exports only string constants, is there any hack to do this? :D 
solution: 

issue: anyone using typescript with url-loader? for images? i have the following import path.... [<-CODE->] which typescript flags as "cannot find module" however, if i run it i see the image on the page for a split second before i see the compile error in browser  [<-CODE->] how do i define .png as a module type? i have url-loader already in my webpack build proccess ahhk thank you 
solution: 

issue: Does anyone know a way to convert union types to intersection types or visa versa? I meant declaratively but yeah. as in if there is a type A =  B |C |D to make a generic like IN<T> = &[T] or something that results in  E = B&C&D I'm trying to make a generic interface to convert a{key : value}to{"key" : <key>, "value" : <value> } Here's my best shot, but it's not working: [<-CODE->] any help appreciated actually, it can be done, it's like this [<-CODE->] thanks for having a crack 
solution: 

issue: Hi everybody ! Anyone already had this issue ? TS2709: Cannot use namespace 'EventEmitter' as a type. The EventEmitter is in an ambient module Im not able to use it  [<-CODE->] Am I missing or miss-understanding something ? 
solution: 

issue: It's an arrow function, also I can't use type when i declare this function  [<-CODE->] I would like to have it like that : [<-CODE->] Sorry i did not tell you, that's not the node EventEmitter.My app is angular 1.6 I emulate the output bindings using custom EventEmitter nope because EventEmitter interface is the function, I tried to write a type definiton insteadof interface but does not work. [<-CODE->] Do you think I should cast the return ? 
solution: 

issue: i think it might just be intelisense?  [<-LINK->] yeah this compiles fine what veresion of tsc are you using? if you run tsc in command line does it give you any errors? then your tsc is probably fine sometimes its integration of tsc that are faulty with the ide you could try visual studio code just to see if it shows that error as well or not just to see if a different ide gives you a different result 
solution: 

issue: dlebee: yeeeeah dude that was webstorm Agree with@WilcoBakker ShawnTalbert: Hi dude, Yes it was, that's why I did not figured out directly 
solution: 

issue: I am trying to get a hold of a generic types name as a string. How can I achieve that? The following is not working out: [<-CODE->] 
solution: 

issue: patrickreck: TypeScript compiles to JavaScript so you can't. 
solution: 

issue:  [<-CODE->] using tslint microsoft contrib,  the linter complains about   expected arrow-parameter resolve to have a typedefis this behavior normal? 
solution: 

issue: Hello! How can I create a map from string to descendants of an abstract class? I tried this but it doesn't work: [<-LINK->] ozyinc: thanks! I do want to figure it out though, and don't want to use any in my code 
solution: 

issue: Best thing to do in that case is wrap the function parameters as an interface so that you can pass it anywhere  [<-CODE->] should be basicallycontentType: ContentTypes But I think Request is something that exists as fetch API so if you want to do some custom implementation I suggest change the naming appliaction != application Hmm weird, two-way assignment doesn't work on string, y not just write ContentTypes.json instead? Or if you really want to have a typing for that that you can validate anywhere you can define a type like [<-CODE->] but I would highly discourage 
solution: 

issue: I have this code  [<-CODE->] And I'm trying to set contentType in interface Request to one of the values of the enum ContentTypes.. anyone know how I can do that? Thanks ozyinc: it's not working, when I use it like that I get this error  [<-CODE->] sorry spelled wrong. on appliaction but i still getTypes of property 'contentType' are incompatible. 
solution: 

issue:  [<-CODE->] This worked fine on playground for me? Does the code I sent you not work? u r welcome 
solution: 

issue: const foo = <T extends object>(bar: T = {}): T => bar;why does this produceType '{}' is not assignable to type 'T'.? despite T extending object UselessPickles: I'm having trouble understanding how I could type that function instead then; I basically want an identity function for objects what the function does is wrap it in a proxy 
solution: 

issue:  [<-CODE->] What am I doing wrong? Nevermind. It should befunction isIterable(iterable: any): iterable is Iterable<any> { ... } 
solution: 

issue: Hello  [<-CODE->] Here I have  [<-CODE->] Error:(10, 16) TS2345: Argument of type 'typeof User' is not assignable to parameter of type 'new () => User’. But it compiles anyways...  [<-LINK->] I don’t understand why the error It’s intellij by the way Thank you@thorn0, I really I had no idea what was causing the issue. 
solution: 

issue: why not write: T || undefined as possible return values? I mean with single pipe | 
solution: 

issue: I.E something like..... const test  = <T>(arr: (T => U)[])  => ...... Ummm   Array<(T) => void>   Would enforce  an array of functions   const test = [(foo: string, bar: string) => ({}),  (foo: string, bar: string) => ({})] but not....... const test = [(foo: string, bar: string) => ({}), (foo: string) => ({})] notice the number of arguments has changed 
solution: 

issue: kuncevic: Are you sure the error isn't forthis? vvlevykin: I don't think that should be possible. If something was expecting aDictionary<T>and you gave them aPartial<Dictionary<T>>that wouldn't be safe since the partial dictionary could contain undefineds. 
solution: 

issue: Hello would it be possible to set string literal type for possible react classNames with typescript? Anyone has idea how I could do this?Assume that I have: [<-CODE->] And now when I type in JSX: [<-CODE->] I would like Typescript to detect it and highlight error in editor. [<-CODE->] 
solution: 

issue: Hi all, I want to do something like this [<-CODE->] the base constructor trhows error  in super keyword... do you know wich is the correct implementation for this config problem? 
solution: 

issue: @sgronblo yes, just for test did test below, having no errors: [<-CODE->] however still didnt get why getting error: [<-CODE->] that is basically the full picture here: [<-CODE->]  [<-CODE->] 
solution: 

issue: So I'm trying to use Typescript without a module loader... ie. es6 / es2015 But I am having no luck lol Does anyone know how to get this up and running? I have 2 files...test.tsexport const test = [1, 2, 3]demo.tsimport { test } from './test'; and in my html...<script src="demo.js"></script> I'm not entirely sure how to set up my tsconfig... "target": "es6","module": "es6", ? or es2015? who knows... I hate how it has 2 damn names either way, the imports are not working in chrome unexpected token '{' in the import 
solution: 

issue:  [<-LINK->] Hi, how can I solve this error in typescript ? 
solution: 

issue: euginio: creating a redux-form-material-ui.d.ts worked. I thought it had to exist in the node_modules/redux-form-material-ui/lib/index.d.ts … but it could be anywhere it seems 
solution: 

issue: durre: Why would it not work? 
solution: 

issue: Hey! Is it possible to access a property using a string? Something likethis.['string']; 
solution: if you change the signature of your function tofunction fn({}: {field?: number})it will allow the second property. 

issue: Hi everybody !I'm facing an issue and I dont know why if someone can explain what I'm missing.I get this error calling this function with Generic Types : [<-CODE->] Gives me : TS2347: Untyped function calls may not accept type argumentsthe function : [<-CODE->] Thanks for your help :) 
solution: 

issue:  [<-LINK->] this state mapper feels so useless... feels like im missing something 
solution: 

issue:  [<-CODE->]  [<-CODE->] 
solution: 

issue: BellerophonM: your question is a little unclear can you give a code sample of what you want to do? 
solution: 

issue: Hi guys, how can I solve this error in typescript in function, when I hover on function..  [<-LINK->] and the error is  ' ' ' [ts]Argument of type '(d: number | { valueOf(): number; }) => number | { valueOf(): number; }' is not assignable to parameter of type '(d: number | { valueOf(): number; }, i: number, data: (number | { valueOf(): number; })[]) => num...'.Type 'number | { valueOf(): number; }' is not assignable to type 'number'.Type '{ valueOf(): number; }' is not assignable to type 'number'.  ' ' ' 
solution: 

issue: what error? you must define the option 'strictNullChecks' in your tsconfig try closing and opening vscode again I've experienced that sometimes I need to do that when I change some tsconfig option boompig: you should try out only 'strict', I think that works, just like@SalathielGeneseshowed 
solution: 

issue: @satishgorijala-githubValue not pertaining even after it met the condition.<mat-tab-group  [selectedIndex]="tabselectedIndex">ngOnInit() { [<-CODE->] }Though it met the critieria and the alert popup shows value as "1", but in html for the mat-tab the value is not changing to "1". Always the value is "0".  what i am missing here 
solution: 

issue: having an issue trying to use TypeScript with react—I’ve installed@types/react, and imported React like this:import React from ‘react’but I’m getting a TypeScript error about@types/reactnot having a default export ended up fixing it with atsconfig.jsonsetting ->allowSyntheticDefaultImports: true 
solution: 

issue: can't you goT extends string[]? oh ok, I see. how aboutfunction makeSearchField<T>(model: T, field: Pick<T, "myfieldname">, andField: Pick<T, "myotherfieldname">) Rene @renewooller 12:00 [<-CODE->] 
solution: 

issue: Hello, why doesn’t this work: const [firstToken, ...more, last] = tokens; ? it says rest operator should be last What about spread? 
solution: 

issue: Hello anyone was able to specify which tsconfig to use for MSBuild in visual studio, I can do it in vs code but did not manage to find any solutions for visual studio it self 
solution: 

issue: @euginio , What about... [<-CODE->]  [<-CODE->] Not tested 
solution: 

issue: is there a way to type some interface as a valid interface if it doesn't implement a method? yeah doesn't work :< 
solution: 

issue: dleavitt: , I'm overjoyed to bring forth a solution that works... [<-CODE->] dleavitt:  [<-LINK->] 
solution: 

issue: So in short, for anyone watching (@rohitsodhia)... [<-CODE->] dekryptic:  [<-LINK->] 
solution: 

issue: Hi, can someone explain a compiler error for me?  [<-LINK->]  [<-CODE->] So one could argue thattrigger()returnsstring[] | numberso it doesn't match the return type ofbuggyFunction() But if you commment out theprovider.extra()promise lines above and belowreturn this.trigger()it compiles :O Thanks in advance for any assistance :) Looks like if I usebuggyFunction(): string[] | number | PromiseLike<string[] | number>;it's fine Unfortunately, just remembered that theBuginterface is not my code :) 
solution: 

issue:  [<-CODE->] @ShawnTalbert But does that make a practical difference, or is it just semantic? 
solution: 

issue: Hi. Any way I can get TypeScript to acceptimport  "../assets/css/base.css";? Currently I'm getting the following error: [<-CODE->] well, it works fine through webpack, but once I try to enable server-side rendering for react, I get this. 
solution: 

issue: Not sure I got you clearly@Gerrit0 Gerrit0: , Gerrit0: , I edited types and props names to be sure I get it well... [<-CODE->] Is this on the track ? OK, sure I now got it perfectly clear i.e the following shall be the right test : [<-CODE->] no way to get it work 
solution: 

issue: Got a weird issue where I am trying to add a customd.tsfile to add some methods to an existing module (express) but VSCode picks them up, but when I gulp them (using same tsconfig) it doesnt seem to pick them up can I just confirm the syntax should be like  [<-CODE->] and as long as thed.tsfile which contains this is referenced in tsconfigfilessection it should work right? 
solution: 

issue: Bnaya: try mapped types, they might get what you're looking for. [<-CODE->] 
solution: 

issue:  [<-LINK->] (-: I actually reported an issue with that screen. Went to github at first and got the channel from issue template.Thought it would be faster acted upon. Not sure though who to @ reference to bring to teams attention 
solution: 

issue: josiahhaswell: would this do?type fieldA = B["a"] If you want to get anAat runtime... a proxy is probably the best way to go. No, the first defines a tuple with only one element. Trying to getvalue[1]won't work. The second defines an array ofFiles 
solution: 

issue: has anyone used tsickle (the "typescript to google closure compiler" thing)... the docs have a word on running it and developing it but not on installing it :O 
solution: 

issue: this: Aexpresses thethiscontext within the function while): thispoint to thethiscontext within the function container... To be sure, you cannot go about writing <A>(this: A, ...args: any[]): thisand expectthisto beA I mean return type  [<-CODE->] mohitsharma93: , wrap your code [<-LINK->] 
solution: 

issue: Why does typescript not return an error in this case: [<-LINK->] ? 
solution: 

issue: ok, now I get it! 
solution: 

issue: sorry for this in Ts ```class myIterator1 {    step;   constructor(){       this.step = 0;   }Symbol.iterator {       return this;   }next(){       this.step++; [<-CODE->]  [<-CODE->]  [<-CODE->] }``` error on let p ofmyiterableSequence can some one explain....... why it is causes error plzzzzzzzzzzzzzzzzz 
solution: 

issue: hey everyone quick question, Google isn't helping much. when you use outDir do you have to copy node_modules to the outDir yourself as a post tsc step? I am not seeing any flags or config settings to copy it. I swear our code used to copy the folder but when I cleaned the outdir and built again it's not getting copied. to have a self contained library that can be published to npm 
solution: 

issue: SalathielGenese: I believe this is what you are looking for - if not, can you provide an example please? [<-CODE->] For jQuery - you need to add@types/jqueryto your devDependencies. For the string: [<-CODE->] 
solution: 

issue: Hi,I am new to angular 2 heyI am tryting to display grid in angular 2. 
solution: 

issue:  [<-CODE->]  [<-CODE->] I tried this but it doesn't work: [<-CODE->] 
solution: 

issue: hello, guys! Can anyone try to help me with this error? [<-CODE->] I’m receiving this error: [<-CODE->] I’ve just change from Typescript 2.3 to 2.4 I think could be the Strict contravariance for callback parameters but I didn’t find a way to fix it 
solution: 

issue: thanks@eyelidlessnessi think that might actually work based on my zero experience writing typings out...... what would the declare module typings for a third part libraries index.js that looks like this. look like? [<-CODE->] 
solution: So what I did was this...myObject[memberAddedByJest]and for tslint I did// tslint:disable-next-line:no-string-literal. 

issue: i discovered it trying to understand how sequelize-typescript's model types worked. pretty clever stuff honestly can't help you there, i also have fairly limited experience writing typings for existing JS stuff i would think you could pretty much get it all from the docstring 
solution: 

issue: eyelidlessness: testing now so i'm assuming [<-CODE->] is any JSX element that emits render? its not working Omit's render** "render" does not satisfy the constraint  "props" | "type" | "key" 
solution: Omit's second argument expects keys of its first argument. 

issue: ShanonJackson: , the answer is not yet - see [<-ISSUE->] 
solution: 

issue: if youknowthat foo will be assigned prior to thatif()you can tell the compiler so with [<-LINK->] . If not thenstring | undefinedprobably makes sense 
solution: 

issue: Hello guys, I'm with a problem here. I have the following class: [<-CODE->] And in another class I have the following property: [<-CODE->] On a method I'm trying to set a new entry with this, but I got an error. This isn't a valid use case? Or I'm missing something? [<-CODE->] 
solution: 

issue: ShanonJackson:  [<-LINK->] assumingdropUpexists onIDropdownProps that's odd  [<-CODE->] seems unlikely what is it? 
solution: But when I useObject.entriesits got the wrong "value". 

issue: I think I've found an error in TypeScript Or at least its type definitions 
solution: 

issue: ERROR in ./node_modules/typings-for-css-modules-loader/lib?{"modules":true,"namedExport":true,"camelCase":true,"sourceMap":true,"importLoaders":1,"localIdentName":"[name]--[local]--[hash:base64:8]"}!./node_modules/postcss-loader/lib!./src/components/Checkbox/Checkbox.css Can anyone help me with this 
solution: 

issue: yeah. the type system can help eliminate whole classes of bugs (especially with things like strictNullChecks) it also cannot be overstated how much it improves intellisense. when i have to go back to my team's legacy JS codebase, it's a nightmare 
solution: in the extreme,Type Driven Developmentleverages the type system to make Types actually part of your logic and eliminate higher order bugs by shaping what can happen at compile time. That's something I've only scratched the surface of and have only seen it used in languages like Scala and Haskell. Languages like [<-LINK->] support type level programming directly.. 

issue: ah, great eyelidlessness: so i'd need to manually download those types and include them in my project? 
solution: 

issue: did it work? yes/no(yes will be a number, no will be null)NOOOOOO! 
solution: 

issue: I don’t get it why wouldn’t this work ? [<-CODE->] 
solution: 

issue: tslint... I want to allow 'null' but not 'undefined' ... not sure what this entails for setup? 
solution: are you sure you don't want it [<-LINK->] ?@jstansbe. 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: I'm pretty sure there's a bug there, I think that should work... Typescript isn't a module bundler, if you need to include assets, you need to use webpack, gulp, etc. You could keep your assets in your output folder, but being a module bundler just isn't in tsc's scope 
solution: 

issue: you probably wantdeclare module 'node-blockly/browser' {...} ? what are you trying to achieve? modules aren't named.  [<-CODE->] it seems they would be two different modules? e.g. 'node-blockly/browser' refers to an existing module, and blockly generates a different module. is that right? am i wrong that node-blockly/browser refers to an existing module? and you're manually providing types for it? and that blockly generates types for something else? in a module calledBlockly? why not import theBlocklymodule? it's confusing because you're basically saying there are two modules that are one module that are two modules and that cannot be true 
solution: 

issue: What? [<-CODE->] tsconfig: [<-CODE->] 
solution: 

issue: Yea, those are two distinct signatures, withOption2<"A" | "B">, you can't useo.tin a switch statement to differentiate  betweenOption2<"A">andOption2<"B">This is becauseA<"A" | "B">gives type{ kind: "A" | "B"; fst: B<"A" | "B">; snd: B<"A" | "B"> }... the best way around this I've found is a ton of helper methods [<-LINK->] . 
solution: 

issue: my pleasure! 
solution: 

issue: Gerrit0: thanks, I guess I'll open an issue then 
solution: 

issue: Hi, I am using Visual Studio 2017 and am using webpack to compile the typescript files in the soluton The proble is visual studio also adds a command to the msbuild csproj file to compile the typescript too this slows down builds, and the output js is unused, so i'd like to remove it commenting the line out in the csproj works, but then VS Intellisense stops working (find all referneces etc). I there a way to make this work again with webpack? or somehow make intellisense work but disable compilation? 
solution: 

issue: Is this correct behaviour or have i cocked something up?interface Goat { ... }andinterface Sheep { ... }are identical,  a function takesStream<Goat>but i've given it aStream<Sheep>, it's not breaking const mySheepStream: Stream<Sheep> = buildSheepStream();  functionThatNeedsGoatStream(mySheepStream) thank you@ShawnTalberti found that too, I was surprised but i guess in practical terms it won't be so much of a problem goats are kinda like sheep 
solution: 

issue: ok Say there is a type aliastype Chunker = (Bits<any>) => Chunk<any>and an function implemented asfunction stringChunker(str: Bits<string>): Chunk<string> { return [str] }how would we use the 'Chunker' alias to express the function type? i  can't figure out the syntax I've only figured outconst stringChunker: Chunker = (str) => { return [str] }which isn't the same as saying function() {} looks like it's going to have to always be something likeconst stringChunker: Chunker = function(str) { return [str] }eh? 
solution: I suppose just declaring the return type on a traditional function declaration is adequate - anything more would be duplicating what is already there. [<-CODE->] clearly (to me anyway) describes a function that takes a string and returns a string.. 

issue: Hi. Just wondering if there's a way to add.jsextensions to imported modules when compiled? I'm playing around with WebComponents and in-browser module imports, but the browser needs the extensions to load files eg. [<-CODE->] becomes: [<-CODE->] you do when you do an in-browser import: [<-CODE->] the browser can't infer the file extension (or if it's a directory)  [<-LINK->] all good. my guess is that it's not doable with just the tsc compiler? I changed my example above, ifMyComponentimports its own files, it will need the extensions in it 
solution: 

issue: pbadenski: awesome job! I'm definitely going to save that snippet for later. aaronbeall: that's... tricky. There's certainly a bit of magic going on with Flow. As far as I can tell there's no way to make this work with the current React typings. There's an interesting issue here: [<-ISSUE->] 
solution: This concrete type can be used to merge with a standard interface in a case like [<-CODE->]. 

issue:  [<-CODE->] 
solution: Difficult to say for sure Pawel, I've mostly learned by trail and error and reading other people's code. [<-LINK->] was a good read to get a grasp on how the language works, but I don't use any of his recommendations anymore.. 

issue: Can someone help with a tricky type mapping...  [<-CODE->] I'd like for this to stripnullfromT[K] ie. if I had this: [<-CODE->] I know this is possible with a parameter type, but I can't work out if it works with return type...  [<-CODE->] ShanonJackson: could you give a bit more detail about the use case? I'm not entirely clear what you're trying to achieve It sounds like you're just describing the use case for generics Yeah, sure. Can you do something like this... [<-CODE->] And just use that in both places? Why is that? 
solution: 

issue: Kolichikov: Help -> About -> "Version 14.0...... Update 3" ? (can you confirm update 3?) Does anyone know if you can put a tslint rule to check for using the+operator to parse a number? [<-CODE->] 
solution: 

issue: I have some places where I use{ [key: string]: any }, can I safely replace that withObject? Or should I useobject? 
solution: 

issue: is it possible to override a lib function signature ? looks like you can augment a module but it's not working  [<-CODE->] I get errors about all my globals now, and those function not existing tried it too the thing is it's not augmenting but replacing so now it misses all the other exports from@angular/router 
solution: 

issue: Can I protect myself from doing something stupid like this : [<-CODE->] Perhaps using linting or something, happend twice now while converting some stuff. Ofcourse writing tests is the most obvious answer but, meh... :-) The intention was: [<-CODE->] 
solution: 

issue: i think it's related to this [<-ISSUE->] 
solution: 

issue:  [<-CODE->] Why do I get an errorProperty 'contains' does not exist on type 'A[]'.? TypeAis just string literals. 
solution: BehindTheMath: yeah that's true, as long as it gets polyfilled, as it is only in es2016 :P. 

issue: sup guys, working in a react-native app here, and I am usingpackage.jsonfiles in the root folders of static resources with the{ "name": "assets" }to give them a referenceable path. It all works fine howevertsccomplains it can't find the module. Is there a compiler option to allow such package.jsons to be found by tsc? nevermind, just added anindex.d.tsto the same root and declared a module there ofassets 
solution: 

issue: Bnaya: oh thanks for this info.....but i generate it and when i change the module property to amd then nothing will happen @Bnaya here is my folder representation` >angular [<-CODE->] where i use tsc --init that my typescriptbasic  or its subfolders ts file can take that config file  [<-CODE->] 
solution: 

issue:  [<-CODE->] Works fine for me 
solution: 

issue: (sorry Rhys, I have no idea about that) Quick question... I can use the following decorator to make a function non-enumerable... [<-CODE->] However, is there a way to do the same for a lambda?  [<-CODE->] ^ doesn't work unable to resolve signature of property decorator when called as an expression My only idea... in the constructor, I could call this:Object.defineProperty(this, "test", { enumerable: false });??? ah my theory was correct... now I'm just not sure how to create a decorator that will do that I think this... [<-CODE->] ackERROR TypeError: Cannot assign to read only property 'test' of object '[object Object]' Yep, time to give up... it just doesn't work. no decorator can seem to touch my values without throwing that error :( 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: kuncevic: you mean for it to automatically complete a sequence? I think you'd need to make your own function to do that. 

issue: Hi guys, I'm having trouble defining a typing for a npm package which doesn't come with its own typings (nor are there any in the DefinitelyTyped repo). Is someone in here willing to help me real quick, setting up a simple starting point (probably best be done in PN)? Package in question is [<-LINK->] But maybe it's also not too complicated. So react-perfect-scrollbar is obviously a React component. And it only renders successfully, if I import the library withimport * as ScrollBar from "react-perfect-scrollbar"and then<ScrollBar ../>. But know TypeScript tells me "ScrollBar" does not have any construct or call signature my simple trial and error typings so far [<-CODE->] 
solution: 

issue: I don’t really know this one... my knowledge is being stretched here, but maybe? ;) nothing else comes to mind  [<-ISSUE->] also [<-ISSUE->] 
solution: 

issue: pbadenski: anyway, thanks a lot for your patience and suggestions! 
solution: 

issue: not sure about typescript.. but we’re using worker-loader - best thing since sliced bread 
solution: 

issue: they changed tuples in 2.6 to 2.7, so that's probably breaking 
solution: 

issue: anyone got acomposesignature that works with react HOCs?the basic compose signature (from either redux or recompose) "eat" my types...  [<-CODE->] 
solution: 

issue: Hi there. Has anyone managed to wire up an event handler to the bootstrap tab control? I cannot seem to find the right type for the event handler.  I.e. given this import import { Tabs, Tab } from 'react-bootstrap'; And<Tabs onSelect={this.tabChanged} AndtabChanged(eventKey: any) { Not sure what typeeventKeyshould be. Chasing the types back to the types files hasn't helped. 
solution: 

issue: Thanks@bm-stschneiderI read it before but that type was a litte confused using those evaluations. Many thanks again. I really understand that right now. 
solution: Yes,@ShawnTalbert, the concept is not new, only was difficult to understand some uses of that in those types in order to discriminate some information.. 

issue: guys, this constructionlet deep: obj | boolean;means thatdeepcan be obj or boolean? if so, why I get errortrue | obj has no index signature? If I removebooleaneverything work. I need somehow tell compiler, thatlet deepcan be obj or booelean. 
solution: so ifdeepis going to ever be anobjit too must have an index signature. 

issue: Just a note: I don't think any of the docs currently inform you that the command to run the compiler istsc. Might be a worthwhile addition to this document: [<-LINK->] 
solution: 

issue: gravitypersists: the getting started section does: [<-LINK->] 
solution: 

issue:  [<-CODE->] Hi, any advise? I know that I can work arround by(foo as number).toFixed(3), but I don't think it's a good approach 
solution: I didn't knowisbefore. You save my life. Can you refer me where is documented?  Really appreciate your help@traverse. 

issue: No problem :) 
solution: it's just lodash, selectors is string[] and the final result of this will be string[]. but _.flow gives back  amuch more complex type, no idea how to collapse this down to simple string[]. actually selectors is string[] | string[][]. 

issue: you won't encounter it often bc TS type inference will usually just do the right thing without specifying it. but that's how you explicitly state the type for a generic function is there a way in typescript (or tslint) to error if a promise is created but its resolution is never accessed (e.g. withawait)? looks like maybeno-floating-promisesbut i'm not super familiar with tslint 
solution: 

issue: not sure. i just walked through my current project and all of the uses ofObject.assignare inferring. maybe i am misremembering 
solution: 

issue: Are types that you export supposed to be in the d.ts files? I ask as I'm not sure if this is atscissue or a webpack one [<-ISSUE->] rhys-vdw: npm i? is the error after tsc? 
solution: 

issue: I've not seen this syntax before<T2>(maybe: Maybe<T2>) 
solution: 

issue: Hi, what do I need to change so thatresulttype is inferred correctly?  [<-CODE->]  [<-CODE->] Any idea? 
solution: 

issue: Can anyone else confirm that [<-LINK->] doesn't do anything? 
solution: 

issue: question… of why is below not reporting type errors :( :  [<-CODE->] ok my bad both have overrides property fail 
solution: 

issue:  [<-CODE->] Why the module name is not resolved? 
solution: 

issue: how do i do declaraction merging for a module in a subfolder of an npm module? i'm trying to dodeclare module 'some-module/lib/file' { ... } but that's not getting recognized by typescript and i get this error:error TS7016: Could not find a declaration file for module some-module/lib/file 
solution: 

issue: ShawnTalbert: i'm confused. it's already a module. i saiddeclare moduleexplicitly. why doesimportoutsidedeclare moduleaffect the behavior ofdeclare module? 
solution: 

issue: Hey there, can anyone give me a pointer as to how Typescript works behind the scenes? How does it work with ASTs ? 
solution: 

issue: I want to check if a prop is in an object, but in a typesafe way. Not a check for undefined! The following code is not typesafe: const obj = {}; if ('a' in obj) console.log(42); Suggestions? [<-LINK->] 
solution: 

issue:  [<-CODE->] Is this a bug? When not, what im doing wrong?Please tag my name if you/anyone can help or solve my problem.(Unfortunately, my knowledge is not enough to solve the problem by myself)tsconfig.json [<-CODE->] Folder structure: [<-CODE->] Libs: [<-CODE->] 
solution: 

issue: Hi is there a way to typing this data: [<-CODE->] Through an interface  [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] I'd rather just be able to do: [<-CODE->]  [<-CODE->] 
solution: 

issue: ShawnTalbert: yeah, that's a great idea. except I just have to get started on this! is anyone here aware of how the parser works?  [<-LINK->] is that line just from the old internal/external modules deprecated by the addition ofnamespace? 
solution: 

issue: Is there a shorthand for subtracting the properties in type B from A ? This doesn't work... [<-LINK->] Or any way to do that... I can't seem to find an example ah  [<-CODE->] alas I cannot subtract B from A in this case... 
solution: 

issue: Anyone decent with Typescript typings floating around? redux typings on Connect have been giving me cancer latley seems like it can't infer shit so i wrote my own helper but its not working as intended.....this is the first copy... [<-CODE->] it fails in 2 ways, when i try to pass in mapDispatchToProps it REQUIRES that i specifiy its return type on the function declaration (can't infer)and when it returns the new component it doesn't properally omit the fields iv'e already applied. I.E [<-CODE->] Needs to be [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: ok, i'm seriously confused by this enough to where I don't even know how to search for more information...i've reduced what I was really trying to do as much as i could into a very simple form and I don't understand why this shows any error  [<-CODE->]  [<-LINK->] "Cannot invoke an expression whose type lacks a call signature. Type '((callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void) | ...' has no compatible call signatures." and when hovering overitemspecifically, "Parameter 'item' implicitly has an 'any' type." no errors if you trim it down to be just eitherstring[]ornumber[] but the combo seems to break the ability of using forEach? i'm seriously just not understanding what is happening here eh but why would it matter either way 
solution: 

issue: What error does it show? 
solution: 

issue: Honestly, these two could help you : [<-LINK->] and [<-LINK->] In my case, this build error is a mess between TypeScript and (Ts)-Jest and nobody has answered me : [<-LINK->] 
solution: 

issue: Hi, question about the behavior of strictNullChecks, why transpiler still complains in such case  [<-CODE->]  [<-LINK->] ok then it could be also {more: number}, right? ifchecks fortest.propbefore checkingtest.prop.more 
solution: yes, but anyway, the only thing that typescript knows is thattestis of type{prop: null}. It has no way to know that it can be something else. 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] Luckily, or unluckily, I'm onto a new error: [<-CODE->] 
solution: 

issue: Is there a way to expresstype HasNoXProperty = { ??? }, so that the following is a type error:const notXProp: HasNoXProperty = { x: 10 }? I was thinking{ x: undefined }or{ x?: undefined }would do it, but that doesn't work spacejack: I tried that, but for some reason things likenumberaren't assignable to that No, I'm looking for a way to describe the type of everything that doesn't have anxproperty numbers don't havexproperties, so they should be assignable 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] Any ideas what the issue might be? 
solution: 

issue: Bnaya: No clue.  But there's no difference once I remove it.  [<-CODE->]  [<-CODE->] I get the error. I also ejectedcreate-react-app-typescriptand modified thetsconfigandwebpack.configto see if I could build the package that way.  I end up with the same error. 
solution: 

issue: adrice727: i can't see any issues with the code, but i don't see the whole picture, where's the error is coming from? 
solution: 

issue: hmm my first guess would be[Player[], Event, any] ah right [keyof  Player, Event, any] 
solution: 

issue: I am trying to write a codemod for my project where I want to parse a typescript file and update the imports. I am able to parse the file and convert it into an AST but how should I update the AST so that I can when I print it back the changes are reflected in it.  [<-CODE->] I see, I can't just change thetextproperty then . 
solution: 

issue:  [<-CODE->]  [<-CODE->] The nodeModule is written in c++, and compiled sometime later, so it is not really possible to have this at the time the webserver is compiled (well it could be possible, but would require some tuning at the buildsystem level).The second line does work when running tsc, but the resulting js file doesn't find the module [<-CODE->] 
solution: 

issue: yes, already had that, but then consumers have to use a get/set method and if they forget, then its a bug to chase down. In usage of this class, most is via for of or push/pop etc. very little direct access, so guess I will just make get/set methods that they will have to use and I can make the indexer readonly so at least they cant write directly. If they read directly it will be a bug, but given the limits of JS, guess thats the best compromise. 
solution: 

issue: anyone have any guesses why the line with all the casts doesn't work without the casts? 
solution: 

issue: Hey! [<-CODE->]  [<-CODE->] and the config file is correctly in the root dir of my project... Any idea? 
solution: 

issue: .....is this meant to be working? what have i done wrong [<-CODE->] making a type that can easily make all my interface properties readonly. it says in typescripts own 2.8 documentation that this should basically work still not understanding...To me these two have always been the same in my mind and should behave the same. [<-CODE->] to me they both try  and check type on the value the above literally seems retarded if you have the type parameter on the left it doesn't work, if you have it on the right it works rhys-vdw: 
solution: 

issue: Hey all - is there a way to enforce that something is a key of an interface whose value for that key has a specific type? I.e., is there a way to modify the type ofstringKeyin this example so that this typechecks: [<-CODE->] Thanks@Gerrit0that's really helpful. My actual use case is slightly more complex and I can't figure out how to extend your changes. Any insight? [<-CODE->] Basically, that seems to fail if I try to assert thatThas any other properties The original code was closer to: [<-CODE->] 
solution: 

issue: The second one seems to work for me... [<-CODE->] 
solution: 

issue: unfortunately, I don't believe in redux so can't help you with specifics there. Do you have a situation where you want the input type to be either of the two types you show inThingbut the return type  output to be just one of the two? or something more broadly generic, like identity? rhys-vdw: 
solution: 

issue: hello everybody can anybody help me out. I am trying to create menu service and i am getting error. here is my code : [<-LINK->] Am i doing something wrong in my interface ? 
solution: 

issue: hm, what's your thought process there? I actually got an error about child process:Uncaught Error: Check dependency list! Synchronous require cannot resolve module 'child_process'. This is the first mention of this module! 
solution: 

issue: does thisfiles: { [fileName: string]: { file: ts.IScriptSnapshot; ver: number } } = {} mean an object with string property names for keys to values composed of an object with file and version properties? 
solution: no. type annotation separators are semicolons. 

issue: is there really no way to dotype UserId = numberand then get an error when assigning one to the other, even though they're both number? i know i know structural subtyping stuff but blemoine: yeah, sadly it's not the most useful thing when data is coming down from the server 
solution: 

issue: Hey, Guy. I got an error message when use spread operator on React Component.  [<-CODE->]  [<-CODE->] 
solution: 

issue: wish I could help more 
solution: 

issue: If there's one string that you want to target explicitly why not just do(hello + world) as "HELLO WORLD" if you're trying to somehow use typescript to get the value of a string at compile time, typescript can't do that omfg@masaeeduyes i did have athenmethod and that was the problem i didn't even realise i had it i feel stupid now it was old code >.> yea that's what i did 
solution: 

issue: Yuudaari:  [<-LINK->] i'm not really sure if there's a workaround besides simply removing the then method 
solution: 

issue: Is it possible to override a declaration from@typesdefinition? I would like to override a withRouter ( [<-LINK->] ) cause there is some major fight how it should be defined. As is it can't be used as decorator, which I don't agree. I tried to declare a global in my project but it didn't override withRouter from@types 
solution: alukach: You should be able to ctrl+click on the React.Component and go to its type declaration in VSCode (assuming your using that editor, that's how it works when you have typedefinitions in it), otherwise you can manually find the React.Component type definition which will tell you what the two generics stand for. 

issue: @wkruegerthanks for the tip above! I didn’t know that the bracket syntax vs dot syntax for types were different, that was perfect and my team is jazzed haha. Thanks! 
solution: 

issue: Hi, why does typescript shows error regardless of the if statement? (strictNullChecks enabled) [<-CODE->] 
solution: 

issue: @martabrzeszczyk [<-CODE->]  [<-CODE->] oh I think he'll need a var then, like you said 
solution: 

issue: hey all, I'm directly referencing a local script in my index that exposes a namespace ofjoint.when I compile I getTS2304: Cannot find name 'joint'. whats the proper way to resolve this? 
solution: 

issue: I'm running into a strange issue with a React component.  This code: [<-CODE->]  [<-CODE->] But if I inline the content: [<-CODE->] it works fine.  Does anyone know what's going on or how to resolve this?  [<-CODE->] Hmm.  I can also cast thetypestrings like'code' as 'code', but I'd obviously like to avoid that. It just seems odd that the compiler can't tell that the string literal doesn't match the union type.  Also, why it works when I inline the array. 
solution: 

issue: ShawnTalbert: @ghetolay [<-LINK->] Hi, I see typescript got conditional types: [<-ISSUE->] What are the use cases for those? where is the condition? 
solution: 

issue: hi guys, I am getting the following error running "tsc" and cannot find a problem, I was hoping something can help me out: error TS2339: Property 'map' does not exist on type 'LodashUnion1x2<any>'. 
solution: 

issue: rhys-vdw: Yes, that's right. You'd need to write achainfunction likeconst chain = f => x => x === undefined ? x : f(x) Right but that is maybe after all 
solution: 

issue: Can someone help me with this?  [<-CODE->] Where do I put theT?  [<-CODE->] My guess was: [<-CODE->] But apparently not 
solution: 

issue: have you changed anything intsconfig.json? also, what is 'telling you' errors? the TSC compiler or some IDE? 
solution: 

issue: sorry try again: [<-CODE->] If I move the class it can't import into the file trying to import it, it compiles with no errors I guess I should make sure the code actually works now, maybe that will reveal the issue... Arg, crap like this makes me feel like TypeScript isn't robust enough. But if TypeScript isn't probably no transpiler is, which makes me want to give up on transpilers and give in and just use stupid javascrpt... Why can't they just add types to JavaScript and then we don't need to transpile? I've alway been frustrated by the problems I face when transpiling anything. Maybe I should try out web assembly for this project... What would you say is the most mature/robust language for targeting web assembly that does not require me to do manual memory management? 
solution: 

issue: I have no experience with WebAssembly, but TS is quite robust in fact, if you had a 100% TS codebase it should all work without a hitch it's the old school JS libraries that cause issue generally 
solution: 

issue: I'm using pure TS, no JS libraries. It can't even do a simple import. The compiler is lying to me and telling me the module is not exporting even though it clearly is 
solution: are you able to share the entire codebase? I'd be willing to load it up in webstorm and see what happens. 

issue: SimonMeskens: apply to M$ to work on TypeScript 
solution: ShawnTalbert: it's open source, I've already looked at it and I might be able to add my idea as an optional addon to TypeScript. 

issue: Greets peeps, is there a way of adding a comments to auto generated typings that warn users they are auto generated? 
solution: 

issue: rhys-vdw: I will look into that but basically i dont need 1 js file? its ok of having multiple js files in dist? 
solution: 

issue: I'm trying to type-guard on a discriminant property withArray.prototype.includesbut that doesn't seem to work (2.8.1), didn't find anything searching through the issue tracker.Here is a gist of the principle [<-LINK->] Yeah, I imagined that check to be hard on the checker but filing an issue seems overkill, but it would make those conditionals easier to read. 
solution: 

issue: What is the proper syntax for a union type that includes a function?type x = boolean | () => boolean;gives me'boolean' only refers to a type, but is being used as a value here. Maybe it needs to be declared seperately? [<-LINK->] I've never seen that syntax before,(index: number, value?: string)inside an interface, without a property name Thanks for replying@ShawnTalbert.  I've been playing around there must be something I'm missing.  Shouldn't these be errors?  I'm usingstrict: null, fwiw. [<-CODE->] Same deal w/ a class.  This doesn't error thatarg: stringis missing [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->] I guess it should be an error in all cases 
solution: 

issue: I seem to recall some time ago it didn't output a file if there were certain types of errors, but I haven't seen that in recent TS releases. jwalton: It appears you can't legally use that word as an identifier, even in JS [<-LINK->] Ah, I assumed by Identifier they meant name. Didn't know the distinction. I'm surprised TS isn't handling that. Perhaps paste this into a stackoverflow question and/or issue on TS repo? try something like [<-CODE->] 
solution: 

issue: gamb: Add "allowSyntheticDefaultImports": true to your tsconfig.json if you want it to work like this. If it still doesn't work, try to add "esModuleInterop": true  then. 
solution: 

issue: [k in K]i believe  [<-LINK->] I'm getting an errorType 'Requireable<Record<string, {}>>' is not assignable to type 'Requireable<V>'. 
solution: 

issue: How does one expose aprotectedbase class method aspublicon a derived class? I see I can do it by declaring a new method (overriding) that simply calls the super method but that's not as elegant as I'd hoped 
solution: 

issue: hey guys typecasting is not pruning the properties not in type or interface 
solution: 

issue: neillindberg: your current app uses json-schema? Making sure I understand your issue, and JSON schema is not something you would need for typical JS -to- TS conversion. jas99: please provide a code nsippet or ask a question? 
solution: 

issue: ShanonJackson: because the interface did not say age was not allowed? citycide: declaration merging the problem with declaration merging is that you can't do it dynamically and I'm not sure I could think of a proposal that would allow that 
solution: 

issue: Has anyone encountered "Cannot find module '<package>'." errors for packages that don't publish types on npm like '@types/<package>'?I have dependencies in node_modules that can't see the types outside of node_modules/@types 
solution: 

issue:  [<-LINK->] SimonMeskens: looks like you can use markdown syntax to make a link 
solution: makes sense. 

issue: Please straighten me out here someone. [<-CODE->] Im getting an error on both password and username saying that they are declare buy never used... If I use them in the constructor no qualms, any other method and the compiler gets lippy.. Any ideas? 
solution: 

issue:  [<-CODE->] It seems to happen when I declare an async function, I'm currently targeting typescript 2.3.4 and my tsconfig.e2e.json looks like this [<-CODE->] I tried changing the lib to include "es5" and "es2015.promise" but it results in a error with the following messag:Property 'setPrototypeOf' does not exist on type 'ObjectConstructor'. 
solution: 

issue: Any idea why the transpiler throws an error in the first case: [<-CODE->] ? index signatures supports both string and number hmm 
solution: 

issue: what do you mean mimic what JS does? ok I am not "there" yet I think 
solution: for me, it's a little like solving Sudokus, so that's why I do it, but a lot of it feels like I wouldn't allow it in the code if I was leading a project and someone came up with it. 

issue: Is anyone able to help me with my problem specified above? 
solution: 

issue: Would JS's decorators + TS's emitDecoratorMetadata be a good way to get the names and types of each property in a class?I'd kind of like that for a variety of applications, but to prevent X/Y problems, the current goal I have is to deserialize some basic JSON data (strings, numbers, etc.) into a class with more complex types (e.g. a custom Day class, or the JS Date class). I think with the property names and their types I could have make the deserialization work automatically instead of manually implementing it. 
solution: 

issue: I'm having trouble using yield as an easy way to make a class iterable by just iterating over an array variable it has. Has anyone seen good examples of very simple use of yield to make something iterable? error TS2489: An iterator must have a 'next()' method. Let me see if I can post the code... Thanks. I literally just got it working with almost that exact same code, or at least compiling. eyelidlessness: the user-defined iterables from that link helped 
solution: But that is another good point you made earlier too. I will keep in mind that it might be better to get something working in JS first and ask for JS help until I can do that.. 

issue: ozyinc: , the code in question which was causing the error, [<-LINK->] looks something like this [<-LINK->] Interestingly enough, it fail to compile any async functions Is there any reason why a async function would fail to compile? This particular piece of code, [<-LINK->] results in the following error being thrown, [<-LINK->] . I tried addding, "es5" and "es205.promise" under the lib section of the tsconfig.e2e.json but to no avail. [<-CODE->] SimonMeskens: The full class looks something like this, [<-LINK->] . I don't have any other async functions in the e2e folder atm. I tested adding empty async functions to other classes and it results in the same error. The package.json looks like this, [<-LINK->] 
solution: 

issue: I know the following works, [<-CODE->] But what I really want and need is, [<-CODE->] Is  there any way to make it work? If possible, specifying the parameters of the constructors would be nice to have. 
solution: 

issue: ldexterldesign: I don't see why this wouldn't be a valid issue to open, or better a Pull Request :) ok gotcha, so yes in that case, I would definitely usejsconfig.jsonin the root of the project for VSCode to help with intellisense 
solution: 

issue: Is it possible to override an interface property in a@types/*package? let's say it exportsexport interface Something { a: string }but it's wrong and supposed to bea: number. what's the best way to override it locally? Thanks, how can I extend the original interface though? in my case, I'm building a webpack plugin. it uses somebabel-typestypes. exportedNodetype does not haverangeproperty on it in the@types/but it should. I need to extend with the missing property and preserve original properties. ouch 
solution: 

issue: I'm guessing the gist of@czhowercomments is that iziToast should include global typings. and by 'side effects' I think he means the generated JS code adds code to work with the configured module loader (e.g. your code is wrapped indefine()for module = AMD) lastly, I think he's asking for [<-ISSUE->] to be resolved 
solution: 

issue:  [<-CODE->] This is a sample code: [<-CODE->] （Playground: https://bit.ly/2FkpKQr） [<-CODE->] 
solution: 

issue: Hello everyone. I have a little question about typing in typescript. Consider the following interface : [<-CODE->] I would like to be able to type a property using a key of this interface. Something like this : [<-CODE->]  [<-CODE->] 
solution: 

issue: I'm trying to use conditional types, but after reading the docs pretty closely I've run into a scenario that I thinkshouldwork, and doesn't. If anyone's able to point me in the right direction, I'd greatly appreciate it: [<-LINK->] 
solution: 

issue: Hello room. In ts/js, isn'tthisalways an instance, for all intents and purposes? How so? If something can be used against instance values, can't it be used againstthis? 
solution: 

issue: bluh 
solution: It seems strange to me that TypeScript will compile with no errors when imports don't have a file extension, but they only work if they do have a .js extension. The only reason I find this strange is that by "build" I mean targeting ES6, and by not valid ES6 I mean it the import will fail in both Firefox and Chrome. If it won't make valid ES6 javascript it should not compile right? Here is some example code:import { AddedList } from "./App/AddedList";. 

issue: hi there, would someone know why typeguards and conditional types don't work here?  [<-CODE->] i would expect that when!pred(val),valwould beExclude<T, U>, because the type guard saysval is U 
solution: 

issue: citycide: that worked thanks! 
solution: 

issue: if it's never it will raise an error if it's ever created 
solution: when used as a generic parameter, it is kinda like any, but it might offer better inference in certain places. when to use which... well, it's a lot of trial and error. TypeProps tries to useneverwhenever possible, because it tends to give better inference across the board, but in some places that breaks down. 

issue: Why not? 
solution: 

issue: Hey guys. Did something break in the @types/node package? I have this package.json file [<-CODE->] and this tsconfig.json [<-CODE->] when I doyarn startI get error [<-CODE->] v9.10.1 OK. let me try by upgrading to node 10 
solution: I don't explicitly depend on@types/node. but I guess the latest version of react is doing that. and since I don't have node 10, the application breaks. I am running an upgrade now.. 

issue: cdaringe: I'm able to get this far  [<-CODE->] the type of the second argument becomesneverwhen you pass{ bar: 10 } but it'sTwhen you pass{ foo: 10 } massaging this into a type error is the hard part e.g. here's one hacky way  [<-CODE->] now i get a type error if I change it to{ foo: 10 }I don't 
solution: cdaringe: these last two examples both seem to work, pick your poison :). 

issue: these are creative.  testing them both.  PS, the rabbit hole also leads to this formal discussion: [<-ISSUE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->] And these are my service methods: [<-CODE->]  [<-CODE->] 
solution: can you type :features$asObservable<Feature[] | Feature>?. wow that worked. at least it got rid of the red squigglies. 

issue: hey all, i'm trying to update the vs code js intellisense event properties ( [<-ISSUE->] ) but struggling to understand how to do this - can anyone help? 
solution: 

issue: hello anyone uses systemjs and typescript together? 
solution: anyone with deep knowledge of typescript floating around? got interested in sweetJS recently because i'm more of a fan of Scala style syntax and i was wondering if you can basically write something that helps typescript understand macros and what they evaluate to so i can use sweetJS in a personal project to try it out. 

issue: suconghou: it looks like the type definitions forReadableStreamare incorrect. This is what I have locally: [<-CODE->]  [<-LINK->] You can modify the type def You can do something like this: [<-CODE->] Ithink... not super competent with this stuff You can just put this stuff in a*.d.tsfile in your project somewhere and it should just work. 
solution: Just as a test, try doing something like this: [<-CODE->]. 

issue: File is not definedOn node. Help? nvm 
solution: 

issue: I have the following code: [<-CODE->] and am thinking about changing it to this: [<-CODE->] Is there any problem with this approach? (is one preferred over the other?) 
solution: The second is certainly preferred in most cases, but it will be transpiled tovar params = Object.assign({}, this._cUrlParams, { pageLength: this._cPageLength })so there really isn't that much difference.. 

issue: Hello, I need to import 3rd party JS script into my codebase. I've triedimport * as task_condition_aware_text from './task_condition_aware_text.js'but it fails to compile:.... is not a module.Script looks like this: [<-CODE->] and when I'm debugging, it falls intoifbranch 
solution: 

issue: thanks folks i'll try that. i was hoping forCheck.that("hello").sequence().noLongerThan(10);in future extensions which is why  Check<T> and not Check<T extends number>. what's the reason for using./and not.and./srcand notsrc? (i am a total ignoramus and am probably not helping) 
solution: 

issue: I'm having a semantics issue with my tsconfig  [<-CODE->] I would like to set thebaseUrlto./, thesrc/*path to./src, and not have to specifiy../node_modules/@yptesfor a typeroot But that appears to break everything When I try those changes and delete typeroots altogether it's still broken I get a bunch of errors for components returned by theconnectfunction fromreact-redux error TS2605: JSX element type 'Component<Pick<OwnProps & StateProps, never> & OwnProps, ComponentState, any>' is not a constructor function for JSX elements. When I change the configuration to how I have it above then everything works Any suggestions? I've tried both, I'm just flailing about at this point. 
solution: 

issue: any typings/.d.ts experts in here?  I have a plain JS lib written by someone else that I want to add typings to.  It's effectively this: [<-CODE->] where "class" is an ES6 class So, effectively "Obj" has both data members AND class definitions inside it I can't make Obj a namespace, because it has "foo" on it and you can't declare a variable as a namespace how do I declare a variable of type Obj? this is a 3rd party library with a global variable.. I want typings on it how do I say .. "treat this random global variable as a namespace" ? 
solution: 

issue: Can't you just do this? I haven't used namespaces much, but it seems to be equivalent. [<-CODE->] So,const x: typeof Obj = {} as any? 
solution: Gerrit0: that const x: typeof Obj thing was the magic I was looking for :). 

issue: Hello! Can someone please help me? I have a menu tree like the following:```  [<-CODE->] And altough "Hardware" does have children, it seems to be undefined if onAction is called. 
solution: 

issue: Hi!I need to describe someinterface. I need to store Type in some property. How to do this? [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: sharikovvladislav: while thenew (): Amethod will work, you probably wanttypeof Ainstead. [<-CODE->] RaduSzasz: I'm not sure if this is applicable in your case, but regular multiline comments/*can be difficult to work with. I've had much more luck with working solely with doc blocks that start wtih/**. I'm a heavy user of [<-LINK->] so I'm not sure what this would look like in terms of using the compiler. 
solution: 

issue:  [<-LINK->]  [<-LINK->] Should this be an error? I think it should be totally OK :/ 
solution: 

issue: the regexexecAPI can returnnull, which is why you get the error with strict null checking the specific regex you have may not produce a null, but that's not statically knowable if you're sure something isn't null you can get rid of it usingas, or by using a function that always throws in the impossible case  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: My pleasure, glad it works :) 
solution: 

issue:  [<-CODE->]  [<-CODE->] I suspect the problem is in my funky mixin function, but not totally sure. Hmz,  ts-node does actually run the code correctly. 
solution: 

issue: Szauka: put your import statement below the initialization I don't think so, I think any external modules, including local file system don't get included you'd need webpack or similar you can't, modules are independent you'd need to export a function that takes init data and returns the actual module I'd have to see the code to understand what you're trying to do 
solution: 

issue: Connect does indeed expect a class that looks like it should work unless you're using old versions of typings Oh i think i see the problem@Ctaque you're todo function returns void, whereas the signature returns a Todo your addTodo function** if you just test my theory out by putting "any" instead of void and you see the error go away that is where your problem lies so it would be addTodo?: (todo: TodoModel) => any in props Hmm give me a sec ok you still around? got it 
solution: 

issue: thanks i will look at it Thanks you very much! i would never get this by my self 
solution: 

issue: Is there a way to make this type work? [<-CODE->] 
solution: 

issue: Typescript ErrorProperty 'catch' does not exist on type 'PromiseLike<void>'.C:/Users/USUARIO/chat/src/pages/chat/chat.ts// message is sent}).catch( () => {// some error. maybe firebase is unreachable hi i have this error Typescript ErrorProperty 'catch' does not exist on type 'PromiseLike<void>'.C:/Users/USUARIO/chat/src/pages/chat/chat.ts// message is sent}).catch( () => {// some error. maybe firebase is unreachable 
solution: 

issue: SimonMeskens: Regarding [<-LINK->] I am using webpack, just looks like it doesn't work when linking the module, only when removing the link everything works fine. Sounds more like a webpack thing in that case ? 
solution: 

issue: Is there a way to make this type work? [<-CODE->] 
solution: 

issue: Can you tell me why this isn't a type error? [<-LINK->] Even weirder is that when I import H into another fileHisany I know. Shouldn't there be? function provided as a property of H doesn't have second argument I guess that makes a kind of sense 
solution: Gerrit0: but that's the point -- the object values could be literally anything. the transform function is to normalize those  values into strings, if they aren't already.. 

issue: there is no type error in that link  [<-CODE->] this is because you've reached the lower-bounds of the function but you have not passed the upper bounds note that testFunc: test = (a: string, b: boolean, c: number) =>"hello" // fails upper bounds have been passed.testFunc:test = (a: number) => "hello") //lower bounds have not passed 
solution: 

issue: What's the best way  add a property to a third party class? [<-CODE->] The standard recommended way for monitoring WebSocket liveliness produces a ts error "Property 'isAlive' does not exist on type 'WebSocket'" for obvious reasons. What's the best way to tell the compiler "this is ok"? or even better "isAlive is ok but nothing else is" i tried a lot of fritzing about with interfaces and so on to not much avail 
solution: 

issue: rhys-vdw: I messed up theElementAttype, should have usedReadonlyArray. [<-LINK->] I don't think that should matter. You should be able to merge an interface and a class. PromiseLikedoesn't have a catch, if Firebase actually returns a promise withlist, then the typings should be updated to reflect that. 
solution: 

issue: I thought I have done it before. @HEEYSANDOVAL  Shot in the dark but I read the way that package works.Maybe this will work for you. [<-CODE->] 
solution: HEEYSANDOVAL if ur struggling on this for 2days i suggest just wrap it in an "as any" and move on. [<-CODE->]. if it is indeed a promise and not a PromiseLike. 

issue: HEEYSANDOVAL: I already told you how to fix it, it does NOT return a Promise or PromiseLike, it returns a Thenable. If you want to catch errors, wrap it in an A+ compliant promise you can't keep coming in here with the same question, get a bunch of replies, then come back 2 days later with the same question mikemartincode: won't that give issues when transpiling to es5? 
solution: 

issue: Gerrit0: Ah, nice. Actually that was just a coincidence. In my code I'd already corrected toReadonlyArray. I think it's an issue because the actual type is a: [<-CODE->] I'm not 100% sure though. Either wayanyis long overdue for this problem. It works with the littleFooexample. 
solution: 

issue: Can you Change by trying i++ to ++i 
solution: 

issue: mikemartincode: ,it is working fine, thanks. what change you did in that? 
solution: moved obj declaration inside for loop. 

issue: Hey guys.  How do I export a variable/module/function that has already been created? Machiaweliczny: Say I have a property that I'm importing from a model.  I want to expose that on my controller.  so something like this:import { someConfig } from 'someModel';  export someConfig; Does that make sense? Oh, I didn't think of doing this withas.  I'll try that.  Thanks! I need a named export, because there are other exports from the same file. It seems weird to me that I can't export something that's already declared without doing weird things. /shrug Oh.  That's neat!  Thanks! I don't think you can do it from json files though. 
solution: 

issue: Hello. Filling object only allowing definitions in interface, is there a quick solution for that? I’ve got a model/interface with some properties, and I would like to take some post request and fill it into the model only allowing whats defined in the interface Probably no magic solution for it 
solution: 

issue: @gerrit0 @mikemartincode When I try using an interface: [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: it moves the error around but it's still convinced there's two different WebSockets. 

issue: I remember I played around with it earlier. If I remember correctly ws inherits WebSocket. So try import * as ws from "ws". 
solution: 

issue: What testing framework are you using?nycis working for me using the same setup as described here: [<-LINK->] 
solution: 

issue: slooker: TypeScript is unlikely to be making the difference there. It compiles to JS. bakert: that actually makes sense Because the value being passed to your callback is an instance ofWebSocketand therefore has noisAliveboolean property Do you think it might work if you define it asisAlive?: booleaninstead? 
solution: Instead of creating your own extended interface, actually just say "in general, objects of this type may have a boolean set on them". 

issue: hello everyone. I get a strange compile error I cant really figure out:error TS8020: JSDoc types can only be used inside documentation comments. [<-CODE->] 
solution: 

issue: mali1488: I think it should be:export type TCallbackFunction = (error?: string, data?: any) => void; 
solution: 

issue: slooker: Addlib: ["es2015.promise"]in.tsconfig.json slooker: I don't know slooker:  [<-LINK->] - seems like it should be loaded automatically - but you can also specify it as--projectit seems slooker: I'm not sure if these flags are formochaorts-nodecommand so I can't really help you.  But I guess that's the case... 
solution: 

issue: I've kept it at target: es5 only because I do not see a reason to change it 
solution: I usually don't target es5 because I don't want to transpile generators (I don't use async often, my code is usually libraries, not consumers). 

issue: yeah you can use markdown to hide it... sometimes we're using to it used* 
solution: 

issue: Here's my take on it if I understand correctly. [<-CODE->] 
solution: slooker:  [<-LINK->]. 

issue: mikemartincode: I'm doing it like that for UI project and I don't think there's any problem with couplingWidgetLogic implements IUIWidget. (UIWidget interface is data & event handlers that you are using inrender()) 
solution: 

issue: Even if it isn't a complete picture, just seeing the cool things generic programming can do is pretty neat. Thanks for the help! Has anyone made a feature request for better/officialTupletypings support? I considered making it because I couldn't find an it on Github but I'm not... Eloquent enough to write a proposal. 
solution: 

issue: so i think there's a bug in the way TS implements async/await for older targets (i'm using es2016)  [<-LINK->] that error is definitely caught, but chrome debugger (and vscode debugger) treat it as unhandled whoops, i failed toawaitin my playground code. updated: [<-LINK->] if i target es2017 it works as expected is it possible to target es2016 generally but not transpile async/await? apparently if youawaitanything before the throw, the debugger treats it as caught. wat? denisemauldin: not sure what's going on. i tried to trace the inheritance chain and cannot find where an ancestor class has atextmember incidentally i don't see that error in your link super.textshows typeanyon hover oh i see it now. for some reason chrome find didn't want to find it the first time i looked 
solution: 

issue: If  building with tsc,  src/types is normally ignored? types/ doesn't appear in lib/types and then shows me errors, unable to find the types dir in lib/. Confused now whether it's default behavior or if I have something not configured correctly. 
solution: 

issue: Yes, I definitely need both of those.  THank you. Is there any way to validate your tsconfig.json? 
solution: it will complain if it's not valid.. 

issue: That's... odd, looks like it should work to me. 
solution: 

issue: Can somebody explain why this doesn't work? [<-CODE->] 
solution: 

issue: Hello, I wonder how can we 'inject' a namespace into an already imported package? For example, in my app, [<-CODE->]  [<-CODE->]  [<-CODE->] Surprisingly, this compilation problem did not stop the Angular to create the output: The error information was thrown after the compilation success prompt; The result turned out that this function was already applied. [<-CODE->] Can somebody please help me and tell me whether this behavior is a bug or I did something wrong? [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Hey! Can anyone perhaps enlighten me why in this Playground-Link it can't properly infer the type of the constructor argument? [<-LINK->] TheProps<T>wrapper is there to prevent passing a props definition where a property is not a mapper type. And another issue: [<-LINK->] - Why isTestinferred to benumber? It just omits the first part of the intersection type. I'd expectstring & number. TypeOf<StringMapper>isstring,TypeOf<NumberMapper>isnumber, and..TypeOf<StringMapper & NumberMapper>isnumbertoo? Makes no sense. 
solution: 

issue: SimonMeskens: thanks, const fixed it (that i didnt think of that). finaly my project files are becomming cleaner 
solution: 

issue: those all say to use modules, though? the start of that answer is "If you are writing code for Node, using Node modules as described by Ivan is without a doubt the way to go." 
solution: 

issue:  [<-CODE->] For our libs - for initial loading its fine. The link you gave me was this and contains nothing of the sort relating to VM loading that I can see: [<-LINK->] Im only using requires to get VM and FS to then load manually. None of our code is loaded by requires, and none of our code uses requires this way. Only a shell wrapper which I mentioned was acceptable. Maybe you sent the wrong link, because the one you sent only has this:  [<-CODE->] 
solution: 

issue: jest injects it when you run it do you just mean your editor is complaining about it not being defined or something? 
solution: in eslint, you could do/* eslint-env jest */or set up your eslint config to treat all test files as being in the jest env. 

issue: thanks could anyone say the code for web alert popup message with is? 
solution: 

issue: i'm struggling to figure out how to define a type, maybe someone can help... what i want is to get the fields of an object that are nullable (or not) i've tried with conditional types andextends nullbut that doesn't work for union types withnull 
solution: 

issue: yeh, i think that  would be best. thanks for the help though 
solution: yeah I tried that, got this[ts] Function implementation is missing or not immediately following the declaration.error.Do I have to add something in tslint.json file ?. 

issue: I’m having an issue with compiling ts code, it worked before and I don’t know what happened I’m getting this error: [<-CODE->] I’m using ES2017 and it worked fine before I got it working I removed local package tsc 
solution: 

issue: Hey all!I'm looking for the  docs pages that will explain the behaviour of this code: [<-CODE->] I understand its has something to do with "Object literal may only specify known properties". but it's not clear why function return considered as setting  object literal while the other variants not 
solution: 

issue: Hi guys, how come[ts] Property 'Error' does not exist on type 'Window'.? When in browser, there is clearly anErrorobject that can be accessed throughwindow.Error 
solution: 

issue: Hi!I'm using the TypeScript Compiler API for a project and I'm faced with this issue: given a type annotation like "number | undefined", the TypeNode correctly identifies the union type with number and undefined, but if I use the TypeChecker to get the Type out of the TypeNode, the returned Type is simply number. Is there any neat way to preserve the information that the type is unioned with undefined? I'd like to not need to look at the TypeNode to figure that out.Thanks! 
solution: 

issue: Hm perhaps this is a little simpler: [<-CODE->] 
solution: 

issue: Anyone know how I could define in.d.tsfile type ofwindow.MyLibwhen I have path to src defined intsconfig.json(in compilerOptions) as such:"paths": { 
solution: 

issue: Hello everyone! I need to pass a class as a parameter and i am facing the error shown in the following example. Is there any way to callcreateSomething()with the following params? [<-CODE->] This is just for demonstration, it is not a problem this would work :createSomething<T, U>(someDerivedClass: T, context: U) { ... } 
solution: 

issue: Im  not familiar with that syntax @skeate posted, but  I use any instead to pass around class decls.ie:  [<-CODE->] then you can call the ctor from that by using SomeClass() and you can cast the result, even using a genric.  [<-CODE->] ktsangop:  [<-LINK->] 
solution: 

issue: How to express string concatenation in type system? [<-CODE->] ok, will post on the stack why not on the type level ? 
solution: because the type system does not support it. (idris for example would support that). 

issue: you can't. (probably, i've been proven wrong on what the type system can do before) i really think your effort would be better spent validating it at runtime 
solution: 

issue: ultimately probably not. 
solution: 

issue: can always incrementally add types, no? I come to TS via C++ -> C# -> Scala -> TS so I like types. though I've also done a lot of JS with minimal types. so I can appreciate the type-sloppy perspective as well 
solution: is it possible to alter thethisof a method with conditional types without destroying the args/return type?. 

issue: default is not to i've never generated one 
solution: 

issue: Hi, I don't understand why type guard doesn't work in the example below... Can anyone explain this? [<-CODE->]  [<-CODE->] 
solution: 

issue: Why I cannot assert enum to other enum? [<-CODE->] czhower: do you think it is reasonable to expect it to work fine? 
solution: 

issue: Riari: glad you found it. I usually look towards believing what TSC tells me and suspect (in that case) it truly didn't find the type you expected. 
solution: 

issue: is there any way to replace a type in a union with a mapped type? e.g. [<-CODE->] want that to be [<-CODE->] that was more "what do I put here to get what I want" U[]would replacebartotally withnumber[], wouldn't it? and my initial wording was a bit awkward. "is there any way, with a mapped type, to replace a single type in a union?" oh, hm, it's supposed to be distributive. but then I'd expect this to work: [<-LINK->] the error should be on line 17, instead it's showing up on line 15 
solution: 

issue: hmm.  if I do it like this, it works: [<-CODE->] osdiab:  [<-CODE->] 
solution: I feel like this is obvious and I'm just missing it, but if I want to define aclass Map<K,V>but I want to be able to construct it from an object withstringkeys... how would I go about that? [<-CODE->]. 

issue: Hi,I have created angular component and it uses another third-party package. While generating ngFactory file. Its  looking for index file in that component. but that is in another bundle file with es6 format and this the file mentioned in the package.json module?Can any one help me to get rid of this? 
solution: 

issue: Hey [<-CODE->]  [<-CODE->] is there a way to make it? 
solution: I strictly follow the naming conventions when it comes to .net coding but at the same time i would like to ask is there any naming conventions for typescript  ???I am naming my interface as IStudent  but i read here : [<-LINK->] Its telling me don't use 'I' as prefix for interface  no '_'  for private properties etc. can anybody suggest me the best way when it comes to naming conventions in typescript. 

issue: anyone know what mean by REPL mean in typescript  [<-LINK->] I wasted 2-3 hrs to get import lodash into simple typescript project it show "exports" not defined Typescript say it is easy  [<-LINK->] but it does't work 
solution: 

issue: AnyhowStep: I don't think that's possible, I played with it for a while and couldn't get anything to work. I thought maybe using a customReturnTypemight make a difference, but this doesn't work as intended either... [<-LINK->] 
solution: 

issue: if i have a class with this signature [<-CODE->] and a prop in it like [<-CODE->] and another prop like [<-CODE->] shouldn't this type check as expected? [<-CODE->] i'm getting this error: [<-CODE->] 
solution: 

issue: eh, kind of, not really.. 
solution: 

issue: Hi everyone, i need help i have those weird errors: [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] I can't figure out why I have this... 
solution: which with target: es5 should be['DOM', 'ES5', 'ScriptHost']. 

issue: if i have a class with this signature [<-CODE->] and a prop in it like [<-CODE->] and another prop like [<-CODE->] shouldn't this type check as expected? [<-CODE->] i'm getting this error: [<-CODE->] 
solution: 

issue: Hi all, doesn't anyone know if it's possible to compile a typescript file on it's own using angular's httpClient  ? I want to get a service written in Angular / typescript and compile it on it's own so I can run it using "node mycompiledservice.js" 
solution: 

issue: are there any specific reasons to usestring based enums  over string literalsor vice versa? you mean using enum as a value? 
solution: with enums, you get a standard interface. if you leave it to string literals, you're relying on the JS dev knowing what they're doing. 

issue: ShanonJackson: doesn't look like it You can do this though: [<-CODE->] Or this: [<-CODE->] 
solution: 

issue: Hi, I am new here. 
solution: 

issue: I am trying to use google place API to search gor places but Only for one characters, 15 calls are coming. what should I do to decrease the call? I have also commented out some code but it has not created much difference.  [<-CODE->]  [<-LINK->]  [<-CODE->] 
solution: 

issue: shekharramola: seems to be a JS problem, not a TypeScript problem, you probably will find more help on StackOverflow 
solution: 

issue: I have an async method that doesnt return anything... what type of promise do i return? async myMethod() : Promise<undefined> ? Promise<void> also doesnt work An async method in es5/es3 requires a 'Promise' constructor ^ error i get when i add as method return type : Promise<void> 
solution: 

issue: Does anyone know how I can add an extension method in Angular 6 to RxJS6?I am currently trying to do in my augmentation.ts file: [<-CODE->] Doing this causes the TS compiler to not see any of the other methods available for Observable.  I can't find a way to extend the rxjs module.  Any help would be appreciated 
solution: 

issue: Kompwu: You can't manipulate a nodelist. 
solution: AndtextContentis astringanyway.. Just change the type tostring.. 

issue: Thanks guys. I'm facing another prob now...appendChilddoes not override liketextContent = xxx(yeah that's obvious)After googling on the world wide web there isremoveChild&replaceChildbut it does not seems appropriate,@SimonMeskenstold thattextContent = xxxis bad so i'm kinda lost again... 
solution: 

issue: Anyone know the best @ types for dom ? dom4 is not that great. 
solution: 

issue: Kompwu: the typings are correct. your code is wrong. the typings are correctly explaining why your code is wrong. 
solution: 

issue: SimonMeskens: For BackEnd you can. aka asp.net. it's just a binary. Phantom190: That's exactly that. 
solution: and probably doesn't know that C# is actually compiled to webassembly. :face_palm:. 

issue: Hey folks, what would be the best approach for me to test if a value for a string enum doesn't exist without getting type errors? For example, I'm trying to test a "missing" enum value and to gracefully degrade the result accordingly. However, my spec tests are giving me a type error becuase the string value I'm providing isn't found in the enum. Thoughts? 
solution: 

issue: hello, im writing a ts transformer but i keep getting this error  [<-LINK->] it seems like the problem ists.createJsxOpeningElement(element.openingElement.tagName, element.openingElement.attributes) 
solution: 

issue: hi everyone, typescript does not infer the correct type with switch(true) is that a bug?  [<-LINK->] I have this piece of code omg it turns out that it's only a webstorm IDE bug omg not IDE fault, I also receive the same result in the web playground  [<-CODE->]  [<-LINK->] 
solution: 

issue: if it's truly a static value defined in JSON and not dynamically generated, i'd go with the latter just as getters can hide complexity, functions/methods that don't do any work can suggest complexity that isn't there 
solution: 

issue:  [<-LINK->] I hate this I'm givingtscso much RAM and it still won't check the type successfully  [<-CODE->] I could gettscto check and whatnot until I actually deleted some files that were not being used Anyone else frequently get these errors? I found the source of my problems Literally a one-liner Inside one of my generic functions with a complicated type, I had to changereturn /*snip*/;toreturn /*snip*/ as any; Because it can't match the type correctly with generics, sometimes =/(Even though I'm 99% sure it's the correct type) I never thought of it that way but it makes sense 
solution: 

issue:  [<-LINK->] why does this not work :/ 
solution: 

issue: Nufflee: I'll follow your issue. No clue why the error is. Sorry :( 
solution: 

issue: With conditional types whats the trick to actually filter out keys? I thought you set the type toneverbut that indeed just sets the resulting key type tonever [<-CODE->] 
solution: 

issue: SimonMeskens: The brand-removal type you helped me with doesn't work on booleans, as the boolean is always split up into a true-type and a false type, e.g.(true & mybrand) | (false & mybrand)instead ofboolean & mybrand  [<-CODE->] Could just add a special case:[T] extends [(Brand<B> & true) | (Brand<B> & false)], but it seems weird. Hmm.. But that fucks up my other function:function asBrand<T extends Brand<any>>(value: WithoutBrand<T>): T { return value; }, now it complains thattrueis not assignable. Gotta rethink my approach a bit.. Kompwu: What exactly do you mean "w/interface"? 
solution: They're just providing, for whatever reason, the generic type argument  explicitly, instead of letting TS infer it.. 

issue: Kompwu: Be vary ofPartial<T>. It may be comfortable, but it also can lead to type-bugs.Partial<T>allows toexplicitlyset properties toundefined, and withObject.assignor the spread-operator theseundefinedproperties will be used, even when the non-partial target types property says it can't beundefined.  [<-CODE->] That's whyPick<>is preferable, it does not has such an issue. 
solution: 

issue: hi my angular app became very slow because ofngFor ...any suggessions to make it faster? Im using infinite scrolling and appending new data to a variable used inngFor.becoming more slow when scolling down more,  violation 'mousedown' handler took 4567ms 
solution: 

issue: naveen21f: are you using trackBy already? also try moving your component to OnPush change detection Is there an easy way to generating and collecting the typings for a typescript library that has an index file listing a bunch ofexport * from './some/path/to/classes/etc';I trieddts-bundleanddts-generatorbut cannot get the module to resolve correctly on import. alternatively is there a reason why certain types and interfaces would be missing from the declarations file when usingdeclarations:true? (they are imported, exported and used) 
solution: 

issue: cedvdb: just the id field? cedvdb:  [<-LINK->] Kompwu: PickandPartialare not part of TypeScript, but rather part of TypeScript's core lib, meaning you can look at the source code to see how they work, I hope that helps 
solution: 

issue: i'm trying to return the result of a promise from the elasticsearch js lib in my nestjs controller. i looked at these examples [<-LINK->]  [<-LINK->] but i can't figure out how to combine them 
solution: 

issue: well i want to end up with some json if i GET that endpoint that part is fine, i can just console.log(hits) but i can't get it returned in the browser like, i don't what the controller should actuallyreturn if i tryreturn hits;that doesn't seem to get executed ok cool, thanks ah ok, its mostly copy pasted from other docs & samples hmm ok, let me try that if i want to bypass the transformations i could justreturn hits;there right? 
solution: eventually, when you want to lock that down, just hover overdoSearchand copy the return type. 

issue: SimonMeskens: what's the difference between the 1st and 2nd examples you posted? in terms of functionality just got back from lunch :D 
solution: 

issue: you can use .d.ts files then, yes  [<-CODE->] that should work IIRC and lets you declare types for your own files 
solution: 

issue: I am trying out typescript and there's something I don't understand. I've  installed@types/mongooseand imported the module usingimport * as Mongoose from "mongoose", so far so good.But now I want to assign the Mongoose type to my variable :export default (mongoose: Mongoose) => {}, but then I get the error:Cannot use namespace 'Mongoose' as a type.  Is there a way to do this correctly? 
solution: 

issue:  [<-LINK->] Thanks@SimonMeskensI was hoping to avoid JSDoc everywher but this is a step in the right direction 
solution: if it correctly detects the type of the class, it should detect the type of _render. 

issue: nevermind, I need to usedtypeof 
solution: 

issue: Hi all, I have a question. I have some getters and setters in my class but when I apply that class as a type to an observable returning data, those setters do not work. How can I assure those are run even when set as a type? 
solution: 

issue: ok, glad it's no longer an issue. 
solution: 

issue: Yeah. I tried that. I will continue exploring some way to load the files without modules. It should be fun. 
solution: 

issue: I'm working in a ReactXP project where I must use React Native native modules.So I've included the react-native types as a dev dependency.My project does not compile right now with the following errors: [<-CODE->] Following are my package.json file: [<-CODE->] and tsconfig.json file [<-CODE->] I do not understand what I'm doing wrong.Any help appreciated. 
solution: 

issue: I have a question about using typescript in VS code - intellisense hints vs compiler output seem to be different? e.g. this code generates no intellisense warnings, but obviously won't compile as the argument 't' is possibly undefined - think I am missing some understanding [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] Can someone help me please? 
solution: In the past I have used the diagnostics flag and changed the entry point to the program to check different areas. 

issue:  [<-CODE->] Thank you! 
solution: 

issue: anyone using an Omit and Diff types in 2.9 RC? needed to upgrade to 2.9 to finally correctly type my helper class but now stuck getting 3rd party library errors on Omit and Diff or is it possible to ignore invalid types in node_modules in 2.9? because my standard tsconfig exclude isn't working... 
solution: 

issue: What happens if it's astring? 
solution: it's 100% predictable when a constructor or factory takes a partial of the full type that missing/undefined values will be set to some default. 

issue: eyelidlessness is right, entry === undefined || entry === null is what you want i think. yeah spread to remove. 
solution: 

issue: Is this the best way to store this data in json ```  [<-CODE->] 
solution: without context there I can't say much about that format. it looks like legitimate json, but whether it's the best way to store it likely depends on your use case in both generating and consuming it.. so far this is definitely not a typescript related question. 

issue: Hi I am trying to use the typescript compiler API to transform some of my existing code using a CODE_MOD. I need a way to maintain new line chars in my project. 
solution: Is it possible to reference a generic type outside of the class it is defined in? Something like [<-CODE->]. 

issue: Hi. I am running a react-typescript project using webpack and awesome-typescript-loader. [<-CODE->] The loader is throwing an error TS2554: Expected 2 arguments, but got 1. Can someone help me? 
solution: 

issue: hey, does anyone know iftypeRootscan include folders that are not specified infilesorinclude? tsc can't find any type definitions if I do this: [<-CODE->] it only works if I also add the typeRoots toinclude but then what's the point of putting them in typeRoots? 
solution: 

issue: what is this operation called? [<-CODE->] 
solution: you would just need the bottom,  right?. 

issue: do 3 sets of 10 then rest for 1 minute 
solution: 

issue:  [<-CODE->]  [<-CODE->] It will actually use older version of it self to transpile its own dist from now on :-) 
solution: 

issue: lorezzed: you don't, it IS an observable, not a subject why would want to fool yourself into thinking it's the wrong type? 
solution: 

issue: Is there a way transform a type from{ a: string[] }->{ a: string } so [<-CODE->] Aha, I see. So actually this is what I think I want from that [<-CODE->] Thanks for the tip. It's pretty amazing how advanced this type system has gotten Further question:Is there a way to mark some array values in an interface to not be converted to the element type? I suppose you'd need something like Haskell'snewtypefor that  [<-CODE->] 
solution: 

issue: I'm trying to implement this function interface like: [<-CODE->] It's working for the no-arg version, but even if I call with an arg it still calls the no-arg version... is there an easy way to implement that interface correctly? So, this seems to work but I have no idea what the caveats might be: [<-CODE->] Not to mention it's... ugly 
solution: 

issue: Hey guys.  Any suggestions on a trivial way to do this?  It's telling mereq.headers.authorizationmay be  string or undefined, and I can't assign it to a string.  We already do a check and throw an error if req.headers.authorization is undefined, so it will ALWAYS be defined here. [<-CODE->] 
solution: control flow inferenceshouldcatch that but if you have any kind of indirection (e.g. call a function that throws) it won't catch it. 

issue: Hey everyone! im having a hard time diving into react with typescript. What im lacking is a reference for event types. For example when i bind to the onChange of an input i found out the type would be React.ChangeEvent<HTMLInputElement>.. however that required a lot of trial and error, and now im stuck on the event on the <form onSubmit>.. any help is appreciated it just shows (e: any) => void on the <form onSubmit> 
solution: 

issue: hello community, had this error and i didn't get it :/   :Type '(o: any) => void' is not assignable to type 'PartialDeep<any>'. 
solution: 

issue: I don't see where they said they were trying to augment it... 
solution: 

issue:  [<-CODE->] Then access usingUser.role andre-dw: 
solution: 

issue:  [<-CODE->]  [<-CODE->] WTF? Can someon help me ? AnyhowStep: heh? 
solution: ButJSONisn't iterable. So you'll needcardsto be aPromise<>that returns an array or something similar. aaronbeall: No ideas, sorry =( Shouldn't be too hard to cook up your own if you end up being unable to find a library for that, though. Maybe someone else around here will know. 

issue: aaronbeall: debounce()? I don't use it myself so I'm not 100% sure  [<-LINK->] ?If that isn't it, I'm out of ideas You can't iterate over aPromise IsJSONan array or something iterable? Since you're in anasyncfunction, maybefor (const card of await cards) {}? 
solution: 

issue: Kompwu: I'm not surecardsis supposed to be. It surely can't bePromise<JSON>? 
solution: AnyhowStep: check this: [<-LINK->]. 

issue: AnyhowStep: Like that ? [<-CODE->] 
solution: 

issue: Kompwu: Looks correct to me Ugly conditional types? Lol [<-CODE->]  [<-CODE->]  [<-LINK->] I just copied an image and Ctrl+V'd it =x Drag and drop should work, too 
solution: 

issue: fixed my problems with docker, but does anyone else here run a typescript backend node app in a docker container? got some questions on how to manage file changes while you code live with nodemon (or w/e you use to watch changes live and restart the server) 
solution: 

issue: NaridaL: Thought--esModuleInteropimplies--allowSyntheticDefaultExportsas your link says? Anyway, it seems to indeed work now that I try it. I thought I tried it yesterday and it didn't work. Dunno. Thanks! 
solution: 

issue: you could also write [<-CODE->]  [<-CODE->] nevercame from controw flow analysis in the ternary operator 
solution: 

issue: That error message is weird, but you aren't specifying the T generic parameter in the function call 
solution: 

issue: Where is the error showing up? In the function call or inside the definition ofapi? 
solution: Kompwu: The@types/node-fetch definitions probably do not specify a generic type for thejsonmethod. You have to change. 

issue: foo3 is really just{ Foo: number } & { Bar: string } I don't know the explicit technical reason for allowing it but it makes intuitive sense to me to allow, [<-CODE->] It's an inclusive or, not exclusive or 
solution: const foo: Foo<never> = { Foo: 1 };thenevercloses the union. 

issue: Hi, I have been creating node npm pacakges for use by node apis, I wonder if its possible to create a package (npm) that is compatible in both client JS and Node JS - understanding that these use different module systems i.e. require vs import etc - The package would need to compile to es5 but this wouldn;t solve the issue of allow it to be required from node or imported from client js any ideas? 
solution: 

issue: Might be wrong, but doesn't Webpack solve this? 
solution: 

issue: I have the following code to try and work out whether a component instance is an instance of a class component and has a ref property: [<-CODE->]  [<-CODE->] 
solution: 

issue: Kompwu:  [<-CODE->] 
solution: gabejohnson: Instead of creating a type we can't have him typed on himself? like a class?. I mean something like that ?Foo<T extends Foo<T>>. 

issue:  [<-CODE->] Why do I get an error:Property 'findOne' does not exist on type 'ExtendedBaseEntity'.? So when I extend a class, it only extends the instance prototype but not the static part? Got it. I have to dothis: typeof ExtendedBaseEntity. Thanks@AnyhowStep 
solution: 

issue: luluyiluchangtong: - Addes2017to the lib section in thetsconfig.json 
solution: 

issue: Hi everyone, [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: OK guys. I've gotten the Typescript compiler running using Spidermonkey 52.  I did this by putting my own 'system' object in the sys.ts source file.   Are the internals for the compiler documented anywhere? The source is difficult to read and follow.  Right now I'm trying to work out why it's writing a zero length file called 'Classic.js' into the same directory as the executable, and then complaining that it can't open 'Classic.ts' 
solution: 

issue:  [<-CODE->] I checked the API breaking changes and saw there's nothing breaking APIs in 2.9 but since this is a new feature it might not have been considered breaking per se.I'm having an issue with my webpack loader when importing JSON and trying to narrow down the problem. 
solution: 

issue: Hi!I want to ask about polymorphic 'this' type. [<-CODE->]  [<-CODE->]  [<-CODE->] Am I wrong?Thank you very much. 
solution: 

issue: is it a good place to ask why this stuck: [<-ISSUE->] ? 
solution: 

issue: ````  [<-CODE->] ```` ```  [<-CODE->] im a bit confused, this should be correct no? im getting a typescript error when i try to use the component, so im providing it with a value and onChange Prop, but its yelling for a ref :( 
solution: 

issue: why are you using declare interface? BendaCoding: When working with a union typescript will force you to work with if you had both simultaneously types get compiled out so therefor all tests you write are basically not going to work... however that being said  you can use something like this to allow your types to compile into code  [<-LINK->] hailwood: hailwood: basically they are there so if anyone changes a definitions to the wrong types, when they run TSC they will get compile time errors because the types will no longer work 
solution: 

issue: I'm currently using2.8.3.  Does anyone know how I can fixExported variable 'errorHasName' has or is using name 'SomeErrorType' from external module "/.../adrice727/src/types/error" but cannot be named.? 
solution: 

issue: When using VS Code, if the mouse cursor hovers over an item in code, a small window akin to an expanded tooltip pops up with information.  1) What is the official name for this feature?  2) Can the delay be configured?  It's annoying to have it pop up immediately and everywhere as I move the cursor around my code 
solution: 

issue: I am getting (3,1): Import sources within a group must be alphabetized.Please help guys 
solution: 

issue:  [<-CODE->] error: "Duplicate identifier 'index'" [<-CODE->] 
solution: 

issue: ShanonJackson: Thanks for the alternative playground link! :-) that one does some of the things I had suggested for the official one but did not get implemented... ;-) 
solution: 

issue: Hi, I need to convert JavaScript to TypeScript...I found that to automate a bit: [<-LINK->] If I do it by hand I'll spend hours on it, it's good to make a work base or I should do it all by hand? 
solution: 

issue: Hey all, pretty new to typescript.. I've came across this error a few times but its only showing up when I use a HoC in React. [<-CODE->] The exported component --> https://cl.ly/3y070O2e1428Where my error is happening --> https://cl.ly/0K29101c1U3UAny help would be appreciated 
solution: 

issue: Hihow to open TypeScript's source code on Visual Studio Code? [<-CODE->] Is there any guide for this?Thank you very much.  [<-LINK->] 
solution: 

issue: oh, and I'm using Visual Studio Code on Windows 10 here. 
solution: A more complicated exact example (may be convoluted) is{ [k in keyof typeof anObject]: string }. 

issue: Normally when I specify the type of the keys of an object, I can (and I thought I even was required to) provide a key name (presumably to help out a parser only?) in addition to the key's type (e.g.{ [k: string]: string }). However when using theintype operator, specifiying a key name becomes a weird parser error where{ [K in Foo]: string }is valid but{ [k: K in Foo]: string }is not. This struck me as odd... Is the inconsistency here intentional? 
solution: 

issue: Hey guysI have an abstract class with an abstract method, which I want any derived class to implement. However, some of the logic will be same along all derived classes. So Actually, I want to have something like a initializer, when this specific method is called. Kind of like a constructor, but only for this method. This logic should live in the abstract base class. Is this possible?https://gist.github.com/takahser/ea0a8bdd1249d182c03db307688c3aeeI doodled a gist, it's maybe easier to understand, what I'm trying to do when seeing some code :) Actually, the best solution that works is by omitting theabstract drivemethod. However, if I do so, I won't be able to enforce the derived classes to implement this method... 
solution: 

issue: i recieve this errorapp/libs/grid.factory.ts(25,71): error TS2345: Argument of type 'Context' is not assignable to parameter of type 'string | Context'.  Type 'Context' is not assignable to type 'Context'. Two different types with this name exist, but they are unrelated. this is when i run the aot compilation any idea on how to fix this? the parameter context is a union e.g string| Context what error do you get? 
solution: 

issue: Can someone help me with my tslint configuration? Im getting compile errors 'is declared but its values is never read' i actually want these as warnings but at the moment its hindering me from starting up the application 
solution: 

issue: anyone one can tell me how to read file line by line like fs module on the browser ? i am  newer , i search the problem and found browser not support the node fs module. 
solution: 

issue: does prompting it with alt enter do anything? oops i meant ctrl + space not sure why I said alt + enter 
solution: 

issue: is there a way to force keyof T where the index of that key is a string or number I.E something likePick<K as keyof T> ? K extends string | number ? string : never : never ShawnTalbert: ?something like.. [<-CODE->] doesn't seem to work 
solution: 

issue: i literally have no idea when to useinand when: i know it opens up a way to doT[key]on the right side but i dont know when its possible to use it and why not 
solution: 

issue:  [<-CODE->] here is sorting funtion, but not working 
solution: 

issue: ShanonJackson: thank God) i broke many spears while try to prove it 
solution: 

issue: Hi all, Why 'tsc' tries to compile declaration files which are inside node_modules? I get this error when run 'tsc' [<-CODE->] tsc is trying to  transpile node_modules/operativos/server/app-operativos.d.ts .... I already tried excluding node_modules from tsconfig.json, but doesn't work"exclude": ["*/node_modules/"] 
solution: 

issue: i-n-g-o: youd be better off adding the 'onload' handler inside the JS instead, and also not having the JS in the html where you havenew testme(). Chances are, browserify takes the testme class out of scope Dont know what to say without seeing whats actually going on ^^ 
solution: 

issue: Does this make sense in order to not to loose type information on the RequestType?: [<-CODE->] It feels rather messy and plain wrong... :-) My assumption is that if I setrequest: anywhat will be returned is of the any type and not be it's original type anymore, e.g. IncomingMessage. 
solution: 

issue: That makes sense I would like it to return something like a "JSONObject" with methods so I can extract data, therefore forcing me to deserialize the string into my own types.Maybe there is a library that does something like that? Do you know any? BTW thank you for the reply :D 
solution: yeah, but this still trusts the input :DI foundio-tsits exactly what I wanted. 

issue: I want to take an object (any number of key:values) and convert it into a string of "<key>:<value>\n" this code works, but I get a typescript error in the ide  [<-CODE->] the error inElement implicitly has an 'any' type because type '{}' has no index signature. I don't want to turn off the error in the compiler as it may catch other issues, but how can I fix this to remove the error in this instance ? eyelidlessness: the above does indeed fix my problem with the exception that I replacedanywithstring|number|Date|boolen(as it can't be an array or nested objects) many thanks! 
solution: 

issue: I'm experimenting with them a lot too heh I'm writing this SQL query builder library that takes types describing a database like: [<-CODE->] And I want to have a methodwhereOnethat only accepts subsets of User where at least one key is unique e.g.: whereOne({ email: 'a' }) // compileswhereOne({ email: 'a', passwordHash: 'b' }) // compileswhereOne({ passwordHash: 'b' }) // error I have a feeling I can make this work with conditional types + never, but I haven't been able to type whereOne correctly yet Yeah, currently I'm doing this:  [<-CODE->] But that doesn't work The problem is that myobjargument doesn't have the boolean unique values so I can't make its type never 
solution: 

issue: @eyelidlessness that fixes the issue, but now i get another one: [<-CODE->] custom matchers with jest this passes type-check: [<-CODE->] 
solution: 

issue: It fixes for instanceof for Error. Also, notice I'm using BaseError frommake-error, I found some problem with the baseErrorin some usage, but I can't remember what exactly was the issue. I should have document it.Another thing the about the istanbul ignore. The transpiled code has extra lines between the extends and calling super, causing istanbul to miss a line. 
solution: 

issue: how can I make this work [<-LINK->] ? why does it pass error in last lineArgument of type 'typeof TestSystem' is not assignable to parameter of type 'new () => System<{}>'.? If I remove constructor fromSystemclass - then error disappear. How does constructor declarations change things? 
solution: 

issue: Hello everyone, how can i use immutable in redux with typescript here is my code :  [<-CODE->] error in line :  [<-CODE->] error is :  set is not a function 
solution: 

issue: i'm having trouble doingreally basicmodule augmentation and i'm stumped i have this code: [<-CODE->] so i try to augment the model: [<-CODE->] i still get the same error, as if i hadn't done the augmentation at all what gives? i have done this dozens of times successfully this one justwon't take 
solution: even if i inline the declaration into the module where the error is, it's ignored. 

issue: Hmmm interesting@eyelidlessness iv'e had a similar problem with the module augmentation if you run TSC over it does it throw a error? (i know the inline errors are coming up in your console) but my code actually had the inline errors complaining after augmnetation but no compiler errors augmentation** 
solution: 

issue: Hey folks Getting a compiler error when compiling my project, I (sort of) know what it means, but  I wondered if someone could help me interpret it and act on it correctlyHere's my ts file: [<-CODE->] The error I get is: [<-CODE->]  
solution: 

issue: you can make a type guard!  [<-LINK->] I've also used joi validators to do runtime type checking for me joi: [<-LINK->] I'd also recommend looking at TypeORM to see how they do it, see if you can find inspiration: [<-LINK->] what have you tried? 
solution: 

issue: Hi, [<-CODE->] This code returns return type of a function.I wonder if I can change return type of a function. Can it be done? [<-CODE->] Thank you very much. I think this feature is still being proposed: [<-ISSUE->] 
solution: 

issue: Hello everyone ! I'm working on a lib (using TS of course) and I'm facing a little issue with typings generation. Considering this tree : [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] I've tried to do some trikcs but it didn't works : [<-CODE->] It seems to be a known behavior but I can't find a working workaround.Thanks a lot for helping! I think it is, but I'm not sure : [<-ISSUE->] the thing is, even if this is a known behavior I thinkimport './my-module';should do the trick (as mentionned by Ryan Cavanaug [<-LINK->] ) Im sure I'm doing something wrong but I can't figure out what. The only way I have found to generate typings for 'folderB' is to export it from a used module (but it's really ugly) (for example : export folderB from folderA, but doing this I can acces folderB stuff from folderA. You get me, it's not a solution) (confirmed: [<-LINK->] ) just in case, here is my tsconfig file. [<-CODE->] 
solution: 

issue:  [<-CODE->] any idea why types are not inferred correctly here?  [<-LINK->] 
solution: 

issue: Sorry if this sounds stupid but i cant work out why my for loop isnt workingfor (let index = 1; index < 13; index++) { 
solution: 

issue: is there any developed framework for testing types? like, i wanna do actual tests over my types  [<-CODE->] or something, dunno 
solution: 

issue:  [<-CODE->] is what you want 
solution: 

issue: any idea why this would not work? [<-CODE->]  [<-CODE->] this is whatLinkPropslooks like: [<-CODE->] whereLocationDescriptoris [<-CODE->] so in my eyes it should work 
solution: 

issue: lazarljubenovic: David Sherret made something like that a while back, see [<-LINK->] 
solution: 

issue: Hello I'm using jspm+typescript for an app, I'm installing my js modules via jspm install xxx(xxx module is  installed inside to jspm_packages folder), and app is working on browser without any problem, but on visual code its giving error for the  'import * from "xxx"' line as  "Cannot find module 'xxx'", what I need to do fix this error normally I was using npm install xxx to install my packages, it placed the packages inside node_modules folder and TypeScript can succesfully resolve 'inport * from "xxx"' from node_modules folder but its not working if I use jspm, how can I solve this problem bu the way I have a tsconfig.json file like below [<-CODE->] 
solution: 

issue: intellix: a shot in the dark:Exclude<string, '_post'>for the first prop? or maaaybe try reordering them? the error makes sense,'_post'is a string and it gets swallowed by the first prop 
solution: 

issue: i'm pretty certain it can't be done yeah. i was thinking perhaps it could be done with conditional types, but it can't or at least i was unable to find a solution 
solution: 

issue: Hi Guys,I'd like to dynamically load a class based on the selections. So I Imported the file with all the classes like this:import * as Activities from '../models/Activities';But when I try to do this:new Activities[activity]();I get an error:_models_Activities__WEBPACK_IMPORTED_MODULE_6__.activitytheactivityin the second line is a variable. How can I do this? This gives the same error too:new (Activities)[activity](); Also I really dont want to use switch case. There are 10 classes that can be derived from the variables now. Later they will exceed 20. 
solution: 

issue: what's the best way to copy by value object {}?  It appears as if object.assign({},obj) is not behaving ParallelTask: Dude, use dotnet core 2.1 for rest api mvc webapi. LOL, it's really cool. 
solution: 

issue: Hey there! So I'm working on a dispatcher built around rxjs, and I seem to be running into issues 
solution: 

issue:  [<-CODE->] Error:(6, 9) TS2345: Argument of type '(req: Request, res: Response) => void' is not assignable to parameter of type 'PathParams'. Type '(req: Request, res: Response) => void' is not assignable to type '(string | RegExp)[]'.   Property 'push' is missing in type '(req: Request, res: Response) => void'. Why am I getting this error? 
solution: 

issue: blemoine: According to Express's docs,app.usetakes a middleware function, not an array.  [<-LINK->] 
solution: "Attempting to use import * as express and then invoking express() is always illegal according to the ES6 spec. In some runtime+transpilation environments this might happen to work anyway, but it might break at any point in the future without warning, which will make you sad." - stackoverflow@BehindTheMath. 

issue: doniyor2109: glad I could help 
solution: 

issue: I could have sword this was supposed to narrow the type ofxintoA. [<-CODE->] 
solution: 

issue: AnyhowStep: I think at least part of the problem might be that as long as you don't have strictNullChecks enabled B is a valid interface for { f: undefined } aswell @sergiotudela The reason why it doesn't work is that with extends you define that the function needs to be a generic that can even take IFoo.For example this will not work however your IFunc definition allows that: [<-CODE->] Your second example works cause that way you make sure that you can only pass IBar into iFunc.func 
solution: 

issue: Hi guys, just a simple question, why is not working the following code? (I'm not an expert, and I know there are other ways just to solve out my code...)  [<-CODE->] For instance, another way to solve out this, it's just...  [<-CODE->] (and I said before, there are more ways....) but I would like to understand why is not working my first code I guess is not possible to bound the type in arrow functions? 
solution: 

issue: WolfspiritM: I've gotstrictNullChecksenabled on the playground and on my project. Both don't narrow =/ 
solution: 

issue: lazarljubenovic: yeah. not sure how to market my open source project It would be great if people look into it and throw some light on it lazarljubenovic: Yeah, lol so do you want me to formate and paste it reddit? I have tried I did not get you? 
solution: 

issue: Hi, I'm trying to fetch some json-content from my REST service, butfetch("http://localhost:8080/devices"just returns aTypeError: Failed to fetch 
solution: 

issue: frankpf: then it's not exactly the same, adds a function in call stack 
solution: 

issue: Is there any way to get function parameter type inference to work? [<-CODE->] 
solution: 

issue: I have some generated code which puts stuff in namespaces, such as [<-CODE->] However, there are multiple files with that structure. So when I do [<-CODE->]  [<-CODE->] So how do I import "api" from multiple files?? SamHH: yeah, but it's a lot of files, and I'd like to address them withapi.otherwise I have to invent a lot of identifiers. No way to merge these import files into one? 
solution: zolo: Only way I can think of would be an intermediary file that does something likeexport * from './genN, then you'dimport * as api from './myFile'. 

issue: Here is the problem, but simple [<-LINK->] 
solution: felher: It depends on the interface members. 

issue: hi guys, I encountered a problem with TypeScript + SystemJS. Can you answer my question? [<-LINK->] 
solution: 

issue: I've got a strange issue that IDK how to track down. I am having trouble building a project ( [<-ISSUE->] ) that uses typescript. The author can build no problem, and I can build it without error in a docker container. But when I try to run the build script on my machine it gives the following errorCannot find name 'AsyncIterable'. 29 ): Promise<AsyncIterable<any>>;" 
solution: 

issue: felher: The FAQ seems to adress pretty much your issue substitue MyClass with Array, A | B with animal and A with Dog in the answer... 
solution: 

issue: emphasis on floating still taking this in but[string]is throwing me i don't thinkstringworks that way 
solution: 

issue: yeah feelsbadman for anyone who has to read that AsyncIterator is part of the ES8 spec i believe? or is it ES9 so it makes sense that if its not included in your "lib" in your tsconfig it should fail 
solution: 

issue: Some issue  i had with react prop types that they union type.I assume its related to generic check and inference, just not sure what to search for in the issue [<-CODE->] 
solution: 

issue: NaridaL: I sorry, but I don't get how the FAQ addresses my problem. In my example , I don't have parameters or functions. FAQ seems to explain why function parameters are bivariant. Or do you mean the part where they state that "dog[] not being a subtype of animal[]" would be "annoying" and the answer to my question is: No, you can't annotate thatMyClass<Dog>should not be subclass ofMyClass<Animal>. 
solution: 

issue: I just added TS to try it out and it seems like I can't access stuf on the window object, or other built-in methods native to JS.For example: [<-CODE->] Does anyone have a clue of how to fix this? 
solution: AWulkan: You need to type what's on the window object. I think you can do this withnamespaces. TheendsWithissue will be related to yourtsconfigand (off the top of my head!)libs.. I have no idea how to do that. I'll look into the tsconfig thing in a few hours. Feels weird that built-in environment stuff is not accessible though. Not a pleasant first experience with TS.Why wouldendsWithbe related to libs? Maybe I misunderstood what you meant.Thanks for helping btw.. 

issue: is there a way to specify that a property needs to beprop keyof T, whereT[prop]is a number? so not just any property likeprop keyof IncludeOnlyNumericProps<T> 
solution: 

issue:  [<-CODE->]  [<-CODE->] It gives me this error:error TS2488: Type 'Iterator<object>' must have a 'Symbol.iterator' method that returns an iterator. [<-CODE->] 
solution: 

issue: I have weird behavior which I don't quite understand. What I'm doing is something like this: [<-CODE->] So there is a list of buttons and I assign a function which gets executed as soon as the button is clicked. The increment of the variable does not happen within the for loop. I would expect the first button to print out 0, the second 1 and the third 2. But actually the first button prints 1, the second 2 and the third 3. It's like the i++ applies for the function the line above. 
solution: 

issue: dbkaplun: You need a trailing slash, assuming you're using Node module resolution. 
solution: 

issue: hey guys, I'm trying outTS3.0@rcbut I can't get it to compile I have [<-CODE->] when I runnpm run tsc -p srcI geterror TS6053: File 'src.ts' not found. 
solution: 

issue: Why this logic is not working? it says push the file into an array if it is not already present. I am checking the length of an array first, if it is empty then I am pushing it into an array, if it is not that means file is there, so I am running a loop to check for file name, if they match then I am not doing anything otherwise I am pushing it but somehow this is not working  [<-LINK->]  [<-LINK->] 
solution: 

issue: I'm trying to make this a bit more typesafe ( [<-LINK->] ). If we knowMhere would it be possible to infer the return type using theresponseTypefield of M? Can't seem to get M['responseType'] to work The generated classes have the following attributes: [<-LINK->] 
solution: 

issue: HI There - Just wanted to see if anyone had any thoughts on this: [<-ISSUE->] 
solution: 

issue: I have a JS codebase I'm converting to TS. The codebase usesmodule.exports = function(....) {to define the classes instead of the newer class syntax. It looks like the function constructor approach doesn't get much typechecking. Is it recommended I refactor the code to use class syntax? if a refactor is recommended, does anyone know if VS Code can help with that? I'm not sure what to search for because I'm can't find the name of that old-style function constructor pattern 
solution: 

issue: got it working with: [<-CODE->] 
solution: 

issue: is it safe to say thatT | neveris always equivalent toT? need it for conditional types because something is eitherTorT | Uand it's simpler to write it asT | neverorT | U thanks@alxhub!  [<-LINK->] WHY?! yeah :( why the error 
solution: 

issue: lazarljubenovic: 'why' the output or the error? im guessing the error :thinking: that is a bit inconvenient 
solution: 

issue: It'd be nice if it could be, I had to work around that. 
solution: 

issue: Is there a way to use object spread in this way without an error? [<-CODE->] 
solution: 

issue: slikts: I don't think the frozen array can be done just with a class... Adding a factory method can indirectly solve the issue though... [<-CODE->] 
solution: 

issue: AhsanNissar: <dropdown items="filteredSubjected()" /> filteredSubjects() { return this.subjects.filter(s => !this.teacherSubjects.includes(s)) } if they have different object, youll need to do s => !this.teacherSubjects.some(t => subjectsAreEqual(s, t)) 
solution: 

issue: and they are conflicting [<-ISSUE->] 
solution: 

issue: Hi, When I am running npm I get this error Use an interface instead of a type literal. How do I stop it 
solution: 

issue: okay, so I'm getting tslint errors, for example- [<-CODE->] and I've got this set in my tsconfig, [<-CODE->] should it be likees6? 
solution: lukescott: you should be able to extend the definition.. 

issue: I can't figure it out, can someon help me ? [<-CODE->]  [<-CODE->] 
solution: 

issue: nikitavoloboev: It depends a bit on what simpleAcceptor or acceptor itself are. But if they always return a promise, then it would befinalAcceptor: (acceptor: any) => Promise<any>;. You could optionally define the signature of the method like this:getAcceptor(): (acceptor: any) => Promise<any> {... 
solution: This is the definition of a callback/function. You specify what parameters are expected ((param1: type1, param2: type2)) and the return type of the callback (=> returnType).. 

issue: Is there a guide anywhere on how to figure out what type certain JS functions should be? I find it hard currently to type annotate existing JS code as I am not sure what the types should be is there any helper tool available for this? I am currently simply reading over the code line by line and trying to understand what it should return and the types of all things, its hard because codebase is also not as documented 
solution: nikitavoloboev: in some cases the types should be inferred if you convert the file to TypeScript.. 

issue: hi folks.  re:fetchbaked into Typescript. [<-LINK->] im not seeingRequestInit, or a fetch API in my project just ready-to-go.  i addeddomto my config.  not sure where these definitions live. tips? im making a commongraphqlinterface.  i don't want to have to use thenode-fetchtypings forfetch's inputs--i'd rather use the generic, cross-env intfc.  if anyone has an xref thatd be great! im signing off for the evening.  @ cdaringe me if you have a tip! thx 
solution: 

issue: hey - can i get some n00b help. I have the following message "[ts] Cannot invoke an expression whose type lacks a call signature. Type 'Action<any, any>' has no compatible call signatures." but cant wrap my head around whats going on hey@alpham8- so im getting that from googling.. but im not passing any arrays?  [<-CODE->] 
solution: alpham8: It should be able to infer that.. 

issue: Wait a minute, is there only a singletsconfig.jsonfile allowed per project? I.e. when tsc is run it only actually loads a singletsconfig.jsonfile, even if one is defined closer to the actual file being imported? 
solution: 

issue: can i set the path of my tsconfig.json file?seems like when it’s not on root project dir, vs code ignores it 
solution: 

issue: elliotwoods: dont you wanna webpack it with all dependencies packed together? thats the way its usually done 
solution: 

issue: if I have a generic functionfoo<T> : T, is there some way to specify the type ofTif passing the function (as opposed to calling it) e.g.map(foo)? the function is generic only in its return type, not in any function parameters 
solution: 

issue: Hello. quick question. Is there any typescript starter/boilerplate for a project that is just typescript and doesn't contain react or angular and its not node and its not a module but still can use imports/exports? 
solution: 

issue: Why is typescript complaining that I’m not using the ES5 signature forArray.prototype.reduce? I have my"lib": ["es7", "dom”]set in my tsconfigcompilerOptions. I’m getting this error from the compiler (and from VSCode): [<-CODE->] 
solution: 

issue:  [<-CODE->] Doesn't quite fit the index keys use case... 
solution: takahser: like@ShanonJacksonsaid, it's a constructor function that you call withnewto instantiate a new instance of typeWebSocket.If the actual name isWebSocketCtor, you have to call it asnew WebSocketCtor(), but often it's exported from the definition files with a different name.Libraries do that to separate the instance type from the constructor/static type.. 

issue: @_dev__null__gitlab1. [<-CODE->] 2.The examples you gave are satisfied by the above. Although if you want to be really flexible you can do this: [<-CODE->] Can someone here help me with this issue? [<-CODE->] I have a generic type that automatically wraps its type param withReadonly. And that seems to screw upReadonlyArray... 
solution: 

issue: Hi, I'm working on a patch to fix some inference issues with certain JSDoc@constructoruses, but I'm running into a problem with a specific case. Can anyone help me debug?  [<-CODE->]  [<-CODE->] which I have a working patch for these cases: jameskeane/TypeScript@1fe8b65 What I can't figure out is how to properly merge the symbols for this: [<-CODE->]  [<-CODE->] 
solution: 

issue: ShanonJackson: I'm not sure thatRemoveUndefinedfor theobjparameter is a good idea, but, slightly modifyingRemoveUndefinedgives a better error at least. [<-LINK->]  [<-CODE->] I prefer the function signature<T, K extends keyof T = keyof T>(obj: T, ...keys: K[]): Pick<RemoveUndefined<T>, K> I wish this worked as I want it to... [<-CODE->] 
solution: 

issue: When my typescript build fails, I currently just get the error:Failed to compile ../src/some-file.tsx. Is there a way to get access to a more detailed error report? 
solution: If I remove<[ReturnType<typeof selectApp>]>then the build passes but I get linting errors. 

issue: davej: sorry i am not sure... 
solution: 

issue: Why I do not get error when using number key? [<-CODE->] 
solution: 

issue: why can't you declare an enum inside a class? 
solution: 

issue: shekharramola: doestypescriptknow it's an array? you have cut off the code above, but you might need to either specify thatdatais an array of something, or if it's not always an array, then put the filter in an if block  [<-CODE->] 
solution: 

issue: Does anyone know whether JSON imports for everything other than commonjs modules is on the roadmap or not? ( [<-ISSUE->] ) 
solution: 

issue: i thought rich tuple types would work different...? [<-CODE->] in 3.0 testType is (string | number)[] and not [string, number] 
solution: 

issue:  [<-CODE->]  [<-CODE->] when I publish this, I want to be able to import the interface to get explicit typing. webstorm suggests like that [<-CODE->]  [<-CODE->] 
solution: 

issue: tpluscode: Are you using 3.0? 
solution: 

issue: does anyone know why I’m getting this error when I use get on array defined with interface? [<-CODE->] basket: Array<IPurchase> = [];or triedbasket: IPurchase[] = []; 
solution: 

issue: Does anyone know of a way to determine if a type could also refer to a value?  That is, if the type is of a Class, then do one conditional type branch, and if it is only an Interface or primitive then it will use the other branch. egoarka: Because the compiler can't verify thatstringis assignable to an unknowable/genericUtype.   What would you want the type ofmappedto be in your example? 
solution: 

issue: Ugh, can someone help me contribute to TypeScript I can't work out how to get my test case to fail This is what I've got: [<-CODE->] Trying to close [<-ISSUE->] 
solution: 

issue: ^ it's not code I own though 
solution: 

issue: Hello, maybe someone could help me figure out why does  adding [<-CODE->] to package.json breaks the locale imports, i.e. these: [<-CODE->] doesn't work anymore yes it is jsut the typing which I wrote here, wrong. bendtherules: im very sad at this, cant find the solutions for 3 hours. Kinda desperated :/ 
solution: 

issue: Can you just not assign the dictionary type tob? Alternatively, just useObject.assign({ A: 'A'}, b), which gets typed as{  A: string } & Dictionary<string> 
solution: 

issue: Can you just not assign the dictionary type to b?im sorry, i dont follow.  can you add a bit more?Object.assign(...) => { A: string } & Dictionary<string>ya, cool, that can work. thx! [<-CODE->] does aspnet/signlr ship typing files? hi friends.  i cannot seem to find a winning combination offetchtypes that work in node & the browser.  i have a common library that is used client and server side.  in the browser, i will use the native fetch.  in node, i will usewhatever(ATM,node-fetch).does anyone have a recipe for using shared fetch typingsthat work in both environments? 
solution: 

issue: hello. Using Intellij Idea. Did install@types/node, but ide can't resolve modules, likerequire('fs'). Can someone give me any clue why it happans? 
solution: 

issue: Hi, i need help: [<-CODE->] Code: https://github.com/Kompwu/audio-only-youtube/blob/137e8cabe62f2945ce76468122e6f66ec6c9794f/src/ts/background.ts#L48The error seems easy to fix but i can't find where i failed. (I haven't slept, so it doesn't help.) There's also that: [<-CODE->] alukach: check line 109 
solution: 

issue: I’m using Typescript to compose some Firebase Cloud Functions. Can you use code from a shared folder that is outside your ‘functions’ src folder?As soon as I add an import to my code that references a file outside my src folder it fails with the error:Error: functions/lib/index.js does not exist, can't deploy Firebase Functionsthe code I’m adding is:import { UserAccount } from '../../../../../shared/models/user-account’;It would be nice to share Interfaces between my firebase code and my web app. 
solution: 

issue: alan-agius4: This depends on the strict option (in tsconfig.json). In version 3, with tsc --init this is set to true by default. If you set this to false or remove it from tsconfig.json, this should compile. 
solution: 

issue: I think I've overstepped the limits of typescript's type inference. If I use a decorator to modify a method's type signature, that modification doesn't get picked up by TS and thus the function is no longer in line with its type.  Here's a simple reproduction: [<-CODE->] Is there a way to get around this whuile still maintaining type safety? Thanks for the answer! I didn't know about theinferkeyword, which is helpful. At this point I already have a class I am working with, so I can't just go with a higher order function. I might just go with a helper function that takes a callback 
solution: 

issue:  [<-CODE->] why am I gettingArgument of type '123' is not assignable to parameter of type 'A'.? I just want to wrap an id function changing it to(a: any)makes it work, but I'm confused as to why 
solution: 

issue:  [<-CODE->]  [<-CODE->] But the compile fails with error: [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: don't use HOCs. these can just be React.SFC's aswell no need to make them classes and "Omit" is a custom type that you'll probably have to import from react-router or redux, or grab the defintion from google as it's not part of typescripts native library. 

issue: hi is there a way to figure out the component's state here — [<-CODE->] I need to implementComponentStatesuch that the type ofais equal to{alpha: string} Lol I just read the above solution and found my solution — [<-CODE->]  
solution: 

issue: Hi how do I test if this type has a value set?export declare type RangePickerValue = undefined[] | [moment.Moment] | [undefined, moment.Moment] | [moment.Moment, moment.Moment]; 
solution: ie. to type the argument to adocument.addEventListener('mouseup', myCallback). 

issue:  [<-CODE->] I get the following error: [<-CODE->]  [<-CODE->]  [<-CODE->] I'm seriously clueless. 
solution: 

issue: Does anyone have a working implementation ofcurryafter 3.0 - especially with [<-LINK->] 
solution: 

issue: how do I configure the tsconfig so that I can import non-relative modules? this is my config: [<-CODE->] I want to import non-relative from src folder 
solution: 

issue: HiI usesfor awaitin TypeScript, but Node 9 can't run it because of missingSymbol.asyncIterator.Any idea how to make it works? I'm sorry. It's said here that simple polyfill can be done [<-LINK->] . Thank you guys. 
solution: 

issue:  [<-LINK->] why this error while using apollo graphql I created index.d.ts file for pagination, but still i get this error:JSX element type 'Pagination' does not have any construct or call signatures. 
solution: 

issue: Hi, does anyone know if it's possible to consume typescript packages (not compiled to JS) from node_modules using webpack? SamHH: do you know of any examples? Usingts-loaderbut it doesn't seem to work Well it's failing immediately complaining about anenum MyEnumdeclaration Triedawesome-typescript-loaderas well but it's the same also that loader is really slow for me for some reason compared tots-loader  [<-CODE->] even though the folders are whitelisted not sure if I my contract allows me to copy/paste that sadly Hmm I did whitelist it soinclude: "node_modules/package"not sure if that's enough I did@goldinerthat's why I'm getting kind of confused looked in the places where it could be but can't seem to find it Thanks 
solution: 

issue: traverse: check tsconfig.json too 
solution: 

issue: I think there's something I'm missing about variance in TS  [<-CODE->] why's this produce:Type '""' is not assignable to type 'A'. I basically want a class that'd wrap the a property, so I'd have types likeFoo<'a'>,Foo<'b'>etc the wider context is that I wanted to have a state machine where the types of updates are validated via overloads here: [<-LINK->] so that each valid state transition would correspond to an overload like this:  [<-CODE->] 
solution: ^ I guess that's becauseAmight be a string literal such as"myString"? Which extendsstring, but is incompatible with"".. 

issue: @slikts [<-CODE->]  [<-CODE->] 
solution: 

issue: Hmmm my brain is trying to tell me this can be solved with typscripts 3.0's tuple changes? did you try 
solution: 

issue: ew indeed why i mean this is a pretty weird pattern, yeah but why would you forbid it in general 
solution: one of the biggest advantages of typescript is that it does not forbig anything from pure JS, if you really want it. 

issue:  [<-LINK->] I get error:[ts] Type 'any[]' is not assignable to type 'T'. and second error is :[ts] Type '{}' is not assignable to type 'T'. 
solution: 

issue: How can you create a type alias for an generic? Let's say I have Foo<T, V> (whose generics are infered), is there a way I can do Type x = Foo.T ? Yes something like that (Sorry for late answer, I was having lunch) T is infered to, and I dont want to declare it separly since the inferation is kinda long (Including returntypes, ...) However, foo is an extarnal type 
solution: 

issue: RobinVdBroeck: more code? Foo.Tdoesn't make much sense not sure what you're after 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: I am using react. some props are passed by HOC. how to write interface for it?  [<-LINK->] not working How to write Hoc with react state full components? 
solution: 

issue: Hello,  excuse me,  is there anyone teach me refector the code.. [<-LINK->] 
solution: 

issue: interesting......  [<-CODE->] const x: string | undefined = "" as string | undefined makes it fail 
solution: Actually I think that makes a lot of sense. All definingxto bestring | undefineddoes is let us sayx = undefinedlater. 

issue:  [<-CODE->]  [<-CODE->] I get this error in VSCode: [<-CODE->] any suggestions please? 
solution: 

issue: i’m not sure, i’m  a rookie 
solution: 

issue: karthikiyengar: I can't remember one off the top of my head, but it's possible. You can just import using usual import syntax in fact, d.ts files that use imports become modules by default 
solution: 

issue: karthikiyengar: Might be that you need to changewhereyou're importing in that case. e.g. IIRCdeclare module '' {}means you need toimportwithin that block. 
solution: I checked some answers on SO and they say that the only options that I have are using namespaces or using/// <references... 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] what am I doing wrong here please? 
solution: 

issue: Gerrit0: Thanks, Class seems to work for me 
solution: 

issue: is there a reason why the return type ofMath.sign()isnumberand not1 | -1 | 0 | NaNor is it an oversight? hmm I guessNaNis not a type andtypeof NaNisnumber so1 | -1 | 0 | numberis redundant 
solution: 

issue: Hi, is anyone aware of a tool that will turn an interface into a type guard function? Thinking of making such a tool, but I want to make sure I'm not reinventing the wheel. 
solution: It's just that I made this thing calledtyped-orm(bad name) and it's this super-safe way to declare tables and craft MySQL queries. The downside is that it generates a lot of types on compile. And the project so far has about 200 tables.. you sure you don't just want something like this using typescripts inbuilt discriminated union [<-CODE->] gets type-guards literally for free. 

issue: let scope is not inside try block?  [<-CODE->] 
solution: 

issue: intellix: I'm actually experiencing the same 
solution: 

issue: Hi Guys, I'm trying to get my ng6 application to run in ie11. I tried setting compilerOptions.target to "es3", but the generated vendor.js file still uses arrow functions. Does anyone have the secret sauce for that issue? 
solution: 

issue: Why the TS thrown an error here? [<-CODE->] 
solution: 

issue: noob question. What is the fundamental difference between x1 and x2. [<-CODE->] Ok. I get that. But why is x2 an error? I guess I don't understand the error. BTW this error is fromts-node, but the error also shows up in vs code. Well, the squiggly error. 
solution: mackenzie-orange: It makes sense, except typescript is javascript. When I compile they look the same, so I would expect both to have ability for me to access ['cities']. no?. 

issue: mackenzie-orange: here is similar case [<-LINK->] There is a solution, but I do not get it yet.. I do not understand why I cannot have a generic directly in the function 
solution: 

issue: as any makes refactoring more risky because you can change the underlying type, but not see any errors 
solution: 

issue: hoping this will be alot faster for you when it is actually released already pretty much raking in the github stars  [<-LINK->] 
solution: 

issue: Hi,  in my visual studio code, i encounter property "padstart does not exist on type string" error. Anyone have any idea how to solve this issue. SamHH: Thanks. I see if can solve this using your solution 10 
solution: 

issue: Interestingly, this file isn't actually imported by a dependent package to begin with. 
solution: 

issue: Okay, I need some idiot checking. Using Google App Engine. Using typscript. Compiling it out, works fine on local. Push to the app engine and it can't understand the"use strict"; 
solution: 

issue: Why there is no error in such case: [<-CODE->] ? kpgarrod: thought the same, but not really apparently.. [<-CODE->] but [<-CODE->] 
solution: yeah, but to me it does not work as expected... but prob it's me and TS is right ;). 

issue: Hi over there. Quick question: How would you type a subset of parameters? e.g. I havefunction x(a, b, c), then i could doy:typeof x, but what if i want to have the type without the parametera? I actually dont want to define an extra type for this. 
solution: I know you didn't want an extra type but maybe you'll get some inspiration from this, [<-CODE->]. 

issue: does typescript have a generic Action like type?  I want to easily say () => MyClass or (A) => MyClass.  Basically looking for a function that either takes 0, 1, 2, any number of arguments but returns my defined type. 
solution: I’m having trouble getting typescript to play nice with react whenever I add local state. I’m hoping someone could help me point out why.. 

issue: hi how can i read file with typescript  ? AnyhowStep: i tried this but error occured [<-CODE->] i switched to importimport fs from "fs"; 
solution: 

issue: The same as node. [<-LINK->]  [<-CODE->]  [<-CODE->]  [<-CODE->] After, [<-CODE->]  [<-CODE->] This.useJoins<>()method also checks for duplicate table aliases, and invalid columns during compile time and run time. If you place them in the wrong order, you also get an error 
solution: 

issue: Hey,I have an issue. I receive "Typescript emitted no output for...", file is pretty trivial, there is a file next to it which is super similar, and that one works fine.I realised I get this only in development build. If I save TS file during development it will recompile and it will work. Bundling works as well. So it's really about initial compilation that emits no output 
solution: 

issue: hi I am using webpack and... 
solution: 

issue: how can I import like this: [<-CODE->] I think I got it working, using dynamic import 
solution: 

issue: isn't [<-LINK->] supposed to work? judging by [<-LINK->] im stupid forget it lol 
solution: the result of Object.keys(...) instring[]. 

issue: wtf is going on here the build in Map, Promise, etc, are seen only as types but anew Promise(..)ornew Map(..)fails in tsc  [<-ISSUE->] hello? 
solution: 

issue: Hi guys, i have a promise<resolve|err>. i try var a:resolve = await promise() but it can cast resolve to resolve|err any idea ? thanks i manage to make it work but i can't narrow the error in catch clause   try {const mongoClient:MongoClient = await getMongoClient() as MongoClient} catch (err:MongoError) {throw err} i got Catch clause variable cannot have a type annotation. 
solution: 

issue: rhys-vdw: im sure im making a silly mistake, but is there a way around this: [<-CODE->] T1 works as expected.  so i think it has to do with ts not wanting to allow a reduced type to be returned... but thats exactly what i want it to do ok, then im confused... remove them at runtime, or remove them in the type? if ireturn Component as React.ComponentType<PropsWithoutInjectables<P>>i get a similar error i basically want to strip the props and return the same component with the lesser requirement oh yes, exactly! :) 
solution: 

issue: lcoenen: it's syntax error you cannot return an object like() => {a: 1}because the{looks like a function body,a:like a label and1like simple statement you need to do() => ({a: 1}) or() => { return {a: 1} } also theres' no need to quote the keys'myRides'in strings, it looks pretty weird 
solution: and for the type specification, it's more for code readability - in the context I play with a lots of Promise and Ride[][] and other types. 

issue: Hi, I've been looking for few days on how to support selecting sub-set of an object based on the type of its properties. However I didn't find a way to make it work: [<-LINK->] Anyone here does have an idea ? Is there a poissibility to filter a keyof based on the value C[keyof C] to be a string ? It is not really better, so I was able to pass the assignment issue but usingK extends Extract<{ [k in keyof C] : (C[k] extends string ? k : never) }[keyof C], string>and data (of type C[K]) doingdata.lengthfails length not assignable to C[K] 
solution: 

issue: Hi everyone interface IPerson {  weight:number} [<-CODE->] `interface IPerson {  weight:number} [<-CODE->] any idea why this does not throw type errors? ```interface IPerson {  weight:number} [<-CODE->]  [<-CODE->] Sorry for the mess. Why can I return any JSON parsing i want and the compiler does not throw a type error? Thank you. 
solution: So, you'll have to write your own validations or type guards or wait forsomeoneto write a thing that will convert your interface into a type guard. 

issue: can someone help me with a higher order component? I can't seem to pass my props down. It seems like setState property is missing thanks! [<-CODE->] and then I would use it with a Dashboard component [<-CODE->] I added some <any>s cause I was unsure of myself, but it was more strongly typed before I went down the rabbit hole Additionally, I had tried [<-CODE->] 
solution: 

issue: What exactly are you getting stuck on@spkellydev? 
solution: 

issue: rhys-vdw: is there any way to do something like this, or achieve something similar a different way? basically trying to reduce chances for developer error by making the types determined for them instead of requiring the developer to repeat them correctly... i.e.: [<-CODE->] i have a feeling its just too meta, but who knows when hovering a type in vscode, is there a way to see the "final" type instead of the way its constructed... sometimes i get the nice final type and its easy to see if what i did worked as expected... other times i end up getting something more complicated like this that makes me go have to look other places and figure out if its what i expecttype AllProps = Props & Pick<AllInjectables, "relay" | "history"> (that is what the hover shows me) what does SomeType do here? im trying to find the docs but not sure what this is calledmyFn<SomeType>(Something) ShanonJackson: ok i think some of that makes sense to me.  here is some explanation about where i am and what im trying to figure out if i can do: [<-CODE->] ShanonJackson: the types/decorate fn is here [<-LINK->] 
solution: 

issue: sorry busy with my own work stuff@joenoonmabey someone else can help you if any big dick type bandits are out here trying to type the final part of my "this" implementation if anyones interested 
solution: 

issue: What you have seems to work.... [<-CODE->] 
solution: the implementation is   Take an array of classes -> take all their prototypes -> add them to the final class prototype -> return the class. which unforunatly is this... but doesn't work. 

issue:  [<-CODE->] Can someone tell me why this does not work? 
solution: 

issue: running into an issue with type parameters im not sure i can get around:  i have a nice factory function working but it currently needs to return a function itself in order to accept another type param.  ideally i could do this in the immediate function all at once, but when i do that i have issues getting the type params to work.  can anyone see a way to make this callable instead likeDecoratedClass<Props>('relay', 'store')? [<-CODE->] ive cleaned up the above and got this closer in syntax to what id like.  but it still requires a second function call.  anyone see a way to do this with only one function call? [<-CODE->] 
solution: 

issue: re/ my above... solved it! is there any way to "reach into" this interface and get thebartype? guessing something along the lines ofShape['foo'][......]but cant figure it out: [<-CODE->] sweet trying to tweak.. removed generic butProperty 'bar' does not exist on type 'never'. 
solution: 

issue: joenoon: , that seems a bit overcomplicated to me... [<-LINK->] 
solution: is there a way to force load order of imports with TypeScript? I have a BaseModel that isn’t load until after it extends a class… it’s null at that point, but if I set an interval for BaseModel where BaseModel =import { BaseModel} from ‘./base-model.ts’, then BaseModel has a value 500ms later… weird… i’m compiling to module typecommonjs, if that matters. 

issue: Gerrit0: thanks earlier for that.  in my case im trying to return the array as the same type passed in as the generic... IConnection etc is just a mock of the shape.  so i think thats why mine needs to be more complicated.  but im going to incorporate the notNull function! 
solution: 

issue:  [<-CODE->]  [<-CODE->] Do i have some way to resolve this problem?P.S Sorry for my English. 
solution: Is it possible to do something like this? (pseudo code) [<-CODE->] As opposed to using an interface or redefining setStep(step: 'facilitator' | couple). 

issue: Any ideas why I can't export an object?  [<-LINK->] 
solution: 

issue: QuantumInformation: export { localSettings };? Whyletand notconst? export let localSettings = new LocalSettings();should work, too What does yourBaseClasslook like? 
solution: 

issue: no problem, Change return type of a function easily? can't seem to get it working if you go down from 3..... [<-CODE->] if you go down from 3 generics** it always matches first if you go up from 1 generic, if you have a optional argument functions that take 3 will end up changing to 2 
solution: 

issue:  [<-CODE->] Is that so? 
solution: 

issue: How can I ignore an index.d.ts from a node.js module and substitute its definitions for my own? I tried using the baseUrl/paths trick, but vscode doesn't play nicely with baseUrl - it starts suggesting invalid module paths for the auto-resolve(i.e. lib/foo instead of ../../lib/foo) I'm not sure I understand what you mean by XOR here also doesn't extends work with interfaces, not types? 
solution: 

issue: Last time I looked at it, the specs were not maintained 
solution: I guess I'll create an issue later, to have it later likely closed as a duplicate of [<-ISSUE->] .. It seems to be an issue with conditional and mapped types.. Makes it harder to read and to reason with. It has a name, use it, it carries semantic.. 

issue: hmm, seems really basic, but why doesn't something like this work? it gives an error:Cannot find name 'MY_CONST'. [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Does anyone have some examples of using generics and the typescript 2.8 NonNullable types? I am trying to make a generic function that won't accept null and keep getting weird results. [<-CODE->] 
solution: So if I had some random function that could return null like [<-CODE->]. 

issue: Can someone explain this error? It looks like an index signature to me [<-CODE->] 
solution: nickmccurdy: it means the type of action.type does not match the type of the index signature. 

issue: I wrote a class that is an array but also keeps track of the indexes in a hashtable for O(1) "indexOf" lookup speed.But what is that structure called? I can't find the right name on Google. 
solution: 

issue: Hi everyone, I'm trying Typescript over node.js and wonder if there is an equivalent of app-module-path/register for typescript? My non-relative imports are failing at runtime. Referring to documentation, I know it is expected Or could I just use app-module-path as I did in nodejs? for those who wonder why I won't use relative path for import: I'm using tslint-microsoft-contrib ( [<-LINK->] ) rules set with this no-relative-imports rule... 
solution: 

issue: Yeah, I think the Timex model was just a slightly modified british version for the US market. problem with json-schema is it seems to have little support - in fact I think someone had to take over maintenance recently because it was nearly abandoned? 
solution: Shawn Talbert, both runtypes and io-ts mandate on hard coding their validators on the type itself. So if you want interopability across systems, you can't really get the explicit checking each type does out of it. I feel using JSON schema allows one to encode "just enough" in such a way that a type can be shared across network boundaries (where this stuff is most useful). 

issue: traverse: give it the initial argument if you dont want to, you can also be explicit by using the generic  [<-CODE->] 
solution: 

issue: i tried to extract a small HOC helper into its own lib, so i turned on declaration: true, and now i see a problem that im not sure if i can fix:Return type of exported function has or is using private name 'InjectedComponent'.I think i get why, but im not sure i can do what im doing any other way.  does anyone have experience extracting something out of a larger application into its own npm module and dealing with this sort of issue? btw here is what im trying to extract into its own npm module: [<-LINK->] 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] Ideally, I don't want to have to add another type arg 
solution: 

issue: @sacho Right, I'd like to genericize it so that the return type is inferred from the input selector, if that makes sense? [<-CODE->]  [<-CODE->] sacho: OK, thanks! Seems like it should be possible though, right? Like how you can usemap(fn)without doingmap<SpecifiedType>(fn), and it "knows" what type is being returned in the fn JameeKim: AFAICT theConvertTypeyou quoted does indeed preserve the type. Check out the ternary expression. (Though I'm not sure why the ternary is necessary--why not just Type directly?) sacho: Aha, I found an open TS issue that may explain why I can't get the generics to work as I want: [<-ISSUE->] In case you're curious! :) 
solution: 

issue: No problem! 
solution: Will it be possible to use babel syntax extensions with Typescript with the recently announced Babel 7 integration?. For example, things like the pipeline operator, do expressions, etc. 

issue: hey all!in node.js i applied typescript and import 'typegoose' moduleeven though i already installed 'typegoose' package above errors are still exist [<-CODE->] above typegoose module not found error happenshow can i solve it 
solution: 

issue: I still find this a little curious [<-ISSUE->] 
solution: 

issue: Hey guys, I want to extend my tsconfig and include another 'paths' in extended tsconfig, it seems tsc is not picking up the paths, anyone got any ideas why? 
solution: 

issue: ulrichb: variadic generics are a TODO feature, not just for tuples 
solution: 

issue: Can you show some code for what you are after? This seems to work as expected: [<-CODE->] ulrichb: you can do that now, it just gets a bit messy: [<-CODE->] 
solution: 

issue: Can anyone help out with this please, I have this code but am getting an error, the code is [<-CODE->]  [<-CODE->] Can anyone explain why I get this error and a better way to accomplish this please 
solution: 

issue: I think, but I'm not sure. that when using AOT (ahead of time compilation of template), you can keep type safetyinthe template. But the typing in Angular's classes are not very strong anyway ( there is a lotanyeverywhere) 
solution: 

issue: Is there a way to set everything implicitly tounknowninstead ofany? Or at least the caught value incatch (error) 
solution: if that amkes any sense, im kinda stuck... 

issue: has anyone done anything with TS project references? jakkn: its a problem with typescript, see [<-ISSUE->] jakkn: which is a duplicate of [<-ISSUE->] jakkn: derived types can't infer the types of their base/interface, not sure why, TS has been like this for years. 
solution: 

issue: how do I assign a value for accessToken in this namespace: [<-CODE->] this is the export: [<-CODE->] I import it like this: [<-CODE->] but this gives me error that accessToken is read-only property  [<-LINK->] how can I use the mapboxgl namespace in my ts file? [<-CODE->] I want to import mapboxgl namespace 
solution: 

issue: hhhmmmmmmmm... you're right!!! Superb man!! Learned a lot now... thanks =) 
solution: 

issue: Hi there, [<-CODE->]  [<-CODE->]  [<-CODE->] bradtaniguchi: typeof ClassName 
solution: 

issue: yes, that's the impression I got :( Unfortunately, I am experiencing issues 
solution: 

issue: Is this a valid discriminated union?  [<-LINK->] the compiler objects to values like{ type: ItemType.Burger, cooked: [0, 0] }, it saysType 'ItemType' is not assignable to type 'ItemType.Burger'. 
solution: 

issue: I am stuck on a "TypeError: Object prototype may only be an Object or null". I get this error when running Jest on a React app created using create-react-app. I think this might have something to do with circular dependencies, but I don't have any (I think). Help is highly appreciated. This is starting to mess with my head. 
solution: 

issue: traverse: thank you, very interesting solution. You are right, CSSStyleDeclaration has many `string|null, but there are also funtions that I can check to not override them 
solution: 

issue: I'm new to Typescript and I'm trying to define a interface that declares arbitrary functions with a specific return type. While the definition works fine for some reason . completion doesn't work. Is there a reason for this? [<-CODE->] 
solution: 

issue: Hi, I am using Typescript in a react project, and I am stuck at a point where I can't pass down properties to a child component.  [<-LINK->] TheStatusIconComponentdoes have a property calledstatus, don't know why I am getting this error. Here is myStatusIconComponent: [<-CODE->] Have been banging my head over this. Would appreciate a second pair of eyes... Thanks Thanks 
solution: 

issue: the function returnColumn[] | RcTree[], but i needRcTree[]when i using this function. 
solution: 

issue:  [<-CODE->] I'll probably go back and investigate it when I have time. I'm just glad to get back to work for now after downgrading :x 
solution: 

issue: Teodor_ASA_twitter: maybe cause its not working on mobile devices? 
solution: 

issue: hi,i want to bunlde ts file to a js file and try [<-LINK->] but when i use a lib from node_moduels like threejs errorUncaught Error: module 'three' not found. 
solution: 

issue: Are there any VS Code extensions for finding duplicated code? 
solution: 

issue: but is not T[keyof T] 
solution: 

issue: Hey, is there a way for TSX to typecheck on constructor arguments? or only on fields, without Partial<this>? yeah but i mean the tsx typechecking for attributes sorry i dont mean runtime checks, ok sec  [<-CODE->]  [<-CODE->] i am using a custom jsx factory mhh ok thanks 
solution: 

issue: Can't you just set the declaration option to true when usingcreateProgram? One simple way is just adding an interface outside, something like this: [<-LINK->] 
solution: 

issue:  [<-CODE->]  [<-CODE->] Then I'd like to be able to do this: [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: i'd like to define a class with an index signature for all but one property, i can't seem to figure out how to do that 
solution: 

issue: hey, guys. i'm using a type declaration from@typesthat defines a class with a method whose argument types are incorrect. i plan to submit a PR to fix this, but in the meantime, what is the best/quickest way to fix the issue for my project? 
solution: 

issue: I have a typescript project that's a dependency of another typescript project that is referenced via a git install. when the build step is run as part of the dependency (via prepare or cd node_modules/module && npm run build) json files that should be built/included via resolveJsonModule are not included at all, while copying node_modules/module outside of the depending package and runing build from there does include the json files 
solution: I need to include types from an external module (like a plugin) in the main module since it's an optional dep that cannot be installed alongside the main module in all cases. How can i get typescript to include that type?. 

issue: eyelidlessness: not quite sure what you are after... something like this? [<-CODE->] Another alternative: [<-CODE->] 
solution: 

issue: hi,using d3 I got the maps right now I am trying to implement a flight tracking system, can you guys tell me how to track flights in d3 maps by using mock data [<-LINK->] example: [<-LINK->] hi,using d3 I got the basic maps right now I am trying to implement a flight tracking system 
solution: 

issue: I am trying to declare getJoke  [<-CODE->] any ideas? Promise<void> is not working this code is working fine I just want to replace any with some specific declration 
solution: 

issue: skiabox: : ok, I understand. You can replaceanyby() => Promise<void>and it should work. 
solution: 

issue: So I'm still kinda new to typescript, as I read info about modules in typescript, they're identical to node's module implementation? So, I have a module file I'm working on, and have a class namedPluginthat the compiler is failing stating it's defined in the typescript dom defs.... What am I doing wrong? [<-CODE->] sooo.. oddly enough, changing the definition toexport class Plugin {}fixed the error.... is that expected? 
solution: 

issue: Is it possible to have an union of all the interfaces in a namespace as a type? Can you show code? Yeah that should be an issue You could do [<-CODE->] maxime1992: 
solution: 

issue: Does anyone know whether the following is intended behavior and, if yes, what the rationale is? The closest thing I could find is a [<-LINK->] that suggests that it should work.. maybe. [<-CODE->] 
solution: 

issue: Thank you! I have to do a lot more work to get it to work, but this is a good starting point :) 
solution: 

issue:  [<-CODE->] This seems wrong to me? oh wait I'm missing a paren 
solution: 

issue: Hi, I'm trying to re-export a type in a declaration file [<-CODE->] That doesn't seems to work, what is the correct way to merge the declarations in.d.tsfile 
solution: 

issue: Hi can anyone help me fix this error... [<-CODE->] Code.. [<-CODE->] it  dosen't matter what i import.. i always get this error if i import  anything... :( 
solution: 

issue: I'm trying to convert a React codebase over to TS. One issue that I've run into that baffles me is when I try to use a component as a type. I have a method on one component that accepts another component:  [<-CODE->]  This same component renders the accepted component later:  [<-CODE->] however, when I try to add a type to the signature of the first, it complains aboutCannot find name 'DraggableTaskRow'.:  [<-CODE->] Iimport DraggableTaskRow from 'src/task/components/draggable_task_row';at the top of the file. What am I missing? Sorry? Hmm, well that gets me past that error, but produces a new confusing one.  [<-CODE->] 
solution: It seems like in this case it would give the class properties ofDraggableTaskRow, which I don't think is what I want.. 

issue: hi, i need help on ts code [<-CODE->]  [<-CODE->] so when i call the alert method i get this error  [<-CODE->] Please help me 
solution: 

issue: I pray for scala's underscore syntax in javascript every day it was at one point i was ready to fork the typescript compiler to get it and@godenjiyou can implement Scala's HList in typescript iv'e seen a few implementations out there, may clean up the typechecking of you're function. (HList being a type-safe array of many types) and finally yeah iv'e looked at ScalaJS also for quite a while but the snytax to make it works with React is just disgusting, i want all the "business-logic" tools and typesaftey of scala .. IE Scala Collections, Syntax, Pattern matching etc. But i also want the ability to write JSX as JSX  syntax and not this garbage... [<-CODE->] 
solution: 

issue: function isJsonError(error: any): error is JsonError { return error.path && error.errors; } 
solution: 

issue: Hi~ I have question aboutkoa-bodyParse. When I usekoa-bodyParse，I can't get the right porperty  aboutctx.request.body. The VsCode  prompt me here should be{} | null | undefined，but I want it beany. How can I fix the type? Even though I have installed@types/koa-bodyParse。 
solution: 

issue: good afternoon, I am learning typescript and need to understand why it complains this is the error message [<-CODE->] how do I assigne a value to a variable of type undefined? 
solution: 

issue: @cspotcode - I'm running into a similar issue with incompatible type definitions. Building a hybrid angularjs/angular application. My angularjs code is based off of 1.5.x and I have the appropriate types installed for it. When I bring in the angular/upgrade module for 6+, the definitions it has for angularjs, I get the following error. [<-CODE->] cspotcode: It's a little different in this case I believe. The types for angularjs are in@types. The types that are causing the conflict are not a@typespackage, but part of a module within the@angular/upgrade library. It seems to come with angular 1 types for it's own usage. Not my proudest moment, but going to just add a postinstall hook that does this: [<-CODE->] 
solution: 

issue: kapilpipaliya: decorators can't modify the type of the decorated value. malthe: sounds like TIDE isn't reading your tsconfig.json, from the github repo, it sounds like it has to be in the root directory of your project. Besides that, not sure what to say. 
solution: 

issue: malthe: I would experiment to make sure TIDE is picking up your tsconfig (for example, set your "lib" array to be empty and see if it starts complaining about tons of stuff being undeclared)  Once you're sure TIDE is seeing your tsconfig, play with the "lib" option; see if you need to add some more items.  "esnext" is the nuclear option 
solution: 

issue: Hi just wondering ... I am trying to use "module" notdeclare module  [<-CODE->] but I am having difficulty trying to change that quoted value to something not quoted. I triedimport VueTypesVue from 'vue/types/vue';andmodule VueTypesVuestill does not work doing [<-CODE->] still does not work 
solution: 

issue: hi all, i am facing some issue with typescript where i have a state object and i am trying to update the state with the key of the object being dynamic..please see the example for details  [<-CODE->] here in function changeDate typescript is throwing error i also tried changing function to  [<-CODE->] still i am getting an error came across this [<-LINK->] this was the issue i was facing 
solution: 

issue: what is the error@karangarg45? 
solution: 

issue: Hey guys, does anyone in here use tslint with webpack? I'm trying to get TSLinting as part of my build process, but I can't get it to report errors. The linting works great inside of vscode - so my tslint.json config is fine - but I can't get any plugins to do anything during webpack compilation 
solution: 

issue: Hello guys! I have a question Why is the following working  [<-CODE->] but the following (from the documentation page) is not working?  [<-CODE->] The documentation of moment.js is using typescript 2.1 and I am using typescript 3.1.1 The error I am getting when I declare the second line and trying to execute moment() is the following :  [<-CODE->] any ideas guys? 
solution: I could be wrong but I believe its possibly down to the moment.js file not having any exports or and default exports for that matter. Do you haveallowSyntheticDefaultImportsin yourtsconfig.jsfile by any chance?. 

issue: I guess such a thing would be dependent onMicrosoft/TypeScript#24626(or another, more complicated impl) does this seem like an error to anybody else? [<-CODE->] I know the generic T will become{}, like is done forc, butdbeingneverseems wrong 
solution: 

issue: hello I am just learning the handbook and have a question:  what is the diff between { [P in keyof T]: T[P]  } | null and { [P in keyof T]: T[P]  | null} ? Are they both equivalent to Nullable？ 
solution: 2nd one means individual properties on an object are nullable. 1st one means either the object itself or null.. 

issue: I have a class I'm using as an API client, but I can't decide between using functions or function expressions for my members.  What's bothering me is that if I used function expressions, I lose the ability to easily comment my parameters via the VSCode macro/**<Enter> anyone have any suggestions? Here's an example of a method: [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->] ? 
solution: profit!))). 

issue: properties are assigned initial values within the class's constructor.  Sosomethingis being assigned in B's constructor.  A's constructor executes first, so wheninitis running,somethinghas not yet been set Norby125: Check out the compiled typescript code, which should make it clearer what is happening behind the scenes: [<-LINK->] Vbitz: I think this issue explains it: [<-ISSUE->] 
solution: 

issue: Yes I'm aware they can't be type checked but I'm interested in the technical limitation that prevents it? jpike88: Yes I spend most days working with them. 
solution: 

issue: Hi guys, not sure exactly where to ask this, in a React room or this room but I'm trying to store an array of JSX Elements, but I want to limit it to a certain type so like [<-CODE->] would work but don't allow [<-CODE->] How do  I go about this? I've tried [<-CODE->] but it doesn't seem to like that. 
solution: 

issue: I know this isn't a jest channel, but I think my issue derives from how typscript might work? [<-CODE->] What exactly and why am I witnessing this behavior? Instances purely export/imported as es6 work as expected, but es5 export/imports are acting really strange this way. 
solution: 

issue: hello can someone explain why this doesn't work? [<-LINK->] 
solution: i needed to usenew () => A. 

issue:  [<-LINK->] Can someone shed light on this error? Why is my function giving me an error when called inside this other function, but not outside it? omg nevermind parameter name clash, derp. 
solution: 

issue: Hi have a module declaration that looks like [<-CODE->]  [<-CODE->] but I cannot figure out how to get the same definitions to work on a browser context,  Ideally I want the this namespaces to appear as globals I try to add [<-CODE->] at the end of the declaration but that doesn't work, Ice, Glacier2 appear empty 
solution: 

issue: Hi all,I am working on a translations module where I internally use an interface: [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] I think this is possible using module augmentation/declaration merging, but can't find out how exactly.TL;DR Question:How can an internally used interface in a module be overwritten/patched/augmented outside of that module so that the module internally uses the augmented version?Use-case problem: [<-CODE->]  [<-CODE->]  [<-CODE->] The module already works using t('products.regular'), but this experiment is trying to make the translation lookup typed. 
solution: 

issue:  [<-CODE->] my code looks like [<-CODE->]  [<-CODE->] I see that same example working in other projects so not sure what I've done wrong  [<-CODE->] any ideas?  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] THANK YOU GERRIT!!! 
solution: 

issue: Hey all, looking for a good tutorial about Express apps written in typescript. Having trouble getting it working right. I run tsc --init and then being my file with import express from express and I get a compiler error. Even after installing the type definitions *begin my app with.... 
solution: 

issue: What is the difference betweenfilesandincludein the tsconfig.json? I see that include supports globs while files doesn't; are they identical otherwise? 
solution: 

issue: Good afternoon, everyone. I’m having some trouble with SystemJS and TypeScript, yet I am painfully new to both. I’ve spent the past two days trying to get it working and so it would stop throwing errors in my IDE (PhpStorm) and in the Chome Devtools console. I have, however, failed. My most recent attempt throws the console errorUncaught Error: Unable to resolve bare specifier "js/index.js" from […]: [<-CODE->] Well, one hurdle down, ready for the next. I was able to get past that error by putting a simple./in front ofjs/index.jsin the next-to-last line of the above code, so it now looks like this: [<-CODE->] However, I now face the next hurdle. The console now logs the error messageUncaught ReferenceError: CSInterface is not defined. For reference, this is my entire./js/index.jsfile: [<-CODE->] I have to put in thatdeclarestatement at the top to keep aCannot find name CSInterface.error from popping up. I tried using PhpStorm’s suggestion, which I have commented-out in the 4th line.csinterface-tsis someone’s attempt to create a type definition file for Adobe CEP'sCSInterface.jsfile. However, I commented it out because otherwiseitbecomes an error message:Cannot find module ‘csinterface-ts’. I am just not having any luck at all with getting this damnCSInterface.jslibrary working. Can anyonepleasehelp me? 
solution: 

issue: Gerrit0: thanks, I'd need to have a closer look at my environment setup 
solution: 

issue: suppose I have a data structure like this: obj.data.myName. now… both data and myName is optional. so when I want to render myName I have to check both data & myName so I dont run into undefined. does typescript have an elegant solution to this? 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: hi, is it possible to have a module declaration for a local "non-existent" file? the file is gitignored (it's a build artifact) so it doesn't always exist 
solution: 

issue: rohitsodhia: It's because you can't use union types in indices. Consider creating an interface instead, something along the lines of: [<-CODE->] 
solution: 

issue: ReactElement<Foo>appears to have worked! 
solution: 

issue: what would be best practice? [<-CODE->] or [<-CODE->] 
solution: 

issue: just [<-CODE->] then [<-CODE->] 
solution: slikts:  [<-LINK->]. I just find it a little odd to puttsconfig.jsonin the packages folder, so I hoisted it to the project root.. 

issue: What's your idea about breaking type definitions into multiple lines?For example, [<-CODE->] is long in the return value definition. If I break that to multiple lines, it seems confusing: [<-CODE->] or [<-CODE->] 
solution: 

issue: getRequest<T>(url: string, headers?: Headers, blobMode: boolean = false): Observable<T | Blob> {const header = this.getHeaders(headers);url = url || '';const request = this.createRequest(url, RequestMethod.Get, headers, {});if (blobMode) {request.responseType = ResponseContentType.Blob;}return this.http.get(url, request).map((response: Response) => {if (blobMode) {return <Blob>response.blob();}return <T>response.json();}).catch((error: Response) => {if (error.status === 401) {window.location.href = this.constantsService.externalUrls.resilincPortalLogin;} else {return Observable.throw(error.text() || this.constantsService.messages.errors.generic);}});} i have made this function now i am getting this error when i call this functionType 'Observable<boolean | Blob>' is not assignable to type 'Observable<boolean>'. 
solution: 

issue: Can I set up typescript to infer that my own custom react component will have the props provided by a higher order component without having to import the typings for the props that the HOC gives my custom component? [<-CODE->] 
solution: 

issue: Hey All! I am having some problems with an angular project, and I have a feeling it is coming down to my tsconfig. I am trying to use Map.prototype.forEach and it keeps telling me that forEach does not exist. I have my target is "es5" and I have included "es5",  "es2015",  "es2015.collection",  "es2015.iterable", "es2016",  "es2017",  "dom" in my lib section. Outside of that I am not too sure what else I need to do. Anyone have any ideas? here is a link to the stackoverflow so the chat is not polluted here [<-LINK->] 
solution: 

issue: mkulke: You're saying that the input interface should be the resulting interface but with optional properties defined?  [<-CODE->] If you're referencing the file elsewhere, webpack should be able to find it and bundle it in with everything else. I believe its possible to specify a different directory as your type definition root, but its highly recommended to keep your .d.ts files next to your .js files 
solution: 

issue:  [<-CODE->] this works, but it's clunky: [<-CODE->] 
solution: 

issue: Hi there, is it possible to express with TypeScript, that a type is not a function? With TS3.1 I get and error beacause React.ReactNode in  "React.ReactNode | (active:boolean) => React.ReactNode" can be a function and I can't check typeof === "function" anymore. rhys-vdw: I created a minimal example in the Typescript Playground showing the error (this was possible with TS 3.0) [<-LINK->] replaced with tinyurl ;-) sorry! its the {} in ReactFragment. But is there a nice way to tell TS ReactNode is no function? I don't know if "ReactFragment" actually can be a function. But is it possible to write in my function, that ReactNode is not allowed to be a function that this case is exclued? As I understood the ReactFragment is typed to "open" that TS now can't be sure that it's no function. In my case it can never be a function. Only the other part of the union type can be a function. 
solution: 

issue: @thomaskempel [<-CODE->] does that work? 
solution: 

issue: Hey folks, I'm looking for help to deal with this problem: [<-LINK->] Basically I'm passing a generic React component into a HOC, and I'm trying to declare the type of the result of the HOC to include the generic parameter TypeScript won't automatically pass the generic arguments through the HOC, so I'm trying with code like: [<-CODE->] but then it won't compile when used in JSX oh hmm is there any difference between these type declarations: [<-CODE->]  [<-CODE->] or is that effectively the same thing when it comes to JSX element instantiations? 
solution: 

issue: ah I see. Thank you! 
solution: 

issue: I can into this legal syntax, and I can't find any documentation anywhere on it:type X<T> = T extends (infer A extends infer B ? 1 : 2) ? A : 4 "nested infer extends " aren't great keywords for searching either Anyone has an idea  where to find documentation about this? 
solution: 

issue: What does that even do...? Doesn't make much sense... Searching for conditional types should get you the basics, though that particular example doesn't make much sense to me. 
solution: 

issue: russleyshaw: "should be" but I keep getting compiler/debugger/linter errors stating that it can't find express to import from. it's all good. I've moved on. 
solution: 

issue: Hi all !I am facing an issue to filter a collection of generic typed objects based on the generic type itself.Please find below a sample of code illustrating my issue.  [<-LINK->] 
solution: 

issue: faya_gitlab: you can't do that.Tonly exists at compile time. The best you can do is write a type predicate to select the data you want. [<-LINK->] 
solution: 

issue: is there a way except withanyto get aroundProperty does not exist on type 'JQuery<HTMLElement> 
solution: 

issue: Hello guys does anyone has used new project reference feature from version 3? Hard to find complete working example of Project Reference feature If anyone know a working example of the new   Project Reference feature please let me know :) Anyone using project Reference from typescript 3 here? Could someone look at my Projet Reference example to see if I'm missing something, this is not working properly [<-LINK->] 
solution: 

issue: `i am getting error when importing .md file:import Intro from './Intro.md'[ts] Cannot find module './Intro.md'. 
solution: 

issue: Hello@iantanwxthanks for your finding! I'm not sure what to put on root parameter should it be 'src' or '.'? When using Typescript 3 project reference do we have to use absolutely a commun outDir as '../dist' for each project? I have updated my project reference example I'm not using anymore a commun outDir for all project because this wont work with vendors package 
solution: 

issue: Hi, is there a way I can achieve Flow's$Rest<A, B>functionality: [<-LINK->] ? [<-CODE->] ShanonJackson: Thank you, that is awesome. Gerrit0: Your solution didn't work as intended. I will post playground link in a sec.  [<-LINK->] 
solution: 

issue: I don't think there's a way to do that. I ran into the same issue when turning on strictNullChecks for typedoc. 
solution: would be nice if they did let you intersection like that. 

issue: Hello guys, when referencing another project do you reference dist folder files or src folder files? 
solution: 

issue: While using Chrome DevTools with sourcemaps enabled to convert .js file into .ts doesn't show any code into the .ts fileFor instance I have a index.js file with it's respective source map in the same location (but no index.ts file), and then load that index.js file in the browser,I see index.ts file generated from sourcemap with no code inside itAny reasons/issues why .ts file can't be generated in the DevTools ? 
solution: 

issue:  [<-CODE->]  [<-CODE->] Please advise. 
solution: 

issue: thanks@raihan71 Does anyone using git submodule to reference typescript sub project? I had issue with the new Typescript project reference feature and now moving using git... 
solution: shehzadkhan463: looks like you got your checks backwards... I also recommend usingArray.isArrayinstead ofinstanceof Arraydue to instanceof failing when used across frames.. 

issue: I am completely baffled by the compiler error message “type 'string[]' has no compatible call signatures”. Can anyone please help me to figure out how to avoid this? Here’s a simple one: [<-CODE->] 
solution: 

issue: This is a touch off topic, but does anyone here use VS Code and run into issues when creating a new TypeScript file where formatting the document does not correct applytslint.json? I'm getting 4 spaces instead of 2 on this one file. 
solution: 

issue: Yep. Got an alert that there was no formatter configured. :\ Not having issues elsewhere in the workspace. ... reorganized my imports a bit and suddenly it picks up the linting. Idk anymore. Moving on.\_(ツ)_/ 
solution: 

issue: having an issue with a linked library having the same dependency and aninstanceofcheck super common I guess. No idea what to do. Apparently--preverse-symlinkswas added to Node to get around it but am not sure what to do for TypeScript looks something like: [<-CODE->] it's all good until you donpm link common-lib. Then theinstanceofchecks start failing because common-lib's sequelize is not the same as API's sequelize it's an even bigger problem with TS because I need to have atsc -wrunning inside my linked Core to get it to compile and trigger a reload in my API when I make changes there. The whole dev experience is killing me 
solution: 

issue: can't change theinstanceofcheck because the library is riddled with them. Apparently the actual fix is peerDependencies but I need to precompile a library before I can use it.. which means I can't use peerDeps if I want to have auto reloading in TS 
solution: 

issue: Hi y'all! I'm having some trouble updating TypeScript to the latest version on a project. Some things that used to type-check don't work with newer versions I distilled one of the problems that i'm having to this reduced example: [<-LINK->]  [<-CODE->] It fails with the errorType '{ foo: string; } | { foo?: undefined; }' is not assignable to type 'Dictionary<string>'. But i don't know why TS can't infer that{}is a validDictionaty<string> If i leave only one of the branches of the?:it works, or if castas Dictionay<string>any of the branches, or even if i do{} as {}. But i don't think those solutions are very obvious, and i don't understand what happening behind this Can anybody give me a hand? 
solution: 

issue: iv'e already typed it Maybe<A extends any[] ? Concat<A, A[K]> : [A, A[K]]> correct. yeah sure done  [<-CODE->] sorry Dictionary can still be a interface aswell made a typo as for an explanation it's hard to tell, i would suspect typescript creates a union type from you're expression for a good reason but i don't know exactly why, so just fixed it another way its important to note that this will also work  [<-CODE->] 
solution: 

issue: While using Chrome DevTools with sourcemaps enabled to convert .js file into .ts doesn't show any code into the .ts fileFor instance I have a index.js file with it's respective source map in the same location (but no index.ts file), and then load that index.js file in the browser,I see index.ts file generated from sourcemap with no code inside itAny reasons/issues why .ts file can't be generated in the DevTools ? 
solution: 

issue: I think I have an interface issue. const data = service.newsDataContainer will give me the proper data I need but when I try to drill down into this: const data = service.newsDataContainer.articles it says "Property 'articles' does not exist on type 'Article'." but when I console.log it. I get what I want. Is that because of my interface? 
solution: 

issue:  [<-CODE->] where method is padded into the out function and called. I cant seem to get this pattern to work with typescript. Is there something simple Im missing? sorry that didnt get formatted for some reason the main takeaway is that im trying to pass in the method name on that client object in the outer function and call it 
solution: 

issue: I have Typescript 3.1.3 code likeimport * as Schema from './foo.d';that just imports some type declarations. But transpiling (target es2016) retains the type declaration import, so the resulting.jsfile still hasimport * as Schema from './foo.d';in it. This causes my bundling to fail... :/ 
solution: 

issue: Hi all! I tried to implement a helper type to extract the argument tuple type of a constructor, but it doesn't appear to work. [<-CODE->] Any ideas? 
solution: 

issue: "write my own extension"? as far as im aware you can't alter the type checker without forking typescript because i tried once in a moment of desperation 
solution: 

issue: Hi guys, [<-CODE->]  [<-CODE->] tsconfig.json [<-CODE->] Do any of you have an idea how to solve this? 
solution: 

issue: Hi everyone! I'm struggling to type [<-LINK->] jQuery-like initialization pattern with TS,  can you help me? It couldn't find a way to have the compiler generate a proper declaration file for me, while also maintaining basically the same code size once compiled down to JS and minified. 
solution: 

issue: In [<-LINK->] , couldn't they just use overloads to make the function work within the boundaries of still being sound (type-wise)? TheeventTypeargument should work as a discriminator. 
solution: 

issue: Can anyone comment on the state of traits in TypeScript?  There's a crapton of issues on it ( [<-LINK->] ), and several that directly address the question: [<-ISSUE->] , [<-ISSUE->] & [<-ISSUE->] .  I was about to add another, because the current way (subclass factories, see [<-LINK->] ) doesn't work quite right, IMHO.  We've authored a pure javascript version of a nice trait library, [<-LINK->] , and I was hoping to port that over to TypeScript based on my experience since 2005 using AspectJ in Java to pull off traits via introduction/ITDs and theajccompiler.  However, I just can't seem to get the TypeScript compiler to recognize what I'm trying to do, all the while making me wonder why TypeScript couldn't add language keywordstraitandexpressesfor trait definition and trait extension, respectively.  Seems like this keeps coming up, and its totally doable, as evidenced by the many pure javascript trait/mixin libraries, especiallymutrait.  See its README for examples. 
solution: 

issue: Hi. Is there any chance to type the following pseudo code? [<-CODE->]  [<-CODE->] 
solution: 

issue: Ideally, I'd like a new keyword trait to identify a trait instead of class The linked issues explain why that's nota good idea If there are limitations in the typescript type system today that are blocking you, please identify them and maybe we can open some issues to track feature work to address things 
solution: 

issue: @CyrusNajmabadi it's not building for me: [<-CODE->]  [<-CODE->] CyrusNajmabadi: I copied exactly what you pasted into your message at [<-LINK->] 
solution: 

issue: Hey TS Room, I'm trying out an example from the docs and it doesn't seem to work. [<-LINK->] taken from [<-LINK->] 
solution: 

issue: hi,can I import a custom type in a declare file?like this: [<-CODE->] I found this can't compile.here is   source code:https://github.com/xiaomingplus/test-type 
solution: 

issue: hinell: are u familiar a bit with Elm?  [<-LINK->] 
solution: 

issue: I'm guessing you need the constructor for something and can't just remove it? fatcerberus: it's kind of messy, and would get horrible with more options, but you could do something like this: [<-CODE->] Requires TS 3.1 if I recall correctly  [<-CODE->] I feel like there ought to be a better way of handling this... I want to cause an error when going outside of the tuple bounds. [<-CODE->] Yea, that doesn't work becausekeyof [string]isnumber | '0' | ... 
solution: 

issue: Gerrit0: I have a feeling that there might be some solution to this along the lines oftype TupleElementType<T extends any[], K extends number> = keyof T extends K ? T[K] : never? but I am not able to make it work. 
solution: 

issue: hinell: I was searching for decoders of runtime types -> [<-LINK->] but it feels a bit heavyweight 
solution: 

issue: fatcerberus: something like this should work, though I suspect thestring/#will be a pain to type if there are a lot of# [<-CODE->] 
solution: 

issue: Gerrit0: I restarted the compiler, and what do you know, it magically worked.@fatcerberusYeah, I agree—it does seem to work, but I'm not sure if I'd need it to. I'm just kind of trying to kick the tires 
solution: 

issue: Using express and cookie-parser, how would I handlerequest.cookies?  It's type isany.  So when I use it in my code like thisrequest.cookies[jwtCookieName], tslint givesUnsafe use of expression of type 'any'.  It seems like I need to castrequest.cookieto something, but I can't find anything that helps me figure out what to cast it to.  I have only been in Typescript land for a few months, so it's possible I just don't understanding something when it comes to dealing with that tslint error. hmm, I still getUnsafe use of expression of type 'any'when I wrap that code withif (typeof request.cookies === 'object') { }.  There's got to be a "standard" way of dealing with theno-unsafe-anyrule when an npm module is giving youany.  I can't seem to find anything useful though. 
solution: 

issue: ShanonJackson: Yeah, I'm already usingesnextinlibbut in this case not actually usingarray.flat(), just something that would be typed similarly... but not having much success trying to type my own flat-like array argument. 
solution: 

issue: fatcerberus: yeah of course, the thing is to have it also work for values that are already arrays, i.e. : [<-CODE->] 
solution: Is there a way to get the behavior of opaque types in TS?. Heres one i use often because in our project we force New Zealand date (which really angers me)...... 

issue: With this type: [<-CODE->]  [<-CODE->]  [<-CODE->] ? 
solution: 

issue: hi I am trying to resolveCannot use 'new' with an expression whose type lacks a call or construct signature. I used to have```  [<-CODE->] which works but I want to get rid of thatany I think I just need to make add something to this one  [<-CODE->] but I can't seem to figure out what I'm doing it in the .ts not .d.ts I also tried  [<-CODE->] Is there such a thing as aClasstype? I am guessing not because this is still open [<-ISSUE->] 
solution: 

issue: So... I guessesModuleInteropis the way of the future, right? I'm starting to run into libraries that basically cannot be used without this option, because they can't be imported as a namespace but can't be imported as default withoutesModuleInteropenabled... fast-memoize, for example. It usesmodule.exports =but the typings declareexport default momoize... which as best I can tell is not really true 
solution: 

issue: anyone using styled-components v4 with react? getting some wierd error that i can't be bothered investigating just wondering if anyone else is getting it on the typings 
solution: 

issue: @Jasemalsadi , [<-CODE->] However, here is your solution [<-CODE->] But is an elaborated one [<-CODE->] 
solution: 

issue: Any idea how to work with Typescript (no webpack/bundlers) for browser es-modules? Currently the import statements are not being converted to .js file extension. 
solution: 

issue: There are some enums I'm having trouble accessing in a package that I'm using. The enum is defined in a@typesdeclaration as follows:  [<-CODE->] But I've only been able to successfully import the following module:  [<-CODE->] I need theSeverityLevelenum to use for arguments to some of the methods provided by the library, but I've been unable to find a way to import them. I can't imagine that I must redefine the enum myself. 
solution: 

issue: Note: the spec is out of date.  For example However, doing so means the following capabilities are lost:An interface can be named in an extends or implements clause, but a type alias for an object type literal cannot. this is not true 
solution: 

issue: what, exactly, do you expect the difference to be so you're saying... [<-CODE->] ??? because I'm not seeing that happen. 
solution: 

issue: It's been my experience that later versions include all the stuff from earlier versions.  For example in my tsconfig for Oozaru, I have"lib": [ "esnext, "dom" ]and that gives me access to everything 
solution: 

issue: Is there predefined type "everything what has toString method" ? I wanted to useobjectbut is't not compatible withnumber 
solution: 

issue: I can't seem to figure out how to provide a type interface to a JSON structure that has arbitrary number of keys, with each key having an array of objects assigned to it. i.e. [<-CODE->] I tried [<-CODE->] But tslint is giving me a complaint saying that interface has only a call signature. So I guess this is wrong? 
solution: 

issue: Ah! Thank you@tonisostrat! 
solution: 

issue: Hi, I wanted to check if anyone uses.jsxor.jsfiles in their typescript project. If you do, do you get any issues with source maps? I have just created an issue about this: [<-ISSUE->] Just wanted to see if anyone else have experienced it. 
solution: 

issue: I'm not sure it's possible to limit objects to having a single property... 
solution: Well, it is not but i can limit (i think so) key to be only one think, right ?. like i dont care if object will be {"name":"test", "name": "whatever" } it will still be the same think. If you pass it in explicitly, sure.ChangeKeyValuePair<T, 'name'>. 

issue: Given aPromise<string>how would you get backstringif you didn't haveinfer? With conditional types it's trivial: [<-CODE->] For some stuff, that could work, but how would you actually useB? You can't doconst c: B = '' 
solution: you can indeeed get the U out without conditional types but it requires your types to be setup in a certain way that supports higher kinded types. 

issue: tonisostrat: @fatcerberusHere is what I could come up with with my very limited type-fu: [<-LINK->]  [<-CODE->] The biggest issue is that type checking for the input argument is not working.Unfortunately, this would not give error (givingainstead ofcas input arg): [<-CODE->] fatcerberus: Oh wow, it would be. I think I was confusing function definition with  invocation. So in that case, the above playground does fulfill@tonisostrat's needs. Just that I didn't tie it up with a type union. Actually, based on new understanding, I made [<-LINK->] a bit more correct now. 
solution: 

issue: Shouldn't be these signatures compatible? [<-CODE->] first  can be mix of string and numbers while second cannot? I still can't see why it cannot be compatible: [<-LINK->] in both cases, it will generate same array variable yes, thats what I want compiler will complain:[ts] Overload signature is not compatible with function implementation. 
solution: 

issue:  [<-CODE->] Those should be compatible. Notice that the first one is not an array anymore. 
solution: 

issue: Mmmmmm trying to get around this type-loop somehow if anyones ever had this problem before (in a idiomatic way)  [<-CODE->] IHeadingSelectRenderNode needs IBuildTree,but IBuildTree needs IHeadingSelectRenderNode IBuildTreeHeadingSelect** yeah just tried to setup playground example myself and realised its not erroring think something different is going on just assumed it was infinitely looping because error was too long to be human readable give me a sec 
solution: 

issue: Hello!  [<-LINK->] Is this a bug? That greeting2 is undefined? I mean it calls the child fn, but doesn't take it's context 
solution: rssfrncs: Probably not since your default action kind of overshadows the other types. If you removeDefaultActionfrom the union you get type checking I believe. 

issue: there's kind of a way but it's hacky  [<-LINK->] that kind of stuff would require dependent types, I think? for example, what if you.push()a value onto it 
solution: 

issue: how to transform a type [<-CODE->] to [<-CODE->] ? 
solution: technically i know all possible values forC,Das well so for now i have a huge conditional type which technically works. but i dont think its possible right now to break apart a|like i want to. 

issue: Hey all--I feel like I must be missing something very simple about using types from definitelyTyped. Here is my issue: I'm working on an Angular 7 app, and I'm working with a few libraries that are imported via script tags from other sources. Stripe, googletags, and the like. I've installed their types with npm (well, yarn), but the compiler doesn't find them. if I adddeclare let Stripe: any, I can compile, but of course I then lose type safety. and if I leave that out, VScode understands the types, but the compiler can't find them. Any way to hint to the compiler, beyond having installed from@types/foo? There is noimport, since the js is loaded separately via script tag, but I imagine if I could fool ts into thinking it was imported, this would all somehow work properly. Gerrit0: hmm... Gerrit0: Cannot find module "stripe" which isn't too surprising to me--there is no such module to import. ah, let me try that. File '/Users/karp/Documents/git/geekui2/node_modules/@types/stripe-v3/index.d.ts' is not a module. 
solution: the stripe-v3 is the types I imported, btw.. 

issue: Gerrit0: This is bizarre (and I have to go to dinner in a moment). I can make it work with console.log also. Not only that, adding that console.log at the top of the page that uses Stripe (inside a closure) also makes the whole thing compile! 
solution: 

issue: Hey all, anyone got this error using generator functions with typescript 2.9.1 version.example: [<-CODE->]  [<-CODE->] 
solution: 

issue: skeate: : Thank you for kindly getting back to me bro. As requested mytsconfig.jsonis: [<-CODE->] skeate: nope not set. I don't have it in the at all config. skeate: this was failing when running tests only. However, working fine when running the app. Anyway, for now, I've mocked this in the tests and its okay. Thank you for kindly getting back to me man. 
solution: 

issue: Would love some help clarifying part of Union types. It's explicitly stated that "If we have a value that has a union type, we can only access members that are common to all types in the union.". But if you build a union type like [<-CODE->] Objects that match both params match that type What am I missing in this case the following is valid [<-CODE->] I'm curious why I'm allowed to have an object that has properties from both types, instead of just properties from either type 
solution: 

issue: Does anyone know what function I'd invoke in the TS API to simply ask, "is type X assignable to type Y?"I don't mind if it returns true/false, or if it returns undefined/the-error-message 
solution: 

issue: Yeah that was my question 
solution: 

issue: you might also be able to use tuples? [<-CODE->] 
solution: DragSourceorDropTargetThis is an object that is difficult to verify.. 

issue:  [<-CODE->]  [<-CODE->] But this work: [<-CODE->] 
solution: 

issue: Change the type of single key on interface while keeping the type-errors on that key human readable whats the best way like at the moment i have something like Omit<Foo, "bar"> &  {bar: NEWTYPE} but the error messages i get are fucking digusting 
solution: 

issue: fatcerberus: Error:(13, 52) TS2339: Property 'prototype' does not exist on type 'never’.for [<-CODE->] oops meant to tag@Gerrit0sorry Also tried [<-CODE->] 
solution: 

issue: Not sure but I’ll be willing to work on a github respository for this 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] Is there a something I’m missing which means I need to explicitly state thatmyconfigis not read-only? 
solution: Managed to figure it out, it’s because someone had importedprocessfor some reason and imports are constant. 

issue: i'm trying to write a definition file for a node library that has a sort of weird export pattern: [<-CODE->] can't figure out how to do named exports and a default export right just can't figure out the syntax in the definition file this is throwing an error [<-LINK->] error is "An export assignment cannot be used in a module with other exported elements." 
solution: 

issue: any reason the typescript-bot in DefinitelyTyped edits comments with the same contents every hour? for example if you check the edits for it's comment here: [<-LINK->] sounds like something that could be optimised? 
solution: 

issue: anyone run into an issue where you define local type definitions for js npm packages, and for some reason you start getting theCannot find module './lib'error? for some reason some/all of those node_modules are getting copied intodist(not sure if that's part of the issue) 
solution: 

issue: Okay so can someone explain to me why this doesn't work? [<-CODE->] Type '(number | T | R)[][]' is not assignable to type '[R, T, number][]'.Type '(number | T | R)[]' is not assignable to type '[R, T, number]'.Property '0' is missing in type '(number | T | R)[]'. That's kind of frustrating Thanks though, explicitly specifying the type parameter for map works, then I can remove it from the declaration ofkeysso as not to repeat myself :) I really dislike explicitly specifying type parameters, those are something I reallyreallyprefer to let be inferred But if there's no other (typesafe) way... More fun fighting the type system: [<-CODE->]  [<-CODE->] I guess I could overloadascending() This was the only way I could make it work [<-CODE->] 
solution: 

issue:  [<-LINK->] gives error: `Variable 'metalPurityIdField' is used before being assigned. 
solution: 

issue:  [<-CODE->] =Error:(12, 52) TS2339: Property 'prototype' does not exist on type 'never’.Is there a check I can do beforequeryOrModel.prototypefor typenever?queryOrModel: QueryBuilder<Model> | Model 
solution: 

issue: rmartin-carecloud: paste your setupTestFrameworkScriptFile And the error is? 
solution: 

issue: hi everyone. I’d like to have a generic function that takes two arguments, the second being conditional to the first one. ie.: First argument is an Enum and depending on the Enum, the second argument must be of a specific type? I think it can be done with generics and/or overloads, but I’m having a hard time trying to wrap my head around the problem. Yep, I just found the documentation for Overloads and I think it could work, but if someone has an idea/suggestion, that would be great! Tks! 
solution: 

issue: hi! I need some help...  I've defined this type: [<-CODE->]  [<-CODE->] I know what the error implies, I just want to know if there's a way of making an object where the keys are fixed (only the ones allowed), but there's an index signature, so I can loop over the keys.  [<-CODE->] hi@jscheiny! I thought the issue was not defining anindex signaturein the original type... I normally feel bad overwriting the compiler, hehe it does work tho :) thanks for ur help 
solution: Right, you haven't defined an index signature so accessingerrorTags[string]is invalid becausestringcould be any string. So you want to tell it that your accessor is actually a key ofErrorTags. You can instead do a for-in loop which will correctly type the loop variable askyeof ErrorTags. 

issue: So with a type like this: [<-CODE->]  [<-CODE->] 
solution: 

issue: dfee:  [<-CODE->] or you can mess around with the namespacing to get a default export out so everything's under that one but i can't show you off the top of my head how it's done. either check out the TS tutorials on their official site or how other libraries do their definitions ah, got it. i think you need to first import the react library to that def file before you can it  [<-LINK->] <-- this library is doing the exact same thing you are  [<-LINK->] < - same thing it looks like you have some other bug in the code, that import should work dfee: , or just have a separate folder calledtypings, for example, that's listed in thefilesarray of yourpackage.json srcshould not be referenced anywhere in your distributable @Gerrit0, after I asked the question but before you answered I kept googling and I found the following piece of code: [<-CODE->] it seems to work exactly as I need it after testing - what's your take on it? sorry, I should've made the code a bit more explanatory [<-CODE->]  [<-CODE->] 
solution: 

issue: tonisostrat: you can't exactly do that thanks toprivatebeing annoying... But if you can removeprivate, sure, proxies might be a bit heavy handed but.... it works [<-LINK->] tonisostrat: that doesn't meet the criteria for your original question. You can't takeconst { magic } = fooCloneand expectmagic()to work. If that's fine, then sure, that does work... 
solution: 

issue:  [<-CODE->] Hey folks, can any one understand why the above fails?  It seems to fail to inherit the Constructor bound. Okay, even more fun when [<-CODE->] fails. 
solution: 

issue: Personally if I had to break it apart I would move the brace to a separate line to then have the extends and implements clauses on their own line, indented.  This is what I do for longifclauses even though normally I want the brace on the same line as the if 
solution: it T extends HasValue as generic constraint, then it will always be true so it will always return string. 

issue: baetheus: thanks a lot for this other example! 
solution: 

issue: Hello, can someone help me with my ts. [<-CODE->] I'm having the error where when I add a key 4 that doesn't exist in my test I'm not receiving any error from ts. yet if I add the type to the return it does show an error [<-CODE->] 
solution: 

issue: Is there a way to overcome this behaviour? [<-CODE->]  [<-CODE->] 
solution: 

issue: Hi im looking for someone who was experience with php + woocommerce + yith, im trying to solve a problem i feel im close to solving but i need some expertise! 
solution: 

issue: Hello, is it possible to achieve this kind of behaviour - to type guard value based on key? (Note that code in example is illustrative and doesn't compile / work) [<-CODE->] 
solution: 

issue: O4epegb: No, I meant to check for types when calling function: [<-CODE->] 
solution: 

issue: Hey, can someone explain whytestObj.testcan be undefined inside the if statement even though I have checked that it shouldn't be? Or at leat the compiler says it can be.. [<-CODE->] @elfraim sorry for the bad example, maybe this is better: [<-CODE->]  [<-CODE->] I just noticed thatif (testObj.test !== undefined)works but isn't it weird that you can't do it like in the example? 
solution: lennu: I tested your example and it seems to be working fine? It just never reaches the if (check ). 

issue: I'm trying to build a recursively nested interface to represent URL paths.  Having trouble make this happen.  Here's a really contrived example to demonstrate the recursive issue: [<-CODE->] Any tips? Getting the following error: [<-CODE->] 
solution: 

issue: Not once you turn on implicit any, it doesn't stay on in that playground I'm guessing the issue is fromsymbol, asRecord<symbol, string>is the same as trying to do{ [K in symbol]: string }... which doesn't have an index signature How to fix it? Not a clue... It seems weird that index signatures can't be symbols,{ [k: symbol]: string }doesn't work 
solution: I have a bit of a question that's been bothering me now that I've come back to Typescript/Koa from Elixir/Phoenix, has anyone attempted to take the Phoenix approach to JSON APIs and rendering JSON as a view? I'm currently trying to fold in koa-views and looking at nunjucks for the string templating but can find virtually no resources on this. To me, this is one of the best design decisions Phoenix introduced and I'm curious if anyone else is adopting something similar and, if so, how?. 

issue: Is anyone here currently using Typescript/Koa in combination? I'm having some trouble with a really strange dependency issue: [<-LINK->] Wondering if someone with a working setup can pass along their package-lock or something so I can verify this is a real issue. I can't find anyone else experiencing this so my instinct is to assume it is some incredibly obscure interaction with another unrelated package as it has so often been with Typescript. 
solution: 

issue: Does anyone know how TS implements their tests?I'm writing a library that has a lot of generics and I'd like some tests to prove that it'll compile to a certain generic type with certain type parameters, or that it'll produce a compile error with other type parameters.Obviously, I can't compile and run the error cases.I tried poking around the TS code base and it's quite overwhelming They read a .js/.ts file, run the compiler, and it spits out a.typesfile and that's the one I'm interested in 
solution: 

issue:  [<-CODE->] now there is something weird happening here, which i dont understand [<-CODE->] i just wanted to extract all properties of pos.coords and add them to a new object together with a timestamp, but im stuck on this now 
solution: 

issue: Does anyone know if its possible to assert that two types are equivalent at compilation time - and error if not? The use-case for this is that I have two auto-generated interface declarations from different sources, and i want to ensure they are the same - otherwise fail the build. 
solution: 

issue: What I'm trying to do is to type this function in my query library: [<-CODE->]  [<-CODE->]  [<-CODE->] So in this case, how should I annotateopcode.type? But I'm not storing instances, I'm storing the constructor function itself To later make instances from them 
solution: 

issue: Am I missing something obvious here? It seems like this should work, and hovering over I do see the expected types... [<-CODE->] 
solution: 

issue: Hi there, having a simple js file: [<-CODE->]  [<-CODE->] 
solution: Turn on allowJS. 

issue: No, my issue doesn't seem to be related to declaration merging at all. 
solution: 

issue: Is there a way to make this work: [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Hello. I was trying to use bigints, so updated to I'm usingtypescript@3.3-devbased on [<-ISSUE->] , but the compiler still says it "can't find name 'BigInt'". Do I need to add a lib or something? Yes:"esnext.bigint"perMicrosoft/TypeScript#25886. Okay, nevermind. Still using an older version of TSC in VSC so I didn't see that suggested. 
solution: 

issue: Is there any way I can make a generic type that gives me a "typed object" from an enum? [<-CODE->] This works as intended, gives me intellisense and proper errors, but it also gives me the following error: [<-CODE->] 
solution: 

issue: hi all.. how can I define interface with typeof of a class? [<-CODE->] doesn't work? is the typeof correct? 
solution: 

issue: i added closure library to my angular app, but cant access goog methods not a function. What im doing wrong? 
solution: 

issue: fatcerberus: Ill try to do that. My properties must be optional, because they comes from interfaces that are generated by swagger 
solution: 

issue: Why doesgenericnot work? [<-CODE->] any way to make this working? ... can I somehow influence the distribution of theExclude<>? 
solution: 

issue: can't you simply dotype ListOfSTR<T> = ListOf<STR<T>>? 
solution: 

issue: kidcosmic: they are not!! For example discriminated unions are super handy! [<-CODE->] Or just something like this: [<-CODE->] 
solution: 

issue: i'm facing a problem with json and search paths I want "app-config" to resolve to "./app-config.json" relative to the tsconfig.json but somehow when I try to do that,everymodule that isn't prefixed with "./" ends up resolving to to "./app-config.json" using tsloader with webpack 
solution: 

issue: Hi there, sorry for bursting in like that - I've got a question regarding generics. I have a keyed map that containsseveral items. The layout of item has always status, payload, error: [<-CODE->] Now, the payload itself is a generic (T). The keyed map that contains those items can have a different payload type per key: [<-CODE->]  [<-CODE->] 
solution: 

issue: Hi guys! Anyone here has experience setting up a monorepo with typescript? I'm having trouble configuring root imports and paths in general 
solution: 

issue: off the top of my head: [<-CODE->] 
solution: 

issue:  [<-LINK->] what's like... a better way to do this?Currently I geterror TS2322: Type 'BaseClass' is not assignable to type 'ExtendedClass'. Property 'propertyB' is missing in type 'BaseClass'.and I have to override all my static properties to get the right return type... I thought maybe I would instead want to meet an interface, but I can't seem to put static members on one. What's like the better/preferred way to maintain immutability and extend my types in my scenario? 
solution: 

issue: Hi All, porting a JS code to TS. Giving an error no idea why, I am a dummy, please help Type 'boolean' is not assignable to type 'View'. is the error  [<-CODE->] 
solution: 

issue: they are like robots 
solution: 

issue: josecolella: seems to work as@jscheinysuggested: [<-LINK->] 
solution: 

issue: Infinity minus anything is still infinity In theory That should work if you usekeyofin the index signature - if it doesn’t I have no idea sadly :( jkantr: Theanyinferences were there before, you just didn’t get warned about them.  Nothing was removed; error conditions were just added 
solution: 

issue: Anyone who upgraded to ts 3.2.1 getting this error? Child process failed to process the request: Error: Debug Failure. Invalid cast. The supplied value [object Object] did not pass the test 'isJsonSourceFile'. my awesome-typescript-loader is failing i think 
solution: 

issue: how do i exclude all arrays from type ?  [<-CODE->] value: Exclude<T[Tkey], any[]>;doesn't seems to work. (any[]) neither do this work but i feel like it is closer to what i want: [<-CODE->] Well.. still not working  [<-CODE->]  [<-CODE->] 
solution: andChange<User,"name">is kind of useless. That looks like what i need.. 

issue:  [<-LINK->] Hi guys, does anyone know whywindow.location.reload(true)is deprecated in TypeScript 3.2.1? It really doesn't make sense to me, like, is there an alternative way to do this? 
solution: 

issue:  Anyone know what the status ofMicrosoft/TypeScript#13288I can't get the spread operator to work with generics 
solution: 

issue: Are you trying to use declaration merging where you are getting that error? Extending an interface doesn't exhibit that behavior. [<-CODE->] 
solution: 

issue: Anyone available to help me type an untyped module in my project?https://www.dropbox.com/s/wwv9q71ai06y99a/Screenshot%202018-12-09%2013.02.49.png?dl=0 
solution: 

issue:  [<-LINK->] the unbelievable part is that I am able, by renaming files and screwing with tsconfig.json, to work it into a state where it does pick up the definitions, but once i restart it, it's gone. For example, if I add"includes": ["./typings"]to tsconfig.json then move myindex.d.tsfile fromtypings/crocks/predicates/isFunctiontotypings/crocks, the editor might show intellisence, but as soon as i restart the editor, it's gone and the error returns. How would I type this: [<-CODE->] here's my guess so far: [<-CODE->] ahh found this [<-LINK->] 
solution: 

issue: rhys-vdw: you still using styled-components? 
solution: don't know suit but its like namespacing yeah so you can make your root class name share your components component name. 

issue: re: my above problems, I think I cracked the code: [<-CODE->] 
solution: 

issue: I am trying to debug typescript in Visual Studio Code. I am using the Chrome Debugger Extension. But for some reason when I run the debugger my chrome browser launches with the following error..... This site can’t be reached localhost refused to connect.Search Google for localhost 4200ERR_CONNECTION_REFUSED. 
solution: 

issue: jacobmadsen: do you mean with TJSON? jacobmadsen: this works for me: [<-CODE->] 
solution: Yes, from there you should be able to deal with it as a type and make changes.. 

issue:  [<-CODE->]  [<-CODE->] It works fine at runtime, but this is suddenly appearing out of nowhere... Any ideas? The electron npm package has theelectron.d.tsdefined... but i'm not 100% familiar with these files to know if it's a real issue or what 
solution: 

issue: .filter() makes a copy - if someone is using splice they probably need to do it in-place 
solution: 

issue: hey yall!!! got a stupid question I can't quite figure outhow do I identify if an extended class contains a property and that property is of a certain type? [<-CODE->] hasownproperty? or is there a more typescripty way of doin it? 
solution: 

issue:  [<-ISSUE->] 
solution: 

issue: akashishu777: you could use var declarations because they get hoisted but not sure if that's the ideal solution 
solution: 

issue: Ugh. Anyone got a strongly typedcomposeimplementation for react? The one in@types/recompose does no inference. ShanonJackson:  [<-CODE->] Which library? I think decorators might solve the problem. I'm not sure if they're standard yet though. Each individual entry in theconnectcall is correctly typed, so if I do it like this it should work: [<-CODE->] 
solution: 

issue: If you already have type-specific transcaction classes then obviously there based on your description (and not seeing the rest of the codebase or what these classes actually look like) i would put that logic in the transaction implementation yes. 
solution: 

issue: When runningtsserver, I get this error message:"Cannot find module '~/Library/Caches/typescript/3.2/install"(full traceback: [<-LINK->] ) (This is on MacOS.) 
solution: 

issue: tonisostrat: oh cool, Ill take a look at that wdunn001: I think you want a discriminated union: [<-LINK->] tonisostrat: materialize css uses jquery. :/ I think it should be listed as a peerDependency because its referenced in their code: [<-LINK->]  [<-LINK->] ha They even have their own jquery wrapper I could ask if its strictly required thoguh 
solution: 

issue: Anybody help me with this playground [<-LINK->] ooh actually seems to work now 
solution: 

issue: Actually nix my last question, sorry... turned out to be a stupid casing issue... gitbash for windows auto forces ignoring case changes... removed that setting and did agit mvto resolve 
solution: 

issue: 'a' in barshould work I think 
solution: 

issue: you can't use @ syntax in typescript change the imports to the relative path and they will work i think you can use @ if you change how your module/module resolution works in tsconfig 
solution: 

issue: So I need to export the enums in an actual .ts file so if I move my enums to different .ts file, and try and import that module, I can't extend the namespace. 
solution: 

issue: link a code snippet@JasonHamDutch_gitlab when  you compile or when you run it in the browser 
solution: 

issue: Alright, thanks for the help! Gonna try to make it work I tried above in the code. [<-CODE->] But that resulted in a lot of scope problems (Angular didnt know what changed or not).now i'm trying [<-CODE->] because my ide says change require to import?  [<-CODE->] Getting kind of the same error if I do it like above 
solution: 

issue: May I ask for help in a semi trivial problem? Im relatively new to typescript 
solution: 

issue: how can i get typehint without import module  [<-CODE->] i dont want to [<-CODE->] is there any example for making a package so i can use it in js ? this works [<-CODE->] but when i add more file, this doen't work [<-CODE->] found it 
solution: 

issue: hi there. Is it possible to combine 2 generic interfaces with a type alias?Seemingly not possible: [<-CODE->] Results in error: [<-CODE->] 
solution: 

issue: Hi guys! I would like to learn more about typescript. Could you tell me a good tutorial on TODO list that uses fake webapi? Thanks! 
solution: Telmon: Afraid I don't know of any guides. I recently started getting into TypeScript and found their own documentation excellent. I suggest you start there! :). 

issue: looks like a bug it's my understanding that generic constraints are the same whether they're in a conditional statement or as the parameter 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: elasim: triple slashes are still used in.d.tsfiles - sometimes, but you shouldn't need to use it in any typescript code. GreenMonkeyBoy: you can achieve that with type intersections. [<-CODE->] Global definitions should be found automatically so long as the declaration file is included in your compilation step anyis annoying sometimes,any & something = any... changeanytounknownand it should work as expected: [<-CODE->] 
solution: 

issue: Okay, that turned out to be a webpack issue. In brief, I needed to setoutput.libraryTarget: “commonjs”in my webpack.config.js. [<-LINK->] 
solution: 

issue: how write interface for mappingobject-mapper.js? omg >.< why error: [<-CODE->] 
solution: 

issue: nijuyr: can you post the code example again? tbh I can't remember what I answered before! 
solution: 

issue: cdaringe: The extra parameters to the function should be before or after the original parameters. We can do before easily, after I am not sure it can be done, without weird hacks Nimelrian: This should help: [<-LINK->] 
solution: 

issue: I'm having trouble with a package dependency which lists peer dependencies that my project includes. It fails to compile w/Module not found: Can't resolve 'somepackage' in '<path to some file in my dependency' 
solution: 

issue: I thought this might work: [<-CODE->]  [<-CODE->] Not for me  [<-LINK->] 
solution: ohhh actually that makes sense, conditional types act like a .map() when used on unions. so the conditional is evaluated forstring, fornulland forundefined(because T is a union of those 3 things) and then the result is a union of the evaluation results:never,null, andundefined. 

issue: Yeah, that is passing the same test cases. Not sure exactly what you are going for, but maybe this will help? [<-CODE->] In your case, if you want something on the typeBase, but not on the prototype: [<-CODE->] 
solution: 

issue: fatcerberus: sorry for late reply, but yes. It is a random string file fatcerberus: this is not a code, some data 
solution: 

issue: cspotcode: ok so after lightly tinkering, i think the missing link wasArray<typeof Base>(specifically the usage of typeof)... As for the mixin comment, from my findings in the manual it looks like the "pattern" is to actually force the typecast to beany? Seems to be more of an anti-pattern to me? 
solution: 

issue: LaP0573: : can you check that your tsconfig.json  includeses6(or 2017 or 2018) in thelibattribute? 
solution: 

issue: ? not following pretty sure anything without a path prefix resolves to node modules so import { foo } from "bar" resolves to "bar" in node_modules regardless of rootDir 
solution: 

issue: How come if I add an import-statement (e.g.import { Logger } from 'pino') to atypings.d.ts, then it somehow TypeScript doesn't pick up the typings all of a sudden.  [<-CODE->] I guess the file ends up being in "module mode", but how do I work around that? 
solution: 

issue: You're using TabRipple in a type declaration.  Is it a type?  Or is it only a value?  It's possible for an identifier to refer to only one or the other.  That depends on where you have declared TabRipple, which we can't see in the example EDIT: meant to say "in a type annotation" 
solution: 

issue: What is a RefObject? (not familiar with react) 
solution: yup yup...references to actual dom nodes. in this case, TabRipple is a component. So the ref will return the instance of the component. 

issue: why is this code incorrect?  [<-CODE->] the error isProperty 'uid' is missing in type 'typeof Subscriber' but required in type 'ISu'.why is this? 
solution: 

issue: Is there a way to loop over two arrays simulataneously? 
solution: 

issue: Not sure what you mean by looping over two arrays simultaneously... Like, a 2D array? 
solution: 

issue: hi how do i mix jsx and tsx files within a project? i dont want to rename all jsx files to tsx hello 
solution: 

issue: fatcerberus: Two arrays of the same size, loop over them at the same time. keithlayne: I was actually asking whether typescript had a zip function :) I just used forEach for now. 
solution: you could go super old-school and loop by index :). 

issue: keithlayne: i am trying to achieve 2nd highest salary keithlayne: Also i am trying to get that person name with 2nd highest on my console 
solution: 

issue: I checked the documentation but I must be using the wrong keyword, how do you set a default for a property of an interface ?  [<-CODE->] How do I set 'b' as the default? if bar isn't provided it will fallback to'b' Seems like I am not the only one: [<-LINK->] How come everything that I need, is not yet implemented? I mean having a natural number type should be pretty basic… and again I am not the only one: [<-LINK->] having 0–Number.MAX_SAFE_INTEGER as a type is not a big ask… I have just started using TS and I am already disappointed :( agalazis: thanks Ill try. Do you know how to share the return of signatures? Here's an example of what I mean: [<-CODE->] ? sorry I don't understand your answer I have 3 signatures that returns the same object I wanna write it once if I have 50 signatures Id have to write it 50 times there must be a way to share the return AH now I understand your answer, nop I can't use?to achieve that the second parameter is a function which is defined inline if I use a type union for it I might achieve what you said 
solution: 

issue: Not yet, [<-ISSUE->] 
solution: @randi2kewlI guess lodashgetis your best friend there, not as elegant yet because my proposal is not supported yet: [<-ISSUE->]. 

issue: How do you export an UMD module in a definition file? It seems I am covered withexport as namespace foo;for global consumption. But I can't find how to support AMD/CJS/ES. Is itdeclare module foo {}? Or maybeexport default interface foo {}? 
solution: 

issue: Hi, are there anything wrong here? I got some error say that "Type '{ [x: string]: "asc" | "desc"; }' is missing the following properties from type '{ email: "asc" | "desc"; name: "asc" | "desc"; }': email, name". [<-CODE->] 
solution: 

issue: Hi there, is it by design that the following assignment does not raise an error: [<-CODE->]  [<-CODE->] Strangely enough the following assignment raises an error <Type '"xxx"' is not assignable to type '"BAR"'.>: [<-CODE->] 
solution: 

issue: fatcerberus: Thanks for the clarification. I will report an issue then. 
solution: 

issue: hey, is it possible to use generics in a computed property in an interface? e.g.: [<-CODE->]  [<-CODE->] also, can someone help me make sense of this error? [<-CODE->]  [<-CODE->] the error doesn't make sense to me because I read it as "subset of X is not assignable to X" correction, "subset of X is not assignable to any subset of X" 
solution: 

issue:  Hello everyone! I am just starting with TS and I am faced with an error which must be very trivial, but that I can't find a fix for. Here is the situation [<-CODE->]  [<-CODE->] 
solution: You have an interface with the same name as your object but they aren't implicitly bound just because their names are the same. const colors: colors {...}. 

issue:  [<-CODE->] Can't do any better for payload since it isn't used ... The return type annotation is redundant, the compiler will infer the correct return type .. This would be the interface for the function : [<-CODE->] DanielNetzer: you are welcome :) 
solution: I had no idea you could enforce function names. I didn't think those were part of the type system. Almost like trying to enforce a variable name that a type instance can be assigned to. Interesting.. 

issue: Hello guys. I have a question aboutCSS Modules+React, however this time working withTypeScript I have this piece of code as an example:  [<-CODE->] TypeScriptis not happy with this expression….let classNames = classnames(styles.Widget); it says ->Property 'Widget' does not exist on type 'typeof import("*.module.scss")'. someone knows how can I solve this issue?? 
solution: 

issue: hi all: [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: hi alli have some code like this : [<-CODE->] It can be seen from v2 that type is covariant, so T04 should be number, but use generic parameters to get an indeterminate type. Compile error: Type '78787' is not assignable to type 'T04<U, UU>'. Hi guys!  Could you anyone answer my question?  [<-CODE->] Is it a bug? Gerrit0: Thanks, I also think it is a bug.But it is very strange that is an obvious bug. 
solution: 

issue: mendrik: you just want the class to be restricted to only have members of MyInterface ?And have an error if there are extra properties ? mendrik: Maybe something like this ? [<-CODE->] mendrik: You can also fake out a base class will all the properties (although at runtime they will not be initialized) [<-CODE->] 
solution: 

issue: is there a pattern for getting from a Map without using the!(which I'm trying to avoid relying on)?  For example: [<-CODE->] Exactly. I tried to wrap it with has. (I am impressed and delighted to find that the compiler is statically aware of context like that. I've wrapped certain things in(x !== null)to find that it in fact does consider that within the block, x shall not be null) 
solution: 

issue: is there a way to create type that would work like this one: [<-CODE->]  [<-CODE->] Well ok so is there a way to make a type that would exclude all nullable properties of other type ?  [<-CODE->] Is there a way to create type that would take that and remove all optional?properties ? Thanks !  [<-LINK->] Something wrong@dragomirtitian type RequiredPart = Pick<Account, Exclude<keyof Account, OptionalKeys<Account>>> // just name and password hereis not working either 
solution: 

issue: fatcerberus: I appreciate you sharing the term "Type Guard" gave me a jumping off point to Google. Thank you! 
solution: 

issue: Aren't they 1:1 though? Besides declaration files, which would make it 1:2, I can't think of a situation where a file will not be emitted for an input file, or an extra file will be emitted 
solution: 

issue: umm actually I think it is okay as is. will just leave the question for reference.. 
solution: 

issue: Hey all, I'm having an issue with tslint marking arguments as implicit any despite assigning an interface to a method. Here is the gist: [<-LINK->] value and iteratee are being marked by the compiler as implicit any despite the interface SalathielGenese: That issue does not touch the issue I'm having Here is a minimal example: [<-CODE->] a and b are being tagged as implicit any when defining the implementation 
solution: 

issue: how do you destructure a param that's an object and has 2 properties e.g.function ({foo, bar}) function whatever ({foo}: {foo: string}, {bar}: {bar: string})I thought it was like this but im wrong 
solution: So, you @SalathielGenese suggest something like that would be better ? [<-CODE->] ??. 

issue: Hey guys, I need some help reducing the build time for a Typescript Webpack build - but I can't profile the build, because the resulting profile recording is too large for any of the debugging tools to read (around 120MB) Does anyone know how to "split a profile" file into multiple parts? 
solution: The chunking is working correctly, all of the node_modules related chunks are nicely packaged up, and separated from my own code, but it seems like there's no sort of long-term caching happening in the builds. My options are just to try to use the DLL plugin to wrap up the node_modules dependencies, and also to try to turn on transpileOnly alongside a forked type checker. 

issue: why does tslint prefer for-of loops even though i use my index? 
solution: 

issue: I'd expect tslint to double the build time, but not increase by that much... 
solution: 

issue: this is what i have right now which seems to be working well:  [<-CODE->] Notice that i do not have catch block forthis.instructionRepository.getByIdsthats becouse i want the error to be thrown my service will catch that and continue working on it i dont want to filter outnotFounderrors from second repository as it should not happen. and if it is, then exception should be thrown. 
solution: 

issue: SalathielGenese: What error would you expect ? SincePropertyis an empty class almost anything will be assignable to it since Ts uses structural typing. Also not sure whatExcludeis meant to do in this case SalathielGenese: this for example reports an error: [<-CODE->] 
solution: 

issue:  agree with you@fatcerberus Writing native EcmaScript code is becoming easier because many excellent team's hard working, v8, nodejs etc. maybe transpiler will not be needed. 
solution: 

issue: Hi, I'm using Vs code with typescript version 3.2.2 and the IDE tell me that the Readonly<type> is not found. Any idea? 
solution: 

issue: Hi all, we want to build a "helper" npm package with TS and publish it cross platform (I mean used from: last node, old node, old browsers new browsers). Are there some guidelines to achieve this? maybe with webpack ? (what I want is from the same TS source compile/build to different targets simultaneously) yes, but I want to have compilerOptions.target to "es6" for last node and last browsers I think Gerrit is refering to some Typescript code that can't be transpiled to es3 
solution: 

issue: ooohhh ! good idea old browsers don't have module support... must I set some compilerOption to this? in the tsconfig.oldest.json 
solution: 

issue: Wow you're amazing@SalathielGenese. I've learned a lot about Typescript these last couple of days thanks to you :D 
solution: 

issue: Man I'm angry, I hope someone else is not burned by this: [<-ISSUE->] 
solution: 

issue: Given the following, [<-CODE->] Would someone explain to me the reason why the next decorator signature will be accepted while the other will not ?(next) [<-CODE->] (other) [<-CODE->] 
solution: 

issue: I can't let this go! I just need TS to trust that I'll always provide a generic type and if I don't it can error instead of inferring the type, but it, doesn't do that. [<-CODE->] It insists that listener is IListener["onAction"] OR IListener["onDisconnect"], but I'm providing "onAction" as Tk, so it should be able to infer the type of Tl to be IListener["onAction"] [<-CODE->] 
solution: I don’t know if that makes sense - unions are naturally flat already (i.e.|has the distributive property) andnevers just automatically cancel. 

issue:  [<-LINK->] 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] fatcerberus: Why do you put $ after your function names? 
solution: I suppose that's probably it, you can still have type safety inaddEventListenerif yourlistenersobject stores any allowed function, external users don't need to know. It's what I did in [<-LINK->]. 

issue: Record<keyof typeof listeners, typeof listeners[key][0]> im saying Record is the short-hand for what you have oh sorry wait no its not 
solution: 

issue: Yeah.nullandundefinedare so tricky. I'm still trying to figure out some clean ways of indicating what their semantics really are in my code. 
solution: 

issue: Hi, When using import types typescript throws an error: [<-CODE->] Why does the error occur ? SalathielGenese:  [<-CODE->] 
solution: @Gerrit0 You have a ‘-‘ in the first index signature in [<-CODE->] I have seen this before, but never found an explanation.  It’s really hard to google that - what does it mean?. 

issue: Distribution is really useful when used directly but it doesn’t seem to compose well 
solution: When I asked the other day about the reason why JavaScript is so well structured, I intended to ask the day if TypeScript rand under same LTD (I just crfted Long Term Discussion). And I don't mean just feature discussions (I know what they look like) - NO. I mean discussion over distribution (as the case of @keithlayne ) or functions and classes  covariant/contravariant/bi-variant things.It seems to me - may be I'm not well informed - that they discuss it in a restricted team at Microsoft and am frustrated that they don't think it worth to ask us beforehand, to hear from us, to let us contribute to it. After all, are we not the consumers (and contributors) ?. 

issue: Thank you@ShanonJackson 
solution: I've been seeing people asking react questions here... Is it bad to ask it here ?Because I'm learning react today and am currently in practical with a real app to see how much I am good at it.And I have a big problem - Click on the links (in navigation menu) more than once to see to see http://35.227.106.236/. 

issue: SalathielGenese: your issue is inNavbar entries.splice( 0, 1 )[0];<-- splice changes the array 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] Property '__children' is incompatible with index signature. 
solution: 

issue: SalathielGenese: Thanks! I'll give it a try. Can I constrain T to and index type, though? Values should bestring | number | null On mobile right now and can't edit the playground code ... I mean the values of T keys, not T itself 
solution: 

issue:  [<-LINK->] Hi guys. Can anyone explain me why this is throwing an error? 
solution: if I change toIStateProp<Type extends IAnyType>it works. Seems like if I assign a typeType = IAnyTypeits not really assigned. 

issue: Your first case can be made to work via: [<-CODE->] 
solution: 

issue: How can I make sure a property can be modified only within the save method? I tried this: [<-CODE->] I see I would like to make sure noone modifies property directly..Always the save method should be called, any ideas ? 
solution: 

issue: Thanks, I learned something new today, though I think I'll avoid actually using that because it seems like a huge foot bazooka 
solution: Well, a private property is always private and lexically cordoned off inside its class - if anyone can remove the privacy at will from outside with a type alias that seems like a recipe for disaster. 

issue: hi import  jpg from './leaves.jpg'shows up read in my vscodei have it defined in webpack to be intercepted by afile-loaderso it will compile ok, but how do i make vscode IDE not mark it as error i need some help with this hello, someone help 
solution: 

issue: yes it is possible to Omit the index signature from a type, you just need to use the old type to construct a new type without a index signature yeah sure 1sec almost got it sorry enjoy  [<-CODE->] Its also possible to write a generic "RemoveIndex" type pretty easily based on this martabrzeszczyk: let me know if it doesn't work for you 
solution: 

issue: Could anyone help me explain why the following code seems correct, though to me it seems like it's not? [<-CODE->] returning a string here compiles and runs though I tell it that it should be a void method SalathielGenese: that's exactly my point, the code is wrong but it doesn't give me an error to me it seems like a bug 
solution: 

issue: ShanonJackson: seems to work typetasticHow long does it take to learn writing such types? 
solution: sit in gitter long enough you just pick this stuff up, i'm no expert. 

issue: ok :)  [<-CODE->]  [<-CODE->] ? 
solution: it has to be undefined, because it has to treat is an arrow function,and you also want it to be treated as an arrow function because at the moment you're relying on your target always being ES5 because if it ever goes to ES6 the result will change. 

issue: That makes sense, if honestly be more surprised if they didn’t respect the function scope 
solution: SalathielGenese: @erwinheitzmanIt all boils down to function compatibility. Is()=> stringcompatible with() => void? Under the TS type sistem they are. Someone calling()=> voidwill not use the value, so if the actual implementation signature is() => stringthe returned value will remain unused and no harm should come of it. In generalimplementsjust checks whether the interfaces in the clause can be assigned from the defining class,implementswill not be very stricter then an assignment.. 

issue: ahh ok oh my sweet jesus that gist 
solution: 

issue: Learned some new stuff tonight... First, if tsc outputs declarations, they might not look like what your input file had And a new strategy for conditional types: put extra conditions on the RHS instead of constraining input type params tsc was type checking successfully but outputting types that didn’t typecheck @rhys-vdw I don’t know if you did this on purpose, but some of your nested objects can error on null values like so in your gist: [<-CODE->] Hope that makes sense. :) Although you would have noticed immediately if it applied in your case. 
solution: 

issue: i dont understand 
solution: 

issue: hello everyone, i want to ask how to get all properities from a react+ts component, it's properities define in an interface I want to display all of these component properties on the interface, visually configured. But I am using an open source component library 
solution: Mouvedia: Because there is no way to excludeundefinedfrom the domain of a type unless strictNullChecks is enabled.  This is a limitation of the way the type system was originally designedand is exactly why strictNullChecks was added.The default behavior can't be changed without breaking backwards compatibility.  What you want to do isalready supported: enable strictNullChecks.  I don't know how much clearer I can make this.. 

issue: I structure project following my loved experiences with Spring Framework and Symfony. Bundle you browser app using WebPack - there is norecomendedtool for that. 
solution: 

issue: Why isarray[0]not assignable tonotAssignable? [<-CODE->] fatcerberus: Yes, exactly. I cannot see what I am missing 
solution: 

issue:  [<-LINK->]  [<-LINK->] Why not justexport const? 
solution: 

issue: because it’s not const. 
solution: const.. then const.. everything exported should be const, if its meant to be mutated you still can with a const by copying it into a new variable. there's no value in having a let export compared to const. I must be thinking stupid, because I can’t see how that would work in this case.. 

issue: fatcerberus: Thank you for the answer about the incorrect error message regardingType 'string | number | symbol' is not assignable to type 'string'. 
solution: 

issue: this will work I think: [<-CODE->] 
solution: 

issue: dalevfenton: OPERATORSshould probably be an enum, and then you'll also have theOPERATORStype which is'+' | '-' | '*' | '/'for free. [<-CODE->] 
solution: Is there any good pattern for saying a string can be one of a known set, or a custom one? For example(param: "foo" | "bar" | string)just becomes(param: string)... which makes sense, but"foo" | "bar"are useful to know about. 

issue: I'm trying to make a type for a function that either has one or two arguments.  I came up with this: [<-CODE->]  [<-CODE->] Very interesting, thanks.  Any ideas how I represent what I want? I have reducers that don't take an action.  I tried makingaction?optional but then it complains everywhere that I'm not guarding against it possibly being undefined. Oh sorry you just gave me an example. 
solution: 

issue: Yeah, that makes a lot of sense. I'm thinking more about code drift internally. But I'm not sure it's a real problem. Just one that came up in my mind.  At the moment I'm letting inference do its magic. 
solution: It’s easy to do it wrong too.  At my last job I built up a team and instituted semi-mandatory code reviews on pull requests.  The team got too big for me to review everything, which shouldn’t have mattered.  But if I didn’t, the rest of the team would make a few comments about unimportant things, make some changes, and merge.  Nobody was looking at the bigger picture and asking ‘why did you do this crazy stuff?’.  I screwed that up.. 

issue: Hi guys. If someone experienced in recursive types is interested, can you please have a look at this: https://stackoverflow.com/questions/54243565/typescript-how-to-achieve-a-recursion-in-this-typeI would be very grateful even if this recursion can be achieved with some sort of hack. Thank you in advance. I mean I know it is possible to do recursion with interfaces, but I can't wrap my head around it 
solution: 

issue: yet another reason for me to avoid JS classes 
solution: But yeah, if you’re targeting ES5 I don’t recommend extending builtins as it will probably break in weird and wonderful ways. You probably need the React types available, but I don’t know if imports can be used in this context.  I’m sure someone will correct all the mistakes I made.. 

issue: I'm trying to add a typescript definition file for a subset of this library that my project is using, but I can't get the syntax right.https://github.com/amplitude/react-amplitude/blob/master/src/index.jshttps://github.com/amplitude/react-amplitude/blob/master/src/components/Amplitude.js [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: where can I find this setting?  [<-LINK->] in tslint.json? ctrl+will increase the size 
solution: Or just open settings however you do it through the gui, I don't actually know. 

issue: Hello everyone, do not tell me ..how to implement it: [<-CODE->] how to implement this type?) 
solution: 

issue: keithlayne: Thanks for the assist. I'm a bit closer now but I'm having trouble with some elements of the Amplitude class. [<-LINK->] I'm not sure how to defineinstrumentsince it appears to be a member of children and a class method? My current gual is to mark it asany,because I just need to get it defined so that we don't have typescript errors and I can't figure out how to do that. Ideally I'd define it accurately as well, but that's a secondary goal.This is what I have right now, I'm grasping at straws a bit: [<-CODE->] Follow up question that might be easier:How do I markinstrumentin this example asanytype? [<-CODE->]  [<-CODE->]  [<-CODE->] I feel like this should be simple... but it's not. Or at least I can't figure it out 
solution: 

issue: given the following code, is it possible to access the'a2'argument to@decorator('a2')as a type? [<-CODE->] 
solution: 

issue:  [<-LINK->] hi guys, I would really appreciate if someone can explain why this error is happening :( I'm starting to guess what I'm trying to do is not even possible, actually I'd like to pass a customStateandSerializerfor theAllowCustomSerializer, and access a specializedAPIdefined by a specializedSerializer<State, API>, like this: [<-CODE->] ellipticaldoor: this seems to work: [<-CODE->] I've only got this far with myState/APIissue  [<-LINK->] 
solution: 

issue: Hi I will like to access to the value of a key in an object using a union type  [<-CODE->] But this{ [P["key"] in LoginActions]: any }is wrong endel: thank you! it works now Im trying to make a generic  [<-CODE->] But now I getType '"type"' cannot be used to index type 'A'. 
solution: endel: yes, that works, but Action needs to also allow the keys that are allowed in the actions. 

issue: alisabzevari: that's because argSpec is{ "--listen": ((str: string) => (string | number)[])[]; }- notice that it's an array of functions, not a tuple with one element cyrbon: it's probably better to constrainKtoStringKeys<T>.. looks like you still need a cast unfortunately. [<-CODE->] The object literal works because TS knows you are passing at least one element in the array alisabzevari: You could just say [<-CODE->] It does seem really weird to have spec acceptstring | Handler | [Handler]... you can't pass anything extra with[Handler]than you can withHandler, maybe it was supposed to beHandler[]? You will need to have esModuleInterop turned on for that I'm pretty sure 
solution: 

issue: I'm not sure what ~2.9.2 resolves to 
solution: 

issue: I think the typescript in VSCode is only used for intellisense etc.  If you run tsc on command line it's whatever you've installed with npm 
solution: 

issue:  [<-CODE->]  [<-LINK->] 
solution: 

issue: I'd think ChildClass2 is just re-assigningfoo, based on the fact thatParentClassalso has it. And ChildClass1 just passes it up to the ParentClass constructor. Are you seeing a difference in behavior? Even if you hadpublic readonly fooinstead ofpublic fooin ParentClass, it would still work because of how Javascript works at runtime (unfortunately TS can't protect you from runtime semantics, but I'm surprised this isn't a compiler error). The exception to this is if you haveset foo()in the superclass andconstructor(public foo)in the subclass- then you might get bad side-effects. For instance, this fails: [<-LINK->] 
solution: 

issue: aaronbeall: I hit this same issue the other day. Would be cool to have the support. 
solution: 

issue: Hi all. I have a function where a param may be a string or undefined, but then a validation check that throws an error if it's undefined. Any further code is guaranteed that the param is defined, but I'm now fighting against the TypeScript casting of it potentially being undefined. What's the nice way in TypeScript to deal with this issue? [<-LINK->] 
solution: 

issue: Does anyone remember a page where it had a table of TypeScript concepts vs skill level? I can't find it now and I am beginning to doubt it ever existed It was fairly comprehensive and had things like "Language Service Plugins" at expert level 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: As far as I can tell, you are misusing/misunderstanding generic.Question : What would you do with the following if it were possible ? [<-CODE->]. However, you may write a functionwithStudentSomething()that does what you want. You code could be [<-CODE->]. 

issue: Hi! I'm trying to understand why version 1 & 3 doesnt work: [<-LINK->] is this maybe a bug? Seems like genericFnshould be at least compatible with(...args: Parameters<Fn>) => ReturnType<Fn> 
solution: 

issue: hello guys it seems that I can't use the same variable name in two separate ts files I get an error  [<-CODE->] why is this happening? ? should I paste here my whole tsconfig.json? 
solution: Yeah, it seems like TypeScript treats a file without an import or export as global code. 

issue: That’s weird - TS uses modules so “global” variables should actually be module scoped What is yourmodulevalue set to in tsconfig.json? 
solution: I haven't touched it. it is "commonjs". Then yeah that should definitely work. Hmmm. 

issue: ESM is fully supported in my miniSphere engine and is the recommended way to write code for it This is why I find TypeScript's behavior surprising, it treats code as global whenever it has no import/export but actual module systems don't make this distinction at the syntax level - it's up to the host skiabox: I think the only real requirement for node.js development is thatmoduleshould be set to "commonjs" targetwill depend on what ES level the minimum node version you want to run on supports 
solution: 

issue: Hello, does anyone know why this doesn't work? [<-CODE->] which, mine or the other person's? but i still see the error in the TS playground? oh is 3.3 not released yet? 
solution: 

issue: I am trying to write a .d.ts file for a pure js module. However there seem to be many possibilities, so I am not sure which one to use. Is there a guide somewhere? I only could find one for contributing to @types.Also I had some troubles using an enum in the declaration file, since I only want to declare one, but my js module does not export one. I am trying to write a .d.ts file for a pure js module. However there seem to be many possibilities, so I am not sure which one to use. Is there a guide somewhere? I only could find one for contributing to @types.Also I had some troubles using an enum in the declaration file, since I only want to declare one, but my js module does not export one. 
solution: 

issue: I have a TypeScript project with strict mode. VSCode properly identifies an import as "declared but never read" but when I actually build my project, tslint andtsboth run without error. How can I make this kind of thing a blocking bug in my build? 
solution: 

issue: Andarist: By sibling types I wasn't referring to any special TypeScript thing.  It just means two classes that both inherit from the same base class.  It's a sibling relationship rather than a parent/child relationship.  The siblings are not assignable to each other but both satisfy the hypotheticalextends BaseClassconstraint So if you have a signature like<T extends Base, U extends Base>, people sometimes expectTto be assignable toU(or vice versa) but the compiler can't guarantee that's sound until the concrete types ofTandUare known, so it produces an error Yeah, no, that’s really tricky and the language service isn’tquitethat intelligent 
solution: 

issue: I've set up my lib like this:"lib": ["dom,es5,es3,es2015"]but it screws up everything is there some catchall that includes everything you need for web dev? { 
solution: Two things: 1)es2015should automatically include everything from earlier versions and 2) Shouldn't that be[ "dom", "es2015" ], i.e. individual strings for each library. 

issue: thx 
solution: 

issue: does anyone know why TS can't infer the correct type in the last clause of ConditionalProps?I get the following error: [<-CODE->]  [<-CODE->] 
solution: 

issue: what isT? Or is there one? nevermind Don’t know why it doesn’t work, but this will: [<-CODE->] 
solution: 

issue: ok, so the extra check that ends with never fixes that initial error but when I try to use the type I get another error in the component at the <TestComponent<T> /> line at the bottom: [<-CODE->]  [<-CODE->] 
solution: 

issue: It's because that code was just posted just with triple backticks without a language tag I'm guessing whatever syntax highlighter gitter uses thinks it's JavaScript And if highlighted as JS, that looks like a label 
solution: 

issue: Why can't I do this: [<-CODE->] And what is the way it should be done? 
solution: 

issue: works perfectly! How can I make sure that a module is loaded even if it isn’t used? It needs to register itself via a decorator fatcerberus: That is what I am seeing. I’m trying to figure out why my fancy new decorator isn’t working.. 
solution: 

issue: Just watch out for [<-ISSUE->] 
solution: 

issue: Hi guys. Anyone knows the answer to this? [<-LINK->] BTW I don't know if it is ok to post SO links here, so tell me if it's not. 
solution: 

issue: any idea how to use thefs/promisesmodule from NodeJS 10+ ? I triedimport { readFile } from 'fs/promises';but no luck. I have@types/node@10.12.18installed This works but I was hoping for a more specific import [<-CODE->] 
solution: 

issue: citycide: looks like its not inferring the return type 
solution: 

issue: is there a reason why tuples can't be named? E.g.[ priority: number, data: Object[] ]... is it a gentle nudge towards using objects instead? 
solution: 

issue: Hello everybody,Need your help, please, to understand this error  [<-LINK->] Here's the complete file [<-LINK->] While I tested this which works great - [<-CODE->] Am I just unlucky today ?  [<-LINK->]  [<-CODE->] Sorry, :I missed the method name Not actually the wrong message but could be better Thanks@konstantinblaesi Much thanks@dragomirtitian Isn't this behaviour relevant enough to be part of a paragraphe or two in docs ?Awesome@dragomirtitian- It works great... I'm still afraid how this question came to my mind, I think React ordering could not permit this but I want to ask and make this clear at once. [<-CODE->] 
solution: 

issue:  I'm totally stumped on this error... anyone have a clue? [<-CODE->] The reason I'm trying to use an interface forITaggedElementis so I can recursively useinterface ITaggedElement extends TaggedElement<ITaggedElement> {}next... just trying to debug this first step 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] dalevfenton: thatnks that works... can you explain me how? ... im totally lost 
solution: 

issue: Is there a way to write a type-constraint that allows the widening of a type union?In other words make this work: [<-CODE->] 
solution: 

issue: I have some Ramda code that I can't seem to get TypeScript to not complain about: [<-CODE->]  [<-CODE->] 
solution: 

issue:  i don't have a setup with ramda installed to reproduce but looks like ReadonlyArray<{}> is being caused by a generic not being inferred adrice727: what does flatMapIndexed infer to? 
solution: Yeah, it's just strange since every other part type checks fine, except the actuallyattrRowsvariable.. 

issue: does this work?@aaronbeall [<-CODE->] 
solution: 

issue: aaronbeall: This also works, I put the names last to use rest parameters to infer a tuple type: [<-CODE->] Or the curried function aproach : [<-CODE->] aaronbeall: Although tuple mapping works since 3.1 I think, the compiler is not convincedK[P]extendskeyof T, soT[K[P]]raises an error without the seemingly redundant check 
solution: 

issue: ShanonJackson: yeah, 3.2 is busted Hey, I think I've found a TypeScript bug... Or there's something I don't understand Code: [<-CODE->]  [<-LINK->]  [<-CODE->] But this is the weird part If I change the syntax fromonManageLink()toonManageLink: () =>then the error disappears!  [<-LINK->] No idea how to reduce this down, but I just thought I'd get a sanity check... These should be the same right? 
solution: Hmmmmmm, i mean typescript is structurally typed which means arrow functions and functions that have the same signature should have the same structure therefore typcheck the same. 

issue: I believe the way to do that is to have multiple entry points in your TS - and have the rest of your code accept the WebSocket / navigator to use from the entry point. Something like this: [<-CODE->] If you want to use es modules, you can't conditionally require stuff. So multiple entries is required 
solution: 

issue:  [<-LINK->] 
solution: thejohnfreeman: - You can't do it that way. When you build a example to showcase an error, you just put the minimal required code. Since it is not long and aim not to be complex, you ought to merge all the code into a single file like.. 

issue: Often modules extend other modules, and partially expose some of their features. A re-export does not import it locally, or introduce a local variableI need to both import (to use within the file) and re-export (because I'm merging declarations). How can I do that? The problem cannot be demonstrated with just a single file, because it only manifests with imports and re-exports. I put it up on SO: [<-LINK->] dwelle: I tried that, and for some reason could not reproduce my error with the same code. Since I can't see what version of TS it's using, or how it's run, I gave up  [<-CODE->]  [<-CODE->] that's the whole file to make that error  [<-CODE->]  [<-CODE->] I think I described all this in my SO question 
solution: 

issue:  [<-CODE->] Oh wait, it'sexport { foo } My bad Then yeah, based on that error message it looks like it's indeed not allowed - in general you can import for local use and re-export the same thing, but apparently that doesn't play well with decl merging It looks like it might be the same case as this: [<-LINK->] 
solution: 

issue: Modules can import themselves, you could do something like this: [<-CODE->] Then your mocking will work as expected. 
solution: 

issue: Casting doesn’t physically remove properties, it just tells the compiler it’s a different type It has no effect at runtime 
solution: 

issue: Yeah, it's a known limitation in control flow analysis.  There are a ton of issues about it actually Workaround is to declare the field asval!: Any 
solution: 

issue: I find webstrom too slow too. Runs into memory issue and die many times. In company, you don’t have much choice on your hardware. 
solution: 

issue: One thing I notice is that you havePromise<Error | undefined>Unfortunately,Promise<T>does not describe reject type, only resolve type. jamesrusso: AvoidPromise<void>. I don’t recall the actual example but it can mess up your type. 
solution: 

issue: Hello, can anyone help me understand why hasOwnProperty does not work here: [<-LINK->] ? I would expect "correct" to be printed because the propertybardoes exist inFoo But that is not what is happening 
solution: 

issue: There is sometimes good reason to have private members in typings - e.g. to avoid subclasses accidentally overwriting it with the same name property of their own 
solution: 

issue: You can implement a class, it just probably won't work as you want if you have non-public members... [<-CODE->] 
solution: 

issue: how to correctly type this line? [<-CODE->] my linting is compleining about TSLint: Type assertion on object literals is forbidden, use a type annotation instead. (no-object-literal-type-assertion) ShanonJackson: yeah, but this way it is not type safe :( i mean, my IDE doesn't hint me types and properties 
solution: 

issue: anyone know if there's a way to set the context of the 'this' keyword in a type definition? I've tried things likevar this: MyThisbut I don't see the intellisense show up in monaco editor like my other type definitions thanks@aaronbeall- I don't think this works for my situation though. is there a way to set thethiscontext outside of a function? 
solution: I pass in a custom this context via function.call(). 

issue: hm, I'm not sure that would work for my use case. more info here - [<-ISSUE->] 
solution: 

issue: Hi! How do I fully type a node-style callback? This doesn't work: [<-CODE->] oh right ok Nope, this doesn't either: [<-CODE->] This doesn't error, but it doesn't type theresult [<-CODE->] 
solution: @qm3ster  If you are looking to infer parameter types when you create a callback, this will work: [<-CODE->] But what it will not do is create any sort of link between the error and the result, so if you check for the error the result will not become !undefined, this version does that but is syntactically ugly: [<-CODE->]. 

issue: fatcerberus: agree 100% but it is what it is.  We can do a decent job of converting callback functions to promise functions in the type system these days ...(if generics and overloads are not involved that is) 
solution: 

issue: queen_emmacool queen_emmaohhh nice queen_emmaeh queen_emmait is either a bot, and is here to annoy us (because spoiler alert: that's what bots do) or its some one trying to troll bots 
solution: 

issue:  [<-CODE->] I tried: [<-CODE->] However this gives [<-CODE->] 
solution: 

issue: ForHandsonTableit looks like you'll wantexport =since their bundle doesn't export as the.defaultproperty 
solution: 

issue: hi, has anyone tried getting typescript running with bootstrap 4 and webpack 4? I'm concerned that typings-for-css-modules-loader may not be able to work with bootstrap 
solution: 

issue: const test: [number, number] = [0, 1] fixed length = tuple not array but tuples behave like arrays use enums is atleast 1 way to make those strings get the correct type  [<-CODE->] 
solution: 

issue: Is there any way to prevent type widening, other than assertion? I have a function like this: [<-CODE->] But I can't use it the way I want without redundant assertions: [<-CODE->] Which is annoying because you can assert any sting to any literal, so its pretty pointless: [<-CODE->] Can't in this case Well... maybe I can Yeah, but I can't change the type ofColor Yeah, seems to work: [<-CODE->] But... would really rather not have to define enums for this, is there another way? 
solution: and i think it's inferred as string so people can mutate it without typings errors. 

issue: dragomirtitian: @fatcerberusThanks - I posted on SO too and got similar answers ( [<-LINK->] ). I haven't tried them out yet, but looks promising. Thanks! 
solution: 

issue: adrice727: 1sec i got you fam  [<-CODE->] 
solution: 

issue: SalathielGenese: I would expect it to not have an error and allow for deeply optional properties. SalathielGenese: thanks! I ended up using aDeepParitalto get it to work I'm still struggling with this though [<-LINK->] Anyone have aDeepMergethat isndeep? 
solution: I surely have one or two ideas but want to hear from you, if your conception is different.. 

issue: ShanonJackson: I missed your message yesterday. Thanks for the help (once again). 
solution: 

issue:  [<-CODE->] I now have this in place: [<-CODE->]  [<-CODE->] Follow-up question: is there any way I can reference the typings from puppeteer from [<-LINK->] instead of duplicating them myself in my typings definition? 
solution: SalathielGenese: If I doconst puppeteer: puppeteer;in my definition file I get this error: Cannot use namespace 'puppeteer' as a type.ts(2709).. 

issue:  [<-CODE->] jesus that took me ages sorry@am17torres that second one does the trick c doesn't have to have union for it to work either just the "?" will work 
solution: 

issue: is there a way to get this to work properly? i've tried two ways [<-CODE->] i would like calls topropto fail at compile time if the given key doesn't exist intypeof a dragomirtitian: thanks, that's great! the inference seems a bit off due to the currying, but at least it's compiling 
solution: 

issue: You can reverse the way you think about it a bit, not thatKis akeyof A, but ratherAhas a keyK:  [<-CODE->] mrdziuban: ^ 
solution: 

issue: dragomirtitian: - I tried to [<-LINK->] and found that the error you got isn't related to that part [<-CODE->] 
solution: 

issue: I have a route defined with an anchor tag outside my application... the first time I click this route my application doesn't actually navigate anywhere... but clicks to other locations will actually navigate... I know that's kind of vague but does anyone know why this might be happening? it happens when I'm on route#/and try to go to route#/somewherealmost like the application thinks it's already on that route and no navigation events are generated. it actually doesn't matter where I go on the first click... it can be#/placeAor#/placeBit's only after I click and end up at#/placeBthat clicking#/placeAfrom here actually navigates anywhere I'm thinking this is an actual issue with the router unless I missed something On thing I've noticed... is that A. I refresh and it seems like my route is lost?I have [<-CODE->]  [<-CODE->]  [<-CODE->] This doesn't seem correct. 
solution: 

issue: just assign it to something with the expected type I.E hold on i mean yeah even in its simpliest form just anything that causes compiler error if the type of the thing your testing doesn't match an expected type  [<-CODE->] or... the full solution..  [<-CODE->] reggi: hope that helps. 
solution: 

issue: Is there a way to declare a type in Typescript so I can use it without having to import it, for exampledeclare type Dictionary<T> {[key:string]: T | undefined}and then use this in my code without having to use imports? 
solution: 

issue: Hello guys,Any HTTP way I can query ALL TypeScript versions ? Even *-rc ? Our loved [<-LINK->] is handy until you want to discuss and upcoming feature. I don't know that tool but the error suggest there are other import(s) after code (i.e not at the top). Try to comment all files but top import, and we expect that error to disapear Weird I have and hypothesis :  maybe your typescript code is wrapped in another JS code before being executed !? Can you check with code is actually executed ? QUESTION : is it a runtime error ? Check what actually runs in browser  
solution: 

issue: recently started with js and that xkcd was the forst thing came to my mind 
solution: 

issue:  [<-CODE->]  [<-CODE->] And i get the following error, no matter what i try i can't find a way to fix it, any ideas? Thank you! [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->] 
solution: 

issue: the types don't match on that "(" jweaver-personal: looks like a problem with the typings in apollo-cache you can't fix this without making  a pull request to their repostiory with the fix however you can silence it by adding this to your tsconfig "skipLibCheck": true Mmmm { map: typeof Entity; } is not assignable to { map: PrimitiveType; }'is the simplified error 
solution: 

issue: realisation: My parents chose it for me, so did not have much to do with it, it's after the [<-LINK->] . Used to hate it but I like it now, makes me easy to google :P rhys-vdw: Is this similar to [<-LINK->] ? pbadenski: I have tried to find the issue but can't, but I am pretty sure I read that such simplifications can happen for primitives. Consider using for branded types [<-CODE->] pbadenski: type assertions ..   just assert it into being ;) I don't have a refernce article for this.. just a couple of SO answers.. 
solution: 

issue: I find the latter more readable as my desire is to put the variable to the left of the operator.  And then I tend to parse it the way the JS engine does,0 <= averageis true and thentrue < 10which is nonsensical Guess I’ve been programming so long that I think like a compiler 
solution: 

issue: It would be quite nice to be able to go e.g.0 <= fun() < 10and have the function only be called once though I admit That involves source maps and how to set it up would be specific to your debug tooling, I’d think Should work seamlessly in VSCode though 
solution: 

issue:  [<-CODE->] question inside code bothkeyof Record<string, string>andkeyof { actualKeys: any }extend string  [<-CODE->] Not even this works 
solution: TIL that leading|in a type union is valid syntax. let x: | number | string = 812;. 

issue: SalathielGenese: Oh I see I just needed to use MORE conditional types :D Nice But I'm already here with my next idiocy!  [<-LINK->] Looks like this: [<-CODE->] It understands that in the rest of the functionarg[0].statusis a strict1 but doesn't understand that for the whole loop we have the second array, not the first tuple I don't even understand why it doesn't, not just looking to force it.  [<-CODE->] I guess this isn't too bad :/ 
solution: 

issue: hi guys . :Wave  whats the difference between [<-CODE->] and [<-CODE->] cause im getting tslint [<-CODE->] when i write the function, in my interface,  it like this: [<-CODE->] it does pass tslint kinda hard to find the differences :s  
solution: 

issue: Hi!I try to extend an interface of a library but without success :(Help me please! [<-CODE->]  [<-CODE->]  [<-CODE->] Try to: [<-CODE->] but it does not help 
solution: 

issue: Hi! Does anyone know how I can write a definition for an interface that extends a stream and add my own event on top of it?This is what I currently have: [<-CODE->] But it results in an error: [<-CODE->]  [<-CODE->] @ShanonJackson thanks for pointing me in the right direction :) [<-CODE->] ShanonJackson: ah okay, I think I understand. Would I then also copy the original stream.Transform definitions ofononto the new interface? [<-LINK->] 
solution: 

issue: lindem: I'm sorry, that not possible  [<-CODE->] My pleasure - [<-ISSUE->] gkze: - It is not because a function is not marked asasyncthat it issync. For instance,Promiseare async by definition. You callresolvewhen everything ran well. If there's any value resulting of that successful process, you can pass it toresolve rejectis the callack to call when something wrong happened.  If any value (number, string, error, object) describe that error, you can pass it as parameter to reject. 
solution: 

issue: Bnaya: not right now but see [<-ISSUE->] 
solution: 

issue: Bnaya: ,@fatcerberusyou can do that by treating the tuple as function arguments: [<-CODE->] That will depend on what the lib's declaration file looks like Something like this should work: [<-CODE->] 
solution: 

issue: dragomirtitian: thanks, that helped me a lot :) 
solution: Prior99: you are welcomed but use at your own peril :) it is a bit of a lie on out part. 

issue: @jacobmadsen  why not [<-CODE->] link 
solution: 

issue: hey, I am looking for some advice on how I can achieve this: [<-CODE->] SalathielGenese: alright :) SalathielGenese: what I am looking for is for "a" and "b" to show there: [<-LINK->] 
solution: basically, I update the object using update() method, and it should dynamically know the new keys in the object. 

issue: Need some help [<-CODE->]  [<-CODE->] 
solution: 

issue: nionis: - Here the improvements [<-CODE->] 
solution: 

issue: its because its running to toJSON method on the date object toJSON implicitly executes on any function that has a toJSON method maybe date.toString() then after that run it through JSON.stringify so then it will run strings toJSON not dates toJSON no idea if that will work but in my head that should 
solution: 

issue: ShanonJackson: can you please explain it to me? I am not getting it. ShanonJackson: Thanks Mate! 
solution: 

issue: Hi, is it possible to get the value of dataset and label from .ts in chartjs? here is my code  [<-CODE->] 
solution: 

issue: Hi, trying to recreate this compilation error I'm getting with react: [<-CODE->]  [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] nickmessing: are you sure you are not looking for function overloads ? Which can be built fromF1andF2using an intersection type (F1 & F2)  [<-CODE->] 
solution: Yeah, union to intersection is about the best way to do it that I know of as well. I actually asked theUnionToIntersectionon SO for this exact reason, wanting to convert a union of functions to an intersection. 

issue: I'm looking at adding a 'passthrough' for property access on classes to some other object (which may onthis).So you could have something likeobj.prop_not_in_obj_but_in_sub_objresolving intoobj.sub_obj.prop_not_in_obj_but_in_sub_obj 
solution: 

issue: Hello guys,When it comes to packages that are to be published to npm repositorypublicly, does it matter to pay attention to package-lock.json over yarn.lock ? I personally prefer yarn but someone I work with on a fresh public repo argued that it was useful to note that the vast majority npm packages uses npm (not yarn) But thanks for insights@Gerrit0 
solution: 

issue: You can't. Which makes your problem unsolvable.... 
solution: 

issue: how do I get the complier to stop throwing errors for decorators? I've followed the documentation exactly, and set the flags on tsconfig, but still get the error  [<-CODE->]  [<-CODE->] tsconfig.json [<-CODE->]  [<-CODE->] dragomirtitian: any ideas on how I can kickstart the complier? I restarted my pc and that didn't help is there a cache I need to invalidate? 
solution: if you specify the files to the compiler then tsconfig is ignored you need to specify any options in the command line. 

issue: spkellydev: that should work, probably it's not picking up the tsconfig you expect it to 
solution: 

issue: you can transform es6 to another module type if you need 
solution: I wrote this a while ago, you can feel free to use it if you want - [<-LINK->]. 

issue: Hi I 've this: [<-CODE->]  [<-LINK->] for login_started errorKey dont show error, but in login_failed errorKey isn't accepted, why this only work if I "force" the return type in login_failed and don't honor the interface definition that says what the return type is? 
solution: 

issue: hey, this is my first time contributing to the typescript library. could you guys please help me out in reproducing this issue? please see my comment here on the issue. thanks [<-LINK->] 
solution: 

issue: i'm a bit confused why this code compiles [<-CODE->] can i pass an "instance" of never to a function expecting any other type? okay, so as a follow up, is there a way to have a function override that is not callable for certain parameters? e.g. [<-CODE->] i would like the call togetAttrto fail to compile if"unsupported"is passed 
solution: 

issue: You're on the track... I wantparametersto beoptionalfor both constructors and static methods( not properties ) 
solution: 

issue: The problem is that one day you'll expect it to be union and it will not be. Check@CyrusNajmabadicase above 
solution: but, in tihs case, because it happens in one path, it causes very spurious types of errors. 

issue: It seems like it's a pretty thorny issue based on the back-and-forth there Based on this I'd say there's an element of tech debt here - someone maybe arbitrarily decided to make it a union at first and that wasn't a problem but now we have union distribution and can't change it without breaking existing code This comment is pretty illuminating and is in line with my "number as union" comment above: [<-CODE->] 
solution: 

issue: Taking the discussion from :here's what i'm trying to accomplish. Say i have the following two types@CyrusNajmabadi [<-CODE->]  [<-CODE->] For simple use cases such as yours @CyrusNajmabadi , it doesn't make much differences between [<-CODE->] and [<-CODE->] 
solution: 

issue: It beging a bit complicate to find a google answer to it, maybe it is wrong from the base [<-CODE->]  [<-CODE->] okay, I got it seeing the declared interface the second parameter is of typeMatDialogConfigand it looks like  [<-CODE->] so.. ..dialog.open<MyInterface>(param1, {..should do the trick uhm works but not very handyconst dialogRef = this.dialog.open<MatDialogConfig<SectionFormData<LocaleCountry>>>(SectionFormComponent, {... 
solution: 

issue: SalathielGenese: this seems to work [<-CODE->] 
solution: 

issue:  [<-CODE->] because how to define it are the same, but were and how they are used are not the same 
solution: 

issue:  [<-CODE->]  [<-CODE->] Would convert it into: [<-CODE->]  [<-CODE->] 
solution: 

issue: Hey nice people! Given this working dummy example: [<-CODE->] Why can't I declare themakeNoisemethod as static? 
solution: 

issue: Because that isnt an 'animal' class. Typescript wont let you do that, because there is no way that the static method could change at runtime by being extended The method inAnimalis suited to being a static member ofDog stavalfi: It would be 'hi', which seems to be treated as the string prototype bykeyof 
solution: TomSputz: Humm... And there's no way around that? I have a bunch of concrete classes, each with it's own custom interface, and I'd like the abstract to provide a static method with the same logic to all of them, I could copy+paste that static method in all my concrete classes but feels a bit redundant.. 

issue: Type inference won’t work for a typecast since the cast is just an override mechanism I don’t think it makes sense for the compiler to do any magic in a case where you’re specifically telling it what to do Type parameters are only inferred for function calls and (I think) constructors 
solution: 

issue: I'm reading it right now! thanks. its funny I've been using Quokka for about a year, and here pops up an article that explains the magic behind it yea it totally solved my little issue, now I have other issues with typeorm, but the imports are golden. thanks a ton@SalathielGenese 
solution: 

issue: Heyo got a really basic question hopefully, why is the following not flagging thefirstmethod as invalid: [<-CODE->] 
solution: 

issue: looking at that link now thanks @dragomirtitian  hmm ok so I think i mostly got what the solution you linked to is saying to do but can't quite apply it to my use case as there are a few blanks. https://codesandbox.io/s/km97r0w867Thanks again for your link to that solution, it proved useful but am just not sure if I can make it work so things like the tweaked fnNumberErr can pass, any further clarification on what each of those interfaces / functions are doing would be really handy. ohhh right! thank you very much for clarifying the bit i was missing, still quite new to typescript so getting used to the syntax as I go ^ ^ 
solution: 

issue: ts doesn't seem to like lodash: [<-CODE->] error [<-CODE->] anyone know why? actually it's not even lodash. this has the same error: [<-CODE->] oops. right. i messed that up in tryping to come up with a repro facepalm. thanks@blemoine 
solution: 

issue: ShanonJackson: where did you steal the implementation from ? :) ShanonJackson: also wouldn't have aStrictUnionas described here work ? [<-LINK->] Something like [<-CODE->] 
solution: 

issue: andreialecu: types have runtime output therefore its impossible write a type-level transformation that turns a type into something like a class which does have runtime output however, it's possible to manipulate the types of classes using already existing types if this is what you want let me know you have to actually have a physical class as a starting point you can't turn a type into a class in the same way that i can't loop over a tuple TYPE and generate its corresponding physical values.I.E type XYZ = ["x", "y", "z"] // no way to convert this type to the value const XYZ = ["x", "y", "z"] so yeah to change the type of Description so that it has "InEveryLanguage" this is one way. 1sec  [<-CODE->] unfortunately you will not be able to use a mapped type because this way relies on an interface sharing the same name as the class and interfaces cannot behave like mapped types andreialecu: wait sorry i take that back they merged a pull request for that this is what you want.  [<-CODE->] enjoy. 
solution: no you cannot because you've created the "TYPES" of the fields but not the "VALUES" of the fields. 

issue: @ShanonJackson so the only way to get this done is to write the classes by hand, right?I got this far: [<-CODE->] 
solution: 

issue: not too fimiliar with the decorator proposal but@prop() will execute on nothing in my mind and therefore throw. unless@prop() executes after the constructor and i guess it also depends on what@prop() does because the target will be undefiend untill after the constructor executes  [<-CODE->] 
solution: 

issue: I guess it expects you to do"bar" in fooas the existence check instead Type error at runtime?  But... there are no types at runtime... will typing the array as(keyof Interface)[]work? Oh wait, you want the enforce that the array contains ALL the keys That sounds tricky 
solution: 

issue: Hi guys,I'm having some issues using process.hrtime.bigint() in TypeScript.Whenever I try to compile a file using it with tsc, I just get: [<-CODE->] Any ideas? andreialecu: Yeah, bigint exists. However, I've managed to track down the error to: [<-LINK->] It's a typing error 
solution: 

issue: andreialecu: ts will not infer tuples unless you give it a reason to. Thetuplefunction gives it a reason to. andreialecu: another way to give it a reason:let alsoGood = new Map([].map((a): [string, string] => ['a', 'b'])); then use the tuple function to force tuples. It's just the way the compiler currently works. If there isn't a constraint that hints at a tuple or the array literal is directly assigned to a tuple type, the array literal is typed as an array not as a tuple .. in 3.4as constwill also be a way to force tuples this will have no runtime impact .. but for now the function is probably the simplest way to go But till the end of March when 3.4 is probably getting released, the function is the simplest, but watch this space :) microcipcip: where do you get the error ? this code works as is [<-LINK->] 
solution: 

issue: I'm getting a error TS2322: Type '{}' is not assignable to type 'void'. for [<-CODE->] Why? theresolve()doesn't return any value, so it should be a promise ofvoid, no? 
solution: 

issue: only if it's in node modules and only if you correctly reference it in your package.json otherwise you have to resort to other means i.e you're going to want to add these 2 lines to package X's package.json before you compile it into another repo  [<-CODE->]  [<-CODE->] dotjosh: no need for generic overload in this case it's not what you want 
solution: 

issue: Is there a way to do this generic overloading and not get "duplicate function implementation"? [<-CODE->] 
solution: 

issue: Morning@ShanonJackson. Just looking through what you wrote here. Did you see my playground version? It works! It's just ugly as hell.  [<-LINK->]  [<-CODE->] 
solution: 

issue: That would explain the issue i was seeing Even thought I could hover over it and it knewfuncAreturnsnumberit would not know to makefuncBtake a number Yes..... You mean they can't be a part of same object? Eh we'll just do the runtime checks then and leave it as is with both optional eh yea, but we can't require that anyways this is code we expect our custmoers to write so we want it all infered Welp got to go, but@ShanonJacksonthanks for helping and looking in to this.  If you find out it is possible in another way you can mention me 
solution: 

issue: rhys-vdw: see [<-ISSUE->] 
solution: 

issue: Hey all, I'm trying make a type like this: [<-CODE->] Effectively defining ArgsMap<T extends Function[]> to take the tuple type T and return a tuple type with all of the function return types changed to void (instead of whatever they were before). Anyone got any hints? I'm just trying to preserve the argument types for each value in the tuple 
solution: 

issue: SgusHi everyone, i've built a small library one of the modules imports an svg file, the problem is that when i build the package the svg is not in the dist folder and i get messageModule not found: Can't resolve './icon.svg'Do i have to compile with webpack / babel in order to work? 
solution: 

issue: I haven't found a use case for decorators yet, maybe I will if they ever become ES standard 
solution: 

issue: Can anyone help with module resolution? I'm trying to get TSC to read .SCSS files.In my tsconfig I have this for module resolution paths: [<-CODE->]  [<-CODE->]  [<-CODE->] But I have trouble using import ... as [<-CODE->] This is the --traceResolution output https://hastebin.com/yafebijoge Well webpack is doing the reading, and it's working fine on that part (and the variables do get injected correctly), but I'd like TSC to stop complaining about it I've tried that too, I always get the Cannot find module error Still the same.. 
solution: 

issue: Hey, is there any option to validate type of index? [<-CODE->] I want to allow only numbers as indexes/keys. Gerrit0: Thanks, I needed to check noImplicitAny option as well to get error. ok 
solution: To be clear, the reason[1]isn’t an error with a string index sig is because per specification this is just an alias for the string key "1".  Using anumbersignature is unambiguous that you only want numeric keys. 

issue:  [<-LINK->] took me a while to find that 
solution: 

issue: are constraints against generics & conditional types described somewhere in good detail? i was expecting this [<-LINK->] to work but apparently TS cant narrow my constrained generic to resolve my conditional type 
solution: Andarist: - this' a TS limitation and I think it should be reported as bug.Someone brought another similar example during this week.. i often encounter things like this due to heavy usage of mapped & conditional types. 

issue: aicdevHm maybe you can achieve this with yarn or npm link. Just edit your package.json aicdevIs it that what you mean ? 
solution: 

issue: Is there known bugginess when it comes to reassigning variables outside the scope of a while loop? 
solution: This doen't sound like the real problem you're facing( see The XY Problem )...But the answer is no - now bug for reassigning a variable out of a while loop.. When an object is exported, it is considered used. Even if nothing actually import it.But if we were to scan the complete code base to determine is a field is used.... 

issue: Infinite loop warning, don't run. [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: The CFA doesn’t tend to handle data dependencies across loop iterations well, it treats it as a circular dependency which disables type inference.  There’s a similar issue on github that I responded to a few months back, seems to be a design limitation I hit it a lot when writing reducer functions You can usually work around by adding a type annotation to one of the variables 
solution: 

issue: Hi there, Im new to TypeScript and I keep getting "Invalid 'await' of a non-Promise value. (await-promise)". I have no idea what this means SalathielGenese: this is part of my code [<-CODE->] 
solution: 

issue: If the thing passed to Promise.resolve is undefined then you get a promise for undefined.  You can check that either before the await or after 
solution: 

issue: Hi guys, I keep getting a new error in my code and im not sure what it means:rejected promise not handled within 1 second I think I'm handling my config wrong. I want to check if there is a setting set and if not use a showinputbox to ask for the value. This is what i have so far: [<-CODE->] 
solution: 

issue: fatcerberus: thanks, I'll give it a go I'm right in saying that you shouldnt define a variable inside a if statement? 
solution: I would recommend researching how promises and async/await work though, you seem a bit green around the gills there. 

issue: fabianolothor_gitlab:  [<-CODE->] ehutchllew: wait might have misunderstood problem that's the only problem i got when i pasted code 
solution: 

issue: Hey guys I need some help:Let's say I have an interface: [<-CODE->] Then in a class I implement it - and it works fine: [<-CODE->] But when I have a 2nd level of inheritance it breaks - it basically says ClassBTextConfig is not of type C: [<-CODE->] Has anyone come across a similar issue? This is using React btw. 
solution: 

issue: I don’t think that’s the right issue, that was a 4-year-old issue for something unrelated? That’s kind of weird because I remember that “X is a type but used as a value here” was already a thing - I guess there were cases where that message wasn’t being used? Oh wait this is for the opposite case (value used in place of type)—but then your comment above on ITEMS_PER_PAGE actually being a type doesn’t make sense... 
solution: 

issue: Thanks@fatcerberus&@dragomirtitian-I latter figured out that that I wrotetypejhiSort: { ... }instead ofvaluejhiSort = { ... } 
solution: 

issue: @RonaldDijksI think this should work: [<-CODE->] 
solution: 

issue: is NaN technically a number? const bar: number = parseFloat(""); parseFloat("") yieldsNaN dang. "Not a Number" is a number ok i guess lol 
solution: 

issue: Odd, Array.from is not listed on caniuse.com but there’s a browser compat table on MDN  [<-LINK->] FWIW it was introduced in ES6 
solution: 

issue: thejohnfreeman: You can't combine mapped type syntax (first line of Item3) with arbitrary properties (second line) right now also, keyof any === string 
solution: keyof anyis just trying to get a simple example. my real use case uses a union type over a fixed set of strings. is there an issue tracking this limitation?. weswigham: 's work on enhanced index signatures gives you what you want, although the syntax might be different.. 

issue: Hi folks, I'm struggling to do a simple thing, and I couldn't find any explanation on internetI have the following files : [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: Let's start there for you to understand the issue - What do you have in yourmain.js?. 

issue: Hi, any ideas how to instantiance a typescript class that's transpiled to JS? Sorry for asking stupid, but i've made a class Livesearch in typescript, and it's transpiled to js and it also works if i instance it from typescript, but if i try let a = new Livesearch() in my web console, it's not defined? I've seen you answer Salathiel, i just wanted to add more context Not sure what you mean with that, it's just included from my index, 
solution: 

issue: Hello, I'm trying to render a skeleton loader for a graph while the data is being fetched and typescript keeps complaining that my functional component does not have any construct or callable signature. I've tried changing the type signature for my loader but nothing seem to work. Here is how my code for line chart looks like. [<-CODE->] 
solution: 

issue: Hi, anyone online that could help me out? I can't see my class "Livesearch" in web console, also can't instantiate it outside the typescript file, but if i instantiate in typescript, the functionalities works, but i can't see my class in web console? 
solution: 

issue: I’m trying to understand functions overload but I’m totally lost… can someone explain me what I’m doing wrong here ? [<-CODE->] got it, thanks 
solution: When overloading, the physical implementation isn’t used for type checking so don’t worry about getting invalid combinations. 

issue: lesha1201: - This best I could come up with... It errors aboutLibraryManagedAttributeswhich seem related to [<-ISSUE->]  [<-CODE->] 
solution: 

issue: yes i do 
solution: 

issue: Can’t you usetypeof Derpthere since it’s a value?  Seems to work when I do that. 
solution: 

issue: whats the dumbest, simplest way to compile typescript with modules and run it in a browser? let's assume i have to use import statements 
solution: So if you absolutely need modules then you’ll need either some kind of loader such as AMD or else use webpack. 

issue: saurabhstc: - Yes, using SystemJS  [<-LINK->] 
solution: 

issue: I am using a 3rd party library with no types that declares [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: tomspeak: Usestatic Cell: typeof React.Component<CellProps, object>;. This is because when you use a class as a type, Typescript actually uses it as the type of class instances. Using thetypeofoperator will get you theconstructor type, which describesGrid.Cell. You can read more here: [<-LINK->] 
solution: gilamran: That table actually shows something different. Typescript alone supports whatever is available as a target, but the table shows what Typescript (with targetes5) and a polyfill library calledcore-jscan make work on ES5. So with that polyfill and the right settings, TS can emit code that uses object destructuring and Map/Set on platforms that don't support either (like IE11). 

issue: Hi. I am trying to figure out an issue I ran into using blessed-contrib. I opened a PR (yaronn/blessed-contrib#165). However, as a Typescript beginner I can't tease apart whether it's outdated types or outdated code / documentation.Not sure if this community is the right place to ask for general Typescript advice. Any pointers would be highly appreciated anyway! 
solution: 

issue: Why ? B/c I'm not even sure why it does matter. Is it related to the issue described here ? [<-ISSUE->] 
solution: with some kind of strict property check aswell i guess something like. 

issue: wait no sorry that's right where is it getting "ref" from? show the function args 
solution: with the type of the underyling HTMLTag that that JSX.Intrinsic key belongs to. 

issue: Question:  I'm trying to write a declaration for a class that might exist (calling some special function installs the class in the global JavaScript namespace). I'm doing this: [<-CODE->]  [<-CODE->] Answered my own question. You won't get errors unless you turn thestrictNullCheckscompiler option on. If you do so, the above will begin to work. New question: Is it possible to define the type of a declared variable to be dependent upon the type of another variable (or field)? I've tried the following: [<-CODE->]  [<-CODE->]  Is this expected? Should I file an issue? 
solution: 

issue: does anyone know why I would be getting.every is not a functiontype error? I am targetting es6 via the compiler setting 
solution: 

issue: fatcerberus: Thanks I used that flag and the errors changed to:Cannot find name 'Blob' SalathielGenese: Thanks, I tried that but it saysSyntaxError: bad method definition debugger eval code:2:4I'm just using the code from the documentation :(I'm not sure what the error is, I set up tsconfig.json like this:{ 
solution: 

issue: robfr77: remind me again what flag that was But based on your error messages I think you need to adddomto yourlibs Don’t think so - tbh I don’t think it makes sense given fully erasable types Conditional types are a thing, but rely on information known statically (at compile time).  If the types change at runtime I don’t think the type system can model those dependencies In any case that’s probably as good as any a place to start - [<-LINK->] But yeah let’s say you have two variablesxandywhich are bothnumber | stringwith the additional caveat that ifxis one of those types then so isy; there is (to my knowledge) no way to model that dependency at the type level 
solution: 

issue: Hi, I have a react issue: [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: HelloI am having trouble porting BackboneJS based project to TypeScript. Would appreciate any help My painpoint is  backbone has its own extend method and typescript uses its own. class MappingModel  extends  Backbone.Model { }i want this to be converted toMappingModel=Backbone.Model.extend({}) sounds great as far as I understand I will not be able to use static checking anyway because Backbone models use generic set and get methods 
solution: 

issue: Array.prototype.flatMap and Array.prototype.flat Every approach has pros and cons however in my opinion the frontend should not be coupled to the backend, in any way so sharing types within the same repository in my opinion would not be the best way of doing it however i also think splitting the shared stuff in to a shared private npm package also may not be the best way Gerrit0: as far as i know its fixed but i can see your error in the playground now its fix it referenced here...  [<-LINK->] 
solution: 

issue: That's... neat. Certainly not intuitive, but very cool. 
solution: no idea what the best way is but i would definitely rate npm > shared folder between frontend and backend. 

issue: payloadis typed asany, this basically shuts down all type checking for that value. anyis not really a top-type, it’s more like an escape hatch.  It means “this could be anything at all so don’t check it”.  Useunknownif you want a real top-type 
solution: You might want to look into discriminated unions: https://www.typescriptlang.org/docs/handbook/advanced-types.html [<-CODE->] As a reminder, here is what I previously attempted using conditional types (but doesn't work as conditional types are compile-time only). [<-CODE->] Is it reasonable to open an issue on GitHub to discuss this?. 

issue: Mmmmmm i'll take a look yeah typescript can't figure out generically that Pick<prop, Exclude<keyof Prop A, "prop">> and Prop is the same as A you can change the types to this and have it work 1sec Mmm very wierd acutally thought that would work but the generics constraint A is behaving wierd  [<-CODE->] works but it's not right Omit<A, "prop"> & A should be the same as Omit<A "prop> & {prop: string} 
solution: 

issue: so no goldenratio: could be one of many many many many things if you're compiling to commonjs you can't tree shake if you're compiling to AMD you can't tree shake if you're compiling to ESM and it's not tree shaking decorators it could be.... if you're decorators are implemented on a class instance not tree shakable your** 
solution: 

issue: Anyone here familiar with webpack and wasm? 
solution: 

issue: Ok, so first of all, this works: [<-CODE->] 
solution: 

issue:  [<-CODE->] Why am I getting this error?  [<-CODE->] My tsConfig 
solution: 

issue: Without more context it’s hard to say.  Ifthis.dependentsListis not defined, that should throw an error.  Try taking off the[0]and see what you get. 
solution: 

issue: show me the code :)I asked for a chunk of it. Context makes big difference 
solution: So if you have a type annotation ondependentsList, probably an array of an interface describing its shape it would help.  Does your session storage lookup return a string always?. 

issue: Duhh.. [<-CODE->]  [<-CODE->] 
solution: 

issue: fatcerberus:  [<-LINK->] It isn't working actually. Changing the target makes no real difference. Funny thing is that even after excluding node_modules I get the same error. 
solution: 

issue: instead ofthis.csx = new Csx()why not usethis.csx = new T() 
solution: 

issue: Theres probably other solutions but you could just follow the instructions in the error - annotate the type of that variable Can you show us the code around that line? 
solution: 

issue: I'm trying to add a generic type to a function that already takes a generic  type: [<-CODE->]  [<-CODE->] Any tips? 
solution: 

issue: karanlyons: I found a way to do it more truthfully: [<-CODE->] Not sure if it will make any difference in practice, but it keeps more of the descriptor xD Also your getter and method claimed to return void which they rly don't (especially the getter) :v 
solution: 

issue: qm3ster: what do you mean ? i was not joking actually 
solution: 

issue: fatcerberus: Haha, that’sexactlywhat my deleted message said, but I wasn’t 100% sure I was right so I deleted it. 
solution: 

issue: is there difference between thease 2 definitions ? [<-CODE->]  [<-CODE->] Thanks@karanlyonsand how am I supposed to import it? Trying differen options and it either gives compile time error or doesnt load in the browser compile time error saysimport { A} from "./C";it is not a module 
solution: 

issue: MartinPavlik: types are erased by the compiler so they don’t even exist by the time any JS code gets to run.  So yeah you can’t do dynamic things like computed property keys in a type definition 
solution: 

issue: fatcerberus: ok theres no reason but thats the current structure.@karanlyonswell they have same name because they actually represent same thing in 3 differen layers but thats not the problem. Even if I change name of the classes say instead of User I make it UserView I still cant reference ProfileView in the same naming scope which is Presentation I dont see any reason that this should not work but for now it seems I need to flip the whole structure and instead of  having Presentation { x, y ,z} Model{x,y,z} I will make it x{Presentation,Model,Controller} y{Presentation,Model,Controller}. I wonder about scenarios that compiler support. In documentation it says merging symbols that refer to the same entity. Just merge my namespace definition. I am missing something, will digg more before flipping the structure which I dont want to do. 
solution: 

issue: Honestly the latter structure makes more sense to me regardless, but that’s not really germane to your problem. 
solution: 

issue: :) I was going to open feature request in github and saw this [<-ISSUE->] 
solution: Dodrio looks nice,@qm3ster.. I really like the candy analogy in the linked SO question in that issue: [<-LINK->]. 

issue: So you’ve basically got a reverse proxy? Ya’ll got a infra diagram? 
solution: 

issue: That’d probably map to the “don’t use semicolons” people. Cause what Ilovedoing is reciting the rules of ASI out loud as I try to determine whether any line in my code could be responsible for the nonsensical error I’m seeing. 
solution: The only reason ASI exists is error tolerance, and is only standardized becauseDon’t Break the Web(tm)- I don’t consider it a part of the language that should be relied upon. 

issue: Yeah, I just read the tweet and was going to say the quote from the ghc source is golden :) Blown away though that they stopped at 3 or 4 or whatever it was 
solution: 

issue: Typing wise isnt a curried function just a func with arrity 1 that returns another func of arrity 1 etc. that eventually returns a value? 
solution: 

issue: I havesrc/steps/generatePNG.tswhich has animport animationController from '../../vendor/animationController'which is javascript typescripts' giving me a hard time about modules how should I go about creating a very basic declaration file for this vendored javascript file? I can't quite understand where I need to put the declaration file Or is it more correct to userequireinstead ofimportin this case 
solution: 

issue: My takeaway: don’t use classes. 
solution: 

issue:  [<-ISSUE->] in case I missed anything important 
solution: 

issue: If theexport =doesn’t interop nicely you could justsed/catsome stuff as part of your compile process, I guess.  [<-ISSUE->] 
solution: 

issue: here's how to transpiel to CJS with typings allowJS true,  module commonjs, declaration false** then run a seperate build with declaration only because you can't have allowJS true (to compile your node modules dependencies) and declaration true. what's wrong with that sorry? roughly following export default is a hack when you look at the output you're going to see the facade gone 
solution: definitely don't use default exports then for starters. 

issue: Hey guys, I'd like to activate strict mode on a huge project, any way of doing that incrementally? Can I just put a tsconfig.json somewhere deep in the tree of my files and progressively put it higher? 
solution: 

issue: keithlayne: I didn’t see that, nope. Scanned it quickly and it looks like it’s setting up a set of tuple rules butwithrecursion? I thought recursion in TS was some super-linear time complexity. maxime1992: Pretty sure the answer is no, but you could, like, run your linter twice and then compile without strict mode. 
solution: I have no clue on the performance of recursive types in the compiler.   I don’t expect that to be fast really,  I assumed the issue was about ensuring termination in that complicated mutually recursive stuff.  The instantiation depth limit of 50 feels kinda conservative and arbitrary to me.  Well, even if it’s conservative it’s probably not that arbitrary, I guess they probably have tons of data on it.. 

issue: Hey guys, i wanted to transfert this pen [<-LINK->] from codepen to [<-LINK->] but i dont know what i need to change in order to make it work , javascript to typescript karanlyons: Okay, thanks ! Same here but with angular , if i can't test plotly in [<-LINK->] , is there another environment 
solution: 

issue: It wasn’t really clear after reading that blog post, but I checked and all that stuff got checked in at DefinitelyTyped.  So there’s at least some tacit approval of the technique. as in the runtime characteristics of the data structures were mooted by modern architectures he definitely had some empirical data to back it up. 
solution: 

issue: Hey all, I am using TypeScript with AngularJS...I had a situation where defining an enum like: [<-CODE->] was breaking my tests with the error that the module where SomeEnum is defined cannot be found.Changing the definition to: [<-CODE->] Fixed the error. But now I am curious why this is the case 
solution: 

issue: const enums are replaced with the actual value during compilation, so there is no need to actually import the file (the import will get elided) with normal enums the import actually need to be valid 
solution: 

issue: Overloads in an interface when the function being overloaded may also be undefined? (Like, marking up a variadic function that’s may or may not be sitting inwindow). Right now I’m using generics with anextendsternary, which is fine, but I’m wondering if I’m missing something obvious.  [<-CODE->] So that works fine, but I’m wondering if I can’t do it as overloads somehow. The holdup is thatinterpolatemay not exist onwindow. 
solution: You may need to post more code. React elements are a generic type taking some props interface and the same for state. Your state interface appears to perhaps be disagreeing with what you’re trying to pass into setState.. 

issue: Hey guys, I'm trying to switch a component from JSX to typescript and I'm getting an error with this: [<-CODE->]  [<-CODE->] 
solution: 

issue: Keggatron: I'm just guessing, but your problem might be with the computed property [typeField]. If you replace that with a non-computed property, does ts stop complaining? Can't wait till we have concatenation in computed properties. Type-safe .onevent properties! iirc it is, I can't find the ticket now... 
solution: 

issue: Presumably the values oftypeare fixed and defined and you couldas modalTypes? I’m not sure that’s specifically the issue here without seeing surrounding code though. keithlayne: They’re basically like concatenation unless you’re passing a template string to a function with thatfunc[templateStringHere]syntax. Yeah, I got zero clue how to do that. Tagged templates is what I’m talking about. 
solution: 

issue: Does anyone have any experience using sinon for testing? In a function I call vscode.window.showInputBox 3 times, I need my test to return a different result each time. I currently have:  [<-CODE->] This works the first time but each time after it does not work 
solution: 

issue: Gerrit0: So, write in ts, compile, run with mocha? This bug: [<-ISSUE->] Unfortunately i'm using mongoose, and there's a bug with importing interfaces that you use in withinstanceof the compiled code drops the interface import i can't quite figure out what ts-node is doing. my assumption is that it's running the compiler and outputting the code somehow, but just not outputting it to theoutDir 
solution: 

issue: sheshtiwari: first of all I canoot see implementation ofgetDefaultChannel()in your listingsI belive the obvious issue thatgetDefaultChannel()returnsundefined.  Why it returnsundefineddepends on implementaion. What I could see is thatinitChannelsis asyncronious and might not be called, or it might be called but not completed beforechannelServiceis injected forRoleService.  If it is called - I suggest to makegetDefaultChannelasync and rewrite assignment to nextrole.channels = [await this.channelService.getDefaultChannel()];getDefaultChannelitself should wait until initialization is completed. othewrise you have to callinitChannelsin every service that consumesChannelService 
solution: 

issue: is there a way to exclude files in the tsconfig.json via terminal like the compiler options? e.gtsc --init  -t ES5 -exclude node_modulee? 
solution: 

issue: Hi! Is there any magical configuration that would make babel + typescript just work? I’m having all kinds of issues (e.gError: Cannot find module './graphql/schema') and I just can’t figure out why. Thanks@dalevfenton! 
solution: 

issue: avshalom_gitlab: tsconfig.json has an exclude property,see: [<-LINK->] 
solution: 

issue: hello guys I get a message from webstorm 
solution: Probably harmless if that's just a type reference. Try importingfirebaseinto that file, though. 

issue: in that case doimport { firestorm } from firebaseand refer to it directly if its the only thing you’re using.  But I wouldn’t callimport *wrong. 
solution: but so ya, if I do: [<-CODE->] That works, but that's what I also want to avoid, b/c like I said there's a couple of deep nested properties I want to type, and it'd mean I have to pass generics around every time I want to use the interface, which'll be insanely annoying.. 

issue: Haha I googled earlier to see if ‘kiwi’ was offensive, but you used it first :P Just to be clear I was trying to make sure I didn’t say anything stupid, not the other way around. 
solution: 

issue: tsadigov: thank you, I was able to generate the js with the module names! now I can't seem to import it on the "parent" project. I think I'm missing other step. I do a "references" in tsconfig but I cannot include my new modules, any tip? 
solution: 

issue: Feels like we’re suggesting io-ts a lot recently. It’s fairly lightweight at runtime, I believe. Most of the heavy lifting is just at compile time. 
solution: 

issue: I can also recommand io-ts, however, I miss JSON schema interoperability 
solution: 

issue: hey guys sorry for raising question here but if somebody can help me out. I am trying to read a json file and checking whether a key is present or not if key present the its value will be returned.  But i am getting error "cannot read property 'data' of undefined . my json file 
solution: 

issue: hediet: Thank you so much that was silly mistake but it does solve my problem thanks !! :-) 
solution: 

issue: I think this room is leaking. ShanonJackson: can you not just do a conditional withextends { parent: whatever }? Oh, you meant a generic version. 
solution: 

issue: itbrandonsilva: Branding. 
solution: 

issue: This is a complete clusterfuck, yes. I’m trying to figure out what theintentionhere was so I can fix it. I can’t commit any of the work I’ve done over the past two weeks because it uses things in TS that were added…a year ago, so now I’m doing this. 
solution: 

issue: appears in the morning JS can be written functionally. 99.99% of our front-end monolith is immutable, there is only two "let" declarations in the whole project and the rest are const's 
solution: because it opens you up to better performance optimizations for free. 

issue: I need help with my unittest setup I am using namespaces and outfile into 1 file for testing I trying to use mocha the problem is I get this 'amd' and 'system' modules are supported alongside --outFile am I going wrong way? 
solution: 

issue:  [<-CODE->]  [<-CODE->] That’s not the only way to do it, but might get you started. I don’t know the why, but I can suggest a workaround that worked for me in a similar situation yesterday. Introduce a dummy defaulted type parameter: [<-CODE->] See if that helps. 
solution: FilteredKyes works well, but if I use it with generic<P extends TestModel>it breaks and I can't figure out why. 

issue: Read my mind? I wrote type definition which doesn't work and supposed to work..not sure what's all about reading my mind. 
solution: 

issue: kresli: when i look at that it obviously doesn't work because typescript can't possibly know that P[K] is ISimpleString because for it to know that it would have to know that FilteredKeys only returns keys that have ISimpleString values this is what you want  [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: const myObj: { [key: string]: number | undefined } = {}. 

issue: ShanonJackson: what is ATL ? I'm using babel-loader. can't use ts-loader because i need babel. 
solution: 

issue: karanlyons: I think the problem is that the ambient declarations, e.g.ts-xmpp-client, are used only in the project itself (because of the tsconfigfiles But they are not "found" when I'm compilingtsxb, which uses its-xmpp-clientas a node_module 
solution: 

issue: Whats wrong with this? [<-CODE->] huh Empty classes extend each other The actual reason I was looking at this was for - [<-CODE->] ... How do you narrow a generic like this? Oh, that sucks looks like generic types simply cant be narrowed What about this means it cant be automatic?((v): v is C<A> => v.cls instanceof A)(a) 
solution: generative99: if you mean macros like C# or Scala macros. 

issue: ShanonJackson: not currently implemented, not not possible. It's trivial to imagine some transform likebabel-plugin-macrosrunningbeforethe typescript typechecking/transpilation, and the errors being sourcemapped back to the original code. 
solution: 

issue:  [<-CODE->]  [<-CODE->] 
solution: 

issue: I'm trying typescript 3.4 RC and its super slow. Is this a known problem? Can't really find anything on v3.3.4000 runningtsctakes 6 seconds, with 3.4 RC it takes 71 seconds. Using the new--incrementalflag makes no difference nope [<-CODE->] 
solution: 

issue: wasn't paying attention to the fact that npm local install uses a symlink. which.... really i wish it wouldn't oh, i was hoping that the library itself could use those explicit imports i think you can import the module the declaration file represents 
solution: 

issue: lol me too apparently just importing in the lib itself is not enough :/ 
solution: 

issue: I’m thinkingmaybeyou  could copy that typings folder to the output, then have the downstream project reference it directly as a type root from node_modules.  But that sounds…painful. 
solution: i think i tried that but let me try one more time just to be sure. 

issue: webstrand: on github. [<-CODE->] and@TomSputzits because of how unions distribute. well i mean i guess its easily fixable but the compiler can't work out that... (a: A) => something | (b: B) => something is the same as (ab: A | B) => something 
solution: ._.. Theyre both callable though?. 

issue: You can polyfill Symbol sorta. For very questionable values of "sorta". But it's basically a singleton pattern keyed on the label argument.  [<-ISSUE->] 
solution: Seems to be an issue of number keys actually being treated as strings,  but the type system seems to be able to separate them out. 

issue:  [<-CODE->]  [<-CODE->] and in the JS (I assume it does the defaulting in the function body due to my ES5 target): [<-CODE->]  [<-CODE->] Side note, I found this a little surprising, but it explains why I’ve had issues with it before: [<-LINK->] 
solution: I pretty much wrote zero JS between 2001 and 2012.  And I guess that 95% that I’ve written since then has been transpiled in one way or another, so I just didn’t notice.. 

issue: keithlayne: Thanks, I knew promises were kind of like monads, but I also remember them getting a lot of flak from the FP crowd that they weren’t monadic enough so... yeah, that kind of confuses the issue for me even more Wait what’s the problem withboolean?  I scrolled up a bit but I can’t find the context 
solution: 

issue: Reposting cause now it’s not, like, 2am: [<-CODE->]  [<-CODE->] 
solution: 

issue: mkantor: [] is literal while new Array() is an expression Typescript will attempt to infer the types of literals, as a special case. But it can't do anything for expressions in general mkantor: I'd love to, then I could use that resource too. I think you're onto something with the "Freshness" [<-LINK->] seems to be related. 
solution: 

issue: I remember noticingfullscreenElementwas missing when I tried to implement fullscreen support in Oozaru months ago... figured they’d have added it by now Haha, that joke was great.  Applies not just to religion but also programming 
solution: 

issue: HiI have 2 optional params but I have to have one of them [<-CODE->] Thanks TiagoRechau_twitter: Thanks, I've got the idea : ) How to declare in TypeScript such object? [<-CODE->] above does not provide such capability but this declaration does not guarantee the existence of at least one of the parameters thanks a lot! Ive refactored to [<-CODE->] 
solution: in the base class constructor I reference events and get sayHello in the DerivedClass instance it gives saySomethingElse. 

issue: The last time I saw people actuallyusethat syntax for function definitions, I was programming for Windows 3.1.  So I’m not too surprised you haven’t encountered it 
solution: 

issue: Hey Could anyone explains this? [<-CODE->] Suggestions in vscode show: [<-CODE->]  [<-CODE->] Hm, I did wrote this function: [<-CODE->]  [<-CODE->] webstrand: as const? that's new :PI'll look into that if it helps me :/ 
solution: 

issue: Still kinda stuck with how to work with union promises - Why does adding the<G>make this error? [<-CODE->] It switches from using & to | for the callback's type 
solution: 

issue: In a perfect rational world, yes. IthinkCC results in the best reduction in final filesize, but after gzip I don't really think those differences matter. Nah, we just use the local java compiler. Written in java, not compiling java. 
solution: 

issue: Like a site that uses a zillion trapezoids and parallelograms (sounds awesome, I know). My proudest css moment. I think roughly 85% of the programming stuff that Medium sends to my inbox is hot garbage. (kinda got triggered by the Medium link) 
solution: Haha, I tried to write s/programming// as a joke but of course gitter actually supports that syntax.. 

issue: well I would pick PyCharm over vscode when it comes to python 
solution: 

issue: Is there any way to type this class? [<-CODE->] Oh for sure, I removed all my other tries as I havent been able to get a generic to work It just returnsstring | number  [<-CODE->] Looks like this is the only choice [<-CODE->] Dammit Ahh. It doesnt need the implementation right there [<-CODE->] Feels like this should fall in protected... But yeah. Ig I'll just have to make it public 
solution: 

issue: I need help with object oriented design. How do I extend a class when it uses a factory method instead of constructors, since I can't use super(), and the parent does complicated stuff in its factory method that I don't understand and can't replicate. I'd like to take the instance from the parent's factory and just add few properties to it.. this is easy with constructors and super(), but difficult here. 
solution: 

issue: Ello all, bit of a longshot here but im currently trying to type a GraphQL library and its typing is getting pretty gnarly. I was wondering if any typing gurus out there fancy a pair-programming session on VSCode live share to try to nut it out? ShanonJackson: Thanks for offering. I would love to be able to split it up into small digestible problems and I do that and where I can and put it on stack-overflow but this is pretty intricate and deep involving a few layers of abstraction. I honestly feel its one of those problems that needs to be done over a screenshare & voice chat. Its not that the codebase is complex or anything, its just that the types are really complex 
solution: 

issue: So I have an HttpResponse class with a responseJson prop. HttpResponse takes a generic which is passed to the responseJson. This generic is optional, and when undefined, responseJson will be of type any. I’ve set this up like so: [<-CODE->] Problem is, responseJSON will let you access anything without an error even when ResponseJsonT is defined, because of the any union. Is there a way to set this up so that it will give an error when the response is defined? [<-CODE->] Yes, that I get :) 
solution: 

issue: Defaulting  toanyis the right answer, but not sure about that error eh, it’s returned fromJSON.parseso it probably makes sense here 
solution: 

issue: My current issue that I need to have a solution for in the morning is that we have a new client in a new market that is geographically far away And I need a cheap, easy way to hide latency to our clients there Yeah, but my boss is all ‘copy some file to s3 in that region' which is not going to work for several reasons 
solution: basically the only reasonable thing to do is spin up the one service in that region.  If it weren’t one of the broken dockerized things I was talking about earlier I could probably make a much cheaper solution.. 

issue: think you want this...... oh wait no you can't have that with the "this" in the arguments but you also you can't "new" functions like that and get the intended result theres a reason classes transpile to a IIFE i thought it's to trap everything in the correct closure? as covered here..... 1sec 
solution: 

issue: ShanonJackson: What were you thinking? I can just nest the function to get rid ofthis  [<-CODE->] 
solution: like a function that has a count outside of a IFEE will have a count that all instances share wont it?. 

issue: Are you confusing this with the behavior offunction Add() { this.count = 0 }when called vialet foo = Add() 
solution: 

issue:  [<-ISSUE->] finally the error messages formatted the way i want 
solution: 

issue: fatcerberus: yeah, I lolled hard at that :P I was imagining programmers that write JS and have some sort of JS to spoken english interpreter :D rhys-vdw: why use generics here ? If you initialize the object with a specific literal then that is the type, the passed in generic does not matter 
solution: Wheredispatch(openModal(ConfirmDisableLinkModal, {}))correctly infers that theonConfirmprop ofConfirmDisableLinkModalpasses abooleanwhich is then resolved to a promise.. 

issue: It exists in 3.1.6 but not 3.0.1 
solution: Technically that will cause an error - you can only use a bareascontravariantly, otherwise you must cast throughany:1 as any as string.  You can up- and downcast freely but side-casting is still not allowed by default. 

issue: Hi All When i run Native android Mobile app using typescript am getting below error can one please let me know wt can be done  [<-LINK->] 
solution: 

issue: at first glance@Manikantan1991looks like a error with webpack or nodejs 
solution: nodejs is latest one.. and appium server is also latest one am using Shanon..  how to solve his. or look at their peerDependencies and make sure you're not using incompatible versioning. 

issue: I have a React+Redux project and I'm using typescript. I have the following code [<-CODE->] and I'm trying to update the state like this: [<-CODE->]  [<-CODE->] 
solution: 

issue: keithlayne: Thanks for the response. The thing I was missing is to declaredirectionsIndexto be of typeOutInDirections.directionsIndexis "computed" by string concatenation so it was implicitly of typestring. I guess the error message mislead me. 
solution: 

issue: Hello, I have a demo tomorrow and Typescript is preventing me to use a module I usually by pass it with [<-CODE->] But its not working this time 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] Thanks :) 
solution: But assuming it’ssubscribe(resolve, reject), then you probably want to just annotate the arguments ofsubscribe.. 

issue: Is there any way to make an index file that uses getters for all the collected exports, and also exports all the types? I need something like [<-CODE->] 
solution: 

issue: hi all error TS2304: Cannot find name 'by'. why this error comes  [<-LINK->] how to solve this in Appium/Webdriver-iousing typescritscript* 
solution: 

issue: Curious why the following works: [<-CODE->] But this doesn't: [<-CODE->] 
solution: 

issue: killerspaz: Whats the shape ofIAuthRequest? Meanwhile: Does anyone know why this is an error? [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: G-Rath: I suspect you’re doing the overloads wrong based on your snippet above - you have to declare all the overloads you actually want as signatures only and then the actual implementation should have a signature compatible with all of those.  The implementation itself isn’t used to typecheck call sites. It’s an easy mistake to make 
solution: 

issue: I always found it amusing that JS called its async/monad construct “promise” and then turns around and has a built-in mechanism to break the promise 
solution: Have you guys ever usedTsMonad? I've done literally no programming with a monad-"native" language (like Haskel), but the library has always seemed interesting.. 

issue: ok i got it... signature of the dispatchToProps didn't match the type defined... but it was showing the error in a weird spot, was hard to understand WHY it was erroring 
solution: 

issue: andredewaard: a type alias will work just the same and you can switch to an interface extending the base interface when needed  [<-CODE->] andredewaard: yeah .. that is my suggestion .. or just suppress tslint here since you have a reason for doing this .. 
solution: SET001: Still gives the same warning. It doens’t make sense for now it is only that i can later update those childs separatly without changing al my interfaces throughout the project. but the type alias captures the idea that those new types, at leas for now are not really any different from the original type ... 

issue: for the same reason we get neat tricks like:[1,2,3,4][number]to produce1|2|3|4 
solution: 

issue: "Side effects" is probably the wrong term, yeah--just that theindividualcomputations you're chaining together work in such a way that you no longer have access to the way the world (for a certain value of "world") was before each is done, yet the overall composition is pure Am I on the right track here? 
solution: 

issue: eh  [<-CODE->] string enums are definitely strongly typed 
solution: Also string literals are still inferred asstringin most cases - you have to opt-in to the stricter behavior usingas const. 

issue:  [<-CODE->] why is there a type error here[key in InputFieldKey]: string 
solution: 

issue: bori87: is there whay to implement an Interface 'B' without retyping  every property?interface A implements B { 
solution: 

issue: fabiospampinato: You're right!numberis assignable to a numeric enum. Interestingly enough, that doesn't appear to be true for string enums. Try:const enum StringEnum {  = "" } I guess not numeric enums I've never had any trouble. I like them because they don't pollute my autocomplete 
solution: 

issue: webstrand: Yeah using a string enum seems to work 
solution: 

issue: Yeah the error was with a type so you can safely ignore the error - types don’t do anything at runtime 
solution: 

issue: Note that recursive types in general tend not to work well so I recommend avoiding them if possible You won’t be able to go arbitrarily deep anyway because the compiler will crap out after about 50 steps 
solution: 

issue: fatcerberus: s/// does work. i used it with the intention of having the chat show it, but it actually updated my text.  demonstration: originally bar foo changed to bar (s/foo/bar/) might've been the last / missing? 
solution: 

issue:  danilosilvadev: yourtodo: ''is the problem there it's not defined in the interface, but you're trying to set it in the state was the intention to cleartodoObject? just by viewing that code, we can't tell what it is you're actually trying to do since it's a type incompatibility the line after that is the problem though, thetodo: '' has nothing to do with your array 
solution: 

issue: Hi guys, does someone knows what this error means:Type '(e: MouseEvent<HTMLSpanElement, MouseEvent>, index: number) => void' is not assignable to type '(event: MouseEvent<HTMLSpanElement, MouseEvent>) => void'. thats inside my interface:toggleEditMode: (e: MouseEvent<HTMLSpanElement>, index: number) => void it has 2 arguments in this type and this is the function: [<-CODE->] this error dont make much sense cuz it has 2 arguments, do u see something else wrong? 
solution: 

issue:  [<-CODE->] If you share a bit more code, ideally the actual error site, I can help you further :) cuz i'm passing index to the function not react type, it really has the second argument indexI'm suspect of that - how are you passing the index to the function? 
solution: 

issue: I still don’t fully understand (callinga function with too few arguments is a different error message) but glad you got it sorted out anyway 
solution: 

issue: I’m not aware of it but of course that doesn’t mean it doesn’t happen 
solution: 

issue: Looks like not, only see compiler flags for implicit any.  [<-CODE->] Is there a way to selectively import the enum Foo from the above? Angular's happily pulling in everything under the sun in the namespace when I try to iterate the Enum. 
solution: you'll have to rename or copy your outer Foo enum, otherwise it'll alias with the one in the namespace. 

issue: strutcode: passing filenames totscmakes it ignore the tsconfig and just act as a dumb command-line compiler.  tsconfig.json is basically a project file so “compiling a few files” is different from “compiling the project” 
solution: 

issue: Thanks@fatcerberus, that was definitely throwing me off. The root problem ended up beingts-nodeconfiguration but I wasn't able to figure that out without knowing that abouttsc:) danilosilvadev:  [<-CODE->] 
solution: You have two problems: First you're trying to refer tothis.todoDefaultastodoDefaultand second which you haven't discovered yet is that you're using the same object in multiple places. 

issue: Hi, it says heretodoDefault is not definedhow can i use that todoDefault in my state? [<-CODE->] 
solution: 

issue: I'm not actually sure which library he's using. TypeScript's DOM definitions dont provide aMouseEventHandler 
solution: 

issue: Hello here Here'stsconfig.json [<-CODE->] ^^^at project root  [<-CODE->] ^^^ insrc/folder But I get a different error when I build  [<-LINK->] VSCode is 1.33.0  [<-LINK->] Not a single idea man. Not a single one But I have something else, event more weird -  [<-LINK->] 
solution: 

issue: I can't help with the VSCode error, unless you can figure out how to reproduce it using some invocation oftsc. SalathielGenese: Any idea where you're getting the definition ofsetTimeoutfrom? TypeScript's builtin version returnsnumbernotTimeout 
solution: 

issue: Is there a way to simply re-export a function definition in a.d.tsfile? [<-CODE->] webstrand: Thanks! There's one other thing that seems to be off about it. Chai is a namespace, and it's giving meProperty "ExpectStatic" doesn't exist on typeof Chai ts(2339) Hmm... That doesn't work either. The array notation gives the same error and adding parenthesis gives this: 
solution: 

issue: My build fails (report errors) like this issue - [<-ISSUE->] But output the correct import fromtslib Nocomposite,outDirnot [<-CODE->] When I enableisolatedModules, I get the error from that issue but the output correctly importtslib 
solution: 

issue: I thought you died or something 
solution: No no no, at least, not yet.I'm still out for a job. And I undertook to find some leaks in Upwork system to get my profile activated.It took me some time. I also suffered severe teeth pain (03 passed away last thursday)... And this week, I'm diving into k8s.. 

issue: :) bitttttten: - Can see line 23 and 24 ? Maybe try adding semicolon at the end of line 22. hinell: -Ayu Mirage PowerUp, a fork with better contrast (more pronounced) ofAyu Mirage bitttttten: I'm not sure where the issue comes from. 
solution: 

issue: Someone mentioned that same problem a couple days back, I think. Pretty sure it's a regression in TS, but I can't recall the ticket. 
solution: 

issue: steffenmllr:  [<-CODE->] typescript doesn't define this type by default, so not really. Then you'd define youruseActionlike: [<-CODE->] steffenmllr: you can, and should wrap these types up in HumanFriendly names Seetype Init<T>here: [<-LINK->] similar process, if you want to apply it to functions 
solution: 

issue: I've not yet put a name on this behaviour. 
solution: The problem is, interfaces are augmentable. So if a user extended WishlistActions and added a property with invalid value,  they could pass that into youruseActionsfunction. 

issue: johnhamelinkHey folks :) I've been using Typescript for 1 week now so excuse me if this is elementary: Is there a way to use jsdoc to document an interface? johnhamelinkBruce Pascoe (Gitter) I thought as much to be honest. That's a shame, but not the end of the world. I'mreallyenjoying using Typescript so far btw. The last time I worked on a NodeJS project worth talking about was in 2012-2013... how times have changed since then! johnhamelinkKeith Layne (Gitter): nah, not worth it for me, it’s a small issue :) thanks though 
solution: 

issue: looks like I didn’t really read the question anyway, my bad 
solution: 

issue: Was looking for basic stuff; trace, debug, info, etc.  Could go down log4js route. 
solution: If you feel comfortable withlog4js, go for it.But note thatdebugis more flexible &log4jshasdebugas dependeny.. I like the idea of using a lambda to avoid execution if a type of logging is disabled.. 

issue: Yeah so I have a docker-compose setup that has worked fine in the past.  It has an anonymous node_modules volume to keep that separate from the host machine.  When I dodocker-compose upit fails because node says it can’t find the module. :(  But if Idocker-compose runit, it works fine.  Super lame. What I’ve found online suggests that this should work withdownlevelteration: true, but I’m getting: [<-CODE->] targetinges5 
solution: 

issue:  [<-LINK->] - this file doesn’t importReactat all Besides the jsx the file also directly referencesReactseveral times yet it’s not imported there 
solution: 

issue: Ok thanks for the suggestions. Yea, the app I'm creating is pretty big and can be pretty hard to maintain when ejecting. webpack is great too. I created my own boilerplates with webpack on personal projects You have a point there 
solution: 

issue: Hello! I'm converting my project to use project references. Here's something I don't understand: "Referenced projects must have the new composite setting enabled." ( [<-LINK->] ) Looking at [<-LINK->] , it is referencing "./tsc", but here: [<-LINK->] - it uses "composite": false. Why? 
solution: 

issue: ok found it : [<-LINK->] oh yeah sorry my question was unclear my goal is to provide globally available classes and methods to plugins similar to what jest does when booting 
solution: 

issue: @G-Rath [<-CODE->]  [<-CODE->] 
solution: 

issue: I'm working on converting some code to TypeScript, and having some problems. I think I've managed to find a minimal reproducer: [<-LINK->] . It seems like this syntax should be legal, but it isn't. Am I missing something? Oh wait, I think I found an issue that explains this ( [<-ISSUE->] ). Still not entirely sure I understand why I need an explicit cast, though 
solution: 

issue:  [<-CODE->] btw the playground seems to be up-to-date, and typechecks this with no problems with all strict options on. function test<{ readonly x: "bar"; }>(x: { readonly x: "bar"; }): voidis what it infers? 
solution: 

issue: Hmm, I’ve seen type checks that the compiler said “oh no, that can’t ever happen” but checkingtypeof u.x !== ‘number’doesn’t get any kind of message.  Maybe I’m wrong and that’s tslint. I’m just a little blown away at how easy that is to do at this point in the development of that type checker.  Wonder if it’s a regression. 
solution: 

issue: hi, anyone can help? I want to write a bracket operator that support generic but got stuck here [<-CODE->]  [<-CODE->] 
solution: You can’t make a generic index signature (it’s not an operator - there’s no operator overloading in TS). 

issue: I’m glad you knew what he was trying to do because I couldn’t figure it out That said I don’t think that will help if your key is a plainstringwill it? Because you don’t know statically if the string is one of the valid keys Hmm... now if only I could figure out why he wanted to map the keys toT[K] If it was just a definition and not a constraint, there would be no reason for it to be generic in the first place 
solution: 

issue: Trying to extend a base component (that is also a working component), however the compiler complains that my input props on the generic don't satisfy it: [<-CODE->]  [<-CODE->] Error: [<-CODE->] hmm so what's the proper way of declaring this? My google-fu said to do it that way from SO posts, so now after I re-read the manual i do see this is a CONSTRAINT, and not a definition 
solution: 

issue: how can i run typedoc  like nodemon ? hi, i run typedoc then this error occoured "annot use imports, exports, or module augmentations when '--module' is 'none'. what shoud i do ? nevermind, i fixed it 
solution: 

issue: is there any bundler who does update / cache code based on service worker but which allows to load most important files first for starting up as fast as possible? I need an online/offline app. 
solution: 

issue: Does TS diverge from JS in any way from handling of empty[]? console.log(myEmptyArray)prints out[]as expected, along withlengthproperty, but when trying to access it I see an error flash in the console before the page reloads (fun with rxjs and event emitter). By trying to access I mean, accessing thelengthproperty. nevermind, error occurring in same block, but not related to the empty array thoughBoolean([])evaluating totrueis rather surprising footguns galore, but yeah, need to learn the ropes 
solution: 

issue: suppose I have type str = 'foo' | 'baz' what is the best way to check if a string is of that type? not really handy tho I can do const isFoo = (s: string): s is 'foo' => s === 'foo' but what if I have n types I want to check with one function I was suggested this as well: [<-LINK->] 
solution: 

issue:  [<-CODE->] Is there a way to initializefin the declaration or do I need a ctor?  [<-CODE->] was easy, tried it, maybe I was code blind when do one add .d. in a file name? ok, thanks 
solution: 

issue: yeah I think that was the issue I was running tsc file.ts, instead of doing tsc in the root of my project@keithlayne I'll try again yeah that was it@keithlayne 
solution: 

issue: T extends BaseOptions is anything that is atleast BaseOptions but is a superset but can be a superset* I.E....  [<-CODE->] 
solution: because string can't be cast directly to OtherOptions. Gah I have to put it in teh generic. 

issue: Hello folks,It seems there is no real better place to ask about this.How do you guys implement reliable mutex under NodeJS ?I'm concerned with standalone mutexes - nothing with redis & alikes.Thank you.  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: And if I use "export declare definition Duck" then the duck module no longer compiles. 

issue: but error occured in vscode and tsc 
solution: which makes sense from .... "physical" (im tired) point. you know, it doesn't alter the final JS product,. 

issue: tusharmath: nice one! :D and here we go again... ok, lets give this a tinker. one sec :D  [<-CODE->] So you've got something like that? that's not giving me any issues, and i've got all the latest features enabled 
solution: 

issue: this says two versions of jquery loaded at once can cause the datepicker error [<-LINK->] 
solution: 

issue: Well I give up.  Was scrolling up to see what I missed but after 5 minutes still didn’t get back to my last message... I’ll just hope everyone’s problems are solved already UsainBloot: I don't think npm has any concept of an "optional dependency" so your options here are limited KutnerBitsrc: I tried it - nothing at all is printed to the console on first load, upon refresh it prints a "Loading" message or two and then hits the DatePicker error.  So the problem actually seems to be that upon first load it's simply not loading some stuff - the DatePicker error is always there but the relevant code sometimes isn't running for some reason After a few refreshes IE completely locked up so I stopped testing 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] thanks@fatcerberus, reading a bit more into it, I think im not thinking in the mindset of giving consumers all the tools to build using my modules so it should be a dependency, thanks! 
solution: 

issue: Oh sure, an elephant in the room makes a great conversation starter, but then it tramples you.  Not so fun anymore is it Now a PIG in the room that just goes around eating everybody on the other hand? That’s hilarious If you’re looking at the set of keys available for an object then intersecting the types gives you a union of the keys - because the intersection of the two types is only those that have all keys from both If you have a union you get an intersection of keys because you can only directly use keys they have in common 
solution: 

issue: Yeah, that's kind of were I was going, worrying that I was getting too clever This was where I was coming from, and trying to avoid being overly verbose: [<-LINK->] but instead of 5 keys and 2 types, I have 4 value types and 20+ keys actually, more like 40+ keys You can imagine that being a wall of generic declarations in a row 
solution: 

issue: When defining a class, what's the syntax to give it a type? 
solution: 

issue: JakeSidSmith: your example is getting the compiler options incorrectly 
solution: 

issue: Guys, can I do something like this? [<-CODE->] im trying to instantiate a generic with variables 
solution: keithlayne: The ticket was talking specifically about v8 so I take "allocated as an object" to mean the only thing being passed around on the stack is a pointer to some internal "bigint" object as opposed to operating on the data directly. But now it says that it cannot satify the parent. 

issue: anywill match any constraint but it's not type safe (it basically is an escape hatch from the typechecker) Wait what 
solution: 

issue: What is the difference between these two codesOK [<-CODE->] Error [<-CODE->] 
solution: Example of changing behavior on the left side: [<-CODE->] Are there any such specifications on the right side?. 

issue: We've encountered many a bug in floating point math before. It's hard to get perfectly right. You get buggy math just from a misunderstanding of the precision loss as you move away from zero (or even the lack of precision from -1..1), but it's also just "hard" (relative to fixed point of any sort) to implement floating point operations in hardware correctly. So long as you know enough not to use it for, say, money. I was briefly at a place that did that and none of them could understand why they were always over/under charging customers. 
solution: 

issue: I actually got it to do dot dot dot that time, with way too much work. 
solution: actually, in reality, I'm running Tern + Prettier + Eslint on npm on WSL, with Vscode on Windows. 

issue: HI guys. I'm trying to infer function arguments with no luck eg [<-CODE->] Any idea how? yes, same as ReturnType but for arguments got it [<-CODE->] 
solution: DSL apparently has lots of meanings - [<-LINK->]. 

issue: SimonMeskens: Well WSL looks a lot like DSL, and (in America at least) that doesn’t always mean Domain Specific Language. 
solution: 

issue: Sorry to allow working with effects** not side effects 
solution: idris is dependent types, right?. 

issue: yeah not exactly, but sorta, yes 
solution: reactive is a fancy buzz-word for stream-based compositional programming. elephant trumpet sound. 

issue: Like a list which has, well... a list of things It can only accept things of typeCat Sounds like (what typescript calls) generics Operations that are type-agnostic IthinkI’m getting it now 
solution: but that doesn’t sound tractable in the general case because each of those containers are fundamentally different. 

issue: the type parameter isn't structural what what are you talking about the type parameter plays no effect on type unless it's used in the type  [<-CODE->] true. 
solution: actually, the HKTs that I just posted still work. SimonMeskens: was your point earlier kinda that what we might call ’types' in a structural system are actually more like bounds that infinitely many actual types may satisfy?. 

issue: it might just work with destructuring 
solution: 

issue: Jaanilj: 1sec i'll write up some solution so you can do this... but then the problem is that K can still be number  or never which is why if you want complete type saftey you'll need to also do something like this  [<-CODE->] and then to get rid of the last error on x[key] you'll need to do  something like this... 
solution: 

issue: im not reallying follow this this what you want "_items can only be elements from the union Item if they were provided in the constructor"  [<-CODE->] 
solution: Itemis a type made up of interfaces, withtypebeing the distributed key. 

issue: I can't find a way to make it work :( I don't think@ShanonJackson's solution adds anything new you end up going in circles with no results  [<-CODE->] this one is such a bummer actually, that should benever 
solution: I don’t thinkinferactually really “infers” anything in practice - it just acts as a capturing wildcard in a pattern match (like a regular expression).  I don’t see how it could possibly be used to narrow types that way. 

issue: is there any way to define a type for the top levelthisin a file? I would really like to use TS with a file based plugin system, but it seems my only option is to allowthisto beanyand sacrifice all type safety and auto completion in this case 
solution: if the entire application is structured around file-based plugins which heavily use functionality implemented into their base which needs to be referenced viathis, which is an error with strict TS settings, then is it really worth using TS at all?. 

issue: Hexiann: No, this is not possible.  I think there’s a github issue asking for that but I can’t find it now 
solution: might as well just scrap TS and use plain old JS. Hexiann: Scrapping type safety of the entire program just because the globalthisisn’t typesafe seems a bit extreme?. 

issue: See I always thought ofmaybeas being basically[T] | [null]and I’m just like “okay, but how does this help” since if you map over that, you still always end up calling the mapping function.  But it’s actually[T] | []which now makes perfect sense keithlayne: Not familiar with rollup but it sounds like rollup might not be honoring your tsconfig and just using defaults (no strict checks) so you don’t get the errors? It needs more burritos No - because from the compiler's point of view inside the function it could be either number, string or boolean.  There's no way for it to narrow the return type just based on the call site You'd need to use a generic if you wanted that keithlayne: So this is basically my current understanding: [<-CODE->] interfaces can't have static members or I would put it there But I knew I missed something 
solution: 

issue: So for now you could make aMonadArray<T>to sort of get around that, but you see that’s not a good solution.  Plus it doesn’t really do anything useful that way.  We want to say somewhere thatArray,Maybe,Either, etc. are all monads, and sort of magically unlock that interface on all of them. 
solution: 

issue: Why the second version does not work ?Version 1: [<-CODE->] Version 2: [<-CODE->] 
solution: 

issue: fatcerberus: there is such a thing as a function monad as well  [<-LINK->] and probably my favorite: [<-LINK->] 
solution: 

issue: Norby125: you probably shouldn't make abstract methods generic. Just do this: [<-CODE->] manueliglesias:  [<-CODE->] 
solution: 

issue: aw crap, my proposed syntax doesn't work on a fundamental level :(  [<-CODE->] this shows how deep of a rabbit hole this feature would be strax: I don't think I've seen that variant yet let me check if it does anything new oh wow, it might let me quickly try to write HKTs in that 
solution: yeah, also seems to handle unions: [<-LINK->] <this%5B"argument"%5D>%0D%0A%7D%0D%0A%0D%0Atype%20Of<T%20extends%20TypeConstructor%2C%20A>%20%3D%20(T%20%26%20%7B%20argument%3A%20A%20%7D)%5B"type"%5D%0D%0A%0D%0Atype%20result%20%3D%20Of<ToArray%2C%20string>%0D%0A%0D%0Ainterface%20Box<A>%20%7B%0D%0A%20%20value%3A%20A%0D%0A%7D%0D%0A%0D%0Ainterface%20ToBox%20extends%20TypeConstructor%20%7B%0D%0A%20%20type%3A%20Box<this%5B"argument"%5D>%0D%0A%7D%0D%0A%0D%0Atype%20boxed%20%3D%20Of<ToBox%20%7C%20ToArray%2C%20number>. 

issue: keithlayne:  [<-CODE->]  [<-CODE->] note:overis flatMap,plusis concat 
solution: Makes sense since monadic bind expects the return value to be wrapped. But in case of JS flatMap it's apparently equivalent to.map(f).flat(1)which relaxes that requirement. 

issue: I saw that on my phone yesterday but didn’t read it.  The headline I saw was something about ‘code with no loops’.  
solution: And then an actual type using that could be like [<-CODE->]. 

issue: Interesting, myQuerywrapper in thefrommodule turns anything with an iterator into a monad.  I can make Maybes and stuff with this It's basically LINQ (or at least the method syntax) in JS I don't know if it's just the angle brackets or what but for whatever reason heavy type code makes my brain check out 
solution: 

issue: What aboutstrictFunctionChecks?  Does that make a difference Also I think I have a weird bug in my flatMap: [<-CODE->]  [<-CODE->] 
solution: 

issue: it’s normal I think you may be mixing your monads in that snippet I would say it’s not even “array” but “this certain behavior of arrays" 
solution: And yes I purposely mixed them - like I said I went completely mad with power. Yeah that’s not actually kosher.  I need someone with good words to explain that.. 

issue: like [<-CODE->] 
solution: Somebody (I think it was@webstrand) said he likes to use unicode names to keep the autocomplete uncluttered.  That’s kinda clever, but I don’t know that it would help you at all.. 

issue:  [<-CODE->]  [<-CODE->] When I can call this function [<-CODE->]  [<-CODE->] 
solution: 

issue: ? That's awesome I'm going to take this as a challenge 
solution: Feels like that would be actually hard, because of the structural typing.  Unless you could 100% sure say thatselfrefers to a specific generic type.  And then there’s all sorts of places where you essentially want curried/partially applied type constructors (so thatself<T>makes sense).  Again I can’t use words so much, but my  guts says it’s hard.. 

issue: keithlayne: it's very hard, you need type-level pattern matching that said, that's exactly what I wrote last year and yes, your type needs to be somehow matchable purely structurally you'd typematch for example a "thenable", not a Promise yeah, and then there's the whole variance/covariance thing assignability can be very tricky 
solution: 

issue: I'm on haha, but no time today easter monday and actually going to take a day off for a change goodluck 
solution: 

issue: Doesn't really fix the underlying issue, butarg: T | Mx 
solution: 

issue: @G-Rath late to the party, but: [<-CODE->] not sure if this solves anything. 
solution: 

issue: ya that sort of works, but not really. I think I've typed my API into a corner, so I've got to try and rewrite things anyway The current possible solutions either won't work, or destroy TSs ability to strictly type, creating a massive hole for errors to slip by - none of this is TSs fault. Like I said, I've typed myself into a corner, and now have to figure out a solution by pretty much rebuilding how my class is typed (and possible make a rather big deprecation) Does anyone know a shorthand for doing "map" interfaces, that map types in a distributed union to their distribution key? For example: [<-CODE->] I'm pretty sure you could somehow use conditional types to remove the need to manually define ItemTypeMap, but can't think of it right now :/ ah shit 
solution: 

issue: I'm using VSCode/Typescript React 3.4.3  for a React Native project and I'm having troubles at runtime with TextEncoderThe error is "ReferenceError: Can't find variable: TextEncoder"My tsconfig libs: [<-CODE->] Compilation is fine, I'm having this runtime error. 
solution: 

issue: is there a sane way to write a type that refers to "any non-empty interface"? [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: I didn’t know you could have generic type guard functions until I tried it.. 

issue: worst part, it was a meaningless abstraction of something that’s only used once.  I gotta get back to work. 
solution: 

issue: Functor is not always inside out for example, Fantasy Land functors are just the regular way 
solution: 

issue: haha@fatcerberusthats ok - no one was biting anyway please and thank you :) my hero <3 Ya, I get the feeling it's not possible either but so would you agree that that seems like a valid use case? 
solution: 

issue: Could I get a quick sanity check on function overloading: [<-CODE->] Oh actually I can just dropdatacompletely 
solution: 

issue: hola, have a typescript question and not sure if this is the place to ask (spent lots of time already scrounging google/reddit/Stackoverflow) 
solution: 

issue: <vague-question> I’m runningtscon a directory of.tsfiles, and for some reason it’s skipping over one of the files. I don’t see anything intsconfig.jsonthat would seem to cause it to be skipped. Are there any other conditions that might cause it to be ignored? 
solution: 

issue: Haha! Wow. Thank you@keithlaynefor your help. You’ve got hawk eyes! 
solution: 

issue: is there a way to constrain a tuple of tuples where there is a generic constraint between elements 0 and 1? 
solution: 

issue:  [<-CODE->] 
solution: 

issue: i've gone down the complex typing rabbit hole. should probably just do something looser and get work done. :D 
solution: 

issue: after reading the issue it says the issue in the error message i'm just going to assume "$"  clicking through to defintion will read somethnig like declare namespace "$" {user: {isLogged: boolean; name: string}; } is not the same shape as SetStateAction<contextType | null> because its missing auth and theme no its because both of those types dont have auth and theme in them take whatever type myCont is and whatever type user is, and they're missing on their types auth and theme const testType = myContconst testType1 = userwhat type is testType1 and what type is testType 
solution: so i use rest operator to update just the user and keep the others the same. 

issue: Does someone knows what this error means? [<-CODE->] I'm using react with ts i noticed, but seems strange i'm putting those there too  [<-CODE->] looks like my rest operator doesnt works, but at a console.log above this works 
solution: 

issue: @SalathielGenese Random chime in:I'm somehow new to react but it seems not to be ok with declaring root DOM on body, so I have to declare it on body > main. [<-CODE->] 
solution: 

issue: they had to introduce "as" because <string> triggers jsx syntax in tsx files <string> is basically the same asas string 
solution: would it make sense to sayvar bar as string?. 

issue: G-Rath: since your code has java-like names in it I thought this would be pertinent [<-LINK->] 
solution: but right click - no, alt-click no,option-clickworks.  Gitter blows.. 

issue: And the signatures and available methods keep changing across versions My favorite : [<-CODE->]  
solution: 

issue: Hi got an issue in [<-CODE->]  [<-CODE->] 
solution: 

issue: Hello guys! I was starting out learning typescript, i had prior experience in C/C++, python and javascript. I am using a course "Understanding Typescript" on udemy. Can you guys suggest me how i can get a good grasp of the language whether in form of resources or exercises? Thanks in advance! Nice idea! I'll go through that too! That is a course actually explaining many concepts and integrations of typescript with js and jquery. 
solution: 

issue: SimonMeskens: any thoughts on that tuple array literal generic constraint thing? I can file an issue. Just want to be sure that it's a bug and not a feature request. 
solution: 

issue:  [<-CODE->] Hey All, I am trying to type a functionpathOwhich takes an array of values[K1, K2, ...]and aninterface object | Recordwhos keys are optionally specified.pathOshould return anOptionof the value specified by the keys if that path exists on the object. However, I am running into an issue here whereError TS2536: Type 'K2' cannot be used to index type 'A[K1]'sinceA[K1]might beundefined. Is there a way to type this where if the paths existed it would return the correct type atA[K1][K2]even if that path might not exist within the interface? 
solution: 

issue: I’m playing with the code  [<-CODE->] That’s your implementation from earlier copied verbatim with that the FileReader function names are typechecked as well 
solution: So I’m not a huge fan ofkeyof typeof readers, I’d probably make that into a type alias, but overall, this lets you manage everything without repeating yourself or managing a bunch of types or other boilerplate.. 

issue:  [<-LINK->] any idea? ilpoo: still error  [<-LINK->] 
solution: Ohhh it was inside interface. Just dotransactionList: Array<ITransaction>;then.  [<-LINK->]. 

issue: niravgprajapati_twitter:  [<-LINK->] that seems a datePicker issue, or whatever formats your date. 
solution: 

issue: I'm getting compiler error when accessingobjecthere. Have I misunderstood howinworks? [<-CODE->] I thought that was the idea. Ref [<-LINK->]  [<-CODE->] Ah, I see the return type is missing. Thought I could make it generic. Nevermind. 
solution: 

issue: You've declared it asunknownwhich could be literally any type so you can't actually do anything with it keithlayne: You were right - they aren't about effects at all [<-LINK->] 
solution: don’t have time right now but will be sure to read it!. 

issue: Hey All,Have an interesting function I'm trying to type, not sure if it's possible or not with 3.1 mapped tuple types, this is what I have so far: [<-CODE->] This uses RXJS, a usage example would be something like this: [<-CODE->]  [<-CODE->] 
solution: 

issue: Use arrow functions instead andthiswill be always bound to the class instance@G-Rath  [<-LINK->]  Is there any reason why that doesn't work as expected? 
solution: 

issue: What? I'm a firm believer that supporting IE in 2019 is a crime against humanity. But, it wasn't that bad back when its latest version came out. Still not advocating for it today, though 
solution: 

issue: Ok, let me see That's problematic.  I cannot see how that will have the react-router inject the current route into my navbar component. 
solution: 

issue: what's the proper way to define types these days? My first thought was a namespace MyProject {} in a separate file not imported from anywhere. This would eliminate the need to think if I imported it or not and pollute the header section of every file, it would always be there behind a nice little wrapper. But apparently this is not recommended nowdays? 
solution: 

issue: Pretty sure that'll have the same problem. but it's ok - I've got it sorted :) 
solution: I don't think it has an official name but usually called a "star import" iirc. 

issue: keithlayne: , it's to distinguish that the first argument is the message and even though even that is optional it's still the "most strongly" recommended 
solution: 

issue: Yep JSON.stringify is terrible for logging for that reason 
solution: 

issue: Hello guys, I’m a 15 year old; I want learn c++ language because I use unreal engine and I use blueprints; but my teacher has says “you have to learn c++ language!” And I not got it, so anyone can help me? Thank you 
solution: 

issue: Hey @ShanonJackson , @keithlayne , @G-Rath [<-CODE->]  [<-CODE->] Per what@RyanCavanaughseemed to explain -I didn't get it - maybe I have no sufficient mathematical background to get it ?!- the issue we faced the other day is related todefinitionvs.call site. Hello Gareth  
solution: 

issue: bori87:  [<-CODE->] carpben:  [<-CODE->] keithlayne: Are you around? 
solution: 

issue:  [<-CODE->] should work 
solution: 

issue: Hi Everyone,I have a somewhat advanced issue, related to DeepReadonly generic.I'm in the midst of converting all the components to be immutable (at least difficult to mutate), by wrapping the State and Props with the DeepReadonly generic. This worked well for most components, but in one component things don't work as expected.Here are the types I use: [<-CODE->] converting some components worked well, but when converting the following component: [<-CODE->] It showed errors in it's parent. Looking closer it couldn't recognize the type of its props. For example, when checking the type of [<-CODE->]  [<-CODE->] Any idea why it can't recognize the Props of this component? It could recognize the type of the props of other components well. 
solution: 

issue:  [<-LINK->] Can someone help me understand why line 47 is not an error 
solution: 

issue: Would you shorten it to minimal, please ? Is this a equivalent ? [<-CODE->] 
solution: Looks like {} === Promise with typescript. Which is correct. 

issue: I'm a vanilla js developer, typescript looks so cryptic to me That seems like a very painful process... Thanks. I tried starting areact project with TS and kept having toa dd ts-ignore to get it to biuld, kinda defeats the purpose. With the typescript in there I can't read it. 
solution: 

issue: The error isn't on the typeguard function, it's specifically on sigils.includes - though yeah that's annoying@fatcerberus that's my point - like it makes even less sense for that error to happen inside a typeguard, b/c thats the whole point of the typeguard! AH but I have a way around it without casting ;) const theSigils: string[] = sigils; that works fine yes its an extra step, but its technically not a cast, so it's a bit safer 
solution: 

issue: I do remember coming across the line joining issue but I can't remember how I fixed it, cause it never came back 
solution: 

issue: Hi everyone,In a tsx file I have a difficult inserting a youtube iframe. with anything besides src. it doesn't accept fullScreen etc. any suggestions? I don't want to add a library for this purpose The error I get is: [<-CODE->] Code from a library won't help - there is no problem with js, but with the signiture of iframe I should be able to pass an iframe allowFullScreen as boolean. probably the best is to ignore it.... or do you think otherwise? 
solution: 

issue: Fair ? What is fair in this life ? Time to order coffee sssssssssssssss And get to the right forum I hope you can work even at home. 
solution: Well that's not actually true i should have said I only know loosely typed languages and primarily work on the front end and Node on the backend. I also know some ruby and LUA which don't really ehlp so basically i only know javascript XD. 

issue: I heard Daniel was around, and decided to pop my head in also@SalathielGenesewhat did we concludeexport * from <x>was called the otherday? I've forgotten already 
solution: but wait, is that the spec name? idk for some reason I thought it was something a bit... longer?. 

issue: Gitter doesn't allow likes :( The emoji identifier concept is cute for personal stuff...ends up not scaling too well though 
solution: 

issue: I thought the name was "star export" I was right 
solution: Is there anyway to get the type of the current class, for a typing method in the current class?. 

issue: On the tuple, so it doesn't widen it Or is it getting widened to array at the spread operator?  If so that's tricky 
solution: 

issue: Hmm I'm not sure how that can work because my.apply()expects a list of functions [<-CODE->]  [<-CODE->] I'm not sure how to translate that haskell example exactly Maybe I implemented it wrong 
solution: 

issue: hello guys I get an error TS2304 when I reference an array of objects of another class any ideas? src/user.ts:7:19 - error TS2304: Cannot find name 'Repo'.  [<-CODE->]  [<-CODE->] anybody home? Do you want to see my tsconfig.json ?  [<-LINK->] There is a limit in gitter So I used pastebin 
solution: 

issue: lol Hello@G-Rath  [<-LINK->] My last intervention 
solution: 

issue: @G-Rath [<-CODE->]  [<-CODE->] So I expect it to resolve to(string | Error)[]and then yourattempt()call would be fine... but it's not Weird 
solution: 

issue: Interesting, thanks!. I'll check it out when I'm back at my laptop Meanwhile: is thatas anycast needed? 
solution: 

issue: from what i know you can't make generics "required" in that sense. 
solution: Yeah, it surprised me because I had thought if there were no available inference sites then it would make the type parameter required instead of auto-inferring the constraint... I had forgotten that thePromiseconstructor has this same problem (inferring asPromise<{}>because theresolve()call is not an inference site). 

issue: Anyone SSR'ing their frontend ? SalathielGenese: there's 10000000 solutions to that problem your describing and realistically it depends on alot of things if your used styled-components just createGlobalStyle inject that class with scrollstop done if you want to use vanilla javascript just use document.getElementByClassName("XYZ") if you want to use React and that element exists in the "react" world which is the correct way to solve this, you can create a context following react's context API then deep in your tree you can just call useContext(ScrollStopContext)then just go context.applyScrollStop(); i don't know if anyones solved a problem like this before (unrelated to Sala's problem)But i have a hobby project i work on on the weekends in NodeJS i have a React app. i want to SSR render my react app, but to do that i have to import my frontend into NodeJS meaning my Typescript NodeJS backend now typechecks and compiles my frontend you just can't deconstruct it like that i think  [<-CODE->] 
solution: 

issue: G-Rath: i c, thanks for pointing out to transformer just decided to switch to string-based enum now, how would you case the string-based enum?  [<-CODE->] seems does not work@G-Rathany thoughts? triedcase MyEnum[MyEnum.MyValue]andcase MyEnum.MyValue.toString()seems does not work yeah, myString: MyEnum it is just a string 
solution: 

issue: am passing that as function param  [<-CODE->] seems like all working in [<-LINK->] need to check my code trough 
solution: You don't need thetoString(). and that will infact bail out of type checking (sort of). 

issue:  [<-LINK->] About Git issue··· I somehow has the feeling that it has to do with Microsoft GitHub acquisition !  [<-LINK->] @keithlayne- I read that but had like to hear from community. I think my scenario is quite complex, with redux and some external API complexity...  May 5, 2019 4:48 AM@ShanonJackson è Isn't context API deprecated ? In my case, I'm usingreduxexclusively for state management 
solution: 

issue:  [<-CODE->] I have been scratching my head over this whenforkis defined as a property tsc checks contravariently and throws up ( this is what i want) where are defining fork as a method i receive no errors. is it like a bug? 
solution: @kuncevic String-based enums aren't bidirectional because it would be too easy to accidentally cause aliasing [<-CODE->] This can happen with numeric enums too but it's less likely you will use numeric keys. 

issue:  [<-CODE->] Would a sane person provide bothlocationandpath? 
solution: 

issue: Does anyone have experience with submitting a PR to a defeinitelyTyped library? Or alternatively with Travis CI?I submitted a small PR to defenitelyTyped/React. It fails the Travis CI build, and I can't understand what's wrong from the log. Thanks@ShanonJackson [<-LINK->] 
solution: 

issue: I have an interesting type issue... [<-CODE->]  [<-CODE->] notice the second item in the array... this should not be allowed. Either I'm missing something, or TS is broken :P the array is type A or B (not a combination of both) - and item 2 has both properties, which is not ever an option lol (I know that the second item technically satisfies the minimum requirements of the array type, but by this logic, I should be able to type the array as abaseItemarray, which I cannot, coz that won't allow either of the specialA or specialB properties - can't have your cake and eat it too...) 
solution: 

issue: DenysMikhalenkoWalmart: Well, it's not necessary, if the type ofobjis known and not possible, if not. If you just want to cast, I wouldn't use a function 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: Neonit: There are limitations in how far static analysis for strict null checks will go. You can use the!on the field or at use site where you are sure it is notundefined: [<-CODE->]. Neonit: It's just for not null assertions. 

issue: bori87: if the interfacemustbe like that then you can't assign the enum value to it - simple as that.  Enum identifiers are not interchangeable with their contents 
solution: 

issue: I'm doing this a whole lot: [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Is there any way to prevent the following from happening? [<-CODE->] The problem is that the return implicitly casts to unknown, which is wrong in this case. I don't think I can use conditional types to detectunknownorany, can I? I get why it works the way it does, I'm just not sure how to avoid it. I need anEmitter<X>where X is some type which can't be assigned to. Maybe I can usenever... 
solution: 

issue: And if I really want to, I can cast values tonever. That works perfectly, thanks Is there any way to detect if a typeTisnever? 
solution: fatcerberus: Because there's a method on it to emit(value) and collect the return values of all subscribed functions. It's an odd extension to an emitter, I know, but the class internals are the same regardless of whether or not the return values are collected, so I merged the two concepts.. 

issue: Is there a nice/short way to do get the type of the props of a react component, factoring in props that have default values?i.e [<-CODE->]  [<-CODE->]  [<-CODE->] Effectively, I'm wanting to mark all properties inXas optional if they're defined inY(XbeingProps, andYbeingdefaultProps) I think you're trying to solve a different problem. My code works pefectly in React but if I do [<-CODE->]  [<-CODE->] What'sArguments? 
solution: 

issue: Sorry dude, I have deleted my message. 
solution: as half an englishman, I resent having my own country used against me like that. I wonder how many people actually know that the term "spam" comes from the brand name ofcookedporksomething trying to resemble pork. 

issue: dragomirtitian: webpack rollup ? Any should work 
solution: 

issue: Hey everyone, I have a .js file and associated .d.ts file that I'm trying to use from TS. The js file exports a few functions, and also an init function viaexport default init. I'm trying to do aimport { my_function, default as init } from './lib.js';and call them.my_functionseems to work fine, but when I try to callinitthe compiler throws aTS2349: Cannot invoke an expression whose type lacks a call signature. Type 'typeof import(...)' has no compatible call signatures. What do I need to do to get this to work? 
solution: 

issue: >< gonna delete that then  [<-CODE->] it actually correctly infers the params and return type in thedoStuffcall at the bottom but there are errors in the definition ofServiceCallParamsandServiceCallReturnand it yells at me in theuseServiceimplementation as well 
solution: 

issue: I can't see any reference toComponentTypeorFunctionComponentin the last link you gave. 
solution: 

issue: I hate async-await, can anyone spot where I missed await in this code? [<-CODE->] that error is definitelly a missing await error 
solution: 

issue:  [<-LINK->] UnhandledPromiseRejectionWarning is the async equivalent of an uncaught exception The error is because something tried to access a Proxy after it was revoked 
solution: 

issue: I found that, only chai uses it in my dependencies, definitely not that hey, is Type Error a cause of PromiseWarning? 
solution: 

issue: dbenson24:  [<-CODE->] 
solution: 

issue: Certainly possible. What wouldBind<(a: string, b: number) => any, [number]>do? Error? 
solution: I think it requires bad recursive type aliasses for a general solution, since you can't have two spreads in parameters .. ie this will not work: [<-CODE->]. 

issue: Error. If it returnsneverBind is easy to define 
solution: 

issue: There is a reason you have to go though hoops to get it the compiler to let you do recursion in type aliasses.. Simple recursion such astype DeepReadonly<T> = { [P in keyof T]: DeepReadonly<T[P]> }is ok since the recursion goes down the property types.. but other types of recursion are not really ok, you can trick the compiler into it but it's not officially supported .. 
solution: 

issue: Recursion via properties is okay (you couldn't represent e.g. trees otherwise!).  What's not allowed is referencing the same type directly in its definition, e.g. [<-CODE->]  [<-CODE->] Note that even if you trick the compiler into accepting a recursive type it will automatically fall back toanyafter 50 steps trying to resolve it--which sounds like a lot but really isn't 
solution: 

issue:  [<-CODE->] Pasting screenshot for same  [<-LINK->] However, an [<-LINK->] on Github claims that it should work. tusharmath: Trying to understand why? 
solution: 

issue: Hi guys, i have  a question:Type 'string | number | boolean | (string | number | boolean)[] | undefined' is not assignable to type 'string'. Yes, i got the error. The problem is i'm assigning a string to it but it is getting this error anyway i think is because the element starts as undefined and then becomes string what can i do to work around this?@Obbi89 i did try some like this one:type: option.value ? option.value : 'va', and thistype: option && option.value , option.value starts undefined, then i click an option and becomes a string that is what happens 
solution: it is this:string | number | boolean | (string | number | boolean)[] | undefined. 

issue: VulcanRav: it means if it can't infer a type automatically then it will use whatever is on the right of the equal sign.  IIRCT extends Foo = Foois redundant because the default is already to use the constraint anyway 
solution: 

issue: Is it possible to create a generic interface with a property typed to an array of keys (ideally aSet) that match the interface/type that's passed to it? [<-CODE->] I wantkeysto be a "defined" key in the interface—not a string index (think that's what it's called) like you have it's the type assignment ofkeysthat I'm not sure how to do ha! can't believe I had the answer in my question...swear I tried that and it didn't work...doh! Is there a way of filtering out certain keys when usingkeyof? 
solution: 

issue: outFiledoesn't work with most module formats (as the module loader expects to be able to find physical files) 
solution: 

issue: Hey all, compiler question. I have"noImplicitAny": truein mytsconfig.jsonbut it happily compiles just fine? What exactly is this setting supposed to stop? even my editor's linter thinks this is wrong  [<-LINK->] 
solution: also a different problem but I think this library is swallowing my errors in--respawnmode. Also also unrelated but I think this sublime text plugin might not be cutting it. What's the best IDE for typescript? Vscode something?. 

issue: cool. that worked. Thanks 
solution: 

issue: Why would they mark the ticketFixedwhen its obviously not fixed :-/ I'm almost tempted to dig into the tsc source and see how hard it would be to add a newcheckAllImportsflag 
solution: It took us all these years to getas const, didn’t seem to be sorely missed, but now that we have it it seems everyone has a use case that calls for it.  I wonder why.... 

issue: not necessarily other languages allow adding user specified methods to an interface, and I don't see why typescript wouldn't be able to either, unless they just chose not to i mean, so long as you implement it too, obviously 
solution: It’s just a description of the shape of the object so the compiler can verify it. 

issue: Something like this: [<-CODE->] 
solution: Gerrit, I was not expecting such a detailed answer, raher just a hint. I'm really trully thankful for your help here. Much, much appreciated <3. 

issue: Hello folks,This is really enigmatic.React Hook "useRef" is called conditionally. React Hooks must be called in the exact same order in every component render  react-hooks/rules-of-hooks Let me throw my code here, if anyone finds what'sconditionaltherein  [<-CODE->] Why lol@ShanonJackson  [<-LINK->] What's this error, pls ?  [<-LINK->] Same error withstyle: {} Meanwhile, the following works  [<-LINK->] And this too,  [<-LINK->] Good catch@fatcerberus. Tx :) 
solution: 

issue: Okay I (think I) see now, because you useObject.assignto dynamically populate the properties at runtime, TS can't statically verify that And unlike say,[x: string]style index signatures,[K in keyof T]properties are not optional?  Is that it 
solution: 

issue: The comma there doesn't do what you think it does... [<-LINK->] So it turns out myfrom.jsis an implementation of a concept called "transducer" and they are apparently very, very difficult to type.  At least I know it's not just me. 
solution: 

issue: OK, not the brightess example at reach now 
solution: By the way, guys, I'm porting a math library from CoffeeScript to TypeScript and I've got one problem. We've got a pre-processor here which allows us to use math operators like-or+to operate on vector-like structures (and also other structures like images). I know I can use the typescriipt compiler API to get its AST, so I can read a TS file, convert it to AST, modify and output a modified text back without such operators (converting every operator to some function). Would it be possible to somehow "plug-in" such pre-processing step to typescript compiler, so for example the IDE we use would not report error on wrong-or+usage? Askign it simpler – I want to ask TS compiler to run a custom pre-processor before checking the file. 

issue: OK, so I'm not the only guy staring at something tonight. That's rather a good sign. What about [<-CODE->] = = = [<-CODE->] 
solution: 

issue: And due to prototypal inheritance, if you were able to only add some methods,thiswouldn't meet the contract that those methods expect unless they were bound, which causes even more problems... probably not a good idea. If you need truly private methods, use a closure 
solution: 

issue: It really seems to work. I need to slowly go step by step to understand what magic you used there! btw this playground is live, so you can see my changes right? 
solution: 

issue: consr fn = <T>(T | (() => T): T => typeof v === 'function' ? v() : v; Ffs can't edit on mobile But anyway: anyone got any tips on how to properly type that? const fn = <T, TFn extends T | (() => T)>(v: TFn): T => typeof v === 'function' ? v() : v; That works, but I feel like there should be an easier way? 
solution: 

issue:  [<-LINK->] Hi guys. Could anyone see the pic above and get a piece of advice how to work around assignable warning? 
solution: 

issue: You've got to type-cast the event.target. Typescript can't tell where the ProgressEvent originated from, so it forces you to explicitly specify the type of the target. 
solution: 

issue: Thank you@kresli. However, I want...optionsto override the defaults, so they need to be spread belowkeys: ["a", "b"] 
solution: 

issue: I'm not managing to reproduce the error - tsc compiles that code without any issue What is emitting that error? 
solution: 

issue: so passing context down to pipe is not an option? [<-CODE->] 
solution: rederers doesn't want to know any addition how to setup the command, they want to describe how they should look like, bind to its properties like visibility, and for example clicking on a button, triggers an execute event on the command, nothing more, nothing less. 

issue: So I understandwhythis is an error but it's still really annoying [<-CODE->] 
solution: I want the type of MODE.NONE to be 0, but not the type of a let copy. 

issue: fatcerberus: Type assertions cure all ills ? or all errors in this case :P Yes ? I think there is a heirstic as to when things get widened and when not not sure what the rules are 100% .. I think if the literal type comes from an object it is preserved [<-CODE->] depends what you want to preserve here. If you need to ensuremodeis0 | 1 | 2then widening0to number would have not been useful either ..  [<-CODE->]  [<-CODE->] Again unsure what  your end goal is here .. 
solution: 

issue: dragomirtitian: Sounds interesting looking forward to reading your answer. Thanks! 
solution: 

issue: Hmm... here's a tricky situation: [<-CODE->]  [<-CODE->] 
solution: 

issue: what’s the type on fun? is it notT? apply<V extends Parameters<T>[0]>or something? 
solution: 

issue: I don't have all the types, so I just guessed at what they are, but you can use conditional types to makeapplycause an error. [<-LINK->]  [<-CODE->] 
solution: 

issue: Also: [<-CODE->] 
solution: carpben: not sure if it's a fully satisfactory answer .. but this is my 2cents. [<-LINK->] . Maybe ask on GH if you want a more official position ?  Even with 'in the open development' sometimes finding the rational for decisions is not easy.. I think babel wants that, and CRA uses babel, so that’s why it’s there.  I didn’t put it there.. 

issue: Hello , I have a question regarding the compiler and web workers. So in my case I have worker script and has the importScripts in it, what would I need to do to emulate/make it work? Because the compiler throws importScripts is not found/defined. 
solution: I did an experimental rewrite offrom.jsthat uses an iterator-based setup (like LINQ itself); while this made thingsmucheasier to type (and allowed for lazy zip), it did hit my perf pretty hard.  Still 2x faster than lodash though.  Lazy.js uses the LINQ setup internally too, I can't figure out what his secret is to being so fast!. 

issue: Is there a way to get the specific type of an instance from a constructor/class type? [<-CODE->] keithlayne: I've been using it and it works quite well. Sometimes the built in eslint rules don't work for TypeScript but they've been slowly cleaning those up I don't use React unfortunately The fix on save thing is just how eslint works for some reason I'm guessing it's a bug in the ESLint plugin for VSCode Seems likeInstanceType< typeof specificThing>only gives the generic type :( 
solution: 

issue: If you want to look at it and maybe you can discover the issue: [<-LINK->] 
solution: I want to build a typescript plugin to validate the sql in code. But the validate function is async, like pg.query('explain sql'). Then how can I build the getSemanticDiagnostics method?. 

issue: carpben: Depends on the definition ofPrimitivebut probablyunknowncan't be reached yeah .. i would rather useneveras a marker for should not happen ... 
solution: 

issue: Hi, My day is starting, and was starting greatly  [<-CODE->] ^^^This works great  [<-CODE->] ^^^ What am I missing please ? BONUS [<-CODE->] ^^^ This alone works too Here is [<-LINK->] I sorted out with [<-CODE->] But still, I'm looking forward to understand the above error a mapped type can't contain other members i think May 14, 2019 12:31 PMTx @dragomirtitian 
solution: SalathielGenese: I think thismicrosoft/TypeScript#26797will enable more flexible index types when (if?) it comes out. 

issue: SalathielGenese: might have been cleaner with an intesection  [<-CODE->] a mapped type can't contain other members i think 
solution: 

issue:  [<-LINK->] Does anybody have any thoughts about how useful an uml-style explorer would be in vscode for custom annotated typescript classes?I am thinking about something like this: It would be quite some work though. 
solution: 

issue: keithlayne: - The point is precisely NOT at the call site 
solution: The only way a constructor would ever be pure is if it's a singleton. The problem is not lying at the call site. 

issue: fatcerberus: - I'm not sure to get your issue 
solution: 

issue: Well you can't Code excerpt ? :D  [<-CODE->]  [<-CODE->] 
solution: 

issue: I don’t really understand why my type guards have no effect.  OnlyArray.isArraydid anything for me.  I feel dumb. already deleted, but pretty much what I just said. 
solution: 

issue: This worked, detecting the array/arraylike case first: [<-CODE->] What Icouldn'tdo was detect the iterable case first 
solution: 

issue: Is there a room for asking help? Or is this it? When I run tsc, it doesn't create an output dir Although it's defined in tsconfig.json Everything worked fine a while ago. And I'm all out of ideas. 
solution: try adding new before the return. nvm that has nothing to do with it. 

issue: keithlayne: ah sorry I missed theInstance:) however, static props of Wrapper's returned class are lost here :/ one way how to fix this is not to use generics but I'm sure this would have consequences [<-CODE->] 
solution: 

issue: Fair enough, but that doesn't seem too big of an issue for me. 
solution: 

issue: Anybody have experience with buggyfetchin old browsers?  Specifically in an old version of chrome it treats utf-8 as latin-1 and I don’t know how to tell it not to.  I know how to use aTextDecoderbut I’m not doing that. I had the brilliant idea of doing: [<-CODE->] …which throws on the old version (data URIs not supported), and works on the new. 
solution: 

issue: You can use them along side eachother, as you slowly migrate but the problem you'll run into is the same problem flux has is that you'll need to be able to talk to eachother Very wierd how you can't transpile i don't know anything about RhinoJS though so maybe i should read 
solution: 

issue: XY? 
solution: I see. I have an existing package that exports two static tables (the entirety of the code ismodule.exports = { ascii: require('./tables/ascii.json'), unicode: require('./tables/unicode.json') };. The contents of the tables is well-structured and I want to provide typing information for consuming projects.. 

issue: SalathielGenese: i dont think its possible 
solution: 

issue: Hello, [<-CODE->]  [<-CODE->]  [<-CODE->] My environment macOs  10.14.4 [<-CODE->]  [<-CODE->] Do you have any idea what the issue?Thanks! sandersn: Thanks for your response, but it doesn't help 
solution: 

issue: maybenpm install -g gulp-cli? hmm. If nobody else here has any ideas, can you file an issue on the issue tracker? I'm not an expert on gulp and gulp-cli is the only idea I had. 
solution: I was thinking about filling an issue, but I decided to ask here, before.Thanks.. 

issue: A bit late@fatcerberus- Here's CJSconst  { Query, default: from }  = require('linq'); artem-galas: - What are gulp versions ? :) 
solution: If you only export one thing, I would definitely use default because you already have a namespace in the form of your filename- why make the user remember two names.  It gets murkier for modules that export multiple things. 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Another vote for[1, 1, 4]here,[1, 4]is very counterintuitive. 
solution: you gather all of your friends to take a group picture, there's Tom, Dick, Harry and Tom. now you remember that Dick is a massive dick and you don't want him on the picture so you say "everybody stays except Dick".. Gerrit0: If you want to follow my progress (not ready to publish this as an npm modulejustyet) and/or test stuff out, here's my repo forfrom: [<-LINK->]. 

issue:  [<-ISSUE->] Any thought ? 
solution: I don't know how I feel about that but I foundthisamusing [<-ISSUE->] because the OP basically wants typeclasses and doesn't know it. Despite the fact you can already do this withextends, I (not-so-)secretly kind of really like that spread syntax. 

issue:  <insert xkcd> Not just for c++ anymore! 
solution: 

issue: thedefinitionof the type doesn't depend on a value though. The type assigned to a value varies based on control flow but the types themselves are made up solely of types yes, except that the values are really literal types, and you can't do math on them fatcerberus: Why ThisType<T>? no, it is for typingthisin one of your arguments not thethisof the function itself in other words [<-CODE->]  [<-CODE->] 
solution: 

issue: classes and arrows have started to edge it out, but it's still kind of appealing. very hard to type though. 
solution: 

issue: Newbie problems here.  I have my first piece of Typescript in my project and compiling and working but I added the Bing Maps d.ts and I'm not getting any Intellisense.  Anyone with troubleshooting tips? Visual Studio 2019 It's a client side Blazor app (why do anything simple?). I might be on to something from my google searching though. The project settings are set to a higher version of Typescript than is actually installed.  Making my head hurt looking at it but that may be the issue. 
solution: I use VSCode for TypeScript stuff, never tried with full VS.  I basically only use VS for C/C++ and C#. 

issue: Gitter is the glitchiest thing I ever saw Arrow functions take theirthisfrom the surrounding scope, it’s as if you used.bind(this)on the function  [<-LINK->] See section “No separate this” If you want a dynamicthisyou need to usefunction() {}like the old days I mean you could define all those props but they wouldn’t actually act as swizzles You could define a type which has all 24 permutations but I don’t think there’s a way to automate that within the compiler using e.g. a type alias or something Hmm... someone posted a link for a JS preprocessor thing here a while ago... too bad I don’t remember what it was called And yeah just realized there are actually more than4!permutations because you can repeat elements 
solution: 

issue: Hi! Would there be any easy way to define in typescript a XYZW swizzle type? I mean, a type which will have propertiesx,y, ...,xx,xy, ....,xxx,xxy, ...,xxxx,xxxy, ... ? Im looking for some generic type that I could provide with a list like["x", "y", "z"]and it wil generate such type for me 
solution: 

issue: I'm kind of surprised this isn't a type error: [<-CODE->]  [<-CODE->] By the way, someone here might find this useful: [<-CODE->] Possibly related/same issue as this? [<-ISSUE->] Is there a type that meansunknown function?  The closest I can get is(...args: never[]) => unknownbut that will still let you call it with no arguments 
solution: 

issue: Basicallyfrom(miscStuff).typeOf('function')- okay we know these are all functions but not what we can do with them.  Likeunknownbut with the additional constraint that its known to be a function Similar to how you can't do anything withobjectbecause you don't know the properties it has 
solution: but there’s a way in JS to introspect an object and find out its shape.  Not so with function arguments/return type.. 

issue: Isn’t it great when you find a bug and it turns out to already be fixed? [<-ISSUE->] That undefined check on id and email is redundant but yeah pretty much.  Just validate it like you would always do and the compiler will figure out the narrowings 
solution: 

issue: that’s a garbage translation I’m out of my depth on MP already 
solution: 

issue: carpben: did you find the issue with the code ? There are a lot of messages I'm not really planning on reading 
solution: 

issue: You could use.npmignoreor build to different directory, copy package.json there and publish from build dir. 
solution: There’s also.npmignore, but that’s not as good a solution.. 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] the main fuck-up here is that they even allowed package names with pseudo-extensions at all it sounds like a workaround, yeah.. plus the mindset fits - a JS module/package can be single no-nonsense .js file (and a lot of the times is) so you name your package that. like i said, the NPM naming is fundamentally broken. 
solution: 

issue: heh, that issue you linked is frustrating 
solution: 

issue: SalathielGenese: Not 100% sure I would add these .. I have mixed feelings even about them addingOmit 
solution: 

issue: has it ever happened to anyone that "paths" aliases work when doingtsc buildbut not when doingconcurrently \"tsc -w\" \"nodemon dist/server.js\" or usingtsc-watch it says it can't find module@user/indexwhen i run it from watch, but when i just build my code it builds fine i defined abaseUrlandpathsin mytsconfig.json 
solution: 

issue: ilpoo: I would say that it is shorter thanundefined, but why not aliasingvoidtoundefined?! But you're right I think they wanted to please some C# guys around 
solution: 

issue: I can't remember when I'd last used the void keyword 
solution: 

issue:  May 21, 2019 12:49 AM@rhys-vdw What you call confusing, I trend to call improvement/convenience. [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] What can you actually do with the keys ?You can constraint some types Not index onA | B You remember mySplittype the other day ? I'am crafting a flexible form validation API for React I have some constraintsenum Constraint { MIN = "MIN", MAX = "MAX", · · · } Those constraints are fields for enforcement, for instance{ 'MIN': 12, 'MAX': 31 } And so are some other types around But you can't force anyone nor is it reasonable to specify all constraints So I crafted theSplittype to have something like{ MIN: number } | { MIN_LENGTH: number }etc. And theSplitis carried around. Readif specified, at least put it one constraint And if youkeyofon a union, it won't help you mush to figure constraint enforcement keys  [<-CODE->] 
solution: 

issue: Anyone here have any knowledge or usage of Typemoq? Having a bit of a weird issue and trying to pin down whether I'm using typemoq wrong or I've set it up wrong or what 
solution: 

issue: SalathielGenese: the elements are considered immutable. Although personally I prefer to use render props thatReact.cloneElement(children)because it's not type safe.  [<-CODE->] vs [<-CODE->]  [<-CODE->]  [<-CODE->] In the former you'll get an error becauseTakeX'sxprop cannot be detected. 
solution: 

issue: Interesting. I'll have some reference to start with. Thank you very much. Howdy folks,  [<-LINK->] With the previous definition What is the meaning of the following error ?  [<-LINK->] However, just adding a child seems to fix the issue  [<-LINK->] Hmmmm  [<-LINK->] I was said that I cannot constraint React component children type by element but element's props I replaced props definition withFC [<-CODE->] But am getting the same error as above So my question is: WhichElementis that error about ? HTML, JSX, React or else ? OK, I narrowed the error to something meaningful I was not using the props It should have been  [<-CODE->] Type 'Element' is not assignable to type 'Props' 
solution: 

issue: so what exactly is the problem? why can't you just include jest in a project, write tests and run them? 
solution: 

issue: fabiospampinato: - I'm not sure to follow you Are suggesting that this will/should error ?  [<-LINK->] In the first scenario where you transpile to ES5 
solution: 

issue: I'd be kinda worried aboutio-ts's dependency onfp-ts. It's a complex library that tries to provide type-level functional programming. My experience with complex typescript types is that they either slow way down,  or break unexpectedly. critically, the types are unintentionally turing-complete. There are all kinds of weird edge cases where inference just fails deep in recursion Personally, I use this: [<-LINK->] to validate untrustworthy objects. but it's performance characteristics will be bad at scale 
solution: 

issue: The docs says you can't Simpler to returnK 
solution: basically i want to drop keys from one object that aren't in another. 

issue: @Derya - [<-CODE->] ??? 
solution: Derya: , most people use errors for control flow, you throw something and it bubbles up until you either catch and handle it somewhere or just let it crash the whole application. the Either approach is a marginally newer and so far,I assume, not as widely used. just keep in mind thatmostlibraries that you find for JS/TS are written with errors in mind and do throw stuff so even if you want to use anEitherfor error-handling you still need to wrap those errors coming from the libraries in whatever functions you call them. 

issue: keithlayne: Wait - really?!filterover a type predicate changes the type of the collection?  That’s amazing Ah, here's the trick: [<-CODE->] Thanks for pointing that out, now I'm going to add that tofrom.js 
solution: The best way that I could find for working around the issue I mentioned earlier about extending a native es6 class from an es5 package is to check if the passed class is actually a native class and not just a function (return typeof x === 'function' && /^class\s/.test ( Function.prototype.toString.call ( x ) );) and if it is then I'm doing the actual class extension insideevalpretty awful, but I couldn't find any other way of doing it, unfortunatelyclassis a reserved word and it can't exist outside of eval as regular code in es5 environments (plus it would have been transpiled down to es5 by TS if this wasn't the case). 

issue: I don’t know what that decorator is supposed to do, but in general you can never use a type as a value. 
solution: I was thinking so... thank you. Type comes from class-transformer.. If they are known I’d usePartialfor reduce.. 

issue: { foo: "bar" }same as javascript what does your code look like? 
solution: Never useany, unless you have no other option. TypeScript is inferring the type ofacc, but the inferred type is missing an index signature.. 

issue: Oh, it's reduce. Try{} as { [key: string]: Whatever } I prefer{ [key: string]: string }toRecord<K, V>because it doesn't obscure the fact that typescript believes that all keys on the type are defined 
solution: 

issue: if you subclass Error you can useinstanceof.  Do whatever you’d do in JS. 
solution: for example, up until recently object keys being traversed in the order they were inserted was undefined by the spec. all I mean is that unlike C or C++ there is no concept of undefined behavior in the spec. 

issue:  [<-CODE->]  [<-CODE->] Does anyone know if this relies on undefined behaviour? Or is this safe? *the behavior being,this.firstis defined beforethis.second 
solution: 

issue: Appears from shadows** I don't know what you're trying to do@JordanBoltonMNbecause i hate reading up the chat but theres a few things in that snippet than can trip people up interface FooRecord extends IRecord<number> { }interface BarRecord extends IRecord<string> { }have the same type even though have a different generic and that line fails because it can't prove that for all T's the resultingresultwill be a FooOrBar 
solution: 

issue: It’s those darn fire-breathing gold-pooping ducks again a.k.a. structural typing @keithlayne Thought you'd find this interesting: co-monadic analogue of flatMap: [<-CODE->] I thought about this earlier today and decided I had to implement it :laugh: 
solution: 

issue: Hi I need to add a property in HTMLMediaElement which is missing in [<-LINK->] basically add [<-LINK->] Basically to work around this [<-ISSUE->] I just opened a bug report [<-ISSUE->] 
solution: 

issue: don't like v8 for whatever reason? or are you doing embedded work? @carpben I'm not really sure what's going on. [<-CODE->] Why doesn't this pass type the typechecker? 
solution: 

issue: webstrand: , did you have a chance to look at the demo? [<-LINK->] webstrand: , I have a guess why this doesn' pass the typechecker.Nothing extends never, so arr is typed as any. They when it can't extract T I mean, when T is passed from foo and is received as the type of arr, it is typed as any, and in reliablyGetElementByID it can't extract T 
solution: 

issue: Normal@indraraj26 thisin astaticmethod refers to static context i.e the Constructor 
solution: i dont want to use  static reter: string = 'show retry';. 

issue: indraraj26: a static method is just a function - it can’t access non-static data.  Your issue is thatgetReteris static butthis.reteris instance data.  If you don’t “initialize the class”,this.reter doesn’t even exist.  [<-CODE->] This doesn't work because you need a specific instance ofCto know whatbaris.  So you either need to makebarstatic orfoonot static 
solution: 

issue: Hi guys! Given the position of this file [<-LINK->] , what would be the correct path for ad.tsfile? Can't understand how to make it work. 
solution: 

issue: Derya: Note that what express is doing, is running multiple copies of your application, one for each core. 
solution: Suppose one of my source files has some really expensive data initialization. Let us say, for the sake of argument, it does 10 seconds of math that puts 10MB of data in memory forever for the rest of the running time of my application. If I have 4 cores, that math is being done 4x on init? And then each one has its own 10MB of duplicated data?. 

issue: well whatever my mom told me calling join is bad so i don't do that anyway : ) 
solution: const startPtr = ((this.writePtr + this.offset + this.maxSize) - this.size) % this.maxSize;Working with ring buffers... I really want built-in modular arithmetic.  You have no idea. 

issue:  [<-CODE->]  [<-CODE->] Gerrit0: Thanks.. seems matrixbot can not @ some one. 
solution: 

issue: What do you folks use for run time types/validation in your apps these days? I've been trying to make io-ts work for me but its inherent non-immutable nature is causing me too much trouble I think 
solution: 

issue: I think that person is just confused, period. Down at the bottom he claims that the only thing needed is to rewrite the keywordoperatortoget. maybe that's what your getting at. I am always surprised when an apparently skilled programmer makes such errors. I wonder what my own blindspots are... 
solution: He doesn’t seem to get that the reason we have no type-directed emit is for direct interop with pure JS code. 

issue: fatcerberus: sorry, not a decorator, a JSDoc tag 
solution: 

issue: is there any way for me to put implemented functions on interfaces "no no no it's just javascript with types" right "your interfaces aren't even real" i can't think of a language that doesn't, java has it for example c# and scala too  [<-LINK->] : ) it should not be surprising or nonsensical 
solution: 

issue: lol you made my day 
solution: Again, an interface just describes how an object is behaving.. 

issue: i definitely wouldnt use TS as a stepping stone for C# if your only goal is to learn C# faster in any case there's not much to do if your boss genuinely doesn't understand that it takes time to self teach yourself over again how to program because that's basically what you are doing if you walk in to work one day and your boss is gonna chew you out because a duck attacked him this morning and you hadn't written a piece of software to stop that from happening yesterday, and you can't convince him that he's being ridiculous,w hat do you do? 
solution: 

issue: hmm, that's unfortunate. i would like to usepathsbecause they would clean up a lot of../../../imports in my code, but we're so used to developing our api withtsc-watch 
solution: I think there are some packages that you can plug in to do the rewriting back. 

issue: is there a way to get the type of a class method's parameter? like [<-LINK->] but for class methods oooh, without typeof when used with brackets! thanks a lot, Gerrit! that is amazing 
solution: Not necessarily withouttypeof- if you want to use it on static methods of a class you will need to addtypeof.SomeClassrefers to the instance type of the class,typeof SomeClassis the static side.. 

issue: Parametersstill works.Parameters<SomeClass["method"]> You don't need parenthesis for that one actually Parameters<C['get']>[1] 
solution: 

issue: Hi all! Could I get some quick help on how to properly type a simple function? [<-CODE->] I've tried it with generics and like above. It seems like it should be real simple, and the above works just fine as vanilla js, but it gives me the following warning: [<-CODE->] There it is! Thank-you, I'm pretty new to this and was using my generic syntax wrong Why is it necessary to declare the type ofany[]though? Shouldn't that be inferrable? 
solution: 

issue:  [<-CODE->]  [<-CODE->] or maybe: [<-CODE->] bonecandyOh that makes sense bonecandyposted an image:  [<-CODE->] // type hinting here resolves to 0  const len = arr.length;};``` 
solution: 

issue: is there a way to type an export in one line? I can't do this:exports.sendMail = (req:Response,res:Response) :RequestHandler=> {But rather const sendMail: RequestHandler = (req: Request, res: Response) => {exports.sendMail = sendMail 
solution: It  does afaik if you use .mjs. 

issue: asis anoptionalprop and defaults to "div" ...but in the implementation above I get the error shown in the comment aboveBox.propTypes [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: wagerfield: weird thing there FYI the cast that you want is this: [<-CODE->] Oh... There is actually a mistake !!! wagerfield: you want a component, not anelement. elementTypeis like:<Foo />whereas you wantFoo. (or<div />vs "div") Nope, I'm wrong. I give up haha It's definitely not right. 
solution: 

issue: not your day, eh 
solution: I can't help but feel like I'm missing something—doesn't seem right to type cast. 

issue: Hi! Is there any way to map T | undefined to T? I tried NonNullable but it did not work :( Like so [<-CODE->] 
solution: 

issue: Lodash is nice but too bloated for my taste I have a benchmark between different libs if you scroll up 
solution: 

issue: fatcerberus: toQuery? in C#to*methods are not lazy 
solution: 

issue: in Elm they get nested 
solution: 

issue: Just easier for humans to parse is all :) Not to make light of the situation but I totally read “Same difference ya?” in Wakka from FFX’s voice 
solution: 

issue: this rant inspired by the last time i had to work with somebody else's java codebase 
solution: 

issue: ok but you also haven't actually mastered anything outside of the JS/PHP area yet you are only being asked to 
solution: 

issue: you want tslint or tsc to ignore it? 
solution: or maybe does someone knows how to track this error?Type '{ cookies: { domains: { code: string; cookieGroups: { cookies: { id: string; name: string; provider: string; purpose: string; kind: string; duration: number; }[]; cookiesCount: number; id: string; name: string; }[]; domain: string; id: string; }[]; }; }' is not assignable to type 'pagesType'.  TS2345. 

issue: Maybe because the type is so huge it doesn’t even try to enumerate all the props in the error thats my theory anyway 
solution: 

issue: SalathielGenese: that day i had posted for static method in class it is possible if property is also static you will able to access method without initiating the instance 
solution: 

issue: What return type can I use for a function that returns a class that implements an interface? as in theclass, not aninstance of a class  [<-CODE->] Is there any nice way to type that? I can work around it, but yeah interested if others have hit this wall 
solution: 

issue: Yeah i can't really give any good advice on that without knowing everything sorry. But i can say we handle that exact case We have auto-toasters BadRequest toasters the BadRequest response message 500 toasters "Whoops something has gone wrong, try refreshing the page" 
solution: 

issue: hmm, how can I fix this issue: [<-CODE->] Obviously I can't use Entity within my Decorator, since it is a type... any ideas? Greeeaat Yes, sir. so my decorator would like to have a class :) But I would like to have it kinda generic, so I can have a Photo or User entity I was thinking so... I could also pass the instance directly to the constructor... but I just wanted to make sure I am not missing something... That's how I am currently using: [<-CODE->] I just want to avoid duplicating the consturctor So I though I can move my constrcutor to the base service to avoid this line. 
solution: 

issue:  [<-LINK->] Is it possible to type that so conditionally it will return the correct type I found this [<-LINK->] Looks like it might work? Still trying to mess with it 
solution: 

issue: Ejected react app not compiling (not even with error) on error, not even after I fixed it.  [<-ISSUE->] :) Ah, tx I see "CRA" almost everywhere 
solution: 

issue: well basically have this error handler at the edge of my server and the errors that can end up here can be basically anything - thrown by my code, thrown by a library's code, whatever 
solution: fatcerberus: size of Grahams Number (;. A developer need just pizza, coffein and  coke (;. 

issue: if on node 8.10+ you can use es2017, not sure about details on other versions 
solution: 

issue: one image for all environmentsAgree! Don't forget to write tests for it (; 
solution: Yeah, what I was gonna say is that there’s app, and there’s config, and they should be (hopefully) orthogonal.. 

issue: I prefer consul-template, if you really need to do such things. 
solution: 

issue: But@fatcerberusDocker on its own is not necessarily that useful.  There’s a notion of ‘container orchestrators’ which handle higher-level scheduling and stuff like that. 
solution: I never used flow so I can't participate in that one. Kubernetes for example does all of that (container scheduling is a big deal) plus manages a lot of different resource types and runs clusters that abstract the notion of compute resources.  Very useful.. 

issue: anyway back to the framework / library rant Vue and React are so similar now there's really no reason you would swap between them They both are trying to do time slicing 
solution: I have found however that sometimes the type system will stop me from crossing a line I would have happily crossed in untyped JS so it does affect your habits if nothing else. 

issue: types can be a design tool, rather than just linting but you can't really do that in typescript 
solution: since even as basic a case as two types with the same shape are acutally just the same thing. 

issue: Anyone have experience setting up webpack with TS?  I tried to get it working with Oozaru so I could bundle the engine into one file but couldn't make it go I didn't get too deep into it, I just tried to follow the step by step on the webpack front page and it failed with an error 
solution: 

issue: fatcerberus:  [<-ISSUE->] just fix it xD 
solution: in a build folder that is generated just by tsconfig only typings no javascript emit by pointing tsconfig at main.tsx. 

issue: thank you wolframs got a converter 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] However, when I compile, [<-CODE->] I don't get why it's usinglib.es2015.core.d.tswhen I'm targetinges5 I don't havelibset to anything The even weirder thing is that it transpiled fine for weeks, since the beginning of the project.It only stopped transpiling this morning, when I woke up and decided to randomly just runtsc Literally changed nothing I just explicitly set mytsconfig.jsonfile to, [<-CODE->] Ran./node_modules/.bin/tsc -p ./tsconfig.json Still the same error, referencinges2015 I'll just change it toreadonly name : stringand make sure to not unsafely usefunction.name I have another headscratcher and I'm not sure why this happens, [<-CODE->] Output: [<-CODE->]  [<-LINK->] Ah, that makes sense. :facepalm: God bless unit tests 
solution: 

issue: What islibset to in tsconfig.json? Target != lib 
solution: 

issue: before I open an issue for this (I think I'm just missing some type reference) -sql.jsreferences@types/emscriptenwhich uses a couple types in its definition includingWebGLRenderingContextthat TS can't find in my environment do I need to add some lib/reference or is that a definition issue? 
solution: 

issue: “Intermediate container” makes me think it’s a container inside a container... but that’s probably totally wrong 
solution: 

issue: SalathielGenese: Each step is run in a container, that’s based off of basically a temp image consisting of all the underlying layers.  It’s not needed after the step has run, so the container is destroyed after the new layer is created. 
solution: 

issue: hm, okay now I got your point. 
solution: 

issue: Yeah - I wonder if it's b/c on one of the oldest issues, someone posted something like "this is just for product x - for all other MS products you should make an issue on their own repo" but my fav has to be this one: [<-ISSUE->] Them : > You know we on the Terminal team don’t have the power to do that.Him    : > So why do you work at Microsoft? 
solution: 

issue: Yuck inline scripts.  Did I accidentally get in a time machine to the 90s?  I need to get back asap What year is it?  Is vbscript still a thing 
solution: 

issue:  [<-CODE->]  [<-CODE->] The difference is measurable but not nearly as big as expected.  Modern JITs are quite intelligent 
solution: like i  said its definitely faster but speed on collections of 100 length is really irrelevant. 

issue: Kind of like template specialization in C++? 
solution: 

issue: For someone who claims to know how JS works I sure had to go back and forth a lot to explain to him what the this-type of a function means.  I’m hoping he gets it with the last example I posted because if not I give up: [<-ISSUE->] Are you not usingstrictNullTypes?  If you enable that then nothing is ever nullable unless you explicitly say so In particularconst foo: string = null;is an automatic  type error under strictNullChecks  [<-LINK->] 
solution: 

issue: alright looks like not use on file 
solution: 

issue: It's impossible in javascript and impossible in typescript@sam-s4s the rest operator always has to be the last parameter i hate reading but at a skim-read looks like a external types error try turn skipLibCheck: true on tsconfig you could also augment Big toneverusing module augmentation documentaiton 
solution: 

issue: yeah, but that's because we have to use babel because Linaria can't work without it if i didn't use linaria i wouldn't use babel ever its fucking cancer nah react-spring  [<-LINK->] i mean in all honestly i'd recommend just cloneing CRA, taking out babel loader putting in ts-loader our config is very specific to our needs 
solution: That may be easier?  My app is really simple with not a lot of dependencies.. 

issue: I feel like this should work but it doesn't. [<-CODE->]  [<-CODE->] 
solution: 

issue: Hello guys,  good morning :) I  want to create tuple type in which last parameter is different than all others... sth like [...string[], () => any]. I can't find any good examples for that, do you have any idea is it possible? I see@sam-s4sasked for the same 
solution: 

issue:  [<-CODE->]  [<-CODE->] but I get the following error: [<-CODE->] How can i fix it?Any suggestions would be appreciated. 
solution: 

issue:  [<-LINK->] If a function takes an argument that is of a generic type, how do I "get" the type parameter from it? Here's the syntax I'm trying, obviously not right. 
solution: 

issue: keithlayne: use sub-fibre version of react which supports the absolute mega tier shit browsers pre 16.0 Its because it infers for mutation and not for const 
solution: 

issue:  [<-CODE->] Here's a number array-like of length 1.I have no reason for posting this. I just wanted to kill people a little on the inside. While this is not wrong in any single way, it makes me uncomfortable. [<-CODE->] 
solution: 

issue: Hi, I was wondering what's the nicest way of getting around this TSLint error  [<-CODE->] is there something like (res) => void or something so it's not an empty parameter or am I limited to just ignoring the rule on TSLint. 
solution: so basically no way of getting around the issue without disabling the rule then.. 

issue: Actual really useful operator in javascript can be used as syntax sugar in alot of cases for void 0 just return undefined but you can also do stuff like... 
solution: .then(() => void doSomething() yeah). webstrand: use of void makes perfect sense there. 

issue: I have the following: [<-CODE->]  [<-CODE->] Is there a way to do this that isn't going to be a major headache? Actually, this seems to work: [<-LINK->] 
solution: 

issue: So you know how namespaces are "not ideal" right? is merging with a function an exception?b/c I can't find a way to make this work otherwise:  [<-CODE->] it works fine if I do  [<-CODE->] but of course@typescript-eslint/no-namespacewarns about preferingES2015modules 
solution: 

issue: ablakey: From the comment ofRecord<K, T>, it saysConstruct a type with a set of properties K of type T. It’s expecting what keys there should be, not the type of those keys. 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: But when you use an abstract method, you declare a contract of how that method should look like.. But when you use an abstract method, you declare a contract of how that method should look like. [<-CODE->]. 

issue: ‘Does not implement Cache interface’ <— not true it’s an empty interface, so with structural typing pretty much everything implements it. 
solution: 

issue: Has anyone tried to do something like this? I'm trying to understand what someone would be trying to do when running into this error. [<-CODE->] That's what I'm trying to figure out I think it is just a result of parsing index signatures with the same code as is used to parse function parameters. 
solution: 

issue: Having an issue with a specific typing... [<-LINK->] 
solution: 

issue: Static methods are just functions so there's no way for them to know anything about an instance unless you pass in an instance How could that ever work?  You can call the function without ever making an instance, it can't just magically poof one up out of thin air If you want an instance method, don't make it static Yeah if all you have is a variable of typeAbstractClassthen you can't figure out which actual subclass it came from - the type info is erased at compile time 
solution: 

issue: i disliked a lot of things about vscode but webstorm seems to have its own problems 
solution: 

issue: (you know - square hole, round peg) ANYWAY the real reason I popped on here was to ask real quick if anyone has played around with incremental much? I'm just setting up CI, and wondering how wrong things could go if I cached the.tsbuildinfo like if I have multiple branches, whats the worst that'll happen if.tsbuildinfois cached between them? I'm hoping its just "it'll just not be that efficient", but like yeah does anyone know if.tsbuildinfocan ever make tsc not report an error? 
solution: Apparently in this case though the auto import istoogood?  Because it wants to import random stuff likeObjectin a dependency instead of just using the built in one. 

issue: that bug is absolutely infuriating, i only have one more detail ive since learned about it if i go to the settings for that popup it's actually coming from the inspection for "Unresolved JavaScript variable" which means it reallyisa bug and not intended, since webstorm shouldnt consider that to be unresolved and in fact doesnotconsider it to be unresolved when I don't haveaws-sdkin my node modules i also can't replicate the bug, at all yeah sure i ranted about it a good bit earlier today but ill summarize  [<-LINK->] i have some type definition in one of my node modules that defines a type called Object now webstorm aggressively suggests me to import it, for usages of stuff likeObject.entries(), and similarly for usage of the typeRecordas there's also aRecordtype in some other node module 
solution: googling around for this shows me that nobody else seems to have the problem, and also there used to be an exclude list in the settings somewhere for imports. 

issue: can't be bothered reading everything but java is the fastest langauge at serializing json just being native C 
solution: there's absolutely no way scala is the fastest anything. 

issue: keithlayne: CLR is not interpreted. fatcerberus: Well yes and no.. cores help run more processes and can also process work queues if done right. but Js apps dont do that... CLR compiles code on demand or speculatively. CLR code in general usage can compete wtih native code. well written native code can beat it, but usually because of manual memory management and ability to fine tune which most devs can't do well anyway. 
solution: 

issue: never mutate... yeah high on that FP kook aid I see. FP works great when you primarily have data, but in complex larger systems all that data passing kills the CPU 
solution: 

issue: not that niche not really 
solution: 

issue: Which now we're starting to get into the domain of compression algorithms - i.e. how do I transform the data such that it takes up less space but still be able to perfectly reconstruct it at will And be able to do that foranyarbitrary data (spoiler alert: mathematically, this is impossible - which is why certain kinds of data will grow when compressed) You might not be talking about compression specifically but a lot of the same ideas and challenges apply 
solution: functions are a mapping between two categories of typesI would argue that the category-theoretic approach is overkill, and we can get by with the simpler notition of a mapping from the domain to range.  And take advantage in this case of the fact that the domain for deserialization can be limited to valid strings of your custom format.. 

issue: G-Rath: looks likets(2304)is the error code.  Just a weird way to present it 
solution: Tis some subset of the things assignable tonumberbut you don’t know what subset that is inside the generic function. 

issue: the DOM and browser APIs arent conistent even among themselves and there are several spots TS get bonkered a bit by such. There was a core one somewhere even but dont remember now as we've wrapped any of them that we use with our own wrappers/interfaces/other to "fix" them. Weekends are kinda slack here.. Many people are on only during the work week... without digging into it a bit and testing it can't help myself. 
solution: 

issue: Hi all. I'm having some trouble expressing something thatshouldbe simple (but seems not to be to me) in a type-safe way. Perhaps someone has a clue? Hopefully the comments explain the problem, but if not let me know and I'll clarify (it's distilled down from a more real-world problem): [<-CODE->] I guess I'm looking for a way to have something like function overloading on an arrow function. I thought that the type offooOrBaron the third-last line would be inferred thanks to the type explicitly given tofunc, but it seems to be inferred as typeany(if you remove theFoo<T> | Bar<T>). So it's not really equivalent to function overloading. 
solution: 

issue: Hello Is there a way to accomplish this? [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: Theextendsdoesn't imply that the typeBis assignable toTag<any>whenBis a union, instead it implies that each "fork" of the union is assignable toTag<any>. This causeschainto pass the union on to its return type, correctly.. You should probably useB extends Tag<unknown>for less magic.@tusharmath. 

issue: Never mind If it helps anybody, this didn't work: [<-CODE->] However, this did: [<-CODE->] 
solution: 

issue: Don't use namespaces They were a mistake, acceptance is the first step to recovery 
solution: No, they were NOT a mistake. It just depends on what you need in your code. For most, namespaces are not the way to go especially if you want to use the normal JS loading mechanisms. But they were put there for intentional reasons.. 

issue: i want compile-to-JS but i didnt like scalaJS 
solution: 

issue: Wondering if there's any hack i can use to have Typescript infer my own keys in some way  [<-CODE->] 
solution: 

issue: tusharmath: Which problem? Is this still the issue related toTag<A>? 
solution: 

issue: Yes@webstrand there is too much black magic happening inside typescript's contravariance inference 
solution: Weren't you able to useB extends Tag<unknown>? Can you (re)-post your example where that doesn't work for you?And black magic is what you get, when dealing with an unsound type system; par for the course, really.. 

issue: Someone's working on a library to enable such use. I, personally, don't and wouldn't for performance reasons. Makes sense, though I'm not sure why you have the if(Math.random() < 0.1) in there... 
solution: It already is, it’s just the impurity is limited to the code chained through the IO monad. 

issue: Is there no issue on GitHub that showcases this use case? I feel it's a reasonable request 
solution: 

issue: Hello All,I am upgrading typescript 3.0(having node v-6.x) to 3.5 for my project. Is it require any compatible specific node version(say 8.x or 9.x)? 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] It's an intersection as I currently have it—but I'm pretty sure this is wrong! 
solution: 

issue: Haha I took that course many years ago. We did not cover variance. 
solution: 

issue: then they were not true holy warriors where did the method terminology come from?  Did smalltalk use that at the beginning? 
solution: ...and that error is highlightingacc[key]. 

issue: vbarua: Basically, the equals indicated that if the typeField(without the<T>) is used, then the type param is bound toGenericFieldHTMLAttributes | BaseFieldProps. It's a default template parameter. operator precedence is:=,extends,|,&(if you consider=andextendsto be operators) eldarshamukhamedov: Typescript isn't really good at excluding keys, here's a workaround: [<-LINK->] I'm not sure if that'll work for your use case, or not. 
solution: 

issue: eldarshamukhamedov: @fatcerberusI think that PR although not dead is in the same state the partial argument inference PR .. not dead but not alive 
solution: 

issue: Like I'm not sure how this can work even as shorthand [<-CODE->]  [<-CODE->] 
solution: _.myName.child.firstChild.nextChild[100].100 will convert to..... 

issue: Okay yeah that._.in there is very amusing It's like the code itself is going "...really?" 
solution: I don't think this TS has anything in its bag of tricks to model this,_.myNameis a field acess, there is not inference site there,_either is or isn't on_and_has no reason to receive the item type of the array. 

issue: If I have a function like so: [<-CODE->] and I'm trying to consume it like so: [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] I'd like the type ofuseQueryResultto beQueryHookResult<any, OperationVariable> For the record, I'm having a similar experience withParameters<typeof useQuery> Google search is making it seem like this is currently impossible/too complex...But I'm not experienced enough to be sure lol Hmm, okay. Thank you 
solution: 

issue: AnyhowStep: Two ways, firstly after creating something the new compiler is already running over their existing codebase because the Typescript compiler is written in Typescript secondly they have a collection of large known open-source typescript projects and they also runs tests over that This is how they tested the improved compile times for both 3.4.x and 3.5.x 
solution: 

issue: where are you creating the connection from? Browser console? socket.io is a different thing, not compatible with raw websockets 
solution: 

issue: for testing I do something like this in the console: [<-CODE->] what’s the backend? using socket.io is a pretty big difference, easier in some ways but a heavy dependency and not really needed at all with modern browsers yeah if you’re using port 9000 is it opened up in your AWS security group? 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: if a module's definitions just have a list ofexport consts, is there any way for me to grab the names of all those properties? it's apparently anamespacewhich I can't use as a type like I thought 
solution: 

issue: jpdery: , i have a question: what's the situation you need this solution for? you have a "container" with common methods and then an inner object of type T that is the actual value.. composition > inheritance 
solution: 

issue: That’s what it’s actually for At least originally 
solution: 

issue: so i notice in these node warnings for uncaught promises, it tells me that in the future it'll explode the whole node process if i dont catch errors on my promises is there any way to like turn that feature off 
solution: No I don’t think so - it’s the same concept that if youthrowand don’t catch it, you blow up.  In the case of promises some background process broke down and the rest of your program is oblivious to it. 

issue: MarcWeber: there was this that was posted here a while back: [<-LINK->] 
solution: 

issue: Hello guys, How can I represent a type, that is not assignable to another type? Like T extends U, but in reverse way I know there is no "T not extends U" so how can I do that And I can't use the false branch of the conditional types in my context fatcerberus: Cool, but how can I do that without this developing feature?  [<-CODE->] This is the simple version of my real-world use case. I want to  define a type guard to navigatethis's generic... 
solution: 

issue: fatcerberus: Thanks for the quick response :) I'm starting to like TypeScript a lot. Makes things a bit more consistent. 
solution: 

issue: why explicitly pass, anything not pass is implicitly undefined mentally Oh no wait missread yeah got it or you can inline it aswell if you have an omit function floating around {...omit(props, optionalProp), [optionalProp] conditional ? original : other} or even without omit actually because it just gets overridden 
solution: 

issue: That function’s not actually generic. 
solution: 

issue: Even if it worked - it’s not sound If you know it’s true - then the function should just accept aTest, without the generic 
solution: 

issue: Cool@webstrand's polyfill for Excluding type save my life  [<-LINK->] my type guarding is: [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: Would be nice if Typescript team made objects who implement toString method an index type. 

issue: fatcerberus: do you remember that guy who made a bunch of issues on GH asking for Win10 to be made open source? He's been making wavvveeesss  [<-LINK->] I found it, the worst person on GitHub It's actually amazing  [<-LINK->]  [<-ISSUE->] My fav this time is: [<-ISSUE->] where he asks a question in the title, and then asks acomplete seperate questionin the description but like yeah, I'm actually amazed - he's using GH in some really weird single-fire-question manner 
solution: It’s like some spy sent out by Richard Stallman to convince everyone free software is the One True Way... except he’s really,really,reallybad at it.. 

issue: Hi everyone,I'm trying to write a clickOutSide react hook. I'm having an issue with the mouseEvent. Here is my code: [<-CODE->] And here is the error I get:  [<-LINK->] 
solution: 

issue: Wait, I figured it out 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] I hadn't thought of it that way, but yes, in a sense.mypkgreally just asks the typescript files to parse a json file. The typescript files contain code likedocument.addEventListener('DOMContentLoaded', ...)wherein it'll just mount results of the parsed json file to some div in the template HTML. The template HTML just has a<script>tag that points to the compiled.jsfile that's produced from thetsc & webpackcommand. This works fine when I run e.g.yarn run build, but I'd like to distribute the package using npm and provide just a command line interface that does the same thing, and puts a copy of the template file and output.jsfile wherever the user calls the command.  [<-CODE->]  [<-CODE->] 
solution: 

issue: (<any>yourThing)[methodName]should work 
solution: 

issue: AaronNGray: it’s more that I’m interested in exploring the theory behind type systems and such but I’m kind of a hands-on guy so I understand things better if I actually try to implement them (even if just as a thought experiment) 
solution: 

issue: Hi everyone,I have this code: [<-CODE->] And here is my error:  [<-LINK->] Checking out MouseEvent I can't figure out how it looks:  [<-LINK->] Obviously I can cast event.target, but this seems dangerous You mean something like: [<-CODE->] 
solution: new Event("hello"). 

issue: I think you can simulate MouseEvents aswell well actually i'm 100% sure you can because that's react's synthetic event system in a nutshell 
solution: I think the browser initiates an Event, and then React creates a synthetic React event, isn't that the case?In this case the listener is on the body, so it's the browser's event. No?. Yeah the browser does intiate the event react has a global catch all on the body i think you can see it with the Eventviewer pane in chrome dev tools. 

issue: Hi all please help me with, defining getter of a private optional member of a class  [<-LINK->] currently I am getting above error. 
solution: 

issue: Just out of curiosity, are there languages where the following is possible?  [<-CODE->] `type F<g extends G<A extends number, B extends string>> = g<1, "hello">; So, where a generic type parameter can be sort of like a generic type function I'm on my phone fudged up my code snippet lol I gotta play with Haskell some day. For now, I'm ill and need rest 
solution: 

issue: The empty file is technically a quine in many different scripting languages :p I believe Haskell has support for higher kinded types. D may also have support, but calls them something else, I'm not sure 
solution: 

issue: Anyone else having sadness with [<-LINK->] ? Hmm I’m not getting through with any browser.  Unplug.com returning a 500 when gettingmonaco-editor@latest Unpkg that is 
solution: jcalz: Set, in your /etc/hosts file,unpkg.com 104.16.124.175and try loading the page again.. 

issue: Avinar-24:  [<-CODE->] oh except that's direct assignment so you can't have a fallback. Hmmmm You can just augment global However it would be my advice that you never ever change the inbuilt types especially by changing the prototype of javascript standard library objects anishLearnsToCode: 
solution: well i would still like to try it out and see it working - even if I dont use it and sometimes adding specific methods makes sense eg. adding a reverse() method for string. hmm, let em try it out. 

issue: just turn skipLibCheck: true in tsconfig i leave it on permenantly in production because i don't want anyone else's type-errors in ambient declarations breaking my build 
solution: 

issue: the error is gone now thank you so much :) 
solution: 

issue: I'm trying to convert my existing es6 node app to typescript and i'm dynamically loading the controllers for express with something like fs.readdirSync(path).forEach((file) => {route = require(path + file);router.controller(app);}); however, I can't load .ts files this way....what is the right way to dynamically load my controllers as I'm converting them to .ts? seriously? no dynamic way? 
solution: 

issue: xD well,Parameterssolved it, but it's still pretty interesting, why it fails ShanonJackson: , I need to usethisbecausethiswill be inferred whenCmpis extended this should work on child classes fatcerberus: , if that was true, it would resolve tobooleannotnever [<-CODE->] Yeah,@ShanonJackson, this one works, I'm going to use that 
solution: If you want to find out what type a conditional type resolves to - assign it to atypeand hover on it. 

issue: If anyone else has/had trouble with unpkg.com in typescript-play.js.org, I guess this kind of thing happens on occasion ( [<-ISSUE->] , [<-ISSUE->] ); not sure it's worth opening a new ticket there since I can't even reproduce the problem now 
solution: 

issue: Ah, we're on 3.4.5, I tried to upgrade and build crashed. Perhaps related. In fact it didn't just crash, it locked up my whole computer IIRC. 
solution: because distributing large unions became incredibly painful for the compiler, and styled-components distrbutes all of JSX.intrinsicElements. 

issue: boo rails Yeah I’m in the same boat :) You made me laugh so hard I choked, I almost died Some of the stuff at work (I’ve been there about a year) was built on rails 1 or 2. Lucky you 
solution: Well what I’ve been doing for the last 7ish years (my whole experience with rails) is inheriting horrible garbage and trying to make it work (at all) and improving it.  It’s an uphill battle.  If I were creating something from scratch I feel like I could make something decent, but then I’d never create something from scratch with rails, so we’ll never know.. 

issue: I just clone my repo again and create a new db, or clone the db I remember when being put on support for old versions and having to work on current versions, I had 5-6 copies of the database at different versions, and 5-6 copies of the repo. Wasted space but hard disk space is cheap I'm actually impressed you have a script that checks out the branch and runs the appropriate down migrations 
solution: 

issue: This works well [<-CODE->] When I type otherbuttonProps as DeepReadonly I get an error, since ButtonHtmlAttributes expects regular array not a deepreadonely array. I try to solve this by getting a mutable copy of otherbuttonProps.  [<-LINK->] 
solution: 

issue: Nibelino: Arrays, or tuples ? Or to put it another way,acontains only a single type of item andbthe same ? Or canabe[{afoo : 0 }, {abar: 1}]and b[{bfoo : 0 }, {bbar: 1}]and the expected result is[{afoo : 0, bfoo : 0  }, {abar: 1, bbar: 1}] For the simple array case i think an intersection type will work ok :  [<-CODE->] 
solution: 

issue: Hello, I have a scenario that I can't seem to figure out on my own. I have described the issue in this snippet: [<-LINK->] Could someone please take a look? :) 
solution: 

issue: Is there anything one can do against "Expression produces a union type that is too complex to represent.ts(2590)" except using any? I cannot reproduce the error in any playground  [<-LINK->] holy ... what a link So in my code base the error happens at line 177 oh thanks, sorry about the long link 
solution: 

issue: That error happens when TS encounters an intersection of unions (A | B) & (C | D)it tries to normalize it to(A & C) | (A & D) | ...` which causes an exponential explosion.  Prior to 3.5 this used to lead to OOM, in 3.5 they added a check to catch it and error instead Playground is at 3.4 still try typescript-play.js.org 
solution: 

issue: wow Maybe compiler bug? If I remove thePartialin line 162 the error goes away... APartialof an interface with 130 functions should not produce that error TheVoidifieddoes not matter in my case 
solution: Some of the OOM tickets I found involvedkeyof, I see your (attempted) repro contains a keyof. 

issue: nvm got it working 
solution: 

issue: Hello guys, I need to write a check for types that areundefined-able,  tried this but doesn't work :( [<-CODE->] and another one: [<-CODE->] 
solution: 

issue: Hi all, I'm really pulling my hairs out trying to get type safety of a return type in a higher order function, can anyone see what I'm doing wrong here? [<-CODE->] for  e.g. [<-CODE->]  [<-CODE->] 
solution: Yeah I think you have issues with your config.  All of the error cases are errors for me.. and thanks so much for taking the time to paste it in. 

issue:  [<-LINK->] Yeah me too :/currently trying to play around with my IDE settings 
solution: 

issue: (or just restart vscode) I find the integrated terminal to be glitchy and usually just open a regular terminal window anyway  [<-ISSUE->] 
solution: Occasionally one of the terminals will just go blank and they can be hard to kill, but that doesn’t happen too often.. 

issue: keithlayne: @cdharrisyou called for me? Indeed I am  ;) but not free right now cause got a pile of client tickets I've got to triage 
solution: 

issue: I wish usingExtract<keyof T, string>preserved comments =/ [<-CODE->]  [<-LINK->] I have some workarounds but I don't like them, either =/microsoft/TypeScript#31992 Yeah, 99% sure you're right about comments not carrying over because it isn't homomorphic  [<-CODE->]  [<-LINK->] Weird. The markdown anchor parsing on Gitter is terrible 
solution: YAML is like 10000000000 times more complex I think.  Not the basic stuff, but full support.. 

issue: hey guys, any idea what happend to the packagetyescript-tslint-plugin???  [<-LINK->] says "Not found" :( 
solution:  [<-LINK->]  [<-LINK->] ♂. 

issue: carpben: JS uses duck typing, its nothing new. Other langs do too. 
solution: 

issue: We have themA | B I think my presence here is muddling the conversation 
solution: It's not so much that as that I find Haskell syntax a bittooterse - any substantial piece of code turns into an indecipherable wall of text very quickly. 

issue: so, I have this utility function: [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] problem is I loose keys when trying to create new object where values are mapped or - i keep the keys, but values are generic or union of all values  keithlayne: something like this (not working obviously) [<-CODE->] if so he made a mistake thensorry, that was a typo 
solution: 

issue: keithlayne: Classes aren't hoisted because inclass C extends DtheDis an expression that's evaluated at runtime You can't really hoist that safely path?: string Wait, you have a rest parameter.  The makes it trickier and you'll need to detect that at runtime 
solution: That will make it nullable but not optional. I was thinking of the overloading it so i dont need to pass empty string if i do not care about path. 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: Probably not without dependent types.. Just check length like you always would in JS.. 

issue: I always get confused when Haskell tells me the concrete type of something and it has a type parameter in it And then there's this [<-CODE->]  [<-CODE->] I haven't fully deciphered how haskell treats type parameters Getting away from Haskell, here's something amusing, more JS shenanigans: [<-LINK->] Really ugly ADTs and rudimentary pattern matching in TS: [<-CODE->] I actually didn't realize you could use tuples in a discriminated union - that' s useful This doesn't work though: [<-CODE->] Stupid recursive type restriction 
solution: 

issue: Is there any different in function ofsuper.something()andthis.something()? I personally like to usesuper.as it indicates where method is coming from but i'm not sure if makes any different other then telling directly 'this method from parent' 
solution: 

issue:  [<-CODE->] here’s my first stab, but it’s not working: [<-CODE->] I feel like I am making this too complicated coming from flow there is a $ObjMapi util that helps w/ this apparently this works [<-CODE->] 
solution: 

issue: I was thinking of that a while ago, that you could maybe make it work if you could somehow force the compiler to expand a type alias first, then build another type on top of the result, etc.  of course not every type would be able to be decomposed like that And types are lazy evaluated for the most part it seems 
solution: 

issue: I dont want to make itAppConfigas some other modules could have their ownConfig 
solution: 

issue: AppUserConfig  [<-CODE->] Note that you can't just dotype Handlers =  { [K in CommandTuple[0]]: (options: CommandTuple[1]) => void }because you need theCommandTupleto distribute. 
solution: 

issue: Yea, the type of one variable can't depend on the type of another... but properties can thanks to tagged unions. 
solution: 

issue: Hey,Has anyone got a good way of discriminating a type based on a property existing. I want to do something like. [<-CODE->] Ok I worked it out a weird solution that seems to work. [<-CODE->] 
solution: discriminating a type based on a property existingWhat it sounds like you want to look into is discriminated unions: https://basarat.gitbooks.io/typescript/docs/types/discriminated-unions.html. 

issue: I modeled my pattern matching syntax after my favorite operator  [<-LINK->] 
solution: 

issue: haah tpolecat is my scala hero He has a amazing talk about monads / effects / how they actually benefit you and not just fucking garbo mind kumpf. And is always in the Scala gitter 
solution: 

issue: Hey everyone. It might be a silly question but does anyone know how to make a method of object as private? I can't upload a screenshot :( It's not a class, just a singleton and some of its methods should be used by other methods within the object and not outside Awesome. Thanks :) 
solution: 

issue: Aren't you supposed to useres.localsand not randomly set values elsewhere? 
solution: 

issue: Avinar-24: Usually if I want to do a singleton I’ll just make a class where everything is static.  This works because classes are first-class (no pun intended :) andthisinside the static method refers to the class itself AnyhowStep: personally I try to keep my modules lean so I can used named imports (hypothetically better for treeshaking too) - I’ll only use a star if the namespacing is desirable for disambiguation Or if it’s like a bag of utility functions then I’ll usually use a star import too I prefer to match the filename if so afaik auto-import won't create star imports (because it incurs namespacing) so you end up with a hugeimport { a, b, c, d, e, f, g, h } from ...statement.  If the module is a huge bag of utility functions I probably wouldn't want that bigass import at the top of my file even if it's auto-generated Gerrit0: Looks like they adapted it from typescript-play.js.org - all the features are the same, just with UI tweaks It even has the same "hello world" starting code Just being able to see which version of TS you're using is worth the upgrade all by itself It's no fun when you find an issue and then can't repro it because it's an older TS version before the bug was introduced 
solution:  [<-LINK->]. 

issue: fatcerberus: what does gadt stands for? adt sounds like algebraic data type but g? 
solution: 

issue: Hi AllIn my react code I have defined the following as part of my interface : [<-CODE->] now I want to set the passed data to a variable (state) in case it's an array or resolve the function by calling the function incase I have to wait for it to be resolved [<-CODE->] but typescript doesn't seem to be liking my function Can anybody tell me how can I call the function "data" in this case please? at the moment I 'm getting an error [<-CODE->] 
solution: 

issue: not really sure what the problem is@carpben- maybe you could reproduce in a codesandbox? 
solution: 

issue: carpben: You can't usesuperinside an arrow function.  Orthisfor that matter (because it takesthisfrom the outer scope, which in that case is the globalthis You'd have to declaremetas a method met() { ... } Arrow functions don't have a polymorphicthis,super, etc. like methods do Hmm... well I suppose you can't make everyone happy [<-ISSUE->] A few minor quibbles with something that is otherwise unquestionably superior !== "major step down" I do agree "Run" should be clickable though 
solution: 

issue: @wagerfield Is this what you want ? : [<-CODE->] Link it allowsfooandfffandfto be all present simultaneously.. but I think we can work around that too if it's a problem :) (edited, since I was missing some?s) Or this monstrosity,  will allow only one alias of the property [<-LINK->] 
solution: 

issue: dragomirtitian: would you mind trying to explain the second part of theKeyValueMaptype you implemented in the [<-LINK->]  [<-CODE->] 
solution: 

issue: ah ok, gotcha thank you :D 
solution: don't have one, but thanks for the though :). 

issue: Like everything else it's a balancing act Want to see a neat trick? [<-CODE->] 
solution: Yeah.  That's howfilternarrows, it wants you to pass a type guard.  But TS won't infer type guards from arrow functions. Luckily you can specify the return type of arrows if needed. 

issue: isFunction...something that if it's called with()does not errors? 
solution: 

issue: Good morning!Question: given a simple type-guard function [<-CODE->] How can I make it "works" for the compiler in a situation such as [<-CODE->] I'd like to avoid an if statement here, as it's not necessary at all. 
solution: 

issue: I just wrote a super large SQL query using my SQL query builder and... [<-CODE->] 14 million 14,241,334 But I need that super-large query to generate a report =/ IIRC, I've done this before and the resultant SQL was 6k+ lines 206,408 characters And the build failed because I exceeded theinstantiationDepthof 50  [<-LINK->] Red lines = instantiation depth reached Oh, wait. The build works. Buttsservercomplains. I removed the 5M limit fortscbut nottsserver Simpler example, [<-CODE->] The problem you're having is that a function that returns anything is assignable to a function that returnsvoid I've experienced your problem before when Ireallywanted to enforcevoid.So, I had to use generics. And conditional types And emit a custom error if anything other thanundefined|voidis returned It's a lot of code... And it's for my company, so I can't share the exact repro =( [<-CODE->] As you can see form the screenshot, it's essentiallySELECT expr1, expr2, expr3, expr4, etc. 
solution: 

issue:  [<-LINK->]  [<-CODE->] I know how you feel =( Condolences tslint doesn't work with composite projects yet, right? 
solution: 

issue: I remember when I popped my distribution c herry 
solution: 

issue: add a shortcut? I have to restart it sometimes, but not often.  YMMV. just tell them the only way to fix is to reboot 
solution: for me, it is every time i make a change it is not picked up. 

issue: sorry if that sounds like a dumb question at this point yeah I haven’t seen anything near  that bad. is your vscode/ts current?  Not nightly or anything?  Or whatever they call the early release. Is that where the issue is every time? okay 
solution: 

issue: Letx: number[]. Shouldn'tx[i]be of typenumber|undefined, sinceican be out-of-bounds? 
solution: 

issue: lppedd: I personally find the?:more clear in intent.. lppedd: It's legal and typesafe. typescript understands that the result will beundefined | fieldType. As far as  to be used, I have used it on occasion the?:here seems too verbose. But I think some of my colleagues hate me for it .  I think the optional chaining  proposal will help a great deal with such casses lommez: There are plenty of use-cases for such declarations. Without more context it is dificult to say if the person is just mindlessly copying something they saw or have a reason behind if lppedd: yupobj?.fieldis the one 
solution: 

issue: Hi,I'm working on a third party project and is very common to find things like that: [<-CODE->] function that returns another functions instead of creating a signature with more parameters. There are some cases that signature is something like that: x => y => z => wBesides the closures is there any other benefit of creating such signatures?I think that who was coding, have no idea what he is doing dragomirtitian: i 'm going to paste here an example [<-CODE->] In that example, in my opnion could be something like:  imageControl = (file, setState, setRatio, field) => void; 
solution: 

issue: ok, great—thank you :) Could someone help me with this error please? [<-LINK->] Type '{ alias: string; value: number; }[]' is missing the following properties from type 'Breakpoints': 0, 1, 2 
solution: 

issue: Regarding optional chaining, my current workaround is something like, [<-CODE->]  [<-LINK->]  [<-CODE->] Super verbose but Ireallyhate seeing logical operators on non-boolean expressions Could probably simplify this to a one-liner function like,optionalChain<T>(someObj, part1, part2, part3, etc.) Or just use boolean operators (but I hate this with a passion) 
solution: 

issue: I think chaining operators are great, they generally convey intent well in a succint way.  They just don’t cover every use case.  But I guess that goes without saying. 
solution: 

issue: Hi everyone! I'm exploring this cool library and I stumbled on this snippet: [<-CODE->]  [<-CODE->] Thank you for your time! 
solution: 

issue: I usually remember that&&>||but for some reason I have to think about it a bit first 
solution: 

issue: keithlayne: correct it isn't! Is there something I'm doing wrong? keithlayne: overloading won't work here right... would just get duplicate function error. Will take a look at the cast 
solution: 

issue: keithlayne: Sorry there were so many angle brackets that I missed the(type: T)part, oops.    In that case I'm guessing the "duplicate function error" is because he was trying to have a separate implementation for each overload? 
solution: 

issue: keithlayne: @fatcerberusJust to check.. this overloaded approach is giving me the "duplicate implementation" error... Is there another way to achieve the "overloading" you're referring to? [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->] 
solution: TotallyAThing. could maybe steal a name from aMaybeimpl. 

issue: But I really wanted that top type before it came along and there was no way except to useany. (no way to me, who didn't think of that unknown polyfill above)This was before I started jumping into the "advanced" types So, I'm just curious why they picked that union to be theunknownpolyfill and not{}|null|undefined 
solution: Is function overloading possible with arrow functions? i tried something like this which did not work [<-CODE->]. 

issue: why this code compiles:function f1(a: {[prop: string]: any} = {}) {}but this doesn't:function f2<T extends {[prop: string]: any}>(b: T = {}) {} 
solution: 

issue: Is it possible to do declaration merging across separate files?I have a base interface declared in one file and want to be able to import it into other files and add key values to it like so: [<-CODE->] Gerrit0: thanks—I'll give that a try works like a charm@Gerrit0—thank you. Am I correct in using the name of my package as the module name so that it's merged with the exported members? [<-CODE->] Ok, cool—thank you.Surprised you can't do this by importing and exporting the same interface name given that you can do this in the same file like so: [<-CODE->]  [<-CODE->] 
solution: 

issue: Hello, I seem to be having trouble with the TSC finding my types folder. Anyone have a spare couple of minutes to help? 
solution: 

issue: Anyone here any good with azure dev ops "Artifacts"? can't be bothered reading documentation 
solution: wagerfield: Intersection types can let you have inconsistent index-named member types but working with such a type is a pain. 

issue: fatcerberus: that sounds like something I'd do  but yeah I think it was us who explored that a while back 
solution: 

issue: exactly they also could have just decided to do "StrongOmit" & "WeakOmit" kind of thing 
solution: I want to make fun of you for quoting yourself. 

issue: So cloudflare is having problems (worldwide?) right now…npm is on their CDN.  I can’t install anything via npm right now - anyone else confirm or deny? and as soon as I typed that the site came back up but npm itself is still sucking but at least seems to have succeeded slowly 
solution: 

issue: We found this today in code and for some reason it passes TSC, anyone can explain why this is valid?const foo: | { bar: string } thanks! 
solution: 

issue: fatcerberus: @AnyhowStepThanks for the info. It makes sense now. I'm going to see if I can reduce my mixin boilerplate code... I'll share it after... 
solution: 

issue: @fatcerberus [<-CODE->]  [<-CODE->] 
solution: 

issue: mmmmmm…steak  
solution: It’s a funny thing, I’m really fascinated by the high-level theory of different branches of mathematics but the minute you start showing me formulas and proofs my brain just tunes out. Yeah, types are a tradeoff.  It's nice to have expressive types, but at some point it gets so granular you might as well be passing concrete values around at compile-time. 

issue: I have a config interface that looks like this: [<-CODE->] ...and another function interface that looks like this: [<-CODE->]  [<-CODE->] The implementation I would like looks like this: [<-CODE->]  [<-CODE->] 
solution: 

issue:  [<-CODE->] Something like: [<-CODE->] Kuirak_twitter: Looks like your solution could work. Thanks 
solution: 

issue: eavichay: they have different types 
solution: 

issue: aspirisen: It's because the key is in an input position - if you take the union of things with a type in an input position, you get an intersection in the input position because of contravariance:((v: A) => void) | ((v: B) => void)===(v: A & B) => void.  Anything else would be unsound Kuirak_twitter: Narrowing only works on individual variables - you can't narrow the type parameterK; while in your case it would be safe to narrowKbecause there's only one value involved, in general it's unsafe so the compiler doesn't do it 
solution: 

issue: aspirisen: Your types are overly complicated for the task, imo  [<-LINK->]  [<-CODE->] A lot of the code I write could be more succinct if that were supported lol 
solution: 

issue: ok, it's a @types/react thing. changing to [<-CODE->] solves the issue 
solution: 

issue:  [<-LINK->] guys, why my connect() function dont see this return ? 
solution: 

issue: alowaniak: export interface Request? I'm on mobile and can't test but I'm almost certain that will work I think, in a personal project, it worked for me because myRequestinterface was a generic. So, it didn't merge (since they were different types entirely)  [<-LINK->] Seems like@types/expresshas its ownRequestinterface 
solution: 

issue: These appear to be the only flag emoji available on gitter: That’s sad.  Poor canucks and kiwis can’t fly their flags here. does that work? 
solution: I can see the flags on my phone but they show as just "CA NZ" on Windows. 

issue: AnyhowStep: ThatRequestis generic too but it errored because the constraint on the type param wasn't compatible.  But yeah that wasn't the actual issue (I don't think anyway) Oh wait!I don't have anything from the generic inside the interface with the genericYou basically want to have a phantom type?  Yeah, that won't work - structural typing means only things actually used in the type contribute to type checking If you haveFoo<T>andTisn't used in the type - thenFoo<number>andFoo<string>will be considered the same type I wasn't aware that was what you were trying to do 
solution: 

issue: Changing it toexport interfaceremoved theAll declarations of 'Request' must have identical type parameters.error, though Or it does on my Playground and VS code Gotta' use a hack. [<-CODE->] 
solution: you probably just want to define/export them in .ts. 

issue: Is there anyway to get typescript to enforce a caller of a generic function to provide a type? I have an example of my use case [<-CODE->] 
solution: 

issue: I essentially want the [<-LINK->]  [<-CODE->] 
solution: thegalah: I was thinking maybe a generic class with a static method would work, but they can’t access type params :(. 

issue: where doesmyFirebaseAppcome from? Do I export it from my firebase.js file? [<-CODE->] 
solution: 

issue: AaronNGray: declaration merging?  [<-LINK->]  [<-LINK->] Look at merging interfaces and classes. Can't remember which one Object is If TS is complaining Object.from does not exist but you have a polyfill for it Then you want declaration merging 
solution: 

issue: wagerfield: You will need plenty of assertions to get that implementation to work: [<-CODE->] 
solution: dragomirtitian: @wagerfieldI think it’s possible that a lot of those generics aren’t really useful.  As in, I don’t thinkKcan be anything butstring…?. That is another good solution, add separate non generic overloads for the implementation ..and an implementation siganture that is generic. 

issue: ChakraCore can optimize individual loops IIRC Not sure about V8 Like, can it JIT individual loops without doing the whole function 
solution: 

issue: Yeah you have to know where your trust boundaries are, always.  Regardless of how strong the type system is Basically because the compiler can't typecheck things it doesn't know about... unless it's like, a time-traveling compiler that can see all the input the program will ever see Someone needs to get on inventing that keithlayne: Yes, exactly like that Haha gitter started to try syntax highlighting that then just gave up It flashed yellow for a bit then turned white 
solution: it was highlighted at the start, but only half so. wtf gitter. 

issue: I see some type tooltips like this in my code: [<-CODE->]  [<-CODE->] Is it possible to simplify how the tooltip appears (for mixin classes, and in general)? 
solution: 

issue: Afternoon all :)In a React app, I have some error state that is initialised as an empty object. On errors from Firebase, I populate the object with the error and output the message: [<-CODE->] I need to type the message, but I am not sure where exactly I do that.Here is the state initialised: [<-CODE->] I think I sorted it with: [<-CODE->] 
solution: 

issue: What do you mean? I think the problem there is that TS defines filter in a bundled.d.tsso it can only be as expressive as the language allows - and we don't have negated types yet so we can't say "type is not null" at the language level I'm guessing flow probably special-cases filter I agree that's a nice feature to lose though Oh wow, that sounds like a nightmare 
solution: 

issue:  [<-CODE->] This is the error I am getting: [<-CODE->]  This is the component: [<-LINK->] This iswithAuthentication: [<-CODE->] 
solution: 

issue: Weirdly I have that same error from before, which I thought was fixed.This is the error I am getting: [<-CODE->] This is the component: https://pastebin.com/g6pqUvUV [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: when usingforwardRef, i get an error when consuming my component:Type '{ children: Element; }' is missing the following properties from type 'Pick<ILinkProps, "children" | "accept" | ... 348 more ... | "onAuxClickCapture">': onAuxClick, onAuxClickCapture what does it mean? 
solution: inonly type guards the target not the property. sofoocan be guarded with aninguard but notkey. I think you will need a type assertion here: [<-CODE->]. 

issue: Hi all, Did anyone face with this issue? ( [<-ISSUE->] ) 
solution: 

issue: Ackos95: You can't just cast, that will mean all the additional methods, properties, etc. are not present. 
solution: I tried json2typescript, but it just falls apart when you have nested Typescript objects, and would like to know a best practice for incoming JSON creating real Typescript classes.. 

issue: Why not use a type guard there? That waystartMyCoolAppdoesn't have to take anappStatewith the type ofany? In my experience, the type checking of json to and from my server is trivial, so I leave it enabled all of the time. 
solution: rhys-vdw: I was hopeful when I saw json2typescript required decorating the JSON properties -- that would have seemed to solve the issues.  But apparently it's  still really difficult, as it only works with somewhat simple object graphs, not at all real world data.. 

issue: fatcerberus: you should try it, I have loads of fun teaching OCaml, my  student not so much,  but I have loads of fun I'm not sure how much appetite there is for another facebook to JS language after flow. I still hear people migrating off it ... SO seems to suggest it's not attracting a lot of attention ( [<-LINK->] ). Not a perfect metric for sure but the activity seems a bit low .. 
solution: I'd be interested in Reason, if typescript didn't exist. Much easier to train up a javascript developer to typescript than Reason. Same issue with elm and purescript.. 

issue: I dunno, that's pretty much how it went for me in C++. I wanted the compiler to be more and more intelligent, so I built up more and more logic in my templates.  But I started with plain old, boring, procedural code. Eventually, my procedural code began to take on aspects of the functional arrangement of my templates. then they introduced constexprs... 
solution: 

issue: Ours is not to ask why 
solution: 

issue: and don't forget what we did the night before that ;) btw guys pretty sure I "solved" how to do that function overloading stuff:  [<-CODE->] that seems to give the best results, b/c I can do : [<-CODE->] but the gutter is so clean... it's not my fault New Zealand is so green & clean that you could eat off the roads it's natures 
solution: So changing your decorator toreturn ExtendedService as anywill fix your constructor problem, but it won’t have anything fromExtendedServicein its type.  Somebody else might have a solution though.. 

issue: i am converting a simple npm module to typescript. i am trying to use the declaration flag to generate d.ts files automatically. however, i am currently getting [<-CODE->]  [<-CODE->] The package.json has: [<-CODE->] tsconfig.jsonlooks like: [<-CODE->] 
solution: 

issue: Yeah, basically it doesn't know whether you need a string or number there so it doesn't let you use either one as you only have a 50/50 chance of being right (from the compiler's POV) alowaniak: You can't augment types like that.  It's an interface so you can mutate it by adding members but you can't change the type itself Think of it likeconst x = {}: you can mutatexbut you can't reassign it 
solution: 

issue: Hello guys, I run again into trouble with the tsc right now it doesn't know my target "ES2018" since I changed that line 4 month ago I have no idea why this does not work anymore. tsc -v: 2.4.2; npm -v: 6.9.0; node -v: 10.16.0 
solution: 

issue: Hey all, getting this error with Typescript/emotion... [<-CODE->] This is the implementation: [<-CODE->] Can't see what I am doing wrong, seem to have the exact same implementation in another file with no errors 
solution: 

issue: How do I extend object?TS2339: Property 'compare' does not exist on type 'ObjectConstructor'. 
solution: 

issue: konstantinblaesi: I think that's just out of date  [<-LINK->] Instantiating a type constructor That would be the term I think It’s not inference - inference is when you don’t specify a type and the compiler figures it out for you In that particular case (passing the type parameter through) I don’t think there’s a term for that specifically, the same way there’s not a specific term for a function passing one of its parameters to another function 
solution: 

issue: jimrock20071_gitlab: you mean more that, the fact TS can't find the variable definition ? WIth just those errors it's difficult to say, where do you expect the variables are defined ? and do the files reference there look minified ? Yes but there is  a file with line number and column referenced right above, if you go there what does the file look like, 
solution: 

issue: dragomirtitian: nowhere. I am not even sure if they exist , they look like minified variable names dragomirtitian: what do you mean? I mean to sayTS2304: Cannot find name 'a'.I dont think there is any variable namedain the entire project dragomirtitian: its looks like a regular file . It is not minified. It seems that compiler is iterating over each character in the file i have also posted it on stackoverflow in case you could help  [<-LINK->] 
solution: 

issue: dragomirtitian: it really is weird. I removed everything from file. Not even a single character. And it still keeps popping msgs saying invalid character in that file 
solution: 

issue:  [<-LINK->] am I missing something silly here? I can't seem to use object spread without getting anerror typescript 3.5  [<-CODE->] why... is that an issue? shouldn't it just be nothing that's actually the context I'm using it  [<-CODE->] very interesting I must be spoiled.  I do this in JSX all the time but I guess that's actually consistent since JSX is all objects 
solution: 

issue: What's the problem? What's the name of thatsayHellofile? And what extension does it have?What error were you expecting? 
solution: it is js file,somebodyis optional parameter it could be undefined. webstrand: Yes, there is example, but without guard I still don't get an error. 

issue: dragomirtitian:  [<-ISSUE->] 
solution: 

issue: That's a shame, I was hoping that was a limitation that would eventually be fixed. Otherwise, typescript can't properly type prototypical inheritance. 
solution: 

issue: compiled. It's bytecode isn't generated during interpretation. That's gotta be some deep magic there. I have no idea how it could be doing that safely. 
solution: methods decorated withhotMethodcan be edited while debugging the method itself. You can then and now callrestartOnReloadto throw if the source might have changed, it will then restart the top mosthotMethodthat has changed.. 

issue: kamranayub: you can't  do that with ts.Program. You will need host  the language service and get quick fixes form it . I can't offer support with that as I have not personally tried to host the language service, I just debugged it on  occasion :) fatcerberus: I'm happy about it too, I think it will be a better autoimport experience 
solution: I think it's definitely bad to be offering dependencies of dependencies as auto-imports, since there's no guarantee the package manager will create a flat structure, or even that different package managers will always use thesamestructure. So you can really only safely import things you directly depend on (as the package manager has to ensure that works). 

issue: Hello, I have been realizing that using Ramda JS is sometimes pretty bad for good quality typesafe code. Does anyone have experience using Ramda. Is it possible that I am using it wrong?Here is an example where I feel Ramda is type-unsafe: [<-LINK->] 
solution: 

issue: So what is ramda giving you then?  Does that actually return a function instead of the value? pathI mean 
solution: I have a subclass of a base class, where base class method's return annotation is the type of the subclass, and it says something like'method' is referenced directly or indirectly in its own type annotation.wheremethodis what returns the type of the subclass. Any idea how to make that work without the cyclic error?. 

issue: Got a link to Tuffle? 
solution: This sounds like a bug - I’ve never hadinstanceoffail to narrow. Which I mean you’d think the type system would be able to see that inBase<T>andDerived<T>that theTis unified (since the latter inherits from the former) but it doesn’t. 

issue: In a perfect world, I would be able to do this, [<-CODE->] Or even, [<-CODE->] 
solution: 

issue: thank you, github issue bot Gitter is so spazzy that I can’t even scroll up really. I thought decorators didn’t work at all without that option looks like you are using babel?  Maybe that’s got something to  do with it. 
solution: 

issue: Yeah that doesn’t make a lot of sense to me I should have asked if you tried running tsc or your build script and still got that error Because vscode definitely chokes sometimes, so a good first step is to try restarting the TS server via command palette. It’s almost certainly unnecessary to restart vscode itself The normal issue I see that needs a restart however is just failure to do TS stuff, like show types on hover. 
solution: I’m starting to wonder whether I really need a formal bottom type in Tuffle.  Bottom is useful to annotate generics as a way to say this can be used with any instantiation (“there’s no value of typeTinvolved”) but I already have my star types for that:Maybe[*].  I’m not thinking bottom is too useful as a first-class type otherwise.... 

issue: Haskell having a hundred ways to do everything really makes me appreciate Python’s “there’s only one way to do it” philosophy—even if that’s not really true in practice I think that was Python anyway. 
solution: @trusktr I really really don’t like stuff like this: [<-CODE->] …because there’s nothing generic about it.  It’s just a cast, but that might not be immediately obvious at call sites.  I consider this an antipattern.. That was the insight I had yesterday - unless you’re constructing a bottom value (like an empty array) and need to specify the type for that reason, it’s pretty muchneversound to supply a type parameter manually. 

issue: I’m sure you can guess what I think about that doesn’t really seem to help with the diamond problem either? See, you say that, and I see that as a negative, while obviously it’s not meant that way. I was referring to the ‘proxy ties it together’ comment 
solution: 

issue: I'm not sure what I think ofclassin JS generally but it's something to think about 
solution:  [<-CODE->] I think it just easier to implement the analysis tool with some human help (TypeScript type annotations). Plus, maybe it provides immediate visual/contextual feedback, and intent.In plain JavaScript, you can change code, which dynamically changes the implicit types of your program. This can accidentally change expected implied types.But, for example, if you explicitly annotate a return type (f.e. in TypeScript), and you accidentally change the code to return the wrong type, then you get a helpful error and thus have prevented accidental mistakes.So even if the theoretical boss analyzer exists, I'd still want to have explicit type annotation, to ensure things stay how I want them. If they I want them to change, I can explicitly change those annotations.. 

issue: Sounds like you're supplying some unknown attribute, like<div some-unknown-attribute={'foo'}>. haha  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] I don't know how to make that work, but in plain JavaScript is super simple, and powerful!  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Yeah I saw your comments in that issue towards the bottom, and it’s a little disappointing that didn’t get “fixed" 
solution: Maybe it’s an impedance mismatch (PEBKAC):UserOf<Weapon>- developer sees “user of any weapon”, compiler sees “user ofallweapons” and typechecks accordingly.  Like, it’s the known-unknowns vs unknown-unknowns thing, maybe?  Not sure. 

issue: fatcerberus: Sorry never mind. I had a typo. 
solution: I suppose if you haveUser<Sword | Gun>, then that user will also check with a typeguard, and act accordingly. 

issue: Hi. Can someone help me with Generics related issue [<-LINK->] @fatcerberus [<-CODE->]  [<-CODE->] here is my code that i having problem with [<-LINK->] 
solution: Because T + T is not T unless it isnumberor0(or a range type with lower bound only, or a range type with upper bound only). And they don't have range types yet. 

issue: trusktr: hmm that behavior is a bit strange .. maybe tryunknownorneverinstead ofany, not sure what default the compiler defaults to in such cases. I would not rely  on the behavior of invalid declarations though. trusktr: if you are declaring modules, you can skip thedeclare global, I would expect that to work . I need to check though .. trusktr: This should work for your scenario: [<-CODE->] trusktr: I posted an import version that should work above moving the import inside the declare appears to work 
solution: It would be nice if there were a way to say “skip the lib check, except for stuff in my own project”. 

issue: @webstrand you example worked. Now I made it little complex and it failed [<-CODE->] Can you help me with this one? 
solution: 

issue: soprintObjisn’t actually generic.  It can just beprintObj = (obj: Instance, props: string[]): void also,Persondoesn’t have an index signature, so it doesn’t extendInstance 
solution: 

issue: In Tuffle it would just be like [<-CODE->]  [<-CODE->] 
solution: Can we type a function in TS that is a constructor, but can also be called withoutnewto return the same type as when called withnew, and also called with.apply?. 

issue: I wish there was a real type assertion, so I could say: n is now a number, and if the compiler can deduce that it's not, that's an error. 
solution: 

issue:  [<-CODE->] I get a typescript error in tge body ofisJust Cannot invoke an expression whose type lacks a call signature. Type 'Boolean' has no compatible call signatures. if I remove thegetthe error goes away but I'd like to understand why 
solution: 

issue: Hi Is it possible to have a interface that changes based on if any of the optional types is used or not.Say I have 5 optional, if 1 of them gets used 2 of the other optional is not really optional anymore. if anyone understood where Im going with this.. 
solution: fatcerberus: I don’t know about that.  You mean because of theextendsor just the underlying structure?. that doesn’t seem to really make sense completely.   Lemme think.. 

issue: @vegarringdal See Keith’s solution above ^^^thx @fatcerberus @keithlayne  [<-CODE->] I was kinda hoping error would show if I started using parts B without all of B. kinda like(A & B) | (A | B) 
solution: 

issue: Hi everyone,Is there a reasonably complicated solution for this challenge? [<-LINK->] Using casting an type constriction together 
solution: 

issue: 10x, It's not perfect, it disables excess property checks. have a workaround but still working on it 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] of this component: [<-CODE->] I'm not quite sure how user should by typed. Any pointers would be incredible. Thank you 
solution: 

issue: Yeah, I think it leaks from other languages where it’s idiomatic thebailers: Looks like the type system doesn’t know thatuseris not null by the time it makes it to the body ofAccount. If you know for sure that it won’t be executed on a null user then it’s appropriate to useuser!inAccount.  But I can’t tell if that’s gonna be always true from what you’ve shown. 
solution: 

issue: Has anyone used [<-LINK->] and created their own .d.ts files? I'm not using it at the moment Someone else at work is using it and couldn't find definitions for it Just investigated it and it's only exporting three functions Should be easy to write definitions 
solution: 

issue: What's the structure of a typeRoot folder? Do I have to make a separate directory for each module, inc. a package.json? Or can I just create a@types/my-module.d.tsfile? Does--typeRootseven work anymore? I can't seem to stop typescript from queryingnode_modules/@types Nothing I've done seems to work.I'm using the modulesortablejswhich is installed innode_modules/sortablejs. Since@types/sortablejsis worthless for the non-amd distribution, I need to write my own types for the module.How can I do this? I've tried adding it tomy-package/src/@types/sortablejs/index.d.tsand usingtypeRoots. But that doesn't work. Well, that's confusing. To declare your own typings for a module, you use--pathsinstead of--typeRoots. 
solution: 

issue: That code looks fishy.{key:1}will give{key:{}}, I think interface Container { [k: string]: Container|null|undefined|number|string|bigint|boolean|symbol|(() => unknown) } container : Container Try something like that? I'm on mobile now so.... Also, const value = container[key]; 
solution: 

issue: with lodash or underscore, that is Not built-in 
solution: You can add only!to tell compiler that given path is not null. 

issue: IMO the biggest issue with npm is the deep dependency graphs.  Nobodyreallyknows how tall the jenga tower they're standing atop is and then stuff like [<-LINK->] happens... Yeah, I don't think it's fixable, and that's what's so frustrating about it Like, anything you replace it with that does the same job is going to have the same problem I think the concept just doesn't scale well 
solution: 

issue: Has anyone proposed an alternative to npm? I hear a lot of complaining, but I don't think it's fixable. You either re-invent the wheel, or you don't and use npm. 
solution: 

issue: -1  Gives the wrong answer Yeah when I was still in the army and looking for anyone that I could talk to about anything I cared about I got on there.  I got caught up in the points game for a bit but ended up lurking in the C++ chat room.  Good times. Man the variety of results you get by repeatedly clicking ‘try the next answer’ is awesome.  Who knew there were so many solutions? Could not compile samplea lot of those Um, my hard drive just got deleted 
solution: 

issue: Oh Anders fixed it I don't think&&works properly as part of an issue search on GitHub, even when quoted 
solution: 

issue: I hate post increment If you see post increment, the author probably never worried about post increment requiring a temporary variable ++i;is the same asi = i+1; i i++is the same astmp = i; i = i + 1; tmp Err, ignore the inconsistent spacing, I'm on mobile This mattered a lot. Especially with iterators, iirc In cpp 
solution: 

issue: It’s likeinvalid- you can’t assign to OR from it.  Instead of usingnever, you use that and it triggers a compile time error from tsc unknownyou can assign anything to.neveris assignable to everything else.  This doesn’t allow either I was emphasizing the “or” It wasn’t meant to be a boolean OR Basically it’s this: [<-ISSUE->] 
solution: 

issue: Just getting some early trolling in  Anybody have a workaround that is actually good fornpm linking a React component for local dev in a React app?  The answers I see seem kinda  -y you npm link it then it gets built with its own node_modules with its own copy of react so it gets required twice 
solution: but its set up for dev, so peer dependencies have to be installed there. 

issue: Just in case if anyone is interested, I resolved my  issue from yesterday (kind a), with some flattening, I flattened given object into a map (containing deep key  and real value), then by those keys and values I injected "new" values into newly created object, it's typings aren't perfectly safe, but it work good, and yet has some documenting purpose (if nothing else) Why notnpm link? 
solution: 

issue: Does typescript permit assignment from a readonly property to a mutable property? Or is something else happening here? [<-CODE->] found the related issue: [<-ISSUE->] 
solution: 

issue: readonlyis basically just "I personally promise to not modify the property" But if someone else wants to.... Meh fnA == fnB? If they're both functions,==is fine 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Can someone explain why this is the case: [<-CODE->] Works is equal to string, but DoesNotWork is equal to unknown I don't understand why TypeScript can't infer A from the definition of Derive2 
solution: 

issue: trusktr: See [<-ISSUE->] - apparently youcanreturn a descriptor - but note that the property then gets defined on the prototype, it's not an own prop anymore 
solution: 

issue: yeah restart TS server is handy That makes me think of watching Rush Hour when Jackie Chan and Chris Tucker are singing “War (What is it good for)" 
solution: Yeah but there's no need since the descriptor you return isn't actually ignored. 

issue:  [<-CODE->]  [<-CODE->] 
solution: 

issue: I just get a white page. 
solution: Kind of. You can make it spit out interfaces or interface + validators (albeit ugly). And a bunch of output languages. 

issue: For some reason I thought io-ts was “better fp-ts” but in fact they’re different things That’s a lot of stuff Get someone to try to install all that at the same time and see if their computer blows up 
solution: I need to install that crap at work on the fast interwebs. 

issue: @fatcerberusT is opaque inside the decorator [<-CODE->] 
solution: Of course for describing a method you'll probably never usegetorsetbut for the sake of code reuse, it makes most sense to reuse it here. Also there's the fact the you take aTypedPropertyDescriptor<T>as input and produce one as output, and you want to enforce thatTis the same thing in both places. 

issue: Officially my favorite@jcalzpost : [<-LINK->] 
solution: The previous was just a random comment, sorry to intrude :D. keithlayne: you can set it from a list on install, vim, notepad, notepad++ (or notepad 2) or vscode  (maybe others installed recently but don't recall the full list). 

issue: @Ackos95 Thank you, getting some errors with that code though: [<-CODE->]  [<-CODE->] I am getting: [<-CODE->] 
solution: 

issue: Ackos95: That removes the errors, but I still get an error onuserfor!condition(user): [<-CODE->] 
solution: 

issue: Ackos95: Not sure what you mean :( 
solution: 

issue: When I looked at it I was like “cool!  But that looks horrible to use." 
solution: 

issue: Tryeslint.options.workingDirectoriesfrom the README [<-LINK->] . The last line should read: const stringValidator: ValidationFunction = (thingToValidate: ThingToValidate): thingToValidate is string => typeof thingToValidate === 'string' Wait what does it actually mean 
solution: Also@AnyhowStepthen ESLint is wrong. [<-LINK->] says/root/**/*.jsmatches both/root/test.jsand/root/dir/test.js.. The problem is they don't -- your interface specifies that the function takes a parameter that can be a number or a string, and returns a boolean. I think what you want istype ValidationFunction = (thingtoValidate: string) => boolean | (thingToValidate: number) => boolean. 

issue: but that’s only if I was lazy and didn’t actually run tests before I pushed assuming whatever I’m working on has tests…. 
solution: I like [<-LINK->] . Seems like it may be useful at some point. But I don't need it right now. How do you all keep track of libs you might like to use later? my Chrome bookmarks are a mess. I feel Chrome bookmarks are completely useless, too much work to maintain.. 

issue: I mean I implemented the above because the db would error if I gave it extra fields. not using json columns 
solution: Is that why JSON schemas are starting to become popular now?  For a long time a big deal was made of JSON not needing schemas (Crockford actively railed against it IIRC), now all of a sudden it's like that aspect has been forgotten. 

issue: I only annotate when I'm sure there's a Good chance the inferred type will be bad So, always for generics. Or if I'm calling many generic types. It's why 90% of my code in my libraries is just types. So that users can combine the types themselves (that user is me 99% of the time) If I'm doing a simple string concat, or for loop, or other stuff Then nah, infer that shit fatcerberus: yeah, that guy was pisseddddd. I understand getting pissed because I've nerd rage before, too. But his particular problem had a very simple workaround. 
solution: 

issue: jeepers because you’re getting the whole history? 
solution: 

issue: trusktr: You need to specify the type in the derived class . You could specify it relative to the base class: [<-CODE->] trusktr: StrictUnionis meant for object types to ensure you can't add excess properties to a union constituent .. Not really meant to work with any of those types except for the first one. Are trying to prevent a specific scenario ? 
solution: 

issue: Ah ok. So we have to specify it (with that shortcut, or with a type alias). It would be nice if there was a way to tell the base class prop type not to narrow @dragomirtitian I was trying to use StrictUnion like this: [<-CODE->] But I get some errors like [<-CODE->] Does it not work there's readonly props in place? 
solution: but a little jarring sometimes when the same thing means something else in a different context. 

issue: So I tried to do a PR for theArray.isArrayissue but it turns out that adding an overload forIterable<T>breaks a bunch of tests asArray.isArray()is defined in the ES5 lib whileIterableis ES6.  So lots of tests fail just because "can't find name Iterable" 
solution: 

issue: how come this express code [<-CODE->] gives this error on the route line:index.ts(18,14): error TS2554: Expected 3 arguments, but got 2. 
solution: 

issue: which is line 18? im assuming route needs a 3rd argument 
solution: 

issue: trusktr: yeah, that works, I was thinking of a function based solution, would keep the whole declaration in one place,.. let me see if I can come up with something .. trusktr: I was thinking about [<-LINK->] : [<-CODE->] But only works one level . so not a very good solution :( There is a GH issue about allowing this: [<-CODE->] It's actually on my to look at list .. This was the one : [<-ISSUE->] 
solution: 

issue: Wonder if that looseness is due to usability concerns or difficulty in implementation. fatcerberus: to be bivariant do there have to be at least 2 type params? 
solution: I may be wrong but it seems like it’s a real thing wrt functors.  I need to read all that stuff about 100 more times.. 

issue: @trusktr [<-CODE->] Yes 
solution: 

issue: fatcerberus: Replying to your message yesterday recommending jest…. it’s configuration hell compared to mocha. <emotional-rant> => jest is ridiculously overcomplicated. between config files, vs code extensions, etc, etc., and i still can’t get vscode to event recognizedescribeglobal. about to go back to mocha. fatcerberus: Thanks 
solution: 

issue: Do you mean something like this: [<-CODE->] This would be amusing if it didn't break builds - after a recent update, webpack crashes when trying to printit's donation message [<-ISSUE->] 
solution: 

issue: Is that an eslint error, not a typescript error? and, judging by issues, never will :( I've been working on my own package that avoids deep recursion by compiling type-guards using eval, but it's nowhere near ready yet. 
solution: 

issue: Hi All, I'm looking to resolve the following issue: TypeError: Cannot read property 'directoryExists' of undefined 
solution: 

issue:  [<-LINK->]  [<-CODE->]  [<-CODE->] But realistically, no one takes a class' method and reassigns it to something else.... Right? 
solution: If they use the spread operator anywhere, debugging becomes impossible.. 

issue: Do they accept pull requests against the es.lib?Omittook forever to be merged My impression has been that, for these kinds of changes, there's a lot of bikeshedding, and pull requests are unwanted. 
solution: Also this might lend to the "troll" POV: https://github.com/eslint/eslint/issues/11878#issuecomment-506237437, specifically:I cannot and will not have a discussion with people who think stack traces from production code are of no value. I require a minimum level of expertise from people I work with.. 

issue: I can't figure out what's wrong with this:  [<-CODE->] it saysAn argument for name was not providedandTS2556 expected 2-3 arguments but got 0 or more 
solution: 

issue: keithlayne: Well this was amusing: [<-LINK->] 
solution: fatcerberus: random question: Ifawait 1doesn’t run immediately, how aboutawait alreadyResolvedPromise?  i.e. is there a penalty for passing around a resolved promise?  My use case is something potentially time-consuming to resolve, and I’m not sure which code path is going to need it first.. 

issue: Too bad you can’t configure hotkeys in gitter som you don’t have to type so much for your shameless plugs trusktr: how is AssemblyScript coming along in terms of the code it generates?  I remember looking at it a while back and it seemed like it was a ways off from generating optimized WASM. Yeah I figured there is probably a lot of activity there which is encouraging. Yeah the argument for i.e. Rust -> WASM gets weaker if you can get good results from that, and incorporate it incrementally. Although WASM -> native doesn’t necessarily seem like the best to me.  Maybe I lack imagination. 
solution: 

issue: Haha they locked the isArray issue Guess now it will never get fixed, oh well 
solution: Open a new one and @ mention Mr. Kittens. I thought “How dare you mention me in an issue I authored, was a douche in, and then unsubscribed from” was pretty classy.. 

issue: invariant-mutable-property or something? It's not like the rule will completely fix all unsafe object assignments. I have bad naming sense. Got any ideas to make the naming consistent with eslint rule names? I gotta also implementno-readonly-to-mutable-propertyor sth later.{readonly x:number}should not be assignable to{x:number} I wonder how much code that will break 
solution: 

issue: Yeah obviously it’s not going to fix all the unsound cases I think what you want istypeof C 
solution: 

issue:  [<-LINK->] No surprise but the TS API relies on covariant mutable props I finally set up all the necessary stuff to test the rule and did a lot of clean up Now I just have to write a bunch of tests and vomit it onto Github 
solution: This is only safe for "top-level" properties but I didn't think of checking sub-objects when spread operator is used with object literals. 

issue: Can someone help me on this? I wrote some comments explaining the issue. [<-LINK->]  [<-CODE->] 
solution: 

issue: lcherukuri: You can use markup to add a link in the conversation, see the little M on the right bottom corner for syntax Alsokeyofonly returns public fields, no way to get private key fields unfortunately FYI, if you just need get/set that return a private field I would just use a regular field, get/set properties seem like overkill .. The reasoning (at least in part) in C#/ Java for always using a property is to be able to change the logic if needed without impacting clients, in JS this not apply the clients would not be impacted by such a change .. lcherukuri: not really, just use string, and type assertions... 
solution: 

issue: I tried changing it to typestring. now it gives a brand new error.object[field] = 'test value';Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'unknown'. No index signature with a parameter of type 'string' was found on type 'unknown'. [<-LINK->] 
solution: 

issue: I finally got the rule to perform deep checking on object/array literals   [<-CODE->] This still triggers the lint error, [<-CODE->] But this is okay, [<-CODE->] Because now you cannot accidentally modifysrc[0].nested.doNotMutateMePleasetonumber 
solution: Just added more naive optimizations. The project takes about 40s to 60s to lint itself now. Most of the time comes from that crazy 300+ element union.. 

issue: Hi, how can I one-line this block: [<-CODE->] Thanks I want * from services and I need * to be named as services I'd like to achieve this: [<-CODE->] 
solution: You can only doexport * from './services', according to MDN.  You can't rename it. 

issue: trusktr: interesting - thanks for the examples :) what about [<-LINK->] trusktr: where the static members are showing as available to the instance trusktr: sorry, an update for clarity and added examples: [<-LINK->] 
solution: Not really an "issue". It's by design that mutable props are covariant in TS.It's a correctness vs usability argument they made, I think.. 

issue: I struggled with it for a long time too! I finally decided to spend many hours toying with the type system to figure out all that is going on. And thanks to@dragomirtitianfor much help. mordof: There's one more thing! With that pattern, it now becomes possible to compose mixins together. One sec... mordof: Here's one showing [<-LINK->] . I updated [<-ISSUE->] to show the composition example, which really shows the issue at hand (won't work without the casting abstracted away in theConstructorhelper). As far as I know, there's no way to do it without a cast.@dragomirtitianIs there some way to avoid the cast? Still curious why [<-CODE->] is not a valid overload. 
solution: 

issue: hi everybody,  i have spent a lot of time trying to understand why this doesn't work: [<-CODE->] why i am getting these logs :xyzhhh 
solution: 

issue: not using yarn == only having to debug problems with one package manager (for js) 
solution: Just install everything locally, that way you can make use of native support for javascript modules via.jsm. 

issue: Too bad we can't specify overloaded function types.  [<-CODE->] Tcan't be overloaded, as far as I know. 
solution: I think there are some cases where inference only uses the last overload signature (NOT the impl). 

issue: So is it handy or weird that{ …null }and{ …undefined }->{}? bazinga I’m  finding it super handy Because{ x: maybeNull() }isn’t what I want. nope not in node anyway But [<-CODE->] Ugh…I just  wrote something like this: [<-CODE->] 
solution: you can deduplicate a fewifstatements. Unless whatever you're awaiting could mutateaorb, I guess.. 

issue: I think async/await uses promises under the hood So, it might be as slow, or slower? 
solution: For the same reason{...foo}is faster thanObject.assign({}, foo). 

issue: webstrand: I use for await of to implement cursors with my orm library I just added anunsoundExtendsAndImplementsCheckflag that defaults totrue. So, it now allows assigningBuffertoUint8Arrayeven though it isn't completely sound SinceBufferis explicitly annotated asextends Uint8Array 
solution: Yeah it would be too restrictive not to allow that - but this hints at what I realized a while ago - subtyping allows for assignment to be lossy. 

issue: IterableIterator<T>I guess is the same asIterable<T> & Iterator<T> I wonder how the recent changes to iterator typing will affect this I still don’t get symbols, tbh.  They are the weirdest part of JS IMO, do any other languages have something similar? 
solution: 

issue: I've been trying to enforce readonly arrays for all my projects lately It reminds me a lot ofconst-correctness in C++ Because I now find myself going pretty high up the hierarchy of types in my projects... Just to add areadonlykeyword to some type that I was already treating as immutable anyway Only arrays at the moment 
solution: 

issue:  [<-CODE->]  [<-CODE->] This is for a very specific use case with lots of comments to explain why I'm doing weird stuff, but it might get you what you need. I wouldn't do this if I could avoid it. 
solution: trusktr: I just removed the type. I put it there almost arbitrarily thinking about it. 

issue: shouldn't that error? [<-LINK->] 
solution: 

issue:  [<-ISSUE->] God bless TC39  [<-LINK->] Surely usingneverin any way should be a error as well? 
solution: 

issue: Special casing for never in conditionals? I didn’t realize that didn’t cause distribution.  I guess I don’t do stuff like that in practice. void?  The uninhabited type? I don’t think so, but not at all sure. 
solution: 

issue: I was able to get it working by just concatenating the files 
solution: 

issue: i am using typescript code in Visual studio UI while compiling I  didn't get any error  Eg: tsc typescript.ts but while running I am getting below error  Eg: node typescript.js  [<-LINK->] Please help me someone on this. 
solution: 

issue: I find it interesting that he unsubscribed from his own issue... Oh well 
solution: As for what F in F-bounded stands for, I skimmed the 1989 paper it was introduced in.  Looks like it's used to mean a function... that is,type T extends F<T>. 

issue: Though it’s a bit buggy: [<-ISSUE->] 
solution: alowaniak: so you’re actually mapping over an array and returning an array of literals for each entry?  Seems like a convoluted way to basicallyArray.fill.. Hmmyea I don't think I can use fill, basically what I'm doing is something like: [<-LINK->]. 

issue: @trusktr  reference Responded to your issue about the left-menu on mobile, gitlab-org/gitter/webapp#2225 [<-CODE->] @fatcerberus  reference Multi-line on compose on mobile is tracked by gitlab-org/gitter/webapp#873reference Created an issue for the left-menu not collapsing on Safari and the macOS app, gitlab-org/gitter/webapp#2226Reading through all of this is nice to see your daily pain points . If you're seeing other bugs, please let us know, https://gitlab.com/gitlab-org/gitter/webapp/issues @fatcerberus Can you create an issue with the details on your client, OS, maybe reproduction steps, etc? https://gitlab.com/gitlab-org/gitter/webapp/issuesThere is gitlab-org/gitter/webapp#1580 and the linked related issues. But I haven't run into these problems before and it's really hard for me to debug something that I can't reproduce. I just use Gitter in the Chrome browser most of the time btw [<-CODE->] 
solution: 

issue:  [<-CODE->] Does anyone know why I'm getting this error?  I can't figure out why TypeScript can't tell that{kind:TFruit['kind']}is not assignable toTFruithere. It should know thatTFruitis either anAppleor aBanana.It should therefore be able to recognize that{kind:TFruit['kind']}is always assignable to TFruit. 
solution: Is there a way to tell the type system, "TFruit is either an Apple or a Banana, never anything more"?. 

issue: AnyhowStep: stop sending me playground links that crash my computer 
solution: 

issue: fatcerberus: I can't seem to find your book on amazon? I mean, I'm assuming theres an epub of it right? 
solution: Even if you could donew (this.foo)<number, string>(),It won't be assignable toInstanceType<C['foo']>. 

issue: hmmmm@AnyhowStepthanks for the examples.  will spend some time testing that approach out. it seems like it might work 
solution: 

issue: Notnever? (I don't think I want never, but wanted to double check) I'm not going to run into any weird side effects usingunknown? 
solution: I think it does, but you can't have that so it's fine.. 

issue:  It would be nice if the type checker could filter out impossible type combinations in its error messages. 
solution: If you have some specific object that you are struggling to define a type for you could post details here and see if someone can give insight.. 

issue: yes and then I did set cur and props to any ok 
solution: In your case, I thinkpropmust be astring?. Or do you support number and symbol indexes as well?. 

issue: I’m going to have nightmares about fruit between this conversation and the damn fruit factory level in DKC:TF that cost me almost all my extra lives last night 
solution: 

issue: Ebeingneverlooks okay to me stringis not a subtype of"hello" 
solution: 

issue: fatcerberus: it's still a valid type - its like what you get in physics with some elements. Which is why its "never" - b/c "never" is "this can't exist at runtime - it canneverbe filled" o/c its best to bail out to never asap 
solution: 

issue: Anyone have a nice way to work around this? [<-LINK->]  [<-CODE->] I'm actualy really surprised TS can't handle it, as it's been doing so in tons of other places for me, but apparently not The first creates a new object, the second I can't do b/c I can't editBaseExpression Consider everything aboveCallExpressionWithParentto be fromts-estree(which it is) It's a simplification of the types fromts-estree 
solution: 

issue: That’s a pretty sweet error message. 
solution: Just creating an array and spreading the elements does not work. 

issue: I thought maybe that was the case, but I’d expect a little context in that case... 
solution: 

issue: Whats the best way to get the remaining numbers can't evenly be divided into sections of 3? 
solution: 

issue: Can't deal with concepts beyond basic mathematics. basic mathematics, everything pre-algebra 
solution: 

issue: I'm dyscalculic but I can build web applications I just can't think mathematically. so simple whiteboard questions have screwed me on a many a interview 
solution: Weasele_gitlab: Have you ever tried Prolog? It's a totally different approach that may get you over the hurdle of numeric mathematics into logic.. 

issue:  [<-CODE->] Any help is appreciated. thanks  [<-LINK->] @MicahZoltu thanks for suggestion. from the verbose, [<-CODE->] i dont undertstad why it failed even though it successfully resolved 
solution: 

issue: Given some type [<-CODE->]  [<-CODE->] 
solution: 

issue:  [<-CODE->] not sure this is what you're after  [<-LINK->] not AFAIK 
solution: 

issue: konstantinblaesi: You can't get the property namesas runtime values, unfortunately. The best you can do is have a separate array of the strings and then a compiler check to ensure the set of values in the array matches the set of property names. 
solution: 

issue: Now that we're confirmed to get.?, what do you guys think about the [<-CODE->] operator? True, I keep forgetting that its easy to use arrow functions for most uses of bind. Doesn't help with syntax like: [<-CODE->] Oh, I see. There's the odd case where::console.logis equivalent toconsole.log.bind(console) that is kind of weird 
solution: 

issue: Sounds like a nightmare situation =( So, you tried to insert data in other tables and they threw an FK error? 
solution: 

issue: Quacking the Coding Interview Don't unit testing libraries come with their own deep equal implementations? Run a unit testing library in production. Do it  [<-LINK->] 5M downloads seems like a lot Although, npm 3.6 will complain because their downloads exceed 5M 
solution: 

issue: Well the db code hasn’t changed in many months.  Not sure exactly where that was triggered, but doesn’t look good. I use advisory locks to serialize some stuff, and I thought they were pretty reliable. async stack traces are…awesome 
solution: 

issue: Are they using the same connection or different connections? It depends on your isolation level but I think the default is that they should see the old data and not lock Stuff that's outside the transaction, anyway 
solution: 

issue: Hi, I'm having a small issue with defining a default value when destructuring an object. [<-CODE->] Id like the default value of userOnlineExpertise to be an empty array. but it is undefined What am I missing? 
solution: 

issue: well you can’t destructure undefined, so that would be a problem are you getting a type error or a runtime error? the left hand side of the assignment looks fine to me 
solution: 

issue:  [<-LINK->] I am getting this in my visual studio code while compiling typescrpte file 
solution: Awadhesh007-coder: you can also install TS globally to run your command line as you originally posted. 

issue: You help me a lot can I get your email address? 
solution: (I don't generally give out my email address to strangers I just met in random channels on the internet.  ). 

issue: keithlayne: , I actually vaguely remembered correctly:Record<keyof Something, boolean> 
solution: fatcerberus: doesnt look like it quite works [<-LINK->]. 

issue: keithlayne: That article about MVP is interesting.  Here I thoughtFoo<T<U>>was the only source of parsing ambiguity in c++, turns out I was wrong 
solution: 

issue: At least that one’s now a historical footnote. That seems weird.  Are you on 3.5?  I though the bound onTbecameunknownand you’d think that would work. 
solution: 

issue: hey typescripters I also have some advanced typescript question from something like this [<-CODE->] I would like to get something like this [<-CODE->] like automagically 
solution: 

issue: Hmm... maybe a bad interaction with contextual typing.  You haven't given a type for the argumentvso TS tries to infer it from the function signature and getsunknownbecause that's the constraint ofT Andstringis assignable tounknownso it doesn't attempt to go further Just my theory keithlayne: To be fair, that "different things with the same name" is true with e.g. C++ classes too.Cis both the name of the class itself (C::DoStaticThing()) and the type of instances (C classThing(arg1, arg2);).  What's unique in TS is that we have first-class functions soCalso exists as a value at runtime webstrand: You could file an issue, it seems like it might be a bug MicahZoltu: You can't narrow arrays like that because an array isn't a discriminated union.  In general you can't narrow a whole object based on arbitrary properties, and arrays are just objects with numeric keys.  It would be nice if that worked, though 
solution: 

issue: Unfortunately, it makes it impossible to type: [<-CODE->] *and infer the type ofvwhen called 
solution: 

issue: Okay I cracked up at the pig nose I discovered that unsoundness issue a while back with classes - Keith and I were discussing it and debating whether to make a GitHub ticket about it... but I think it turned out to be a known issue 
solution: 

issue: What's funny, is when you need to get to a link on the page's footer. Which keeps disappearing I dunno why they put footers oninfinitepages 
solution: 

issue: Hello there ! I have a small question around mapped type and how to implement a function that return one:let's say that I want a function, that taking a union type returns the corresponding default value [<-CODE->] If I write thing like that [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] Anybody has an idea how to implement correctly that? Or even if it's possible (I'm starting to doubt it is) ? 
solution: 

issue: Yeah it’s valid to say that but you’re just setting the upper bound higher Just like x > 5 if x > 100 So it’strue, but not necessarilyuseful 
solution: lommez: don’t just check 200 and 201.   The api can return success codes other than that, then you have a bug.  Do the >= 200 / < 300 check.  It’s constant time.  If that dude argues, tell him I said he’s silly.. 

issue: All those classes and decorators are making me itchy Oh wow, you actually call new on ValidationPipe. give it a constructor, pass in the thing maybe? 
solution: Yeah I can actually do that. new JwtGuard() in that decorator works.. 

issue: The former. Beware thatWeakMapdoes not support the operationssize Scratch that it supportshas it doesn't supportforEach,size, or non-object keys. So you can't usestring|boolean|number|symbolkeys (those are never garbage collected anyway, at least not in the same way) 
solution: 

issue: @keithlayneSome men aren't looking for anything logical, like money. They can't be bought, bullied, reasoned, or negotiated with. Some men just want to watch the world burn.I think you are secretly the Joker. 
solution: 

issue: so correct me if I’m wrong, but decorators only apply in/on classes, right? Decorators are not valid here apparently not 
solution: 

issue: Gitter is being stupid again.  I only see one or two new messages but then I refresh and there’s actually two pages worth 
solution: 

issue: Maybe: [<-CODE->] Gets  the error you want but don’t know if it’s 100% correct 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: I am getting ng is not recognised as an internal or external command, in visual studio code. 
solution: 

issue: fatcerberus: you'll see that _a and ax are the same thing. _b and bx are the same thing _a = _b work But ax = bx does not The difference is one was created using generics. The other was not 
solution: 

issue:  [<-LINK->] why does this fail ? effectiveFrom can't be undefined after the sort 
solution: Not unless explicitly declared. 

issue: Hey everyone. I'm using nest.js with mongoose, and I'm trying to make a simple proof of concepts using generics. The way it's set up, I have to use a decorator in order to use my mongoose model, but I just can't figure out how to pass a string into the decorator... I have a gist available of the code here: [<-LINK->] Yeah that's what I found out, but I didn't know how else to show what I want to do just a string representation of the Model. So in the case of this gist, it just needs to be 'Animal' I tried adding the string as another parameter in the constructor, but of course then it's not initialized in time to use it in the decorator 
solution: 

issue: Except 50 is completely arbitrary and it's been shown that you can go deeper without problems =P From a naive perspective, I would think,Is this expansion in the cache?It is? No work done, don't increment counterIt isn't? Increment counter and expand Unless they don't actually have a cache for expanding generic types... 
solution: 

issue: hi guys! I got a question if something actually makes sense in typescript ... I want to pass an obj into a generic function (the obj is typed as a interface (some model A, B, C, ...)) ... plus a string that is a path in the obj to some nested property then I want to have a closure in the generic function that is called in a loop to satisfy the obj-path-nesting as per the string i think of passing a generic typekeyof Ainto the inner function so as to be typesafe .... the var then would iteratively becomekeyof keyof keyof A ... since this inner function is very dynamic (kinda) and so to speak a bit obscure (to me??) I don't know if this makes sense => since typescript gets compiled away and this check would only happen at runtime - or would it???? if somebody could shed some light if it makes sense to write something like this, if typescript actually parses  these inner function iterations and would be able to deliver typesafe obj-access optional chaining? ... actually more like lodash's_.get... but typesafe 
solution: I think a bunch of those functional programming libs should have them. 

issue: Has anyone ever encountered an issue with Arrow functions andthisas transpiled by TypeScript? I have the following structure: [<-CODE->] 
solution: And the second timedoSomethingis calledthisisn't what you expected.. Thefirsttime thedoSomethingmethod is called, everything is fine. Thethisreference correctly points to theSomeClassinstance.. 

issue: Can’t you cheat by using an intersection type() => {} as Overload1 & Overload2or something 
solution: 

issue:  [<-CODE->] Converting above code into JS gives [<-CODE->]  [<-CODE->] 
solution: 

issue:  [<-CODE->] This is the fn: [<-CODE->] This is its usage: [<-CODE->] Getting the error on the fallback: [<-CODE->] @keithlayne Sorry, I don’t really understand. I tried: [<-CODE->] But that didn’t work. What am I missing? 
solution: you probably want the type like you have it now, but pass() => setUser(null). 

issue: So it seems that dynamic import is stage 4 finally.  I remember they held it back because they were concerned about injection attacks before there was a properly spec’d way to sandbox it But afaik most engines still haven’t fully implemented realms so... huh 
solution: 

issue: CRA pretty much only likes to work with the settings it wants I have a similar repo setup, but I use two tsconfigs In theory with a new enough node version you could use esm modules but CRA uses babel withnoEmit: truewhich you probably don’t want for node anyway 
solution: usually with node you use commonjs since that’s what node speaks natively, and tsc transpiles your imports to requires.. 

issue: Re-exporting types doesn’t work well with isolated modules 
solution: CRA can't use namespaces, which the types define.. esModuleInterop enablesimport Foo from "commonjs-module". 

issue: didn't think so :( they're using a namespace as a trick to merge things together CRA uses tsc for typechecking only --isolatedModulesis required by babel because it can only look at one file at a time Apparently that makes const enums and namespaces not work.  Which makes sense when you think about it. 
solution: And it would probably take a lot of effort to figure all that stuff out. 

issue: lol, yes, noticed that too 
solution: It’s a bit frustrating to see Ryan say stuff like “we’re never going to remove this, no matter how questionable it is, because backward compat” but at the same time they won’t think twice about making type safety changes in a minor release that break valid code, such as [<-ISSUE->] , sometimes with no easy workaround. For example this case was broken by the above PR and there’s no obvious solution now to make it work (without sledgehammer casts): [<-ISSUE->]. 

issue: :( all the webpack and babel config for a start.  You can't touch any of that stuff AFAIK without ejecting. And one example I know of because I use it is if you put a JS file with the right name in the right place you can control proxying in the dev server. 
solution: 

issue: Solved it. [<-CODE->] 
solution: I just ran it through playground, it's not valid TS either.. 

issue: WHAT? Yeah it was scheduled as far back as 3.2.  Then it got pushed back until now it's not even scheduled I think. 
solution: Up until that PR the official line was it was too complex/performance heavy to be practical. 

issue: Governance of TS might not be the best but Anders is pretty damn smart though He mentions something about questioning conventional wisdom on the PR. I wonder if he'll wisdom the max depth and max count limits... Question the* stupid mobile I only know those two, too The max depth thing seems hack-y to me. I even found a 2016 issue that asked for it to be customizable. But no one replied to it or voted for it Granted, TS was a lot less complex back then... 
solution: 

issue: number & not (NaN | Infinity | -Infinity) 
solution: I've got validation guarantees I need to satisfy. So, having those type literals would immensely help.. 

issue: NaN extends N- isn’t this backwards?  It’s true ifNisnumber Oh wait that’s probably what you want, nevermind, I’m stupid 
solution: 

issue: How do I add values to a Record<string, number> ? I tried to do an add or push method but doesn't seem like that works? const foo: Record<string, number> = {}; foo.push({'\"bar\"', bar}); Like this doesn't work 
solution: 

issue: nice Just an sql generator w/types? or is it more complex The database will probably be fine, providing you limit the number of returned rows. My experience is, that the query optimizer will fix that for you Great! I might use it. I don't intend on ever touching an ORM again, until I have a much stronger type system. 
solution: They just don't want to support it. And judging by howexperimentalDecorators have gone, if they add a flag to disable the limit, say--unsupportedExperimentalDangerousUnboundedTypeRecursion, they'll still end up supporting it. Because every project will use it.. 

issue: As if my libraries don't have enough types, now it'll come with 100% more types! (Literally 100% or more, actually)Actually. More. Now that I think about it. More like 150%. I don't even have to click the link to know what it is lol I like that change but it took a while to get used to it, I'll admit Stalk@jcalz 
solution: 

issue: What is the best way to learn typescript? I've managed to become competent in TS with guidance from my coworkers and from stack overflow, but what do I need to do to become advanced? What are these ternary like operators called in this type definition? [<-CODE->] SoAlwaysDisallowedType<T>isAccessObject<T>so long as T doesn't extend(...args: any[]) => voidand doesn't extend{ new (...args: any[]): any }, right? So looks like it's filtering for things that are not a function 
solution: 

issue: Can't believe I read the whole conversation... Have quit the struggling with max depth issue for months... Earlier when I play with tuple, then I found that many cases can be done with mapped type without involving recursion, and then, I found it useless that I don't use them in my work, and life is too short to enjoy. 
solution: 

issue: I'll never give up, lol  [<-LINK->] MySQL 5.7 doesn't support lateral derived tables. Boo 
solution: When do you usually get max depth issues?. 

issue: If I understand correctly: [<-CODE->] This looks like it will work for an array: [<-CODE->] Yeah that turns your tuple/array into a union of element types no problem Does anybody know if declaration merging doesn't work in a 'script' (vs. a module)? looks like it merging withWindowneeds to be in adeclare globalblock. no, it's like a connector thing for some separate system 
solution: 

issue: I thought the whole reason we got declaration merging in the first place was that TS was made before we had ES modules so there needed to be a way to merge things across files It's some kind of chat client I think.  But it sucks because it posts the username of the person in backticks so if you have to @ the user... you can only @ the matrixbot (collectively everyone using it) And I'm not even sure if it honors the @ tag 
solution: 

issue: It just takes a really long time for the playground to parse, check, emit and generate the URL If there is too much code I managed to generate a URL so long that my address bar just displayed ellipsis 
solution: 

issue: They probably think “this guy is crazy” 
solution: 

issue: Now doUnionToTuplefor a union of 10 elements 
solution: Only works withstring|number|symboltypes, though.It relies on thek in Upart.. 

issue: Mine support that too.. Can't recall other tricks I've been used, guess it's time to sleep. Late night here, and terrible network accessing foreign website, so frustrating. 
solution: Goot night, sleep type. Commence cringe. 

issue: My informant from the future says it was closed as “Design Limitation” 
solution: It’s actually a really terrible feature. 

issue: Theres UnionToTuple off my original the problem is that UnionToTuple is incredibly brittle because it relys on ordering unless its permutations and the ordering depends on typescripts own internal unique id system it assigns tuple members when type declarations change position the order changes and therefore breaks code The typescript team has said because of these reasons they will not implement a native tupleof operator and have said using UnionToTuple in production is a risk 
solution: 

issue: that's what I was getting at before 
solution: Which interestingly also has the property of grouping by precedence. stupid unnecessary parens. 

issue: Why does this not work? [<-CODE->] 
solution: 

issue: MicahZoltu: I'd agree, but for the narrow case of needing to assign such a thing to a global variable keithlayne: I'm not  sure what you mean. In my example, the issue is: [<-CODE->] 
solution: 

issue: Buh I skimmed through and was about to bring up any and invariance and you all got to it already 
solution: For this particular situation (not sure if it applies to yours), I feel likeworkersshould be anArray<IMyWorker>which isnotgeneric, and instead only exposes the generic parts ofMyWorker.. 

issue: MicahZoltu: That would fix it.  But for performance considerations, having amutatemethod is not good. It actually cuts the speed of updates by a significant margin, in benchmarks. But you're right, that'd be a more correct solution to my problem 
solution: MicahZoltu: Yep it is! But itsmuchfaster to callfndirectly in a loop, rather than calling amutatemethod. 

issue: Wouldn't it be neat if we could specify assignment rules by using the getter and setter syntax? [<-CODE->] 
solution: is it possible to type a function without a concrete return type so the calling code would (try to) infer it instead?. 

issue: Could be anything else as long as it's a valid identifier I just looked through a list of existing keywords in TS and picked that one =x  [<-ISSUE->] I remember seeing an issue where nesting type guards causes the outer type guard checks to be "forgotten" But I can't find that issue anymore 
solution: 

issue: anyone using webstorm? How come I still have to configure the code style even when I have a tslint.json? Not sure what happened can't remember I had this problem before. Nevermind, I forced myself to also tweak some code style settings manually, seems to complain less now  :) I probably did the same on my previous setup and that's why it didn't complain before. 
solution: It may be a design limitation, but it certainly cannot be working as intended - unless the intention is to surprise the user!Hahaha. 

issue: AnyhowStep: I don’t get the joke with the boat... 
solution: 

issue: Keep in mind that TSisJS - with a few exceptions such as enums and namespaces, TS emits exactly the same code you wrote minus the types, so I wouldn’t expect any behavioral differences by keeping the tests in JS Types have no representation at runtime so they don’t affect anything that way 
solution: 

issue: AnyhowStep: Eh, I don't think I fully agree with that.  Adding handling for incorrect usage of a library by a developer that refuses to use modern tooling doesn't feel worth it to me. And that handling isn't free, ignoring the runtime costs (which almost never will matter) the cognitive overhead for the developer to deal with all of those checks in every API entrypoint, and the maintenance cost of maintaining all of those checks, and writing and maintaining all of the tests for those checks... it all ends up being not worth it IMO. 
solution: 

issue: This works, mostly: [<-CODE->]  [<-CODE->] My final solution: [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: That sounds like maybe the same type is imported from different places in the same module somehow.  I don't think it's a problem in general. Note that interfaces wouldn't have that problem unless they're incompatible (would be a different error), but you can't duplicate type names. Do you have"moduleResolution": "node"in tsconfig? I know you can config a lot of things around resolution with different tools, but that's beyond my depth.  I always use the most basic config around that stuff. 
solution: 

issue: hes overengineering his application if hes writing code like that trust types are what types they are; the only types you can't trust are the ones coming into your application from an external source 
solution: Seems like his code does type validation. Maybe he's validating from an external source.. 

issue: Ok, so I'm almost finished with moving my first library to TS \o/It compiles with tsc, but when trying to run tests with ts-node it errors: [<-CODE->] However, the actual code looks like this: [<-CODE->] All code on github here: https://github.com/larvit/larvitutils - clone, npm i, npm test and you should get the same result.I just can't understand :p 
solution: 

issue: Here's a fun error: [<-CODE->] Itdoesretain its generic, which isnever, and that can never change. Also,StringUnionis a phantom type. 
solution: Not exactly, if you doconst storeTest = new StoreTest().addString('BLE').addString('BLI'), the resulting type isStoreTest<BLE | BLI>. 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] Its not working. Any help? 
solution: 

issue: I have a npm module, this module is published as two different packages, one only with types and the other one with the implementations, in a third application I need to import both the implementation and the types, the problem is: When comparing the implementation with the types it seems like they are not a match, as if they both were different types.Here's the error message: Type 'import("/home/user/git/project/node_modules/@impls/payment/dist/types/Paid").Paid' is not assignable to type 'import("/home/user/git/project/node_modules/@types/payment/index").Paid'. So that we dont need to duplicate the interface 
solution: 

issue: so I have more WTF from work For years they've been scraping google calendars for sports schedules And somebody thought that it was necessary to percent-escape all capital letters in URLs foxjazz: can you be more specific 
solution: you could make a wrapper pretty easy. 

issue: Hey guys , anything update about [<-ISSUE->] ? it still not work 
solution: @matthewadamsIn a nutshell, a non-generic mixin works fine, but a mixin that uses generics, failsAh, I see what issue you have, with the generics. I overlooked that in your stuff. The others above already got to it: TypeScript removes the default generic parameter functionality as soon as you provide one generic arg. :( I'm really looking forward to that being fixed.. 

issue: Hello, forgive the noob question - but is there a way to use the TS compiler to produce browser-compatible ES modules that can still resolve npm imports? I get the feeling that I have the choice of eithermodule:esnextin which case I get es modules but I can't use npm stuff, ormodule:commonjswhich works with npm fine but the generated code doesn't work in the browser without bundling Is the answer still 'use webpack'? 
solution: 

issue: I just came across it today, so I couldn't tell you personally 
solution: I know if you have an instance of the class you can extract the properties, but I'm looking for a solution that abstract over the class itself, unitialized properties and all.. 

issue: TS doesn’t polyfill at all.  It only transpiles (newer syntax which would be a syntax error on older engines -> equivalent older syntax) babel-polyfill was based on core-js iirc, probably why it was deprecated in favor of just using core-js itself 
solution: 

issue: Yeah from what I've seen babel is more fine-grained in its transpilation, it will actually target the syntax to the browserslist config right down to individual features. 
solution: So, some databases allow only oneNULL.Others allow multipleNULL.It's kind of like the "turn-off-unique-key-checks" value to some databases.. I might have to look up primary keys containing nulls in databases not MySQL and Postgres..... 

issue: There was a comment about how that page seems to never get updated On that issue asking for improvement ideas 
solution: tonisostrat: In my oop understanding these are (abstract) classes with an inheritance structure. Interface are more used to ensure that there are some functions / methods. A nice example which is used accross the programming languages would be a button event listener. The interface is framework defined and the concrete listener is an application implementation of the programmer from the needed events from that button.. 

issue: felher: Try my shameless plug if you have time to spare, lol [<-LINK->] (Or not. Because there's barely any documentation) 
solution: 

issue: keithlayne: So we always complain that TS has bad documentation.  Well now it has none: [<-ISSUE->] I'm not sure whether that's better or worse (There are alternate ways to get to the pages but... yeah) Oh, looks like they fixed it.  When I clicked the link in that issue last night I got the error quoted 
solution: 

issue: Is there any way to use [<-LINK->] ? My plan is to provide a sane non-abstract implementation to use user, but allow them to build their own from the components. If there's no way to use mixins, i'll have to go the ugly route with declaration merging and type-unsafe mixins 
solution: You familiar with this? [<-LINK->] Would be cool to be able to something like that with TS.. 

issue: tonisostrat: That ORM actually looks decent. I'm wondering if it's success is related to the fact it doesn't implement it's own DSL on top of sql I've spent waaay to much time debugging the ORM I'm currently using. I've really been wishing all I had to debug was some SQL and type mappings. 
solution: 

issue: No, my library is utter trash at the moment, lol I'm still trying to steal ideas 
solution: 

issue: tonisostrat: Not a bad idea preprocessor macros \(ツ)/ 
solution: 

issue: No, no,BasicFileHandleis actually a great name forFileHandleImpl 
solution: 

issue: Only if you use deps as "everything I need to build" yeah I was like ugh when I saw that but it actually works out okay 
solution: devDependencies in general is meant to be “you only need this if you’re going to contribute to this thing” right?  If you’re just a user of the lib you don’t need them.  That’s how it’s supposed to work anyway. 

issue: typescript transformer API DavidANeil: Here's a library that's already doing that however last time i tried to use it it slowed down my compile times like 50x  [<-LINK->] 
solution: 

issue: Which linter?  Seems like an incomplete error. Here is good. 
solution: 

issue: Is this the right place to ask questions about Typescript usage? If not, what places do you recommend? Question (Here goes nothing): Why doesn't this work? How would I get something like this to work? [<-CODE->]  [<-CODE->] 
solution: 

issue: Stupid gitter keeps opening the sidebar when I try to scroll the code horizontally They still haven’t fixed that 
solution: Or that my sidebar won't collapse any more. 

issue: I have a TypeScript transformer that will turnimport { Foo } from './bar'intoimport { Foo } from './bar.js'.  It is fully functional except that if I haveimport { Apple, Banana } from './fruit'whereBananais an interface, then TSC will no longer strip theBananaimport prior to emitting like it normally does. I have made sure to callvisitEachChildon the node after updating it.  I can't figure out why my transformer causing TypeScript to no longer correctly process the referenced types. 
solution: 

issue: Just found a neat trick: [<-CODE->]  [<-CODE->] It's too bad there's no way to just tell typescript: This decorator is just a type-system check, don't emit any code.I'm going to have to tell my build system to erase references totslib_1.__decorate 
solution: 

issue: i recently had to do a bit of maintenance on a backend application written in pure JS. it had no documentation and even no fucking formatter so the code was all over the place. never again. true. well, regardless if i have to do it again or not - i can't see asinglejustification for the mess that they call a "type system" in JS dynamic typing is one thing, but that's just madness. 
solution: ==is a very, very strange operator. I keep node open just so I can type in things like!![]cause I can't remember. 

issue: To be fair, developers are bad at writing error messages So, I won't hold it against them 
solution: Yeah, I'm still sympathetic to Ryan's point of view here: the function is universally quantified on T, so the implementation should be valid for any possible instantiation of T. webstrand: I don't think so - it's a known design limitation I believe. 

issue: fatcerberus:  [<-LINK->] Stupid syntax highligher 
solution: I used notepad++ as a code editor for a while a few years ago.  Didn't like it much. 

issue: I'm so predictable that you even have my timing down to a science it seems 
solution: 

issue: should beconst [let, blah] = [x,y]- avoidvar but interestingly gets a different error. 
solution: 

issue: I have a use case I'm super interested in and I'm not going to get there without pushing the type system My experimental prototype works. It needs code clean up and needs to be generalized, but it works. I've played around witha lotof variations So, I know where you're coming from I actually do have an optional chaining implementation that uses that second syntax precisely because I didn't want to run afoul of the type system 
solution: 

issue: Actually didn’t we find out that chaining methodscanhit the limit? 
solution: 

issue: Hy all. I'm using typescript with react in an ionic app. I am totally new to TS and bump into an issue i can't solve. I hope someone here can help. [<-CODE->] doesn't compile.... [<-CODE->] I tried adding  <eventData> here and there but had no luck... @AnyhowStep Yes and no. I had to use data:any because data:EventData creates a new error. [<-CODE->] I absolutely should read the documentation in more depth. I read a couple of react with typescript articles but none go into my edge cases...But as of today i just gotta make it work... Building a POC to convice the boss we can switch to react typecsript ionic and Grahql...Thanks for the hint ! 
solution: 

issue: I really don't grok "unknown". I feel like an API response is technically unknown until run through a type guard, but I can't figure out what crazy stuff I need to check to get to the point where I can start validating fields in it are right. Is there a best practice set of checks to effectively get from unknown to any? Currently I do something like [<-CODE->]  [<-CODE->] 
solution: 

issue: Can I pass a class or interface type as a parameter to a function? In addition, how can I tell if a class or interface declares a property? The hasOwnPropery method is used to instantiate an object and does not meet my needs. 
solution: 

issue: Could also work withnottypes.{ blah : string, [k in not "blah"] : never } But we don't have that, either 
solution: Even with that conditional type workaround, excess properties can still sneak through, though. Use a union type for the one string index signature. 

issue: Sounds like a good start. A lot of libraries have unofficial types of varying quality. You can find them, via npm, in@types/* You can find others, and more information: [<-LINK->] 
solution: 

issue: webstrand: I have an app in typescript using AMD modules in tsconfig. I also have unit tests I want to run in node. Now what I can do is change tsconfig to commonjs run tests, then change tsconfig to AMD and compile for real usage. 
solution: tsadigov: You'll want to split up your build system. tsc compiles to modular javascript, and then you'll use a bundler like rollup to generate AMD or commonJS or whatever. 

issue: keithlayne: 
solution: 

issue: webstrand: Already merged.microsoft/TypeScript#31838Note that this reduction already happens if you trigger distribution on the type keithlayne: I once clicked a mobile Wikipedia link while on a PC.  I was surprised they had redesigned the site... until I realized oh wait, it’s just the mobile version 
solution: 

issue: Hello. I am trying to augment a type with string literals, something like this: [<-CODE->] I got an implementation that infers the "tag" objects just fine (because in my case, there are extra properties in each "tag" object), but I can't set their properties to be the literal that I want.Here is a playground with what I got so far 
solution: 

issue: keithlayne: maybe I checked the issues page and it seems like the bot hasn't picked up my crashes yet  [<-LINK->] Something aboutAwaitExpression 
solution: 

issue: keithlayne: wtf I knew about recursion when I was like 13 years old.  Of course I was programming DOS back then so I mostly knew it as “how to cause a stack overflow” but I still understood it 
solution: 

issue: There once was a time that most languages did not support recursion: [<-LINK->] those must have been some scary times to live through 
solution: 

issue:  [<-CODE->]  [<-CODE->] 
solution: For every tail recursive call, there's an equivalent loop, and vice versa. so it's isomorphic. 

issue: I wouldn't use Python, either. Not sure what I'd use, really. Not Java. 
solution: fatcerberus: Well, that's false, otherwise it wouldn't inferc is neverwhen you omit(() => c = {} as C)()fromfunction j2. 

issue: fatcerberus: I read through that issue aboutdeclare typeyesterday.  I'm glad you won the debate about syntax. 
solution: 

issue: property 'catch' does not exist on type 'Observable'   -----I am getting this error while error handling 
solution: 

issue: I managed to break tsc again lol 
solution: I am dumb and used call instead of apply, which tsc didn't catch. I can't find it even after filtering by my name. I don't think it actually belongs there.. 

issue: Anyone think they could help me figure out why my project, using webpack, works on a local webserver, but when I try to make a production build I get an error?  [<-CODE->] I get the error that a is undefined. I think the non minified code for that function would be from Phaser. [<-LINK->] I'm not sure if it is unrelated to TS, a problem with my config, or a problem with Phaser. nevermind, windows/linux fuck up with file name capitilzation. when loading an html file in the code I had a capitilization issue. 
solution: 

issue: Huh? If the minifier breaks your code, I would assume that's a minifier bug. I think the only time I've seen a minifier break something that wasn't a minifier bug had to do with Angular.js and its magical DI stuff. But I would only expect a minifier to impact the download time, not actual execution.  Well, except for parsing, I expect parse time is roughly linear with code size. 
solution: 

issue:  [<-LINK->] Staircase code and I don't want to debug the minifier.Before TS, I've never had to debug a compiler before Always took it for granted that compilers were super robust tools and that failure is guaranteed to be my fault I'll remember that if I ever start using Scala ._. Actions["type"]  [<-LINK->]  [<-CODE->] 
solution: Ha no way! I could have sworn I attempted this - anyway thanks.. 

issue: Just block push notifs in your browser for gitter.im.  Whoever designed the notification system for gitter needs to be Oh wait I said that wrong.  “Drug out into the street and shot.”  There we go 
solution: 

issue: I feel like that addition to remove event listener would have harmless and been beneficial Uhh... I wrote the above sentence after just waking up.Ignore the... Grammar It isn't transitive becausethe property names don't overlap and TS has extra special checks for it, IIRC The opposite of love is not hate.It's indifference.-Some movie/book/whatever 
solution: 

issue: maybe trytypeof data.upperTex === 'string'as the condition?  [<-CODE->] 
solution: and that makes your assumption thatdata.propcan't beundefinedin the true case false. It seems like"prop" in datashould, if true, assert thatdata.propcould not possibly be undefined, and thusdata.propmust be the other type, in this casestring.. 

issue: apparently for that simple example the issue isreadonly Yeah, I never use it...I need to get into the habit. you mean highlight invalid syntax? 
solution: 

issue: Does this error make sense?Type 'T' cannot be used to index type 'Pick<Record<"name" | T, string>, Exclude<T, "name">>'. oh wait, I'm not sure why it's notExclude<'name' | T, 'name'> So I have aRecord<'name' | T, string>, and I doconst { name, ...rest } = thingand that's the type I get forrest.  Not sure it all adds up. 
solution: 

issue: also that's just Record<T, string> unless you're error is more complicated 
solution: you mean might include? if it doesn't include name you don't need to exclude name. 

issue: pls dont leave me alone :( 
solution: 

issue: Don’t you need esModuleInterop for the latter to work 
solution: 

issue: Hi all  , can you explain me how to do work this snippet ( for the type )  : [<-LINK->] ? 
solution: 

issue: leihatrucksme: InIocServiceType, the identifierkis a type that refers to a constant string.If you trace it backwards, you'll see that it get's bound byIocServicesType < Services >to each key inServices.Does that help?If you're trying to fix the error, use this instead: [<-CODE->] 
solution: 

issue:  [<-CODE->] Note the type ofbananawhen you useFruitConstructor1infruitFactorydefinition vs if you change it toFruitConstructor2. If you useFruitConstructor1infruitFactory, then the type ofbananaisBanana<any>.If you useFruitConstructor2infruitFactoyr, then the type ofbananaisBanana<string>. I can't figure out why the inclusion of an additional parameter in thenewfunction breaks type inference. 
solution: You were expecting it to default to the constraint type (ofstring) instead ofany?. 

issue: lppedd: That gives me even more results! sandersn: Yeah, I want it to infer the type argument for me. That is what this all started, my factory function was returning the correct type for some of my classes, but not others.  [<-LINK->] That mistake is the life blood of my application! 
solution: It's one of them higher-kinded bananers. 

issue: I shall join you in your misery. 
solution: I wish I could set TS Playground tots@next.  Would make it easier to follow the recommendation of "test against latest before submitting a bug".. 

issue:  [<-CODE->]  [<-LINK->] fatcerberus: Gitter really hates my code and does not want to syntax highlight it lol 
solution: Without the type annotation, he could accidentally make it not conform toMyShapeand the error would appear downstream, when he tries to passmyObjto a function that only acceptsMyShape. 

issue: its because the asisgnment problem is with Readonly not "T" oh wait no nvm you're assigning Readonly to non readonly If you're assigning Readonly to nonreadonly of same structure it will work vice-versa wont if you're actual code is trying to contain conditional types on variables you can't trying to use conditional types on variables** you can't secondly the second you introduce conditional types they become nominal and globally unique well not fully but almost in the sense that these will never be assignable to eachother correct i'm 99% sure that's right because that's the case here...  [<-CODE->] 
solution: 

issue: So I'm a little confused about how to structure my Typescript library. I have some types that I want to exist in a subdirectory - let's call itsubdir.  And I would like the library consumer to be able to access the type viamylib.subdir.typejust by doing animport mylib from 'mylib'. I can access actual things insubdir, like classes, but anytime I try to access types, I get an error message:Cannot find namespace 'mylib'.and I am utterly confused. Actually come to think of it I can't access types from the toplevel either. AnyhowStep: Here's my library with my latest attempt to export stuff: [<-LINK->] 
solution: 

issue: I’d probably be annoyed if I mapped that to a key and it actually toggled I like that it focuses the terminal if already open 
solution: 

issue: That's what I use. 
solution: webstrand: , In this case, also since the project is in React, I'm not too concerned about HTML 5 custom elements.. It's 3:30AM there. Which I know means nothing to you :P. 

issue: AnyhowStep: I see parentheses around your explicit annotation. Does removing them fix the issue? (I recall that you discovered that parentheses affect type instantiation depth) Are you narrowing by strict equality? or something else What are the types you're trying to narrow? are you using intersections/ branded types? discriminated unions sometimes fail to narrow for obtuse reasons Not a compiler options issue, then"strict": true 
solution: 

issue: Ooh, it just got one minute faster 
solution: 

issue: You don't want to keep five different paper maps in your glove box? In the paper maps box 
solution: On the plus side, my bug didn't get market as a duplicate.  On the down side, Ryan seems to think that the behavior I want (and get half of the time) is incorrect and the "fix" for my issue is to break the half of the time that it works.   [<-LINK->]. 

issue: Yeah that's frustrating when you can't isolate it AnyhowStep: microsoft/TypeScript#33020- PR to fix one of your issues 
solution: Most of it is tests, haha. My bad. I just saw the number and got confused. 

issue: YourisFoodeclaration should already work 
solution: 

issue: Yeah so slightly related, I decidedunknown(I mistype that word every single freaking time) is not bad to work with in a custom type guard, butobjectis kind of a dead end. Like I can't seem to narrow (widen?)objectat all.'foo' in objectdoesn't do anything.  What am I missing? 
solution: yeah with unknown I dotypeof x === 'object' && x !== nullbut get stuck atobject.  So I still useanyin type guards a lot, but that doesn't make me happy.. 

issue: I feel like I remember reading about an equivalent thing in regexes, like "if you find a partial match here don't backtrack to try to expand it" Used to prevent catastrophic backtracking Possessive quantifiers, that was it.  Once the possessively quantified thing matches something, it won't give up its match  [<-LINK->] 
solution: 

issue: dude dynamic programming is hard for me understanding that DP is basically equivalent to memoization means I just memoize that crap the classic examples of DP are just not that intuitive to me 
solution: 

issue: Inception was fun to watch So, my company is listening to webhook events from Stripe and processing them And Stripe says they don't guarantee the order of events I asked a colleague how our system handles incorrectly ordered events 
solution: 

issue: That’s... very bad 
solution: So my daily WTF is that we have this thing that scrapes instagram.  The way it works is to hit the HTML page, finds a script tag in the body by regex that sets a global to a JSON blob.  Then it digs like 7 levels deep in this JSON to get the data it wants.I thought "whoa, this is incredibly fragile, they changed stuff and it broke" only to do some googling and find that there are multiple libraries out there that work in this way.  Wow.But ours broke because for some reason, all those pages started redirecting to the login page.  I couldn't reproduce this behavior on any other machine, including one in the same data center.But today it was working, all was good.  Then it stopped working again.  But our service will disable the account after a certain number of scrape failures.  So it will return a failure even when it has (old) valid data to serve.And yes, I realize that caching instagram on our server is kinda stupid.. 

issue: What'susers.nil?That looks like gibberish to me =x is_null(users)? (PHP lol) Wait, the whole identifier isnil?? That's all kinds of weirdness to me Is the conditional operatornil? ? trueExpr : falseExpr?Or is it more english-y? variable = if users.nil? then trueExpr else falseExpr(just randomly guessing lol; pretending Google does not exist) That double question mark throws me off It's separated by a single space 
solution: 

issue: but...seems like it's doing the rounding for no reason, so I'll leave it alone. 
solution: 

issue: I've tried to narrow down my issue with mixins: [<-LINK->] Is there any way to fix this? 
solution: 

issue: Thanks for looking, I know it's not the simplest example 
solution: so I think instagram blacklisted us, which is sucky. 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Actually, it looks likebehavior(): HK;will cause the bad behavior 
solution: 

issue: Not always: see the old comment in the diff for the behaviour [<-LINK->] 
solution: 

issue: Winters here are cold. I can't help it >.> 
solution: 

issue:  [<-CODE->]  [<-LINK->] fatcerberus: @trusktr Different libraries can't possibly accidentally declare or instantiate the sameFootype They'd have to have this library as a dependency and usemyUniquePropexplicitly at some point 
solution: fatcerberus: about the inference priority thing, I read it somewhere on GH, posted by a member of the team, but I can't really find it right now ... 

issue:  [<-LINK->] It's the type of the module itself, if I'm reading it correctly The type declarations disgust me lol Use it like a regular connection, I suppose I assume attempting to use it before calling connect () will give you run time errors I don't use mongoose, though 
solution: 

issue: { [k:string]:unknown } is what I would start with And if you discover some cases where this doesn't work, change the type 
solution: 

issue: That function signature isn't actually generic fatcerberus: you mean a typedef in the function? 
solution: But - the function you wrote doesn't take pairs of things.  It takes one thing - a document. there are no other constraints like return type or a second arg. 

issue: It's like the droste effect! keithlayne: Funny enough I couldn't find that SO link using Google directly even though you'd expect it to be a top result.  I had to search GitHub to find the issue where he linked it 
solution: 

issue: Who's Gary? the server imports the client when needed. Disgusting I'm going to go ahead and say to not do that I can see why one would do that. But just don't if you're working in a team That const x = foo()<string> Foo is meant to return a generic class Then you go new x(args) I think I need to get on my computer and try it 
solution: 

issue: fatcerberus: @trusktr@keithlayneI can't find any references to theextends mixin(Base)<F>syntax now, but it's necessary to provide type arguments to the base class because they can't be inferred via the constructor. [<-CODE->] Explicitly, the template argument is use to pick the correct base class constructor to be used. [<-CODE->] The mixin I've been working on is: [<-LINK->] Found it: [<-LINK->] It's called anExpressionWithTypeArgumentsand it's not documentedanywhere. 
solution: 

issue: no traction then? 
solution: 

issue: alright, got it many thnks@fatcerberus@ShanonJackson@keithlayne 
solution: one last question, it is not possible to dointerface CustomArray { [i: string]:  any }because array index are numbers, and array with string keys might not return right values, right?. That type is basically justRecord<string, any>. 

issue: sorry wait yeah const enum is also different  [<-CODE->] paste that in typescript console you can see differences. enum XYZ1 produces output rest dont. enum XYZ2 produces no output however will inline every value of the enum member in its usages enum XYZ produces no output and will not inline every member it exists purely at the type-level and any usage of it will break unless there's a value floating around somewhere backing up that type 
solution: 

issue: Yeah having a value in thedeclareis weird Because it’s just saying “there’s an enum namedEand this is what’s in it” 
solution: 

issue: DrSammyD: Looks like maybe the decorator implementation is wrong? Can't see the implementation of it. Can you post that? 
solution: 

issue:  [<-CODE->] karanlyons: shrugs. 
solution: 

issue: If the API says I have to donewbefore calling a method I’m always going to bind it just to be safe.  Note TextEncoder used to have state - it used to be possible to set the encoding.  At some point they decided screw it, it’s utf8 only But if they decided to re-add that feature in the future... yeah good way to have it mysteriously break 
solution: 

issue: That greatly simplifies things for me as well. Okay, so I basically just went through and deleted the past hour or so of work :P 
solution: 

issue:  [<-CODE->] eg. [<-CODE->] 
solution: 

issue: I'd probably copy it in manually after thetscstep. AnyhowStep: thanks for that info.  It's just not clear at all: [<-CODE->] 
solution: So is there an easy way to observe that x isunique symbol?. 

issue: yeah I'm dumb, thanks for confirming  can't really do that with anything 
solution: 

issue: That does look kind of weird to me too though because (the construct signature of)SetImpl2_baseisn't generic Where does the<string>go Post code? AnyhowStep: You've used unique symbols, any idea?  That seems like it would prevent ever accessing the property Actually wait - your code as-written works fine.  You can only use the unique symbol as an indexer if it's declared in the type You can't attach it to random objects though Same rationale as how you can'tobj.foounless the object declares a.foo Like this: [<-CODE->] trusktr: I hit on the reasonunique symbolexists - because the compiler can guarantee it always refers to the same symbolbased only on the type, it lets you use it in type definitions.  Can't do that with regularsymbolbecause it could be anything The error I get is different: [<-CODE->] 
solution: 

issue: When have I ever led any of you astray?All that I speak is gospel. (I'm not actually religious) I used the word "trampoline" a few times on Gitter And now YouTube is recommending me trampoline videos wtf 
solution: You can thank Kyle Simpson for all yourObject.createissues. 

issue: anybody used DOMParser on XML?  I have html entities in an XML tag, and I can't seem to get the raw string via the API. HTML nodes look  like they have aninnerTextproperty, but XML nodes only haveinnerHTML.  Of course. I just want to get a string out of xml.sigh 
solution: 

issue: Ugh I finally finished writing all the compile-time constraints for the SELECT clause Now I need more tests and run-time checks  [<-LINK->] Yeap I think I learned that trick from some Github issue long ago  [<-CODE->] Gitter can't syntax highlight properly lol  [<-LINK->] 
solution: 

issue: Wow what was I thinking.Spectaclescodebase has so many==, eslint now hates it after I enabled theeqeqeqrule And then fun part is, there are a couple instances of!= nulland I can't tell whether they are checking for "null and undefined" or just null 
solution: 

issue: often you can JSON.stringify/parse payloads topostMessage 
solution: 

issue: Sure, [<-LINK->] VulcanRav: Oh, interesting. I didn't see that in the typeguard documentation, I must have not scrolled down enough. 
solution: 

issue: krainboltgreene: Beware that"key" in objectdoes not narrow 
solution: 

issue:  function json(obj: {[key: string]: number}): string 
solution: 

issue: You can’t do that, no.  But see [<-ISSUE->] Of course if you’re getting the strings from outside you still have to validate them so I’m not sure how much a type buys you at that point This only helps if you have json literals in your code 
solution: I have advocated for nominal types to brand strings that are “unsafe” vs. strings that have been properly escaped/cleaned/etc. within projects.. 

issue: Hey, is there any way to create a "lazy" typed function? by that I mean something like: [<-CODE->] Thank you@nitzelbut I need something that can be "typed" later in the scope I can't express exactly what I want, but need something like: [<-CODE->] I need to figure out a way create thecreatefunction mentioned above and make it typesafe Basically what I need: Thecreatefunction need to create a function with the given parameter of a type that it doesn't know yet and for your syntax error,as constwas introduced in [<-LINK->] it is a way to prevent types from being widened like"A" as constis of type"A", it prevents it from becoming juststring now, why do I need it? because I want to give additional information to these functions, like: [<-CODE->] 
solution: 

issue: Method overloading with generics gets confused  [<-LINK->] As per this example, I expect the variableato be string, but it's not 
solution: If you reorder the overloads, it becomes a string. may be file an issue.. 

issue: Here's the issue [<-ISSUE->] 
solution: 

issue:  [<-LINK->] Well, it's not whitelisting by uri schema 
solution: 

issue:  [<-CODE->] How do the error messages in theifstatement make any sense? I would expect it to constrainbdown to{type: "A", foo: string}... 
solution: It generates a map of "enum-to-buttons" effectively.. 

issue: deluksic: I think you might be hitting theA<B | C>vsA<B> | A<C>thing the errors are maybe misleading because it might be showing only the union member that it can't assign to.  Although that might be in the earlier part of the message.  [<-CODE->] 
solution: 

issue: can't you specify your parameter on call<HERE>()? 
solution: 

issue: Yeah so that’s not actually a rank 2 type - rank 2 would be ifcbitself is generic But thatshouldwork as written Maybe the inference fails with.call 
solution: If you'll excuse the nerdiness for a bit, I think this might be similar to the [<-LINK->] in Haskell, namely that the signature for.callisn't rank 2 and therefore it has to instantiate the generic target function to something concretebeforeit gets to the point of evaluating the arguments. 

issue: I'd think it'd be really hard to do inference throughcall.  I'm not sure it even makes sense to do that. But in general using a generic function as a value seems kinda impossible. Like how you can't usefn<T>as a value. 
solution: 

issue: beyond one arg it's just impossible like an uncurriedconstant- it would have two args, one univerally quantified, and you can't guess which one. actually that's false I keep being stupid but you could just make the ignored argunknown. 
solution: 

issue: Am I correct to assume the need here is a type for “array that can be roundtripped losslessly as JSON”? i.e.JSON.parse(JSON.stringify(array))doesn't lose any information 
solution: 

issue: it gets the keys of a specific type and you can then usePickto get the full object type m-b-davis: could you post the code, dificult to fix pictures ... m-b-davis: not seeing the same issue in the [<-LINK->] 
solution: and now it works in my IDE. ♂. 

issue: how to access global variable inside foreach loop. I have tried let self = this;  [<-CODE->] ``` but it is giving me NAN 
solution: 

issue: This seems to fail for PostgreSQL. [<-CODE->]  [<-CODE->] 
solution: or maybe aGROUP BY. ablakey: you infer the array item type, then take an array of that type.  Seems straighforward.. 

issue: literally melts my brainCleanup on aisle 2 
solution: 

issue: How would you describe the thing that works in the first case (fnarg) but not in the second case (thisarg)? [<-CODE->] The first case works but the second case isType 'unknown' is not assignable to type 'number'. 
solution: 

issue:  [<-ISSUE->]  [<-ISSUE->] and [<-ISSUE->] - the issue numbers I remember off the top of my head because everyone reports problems that trace back to them LouizFC: not sure what you're trying to accomplish there 
solution: 

issue: I was just trying to stress that generics need not be involved 
solution: Well they are already involved because his use case was to instantiate a generic function without calling it :). I feel like if I knew what Skeletor was saying it would be funnier. 

issue: if i have a variable whose types are not known and I just have to add a key-value pair to it how do i do that variable could be holding anything 
solution: If you don't know the type then it could be, likenullorstringornumberand you can't just attach random properties to that. 

issue: um, I just didnpm outdatedand it shows typescript at 3.6.2, with a last publish 22 minutes ago.  Doesn't that seem weird? 
solution: um, I thought that the normal first release would be 3.6.1. 

issue: Hi everyone. Earlier I wrote about the Transformer Compiler API. Here is the Stackoverflow question if someone wants some points. [<-LINK->] dragomirtitian: thank you very much! I think for someone with a little bit of experience on the Compiler API could be pretty straightforward 
solution: 

issue:  [<-CODE->] playgroundwhy can’t i return undefined in the above code? 
solution: 

issue: The right order is the order that does not produce bugs 
solution: 

issue: why does this code not pass the prettier formatter - [<-CODE->] getThemeProp returns a function it formats the code sorry 
solution: 

issue: well doesn't do any thing what is the better way to write that func returnin func 
solution: const getThemeProp = (prop: string) => ({ theme }: { theme: Theme }) => theme[prop]. 

issue: propertyName is a value, not a type 
solution: 

issue: fatcerberus: thanks for the explanation, I knew about that (we've talked about it before) but 'subtype reduction' didn't ring a bell. But I seem to remember that there were only certain cases where it applies postgres hasDROP CONSTRAINT IF EXISTSbut notADD CONSTRAINT IF NOT EXISTS Makes idempotent SQL much harder. 
solution: 

issue: keithlayne: create a non unique index (a_id, b_id), see if that helps Youmightbe able to get away with only creating a non-unique (b_id) index I'm not sure if postgres has implicit index suffixes/prefixes We've all seen the downside of syntactically doing stuff but I can't deny it makes it easier to understand why something doesn't work (oh, the syntax is just wrong) lol 
solution: And all it really needed was a regular index. So it can perform efficient lookup (for existence checks). 

issue: Becausea_idcan already only possibly be one thing So you can't narrow the constraint any further 
solution: 

issue: anyone worked with compiler api? I need to get variable type - same value as what we have in vscode, I'm usingchecker.typeToString(checker.getDeclaredTypeOfSymbol(symbol))but it gives not flattened declarations in complex cases 
solution: 

issue: Hi, I'm getting an issue where a typeguard for null and typeguard for null|undefined on a generic doesn't seem to be working as I'd expect when the type has been defined as a generic. But when the type is defined asunknownor a union the typeguards seem to provide different results.Anyone know what I'm doing wrong here? [<-LINK->] 
solution: 

issue: forEachandawaitdon't mix well. (await Promise.all(sources.map(find))).flat()would be my preference - isflat()totally not an option? ...but, changeforEachto a for loop and the array should be populated when it finishes. no lodash either? something likearray.reduce(concat, []).  But that's obviously different. reduce((acc, elem) => (acc.push(...elem), acc), [])should work  [<-CODE->] seems workable or just[].concat(...await Promise.all(sources.map(find))) what aboutNULLS LAST? 
solution: 

issue: I'm wondering if I should force.asc()/.desc()to always be used in theORDER BYclause of my library 
solution: 

issue: yeah that's not a discrimated union any more.  It may work if you extendRRevery time but don't includeRRin the union.  [<-CODE->] Ultra compact.  but it works - and you get the expected errors if the union members dont actually conform toBase. 
solution: But if someone later just randomly defines aCwithout adding it to the union you won’t be able to narrow to it. Cdidn’t want to join the union and it was a right-to-work state probably. 

issue: Hi all,  suppossed that I have two interfaces and a intersection type as follows: [<-CODE->]  [<-CODE->] 
solution: @keithlayne it just... Completely slipped my mind.The experimental version is MySQL-only.So, it just uses backticks.In this rewrite, I decided to worry about compile-time tests first.Then translate those compile-time tests into run-time tests after.So, I have zero run-time tests at the moment.And I was just working on something else unrelated when a voice in the back of my head told me I need to think about quoting identifiers lol. It's funny that MySQL doesn't haveLIMIT ALL.So, to emulate it, I haveLIMIT 18446744073709551615(the max bigint value). 

issue: If you try to domax bigint value + 1, MySQL throws an error lucianenache: In your example attempts, you already haveA Why do you need to "extract"AfromC? YourmyBattempt seems pretty decent Pick<C, keyof A> It'll remove call/constructor signatures but it should be fine most of the time IfCisA & B & { name : "lol" }, thenPick<C, keyof A>should get you{ name : "lol", age : number } Not sure if that's what you want  [<-LINK->] This is my first legitimate (non-contrived) use of a type literal with such a large value YourPick<ChildAProps, keyof A>should give you theApart ofChildAProps.But you could also just... UseAdirectly. 
solution: 

issue: Out of curiosity, what version of the compiler are you using? I am currently on 3.4.2, could that be an issue? 
solution: 

issue: If mysql allows it (whateverithappens to be) and postgres doesn't, I always assume that it's because mysql is a dirty ho and will take just about anything you give it. you take that back pg is a saint, a saint, I tell ya! also I meant that as overly...permissive 
solution: I can't seem to find anything in the spec about the expected behaviour of UNION ORDER BY. 

issue: AnyhowStep: Thanks for the link. just finished reading it. still a lot to take in, but i'm starting to get it i think 
solution: AnyhowStep: I think I explained the excess property check issue pretty well here [<-LINK->]. 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: keithlayne: Thanks. I can't changesetStatethough as it's part of the library I use (React). (In that libraryTis a generic, but for simplicity I've just created that type here) 
solution: 

issue: I’m pretty sure it hit stage 4.  There was discussion of aligning TS’s implementation with ES at any rate I know they discussed supporting#private 
solution: 

issue: What was the reasoning behind the design choice to force function type annotations to have argument names? AKA(a: number) => string, where as flowtype allowsnumber => string. Haha. Best practice question: I have a function that takes string | Array<unknown>. I want to name this type, and make it generic so the array can be typed. I've come up withOrderedEnumerableType<V> = Array<V> | TextType. However, this seems confusing since V can't be applied to TextType, but is required. Does that make "sense"? 
solution: Another question: Is there a way to narrow a type for a generic? Like, my functionf<A, B>: (a: A) => B, I wantAto be "at least a function".. 

issue: Good day, I have a project which works fine with typescript 3.5.3I tried to upgrade the version of ts to 3.6.2As a result I get this output: [<-CODE->] This error gives me no information at what is wrong, cannot seem to find anybody who stumbled upon same error before. How can I approach it? What would be the steps I need to take to identify where the problem is? 
solution: 

issue: I think it was mentioned here already fatcerberus: issue bot go 
solution: 

issue: Anyway it's late and I should get some sleep It’s not guessing the export value - just a side effect of the wayPromiseworks (and is guaranteed to work by the specification).  They couldn’t fix it without adding a special case to Promise specifically forimport() 
solution: 

issue: Is there a type for a promise that can't fail?If I haveasync function failureInResult(): Promise<Failure | Success> { try { ... } catch (error) { return failure; } }, can I express that via the type system? 
solution: 

issue: There's a PR for it but it hasn't been merged yet microsoft/TypeScript#32695 @webstrand Seems like MySQL uses ICU Regex, and PostgreSQL uses POSIX Regexhttp://userguide.icu-project.org/strings/regexphttps://www.postgresql.org/docs/9.0/functions-matching.html#FUNCTIONS-POSIX-REGEXPI wonder how similar/different the two regex syntax are.I feel like most regex implementations have the same "basic" features. I'm trying to compile a list of how similar/different MySQL/PostgreSQL/SQLite are,how to convert between the languages,and what stuff is DB-specific that can't be expressed in the other DBs (without significant effort) [<-CODE->] MATCHis MySQL-specific and is used for full text search.It's different from PostgreSQL's@@that is used for full text search.SQLite has theMATCHkeyword but no implementation (you need to overwrite the defaultmatch()implementation that just throws an error) If ICU and POSIX regex are super different, then I can't say thatREGEXP(MySQL) and~(PostgreSQL) are "the same" keithlayne: PostgreSQL has some... very weird operators...  [<-LINK->] lazarljubenovic: How much type-level complexity are you willing to endure? 
solution: 

issue: ah i see im usually doing something withneverbut there are some pitfails i think thanks for the links 
solution: This hack (and other similar ones at the moment) also have their own pitfalls.Like only really being useful in function param positions. 

issue:  [<-CODE->] why does line 4, body.push complains body is possibly undefined if I assigned it an empty array at line 3? can't typescript infer it cannot be undefined? 
solution: 

issue: oh i see thanks no way im ever gonna disable anything from--strictlol 
solution: 

issue: AnyhowStep:  I somehow hadn't come across those operators.  Wild.  ForSELECT POWER(27, 1.0/3.0)I would assume the implementation was floating-point, so I'm not surprised with pg's result.  It's kinda impressive that mysql gets an integer result. 
solution: 

issue:  [<-CODE->] edit: link  [<-CODE->] edit: link 
solution: 

issue:  [<-CODE->]  [<-CODE->] 
solution: 

issue: they probably should make that generic yeah, there's a learning curve for sure.    [<-LINK->]  might be worth checking out in case there's something there you haven't seen yet. kyrim: this seems to work: [<-CODE->] 
solution: FYI you can do markdown links like this;[text](url).  Helps with those long URLs. Also thatOmit<OtherProps, 'component' | 'field' | 'form'>was me just trying to fix. 

issue: so basically i have an array of strings and I want to change their value, for each one of them, what would be a clean way to achieve this in TS since Enums dont work for this case values yes  [<-CODE->] i wanted something like the above lol 
solution: 

issue:  [<-CODE->]  [<-CODE->] with pattern [<-CODE->] 
solution: 

issue: I guess this is the expected behavior [<-CODE->] TypeScript checks that the union of the true and false branches is assignable tox: number not the each branch is assignable tox: numberindividually andPromise<number> | anyisanywhich is assignable tox: number There's no problem with this? 
solution: 

issue: fatcerberus: I can't change the output, so I'll try the alias method.  Thanks! 
solution: 

issue: The “an element in an array is either undefined or not defined” thing is pretty fun.  [<-LINK->] 
solution: 

issue: @keithlayne @G-RathI was away from work for Friday. Sat, Sun and Mon were weekends/holidays.So, technically, I've only been away from work for one day.In that one day, they've managed to write a bunch of super questionable code.One of the worst ones is, [<-CODE->] And they even posted a link that supposedly backs up their query structure, [<-LINK->] And the link literally says it is not a bug And that they should add the ORDER BY to the top-level query instead Wtf So, my review comment is just, "Read the article again. The query should be fixed. Not worked around" 
solution: 

issue: Why is this an error? [<-CODE->] 
solution: 

issue: Can someone help me correctly type conditional types. I can't seem to get this to work  [<-LINK->] 
solution: 

issue: Haha love the little turtles in that Clearly the generics thing was proven wrong, there are pain-points sure but they’re soooooo useful 
solution: Iwishit was that strict.  It’s not quite there yet. 

issue: trusktr: @dragomirtitianThanks! Hooray for F-Bounded types, that completely solves my mixin troubles. 
solution: 

issue: So here's a thing: I've got a tsconfig extending another tsconfig, which definesjsx(i.e the child, not the parent); yettsccomplains--jsxnot set. Am I usingextendswrong, or is this a bug? 
solution: 

issue: root o/c :) The configuration from the base file are loaded first, then overridden by those in the inheriting config file. If a circularity is encountered, we report an error. 
solution: So the whole idea is that I don't want to have to point to the child config. well it will load the one with the default name in the current dir by default I think. 

issue: MicahZoltu: it's a hack to allow nominal types never mind, i usedMapin the end lol it kinda makes sense why it won't let me 
solution: AnyhowStep: I saw that in my news feed, I didn't know what to make of the title.. Also I watched that talk from tsconf last year, I was annoyed  that he skipped the OO vs functional part, thought that could be interesting.. 

issue: MicahZoltu: number & {}isn’t actuallynever.  You can make “branded types” that way You can't type that, I'm pretty sure.  You could if we had recursive conditional types  [<-CODE->] If the string is dynamic then it's not known at compile time and you can't use it to look up types Since they don't exist at runtime 
solution: 

issue: javascript regexes can't do sed-like stuff like capitalize a back reference, can they? resactor ah, types for string replace with a function are pretty loose 
solution: 

issue: Given: [<-CODE->]  [<-CODE->] Basically, I'm trying to make thecontextoptional, except when a callback requires a specific type. Got it: [<-CODE->] 
solution: I would've probably tried to add another type param for thethisparam.. Actually, I don't think that's correct. It should beundefined extends ThisParameterType<T>. 

issue: but it's not it's sort of parsing code :( but not really, it's XML but just validating it against a schema and typing it it might be hard in this case.  I will see. 
solution: so what I really need is an analog to parser combinators.. 

issue: I mean without a cast.  It's kinda weird I guess but if the value is not null or undefined I wanna reflect that in an output type. yeah 
solution: 

issue: that casting will likely do the trick... 
solution: ahhh, right. 

issue: Why does typescript let me assignneverto not-never things?  [<-CODE->] 
solution: Assignability is kind of like asking if a type is a subset of another type. 

issue: or just write setters for each property well you can't really get something with just types as validation requires actual code. or an OO approach with a type, an implementation class where you include the validation code in each setter. 
solution: 

issue: obj[key]fails for me withnoImplicitAny. I’m not totally sure about yourforEachissues since that tooltip is saying it’s bothRestOnsiteAppformandanywhich seems weird. 
solution: 

issue: I'm trying to create my own instance of the TS language service usingts.createLanguageService(this);wherethisis my own LanguageServiceHost. The goal is to get completions at a certain point by callingthis._languageService.getCompletionsAtPosition. The problem I'm having is that I can't get the language service to parse extra files with typescript definitions for external libraries. 
solution: 

issue: i thought it might deserve special treatment as a constructor 
solution: You could make a subclass but you can’t change the method signatures of the same class based on what was passed to the ctor. 

issue: fatcerberus: You paged me a day or so back, currently on holiday, hope everything worked out ok :) 
solution: 

issue: Jeez, takes 46ms to validate and jsonify a 33K xml file with my generated code need to figure out the profiler and really need source maps :( only 6-8ms in the dom parser I basically reinvented the state monad by accident but the output is all well-typed according to the schema, so I got that going for me 
solution: You probably want NFD, but dbs like postgres and languages like js will give you thetruelength (in bytes or codepoints) of the string.. 

issue: @G-RathI didn't specify an encoding for the strings.I guess that's my fault =P I changed it toCOLLATE utf8mb4_unicode_ciand I'm still getting the2,1,3,2result I guess it's because itcanuse 1-4 bytes and notwilluse 4 bytes 
solution: utf-8 has to be one of the most well-engineered encodings I've ever seen, it's really impressive.Self-synchronizing. 

issue: i installed a npm module and now i am getting warning/problem in my vscode -No inputs were found in config file 
solution: 

issue: Previous workplace I was at wanted to implement name mangling and they were so enthralled by a tech demo that would mangle names like "money" into "monies" 
solution: I think my CTO loves ActiveRecord or some Ruby ORM because it has name mangling, too.I believe mongoose or something also has name mangling. Converting collection names to plural automatically.. 

issue: Be careful not to let that abstraction leak I could see it going wrong and like, returningfalsefor a numeric zero Or something stupid like that webstrand: You had the same worry I did.  That’s why I said to watch for leaky abstractions, but seems he’s got it covered :) So you basically re-implemented JS typing rules in the substrate layer  (but not the API) 
solution: 

issue: fatcerberus:  [<-ISSUE->] Could you read through this and double check what I've said? I don't fully trust myself to not sound like an idiot 
solution: 

issue: Man not to long ago I was looking for an XML parser for node, and like the first npm package google found was regex-based.  Now I can't even find it (phew).  And a good, well-supported package is listed.  Google must have been trolling me that day. But I really don't understand why those things talk about browser compatibility. only http2 is good enough for my terminal fatcerberus: you must be trolling me plus isomorphic is a terrible word for that 
solution: 

issue: YuDi-JerrY: typescript is a superset of javascript, so the answer is almost definitely yes. Butwhatspecifically are you trying to do?  [<-LINK->] YuDi-JerrY:  [<-LINK->] Serving client side? Then you’re likely shipping transpiled ts -> js. You’re welcome to set up some constants and override them in your node layer when serving, or alternatively you could dependency inject those constants by having a bootstrap function you call that takes those various constants as parameters. So, like, aninit(c1, c2, c3, … cx)that actually kicks everything off. But make sure whatever you’re injecting is properly safed/escaped/etc. to guard against XSS et al attacks. 
solution: 

issue: In TS is it possibile to say "this interface property is mandatory only of this other property type isX"? (whereXcomes from atype V = X | Y | Z) 
solution: Use that property type to key a set of discriminated unions.. You may have to use types instead of interfaces, I can’t remember exactly what interfaces can and can’t do related to types.. 

issue: You’re one microsecond late for work.  This is the third time this week.  You’re fired 
solution: 

issue: Hi, I have an enum that I can't change: [<-CODE->] I need to store the values as readable strings.So I usetype StateKeys = keyof typeof State; Which the compiler interprets astype StateKeys = "Fail" | "Inconclusive" | "Running" | "Success"(on hovering) Later I am interested in using it, but facing some issue with this: [<-CODE->] I get the errorType 'string' is not assignable to type '"Fail" | "Inconclusive" | "Running" | "Success"'. Is there any TS hackery that can help me convert an enum's numeric value to its key value (even if it ends up being a different enum)? AnyhowStep: yes playground: [<-LINK->] ok, let me try @AnyhowStep At top of that file it says: [<-CODE->] I tried and it seems enums can't be extended: [<-CODE->] Actually I will try with importingenum-utillib as is and try to follow through with its example. 
solution: 

issue: AnyhowStep:  [<-ISSUE->] - TSdoesdisallow readonly -> mutable assignment sometimes, apparently 
solution: 

issue: Does anyone know if the compiler API supportstsconfig.jsondirectly, or will I have to process that myself Because there are some subtle differences with some config options when passing them directly to the API vs. how they look in the tsconfig: [<-CODE->] target: 'esnext'doesn't work (it's a numeric enum) andlibwants the full filenames.  Not sure if there are other differences 
solution: 

issue: fatcerberus: there are APIs for parsing and interpreting the tsconfig.json file. I just implemented an abstraction for that at work a few days ago, however, I don't have access to it from home... I think [<-ISSUE->] got me on the right track. 
solution: 

issue: maybe if babel supports it?  Not sure. I know babel has code to strip out types but I don't know if it would fail in that case.  Almost certainly type checking would break. if your editor relies on tsserver (probably) for TS support that will break for sure, it will be a parse error. yeah, you can't transpile or typecheck with tsc at that point. 
solution: 

issue: I literally went to sleep for a few hours because I just couldn't wrap my head around the different datetime stuff.Globalization isn't in my genes =/ We should just be like China and force the whole planet to use one timezone. 
solution: Last time I checked we still have multiple time zones so I guess that plan failed. 

issue: This grinds my gears,MySQL, [<-CODE->] The above does not actually give you the numbers of seconds elapsed since the unix epoch. UNIX_TIMESTAMP(CURRENT_TIMESTAMP())doesgive the correct result, however. UTC_TIMESTAMP()gives you astringrepresenting the current time in UTC.But it's just so counter intuitive. WhereasCURRENT_TIMESTAMP()gives you astringrepresenting the current local time.AndUNIX_TIMESTAMP()assumes the arg is in local time. PostgreSQL and SQLite seem to be giving me results in UTC, no matter myactualtimezone.But MySQL insists on giving me results based on my actual timezone and not UTC. 
solution: 

issue: SQLite has that weird thing about “storage classes”. There is noDATEdatatype in sqlite3 really, and different functions get you different “storage classes”. TrySELECT date('2010-10-27 12:00:00.000') 
solution: 

issue: That's a lot of bits spent on representing1000at most 
solution: 

issue: is there a reason whyObject.keys's return value is notArray<keyof T>butstring[]? hmm?Object.keyscalls sometoString()? also for visibility: [<-LINK->] oh i see  [<-CODE->] you mean this? keyof Foowould return'toString', but it's not in the keys 
solution: 

issue: lazarljubenovic:  [<-LINK->] But returning asupersetis not sound with respect to unions."foo" | "bar" | "baz"is not supposed to be assignable to"foo" | "bar" Hence thestring[] From a type theoretical perspective, the current typing makes sense From apracticalperspective, maybe not so much 
solution: 

issue: Hello! I'm having some trouble with compiling folders. I set rootDir to a folder named src, and outDir to a folder named dist in src, there is a file named test.png when i run tsc, and compile the typescript to dist, the test.png is not present in dist 
solution: 

issue: How might I type an interface so that all of its properties are of a certain type? ie. I have this... [<-CODE->] everything is always anICrxCallbacktype however - because it doesn't know that for sure, it gives me an error... type E[string] is not assignable to type ICrxCallback<any> but in my case,E[string]will ALWAYS result in an ICrxCallback oh, this seems to work 0 is this correct? [<-CODE->] hmmm doesn't seem to fix all my problems :( now I'm getting "string" as the type of  ICrxControlEvent instead of'focus' | 'blur' | 'mouseEnter' | 'mouseLeave' 
solution: you can possibly spit the type, have the keyed portion and then combine it with& Record<string, ICrxCallback<any>>. 

issue: after bundling my code...JSON.parse() not working in my bundled file...it is doing nothing just getting printed as a line.anyone can suggest something on this? 
solution: 

issue: YuDi-JerrY: JSON.parse()is a browser feature, so being in a bundle shouldn't affect it. When you do aconsole.log()of an object, it will generally render as a single line (that you can expand in Chrome or FF, for example). Is this not happening? 
solution: 

issue: Hello, I am trying to do some function composition with typescript and was wondering if anybody could help me.I have a series of functions which I am piping, and would like to be able to do static analysis to verify at each stage that the output type of one function is matching the input type of the next.I have put together a partial solution using generic types, but it is very clumsy, as I have to have a specific type interface for every input and output, as well as needing to specify the types in <> at every step. Is there a more elegant way to do this? MicahZoltu: Thanks for your quick response! Turns out I was on the right track, but your answer helped me because when I went to write it up in playground I realised it was a actually config issue (I didn't have strictFunctionTypes set) and so my problem is solved! 
solution: 

issue: This is a funny one  [<-ISSUE->] enables warning for unused identifiers does not use identifier receives warning :Pikachu face: 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-LINK->] 
solution: 

issue: It provides a nicer error message 
solution: Probably behaves likeunknowninside the implementing body. 

issue: that brings to mind questions of reliability; it's more ambiguous HEAT_DEATH~ 
solution: 

issue: jesus, that's some egotistical shit, calling your daughter "My" :D aah, he's finnish. never mind 
solution: 

issue: @fatcerberus'Bar' is assignable to the constraint of type 'this', but 'this' could be instantiated with a different subtype of constraint 'Bar'.That old error again. 
solution: 

issue: It doesn't make sense to ask if astring[]includes a number.  We can assert that it does not at compile time. A big win in terms of type checking is to have more stuff error at compile time rather than waiting to fail at runtime. 
solution: 

issue: I trying to create simple extension method here is my definition  [<-CODE->] And this is usage  [<-CODE->] I get correct typing but on runtime i gettingTypeError: tt.TestFn is not a function Why is that ? 
solution: 

issue: Though the official handbook seems to have improved a lot 
solution: Is typing one of those big picture things that you just 'get' at some point because I really am struggling. Even with C# learning about interfaces, generics and all this jazz. I can't reason through when to use all these things.. 

issue: I recall it was an attempt at implementing a PL for the layman.Back then, AI was considered an almost solved problem and they thought they had NLP, image recognition, etc. just a few years away Try Kijiji or Craigslist. I'm sure they still sell it there =PJust don't get stabbed, though <3 
solution: 

issue: Okay so they didn't just make it a glorified neon F-key row That's good 
solution: 

issue: macs have a ctrl key?  I thought that was a PC thing and macs had the command key instead (haven't actually used a mac in a while) Oh, it's Alt that's missing 
solution: 

issue: They really can't do all that much 
solution: 

issue: there's nosubon your props should that not be a child element? 
solution: Only works becaues I have 'any'. Type ReactNode and React.FC don't work. 

issue: Hover over a react FC and look at its return type Actually, that might not work, it will just show you FC actually, in vscode you can hold command (alt maybe on windows?) and it will expand.  So you seeReactElement | null can you confirm the windows key? 
solution: 

issue: The window is no longer respondingDid you get it stuck in an infinite loop? Stop breaking tsc 
solution: 

issue: hmm, this is tricky... can someone help explain:  [<-CODE->] I get the error: [<-CODE->] I can refer to this.data as an array, but never set it to anything, not even an empty array... seems un-good :P I think the solution might just be to cast it: [<-CODE->] But I'd love to know what's going on :D I can't even do a filter on the data and assign it to itself LOL 
solution: 

issue: fatcerberus: @the-other-person-who-answered-me-but-whose-answer-i-can't-find(sorry) All right then. I hoped there was a way to distinguish a promise which can't fail. Typescript's control flow analysis would be strong enough to see thatasync function X(): Promise<void> { try { ... } catch { return; }never rejects. 
solution: 

issue: not really cool though C++ can mark functionsnothrowbut I don't think it's enforced in any way. 
solution: The problem with checked exceptions is that they're viral, likeasyncon functions (but the virality of async is unavoidable by its nature, as you pointed out above - you don't have a result yet, youhave no choicebut to wait).  If you call a function that's declared to throwFooError, you have to either catch theFooErroryourself or else declareyourselfas throwing it. 

issue: webstrand: Hm... am I mistaken or -- yourcannotRejectfunction actually can't reject. But evaluating the result could throw due to the promise from register rejecting and therefore rejecting the promise that you get from the call to then on the Promise you got fromcannotReject? 
solution: 

issue: What's better about functional error handling is that you are able to abstract over it with known abstractions likeMonad,traverse, ...I still like checked exceptions because they distinguish between things thatmight really happen and someone could do something about itandcan always happen or is a bug. I miss that when using a language without that difference and without the possibility to abstract over it in a functional manner (c#). 
solution: 

issue: Thought so Because you've thrown an error within the promise machinery itself There is no way for a static analyzer to detect stuff like this In general I mean Type systems are primarily concerned with universal quantification - if I declare something, it's an error if the compiler can't explicitly prove the declaration is true in all cases Blame TC39 for making promises duck typed 
solution: It's kind of funny because the main argument for not making promises proper monads was that the type system wasn't strong enough: "typed language fantasy land" was thrown around a lot, always pejoratively.  And yet they go and make it duck typed, making life hard for any tool (or human!) that wants to analyze code for promises. 

issue: follow the UNIX philosophy - one package per operator like today I got bitten by a node API change, I was using node 12 types but we're targeting node 8.10.fs.mkdirat some point added a recursive flag that doesn't error if the dir exists, so it failed at runtime.  So I added themkdirppackage.  I felt a little dirty. 
solution: 

issue: Functional programming languages (with pure functions) have the problem of re-usability solved, though. it's fine if a module just fails to do what it claims, the issue is when modules produce unexpected side effects. That's where npm gets all the hate 
solution: I don't think so. You'd need to prevent the module from accessingglobalThis(or equivalent) too. Otherwise they'd just wait until one of their functions gets called.. 

issue: hediet: Sorry I had a phone call `const Skills: React.FC = (props) => {  const {skills, listType } = props;return(    <div>      <div>Title</div>      <div>Skill 1</div>      <div>Skill 2</div>      <div>Skill 3</div>    </div>  )}` Does backtick only work inline? 
solution: 

issue: But how do you fuck to b How do you fuck up basic string escape Damn mobile. I hit send by accident I should probably be careful to not make such a statement, though. For all I know, I could have left something exploitable 
solution: 

issue: sam-s4s: For reference -  is actually  - it's an inside joke here Keith was being a troll 
solution: 

issue: This is pretty weird, I'm surprised it does anything at all: [<-CODE->] I have a function that takes an object and array of keys that are string-valued in the object. it uses a conditional type like you would expect to get those keys but in the body of the function it doesn't know thatobject[key]is a string I was wondering if you could infer an intersection of the different-valued parts of an object note that if you reorder i.e.T1beforeK1everything turns tonever hovering over the call shows a return type of[string, number]but hovering over the function it can only do the indexed types. but it's interesting that you'll get a type error (a confusing one) if your keys don't match the input object.  But you can't get completion or anything. and obviously in the body of the function it can't tell thatt[k1]isstring. 
solution: 

issue: So apparently... [<-CODE->]  [<-CODE->] 
solution: yeah I've run into that. I thought putting the non-function on the left of the union would avoid parens :P. 

issue:  [<-LINK->] Just had to make a stupid table of MySQL's behaviour to emulate it across other DBMS MySQL's behavior in this case is actually beneficial for the resulting TS code Less data to keep of in the generic type param, because now those order by clauses don't need to be generics Not a huge benefit but I'll take some over none I also can't switch because my workplace uses MySQL a lot. Change it to readonly Valids[] And it should error I use readonly arrays in my rewrite I use it a lot 
solution: 

issue:  [<-LINK->] Any idea why this might be? 
solution: I restarted vscode and the issue persisted. 

issue: I think more like whatever version they bundle with it, even if that's not quite the latest. but it might always be, not sure 
solution: 

issue: What error are they seeing? 
solution: 

issue: I'm trying to recall, there's a case where the compiler straight up ignoresreadonlyand allows mutation, isn't there? 
solution: 

issue: The file was auto-generated, though I was just running the search+replace so I wouldn't have to re-generate those files Those auto-generated files are used to compare againsttsc's actual output For my compile-time tests 
solution: 

issue: Print(obj) {}// object can anything likeHuman,Animaletc. What is best type to use for obj? I triedRecord<string, unknown>. I got errorHumannot compatible with Record. Also i should be able to passthisas argument toPrint [<-LINK->] AnyhowStep: the problem with unknown is, if i try to access properties from obj: unknown, compiler will start giving new errors. [<-LINK->]  [<-CODE->] i am looking for a type for argumentobjectthat allow me to pass any class sayAnimal, Human  etc. Inside each of these methods i loop over object propertiesEx: [<-CODE->] :) i removed lot of logic to simplify it ShanonJackson: your code worked. but not my verison of code. can you help in applying generics for this snippet. [<-LINK->]  [<-CODE->] 
solution: 

issue: You need to return a generic function: [<-CODE->] In this case, it works becauseTis fully determined in the outer call.  In general, currying and generics don't always work well together. 
solution: 

issue: keithlayne: So there would be no way to write the actually useful: [<-CODE->] 
solution: 

issue: They’re actually going to completely freeze the tslint codebase at the end of 2020 No more PRs, ever Not even bug fixes 
solution: So the [<-LINK->] seems to be the bridge that brings typescript support to tslint? Are there any docs on how to implement custom rules yet?. 

issue: Yeah I pointed that out before -IFoocan make sense if your code is class-heavy, to separate the concrete from the purely descriptive Goddammit Gitter.  Keeps scrolling up It literally keeps scrolling back up after I spent several seconds scrolling it down They need to fix this awful thing 
solution: 

issue: keithlayne: I can totally related to that, having had to reverse engineer a lot of the old Sphere engine to make miniSphere The joke works two ways: either the engineer didn’t think to test the bathroom scenario, -OR- funnier: the crazy orders triggered a bug elsewhere e.g. heap overflow Tons of experience with that, not fun :( 
solution: fatcerberus: I guess it's not quite a phantom type. The function does exists during run-time. But it's no-op. The function param is never used. I guess that could be the Phantom part. Only gives compile-time guarantee.. 

issue: I was trying to see if there was a set-theoretical name for this operation, it's like some kind of inverse of an intersection but not exactly Couldn't find anything This is the closest thing I found: [<-LINK->] 
solution: Hmmm...would be interesting to draw that out as like a venn diagram of the sets of members.. 

issue: I dislike magic as much as the next guy. If I would have started on this project on day 1, it probably wouldn't this runtime-loading thing. Refactoring it would require a lot of changes, and I can't justify the time at the moment. I agree it's not great design. The purpose is to have a directory with arbitrary http handler definitions that all get loaded at startup. You drop in a new handler and it "just works". No wiring necessary. LOL 
solution: 

issue: So... Why didn't it work before?Or is that a new thing you discovered?  [<-LINK->]  [<-LINK->] 
solution: 

issue: How can you guys not remember this song? 
solution: 

issue: How do I put multiple declaration files in one package.json?  [<-CODE->] I have multiple d.ts files Can't find how you do it with more than one d.ts 
solution: 

issue: czhower: I'm making an npm package and i have multiple d.ts files in a folder /src/Modules The@rbxts/types are just types for [<-LINK->] i have no idea 
solution: 

issue: Hmm, it would work for globalname, I think. But, as you said, only in some cases. 
solution: And that global name thing would be an existential. Is would have to be a type that isn’t assignable to itself. 

issue: The spec doesn't make any guarantees on the order keys are returned in iirc (e.g.Object.keysdoesn't have to give the order you wrote them in) In practice most engines do anyway but... relying on it seems questionable No echo, just a parrot However one of the comments mentions the answer is outdated and links here [<-LINK->] The order is defined forsomefunctions but not all Yay inconsistency 
solution: 

issue: I could have sworn there was a design document in the Duktape repo discussing the direct vs. indirect eval thing in depth (including why aliasing triggers indirectness) but I can't find it This sounds like a waste of resources (in particular: electricity) 
solution: Note that it specifically checks if the name of the function is "eval". 

issue: MicahZoltu: Class 'ExampleAdapter' incorrectly implements interface 'Adapter<Message>'.Index signature is missing in type 'ExampleAdapter'.ts(2420)  [<-CODE->] I'm assuming that [key: string]: isn't really the right approach Is this even possible? ahh great, thank you for the assistance :)@MicahZoltu so i can't dopublic readonly getCats = async (): Promise<Message> => {}? 
solution: 

issue: VulcanRav: , it doesn't, yes, but that technically wasn't your requirement either. if you actually need to accessathen useany 
solution: 

issue: Yeah, not much I can do there - gitter got bought now, so it’s kinda on the way out I bet 
solution: 

issue: I must have seen an augmentation instead of the actual definition, my bad 
solution: 

issue: is async/await actually just syntactic sugar? i was under the impression that it actually is not the exact same as the non-async equivalent 
solution:  [<-LINK->]. yeah you'd have to make some nightmarish construct. 

issue: Fuck that mess lol One potential problem I might have with that narrowing is that it's possible to haveA|Band then fail theAtest and have it narrowed toB, even though it isn'tBbecause it structurally matchesA, just doesn't have the right prototype austincummings: does your PR address that? =x Like, if it fails theAconstructor test, it shouldn't narrow in thefalsebranch. Should still be of typeA|B, imo Because it looks like that test rules out the nominal side but not the structural side 
solution: 

issue: @AnyhowStep  regarding the constructor check narrowing, my PR doesn't narrow in the false arm, so it will have this behavior... [<-CODE->]  [<-CODE->] 
solution: 

issue: austincummings: could you add that comment to the issue I created? Let me find that issue...  [<-ISSUE->] It's interesting because this means we'll have two type guards that act on a nominal type but one does a structural narrowing (incorrectly, since structural assignment is allowed), while one does a nominal narrowing (correctly) So, the rationale for keeping the instanceof behavior can no longer be "intentional for usability" but, rather, "for backwards compatibility"  [<-LINK->] Dafuq is this^Mthing Ah. TS code base uses those, I guess 
solution: 

issue: you dont need webpack to load other libraries. There a variety of ways to load libararies. 
solution: 

issue: yes@AnyhowStep for my src i am using the commonjs module but for tests i am using the amd if i use the commonjs for tests too, i am getting below error Error: Cannot find module 'ojs/ojcontext’ 
solution: 

issue: I have a list of objects like{name: string, value: string}that I want to convert into{ [name: string]: string }. How to do this? (using something like reduce) 
solution: 

issue: I suggested they change the type alias to "you hecked up" So it's less confusing 
solution: 

issue: file:// or something Let me look that up  [<-LINK->] There are other techniques, too. But I'm hazy on the details 
solution: So GitHub had a little announcement thingy linking to this page: https://github.com/features/securitySemmle QL is the industry’s leading semantic code analysis engine. Our revolutionary approach treats code as data to identify security vulnerabilities faster.AKA fancy marketing speak for "static analysis".  Very revolutionary. 

issue: Is it at all possible to do something like specify a type as a subset ofkeyofsome other interface based on its type? I'm not explaining that well, but I think this example is clear: [<-CODE->] 
solution: It took me a while to understand it, but now it's much easier for me.. 

issue: nikuda: set lib inside compilerOptions to ES5: "compilerOptions": {"lib":  ["es5", "dom"]} And what is the error it's throwing? 
solution: Unfortunately I don't think I'll be of any help. =(. 

issue: Gdi I waited so long and LGTM said they could not build my project, hahahahaha 
solution: 

issue: I just tried doing their first CTF challenge and Ihatetheir query language and docs. 
solution: 

issue: Ah, the issue is that there may be some overlap between A&C and B, and when you drop B you want to retain the full A&C?  [<-CODE->] 
solution: 

issue: Omit should work well enough Classes are still structurally typed 
solution: Yeah he didn’t want to use that because there might be overlapping properties between the types. 

issue: i have easy to use and worked well 
solution: 

issue: i'm having an issue with Omit and Discriminated Unions. can someone take a look at this? [<-LINK->] simpler example: [<-LINK->] keithlayne: thank you so much. that worked! updated: [<-LINK->] 
solution: 

issue: AnyhowStep: The cert error is because the latter example announces the SNI for the IP address as opposed to the FQDN. The former example has me doing everything at a low enough level that I can set the hostname for SNI independent of the actual address and thus bypass DNS resolution, but I can’t figure out any way to do that without getting stuck in that lower level. 
solution: 

issue: i think you're missing a closing bracket there not surprising 
solution: 

issue: inb4 max depth error 
solution: 

issue: Hi I'm calling delete on a Map it compiles fine but throws an error at runtime Uncaught TypeError: temp.delete is not a function why? Or another way to ask--what is the best way to remove an item from a Map ?? 
solution: 

issue: I currently have an abstract class: [<-CODE->] this code compiles and works correctly if [<-CODE->] is removed from Foo, but i get a runtime error of:TypeError: Cannot set property CastProperties of Bar which has only a getteri dont understand why the base class has to even touch the abstract member which i assume is where the error is coming from?anyone have any idea how to get this working? 
solution: 

issue: ;( people never learn I wanted an angry face, not a quote dammit >;( 
solution: I did it. I forked the damn thing. Maybe I'll look into converting it to TS or something. I can't read coffee =/. Couldn't even get past the build step >;(. 

issue: I have a JS dependency that has jsdoc. Its documentation suggests to add to tsconfig:paths: {ol: 'node_modules/ol/src/'}in order for my vscode autocomplete and TypeScript to work. And it does. But it also causesnode_modules/ol/src/100sofFilesto be generated in myoutDir. (oops phone, can't edit). I want it to ignore that external. I want rollup to handle it later.  Why is it outputting node modules? I suppose I can simply ignore/delete it. But it seems like a smell to me that I'm doing or understanding something wrong. 
solution: 

issue: Try explicitly setting the tsconfig.json in the build command -Por something I always forget if it's upper or lower case or both This grinds my gears, [<-CODE->] Both error in MySQL and PostgreSQL. Makes sense. [<-CODE->]  [<-CODE->] I wish they'd adopt consistent behaviour and either error on both examples or silently cast on both examples >.> Writing queries that break SQL is fun,SELECT ABS(-9223372036854775808) 
solution: 

issue: yxliang01: @danlugo92I'm sorry folks, a minute after I asked the questions I had to run unexpectedly, so I couldn't answer.What I want is the same as Java'svalues()on an enumeration or  dotty's (scala 3).valuesor C#sGetValues(typeof(X))or haskellsenumFrom $ toEnum 0.What I need is an array which contains all values of a union, with compile-time guarantees. I want to guarantee that as soon as someone adds something to that union, they have to put the value in that array.I'm currently doing it the following way, which also helps defining an order, but it's a bit boilerplatey. [<-LINK->] fatcerberus: with "You can't really do that" you mean that there is no easier way the the one I have, right? Or have you found a problem with the way I'm doing it right now? MicahZoltu: yeah 
solution: 

issue: felher: wayeasier to go from Tuple to union. felher: Is there some reason you can't go tuple => union? 
solution: I believe you can at least get a compile error if the types don't match.  Would require some fiddling.. It won't auto-generate ALL_FLAGS from the Flag union.. 

issue: Why is the order important? I must be missing something but it doesn't seem like he needs an ordered tuple You don't want that It's already been tried. A tuple of length 10 doesn't terminate in a reasonable amount of time  [<-LINK->] That pesky max depth error It can appear and not have a file associated with it  [<-LINK->] So, you don't even know what file to fix Yeah, the permutation thing 
solution: 

issue: Is anyone aware of any way via plug in or other to easily tell VS Code to ignore certain exceptions? The issue I have is that one of the libraries we use throws and catches a few exceptions during load but during debug we want it to stop on our own caught exceptions...This means on every run we have to F5 continue 2-4 times before even running our code whether it has exceptions or not.Most IDEs have an option to specify specific exceptions to ignore but VS Code appears to not have such a thing. 
solution: 

issue: soBuffercould just be removed entirely? I'm still not sure why my project is using anything in the@typesdirectory whilst I have"types": []specified... 
solution: 

issue:  [<-CODE->] (even without the"types": []it does the same thing) apparently I'm not supposed to need that any more? hehe I'll try it just in case ah sadly that didn't make any difference :( this is strange lol especially how it actually runs fine 
solution: 

issue: when did this channel pivot to SQL instead of TS? well, we can't really help either.. unless we want to start submitting PRs to SQLite and/or MySQL alternatively we can just kick@AnyhowStepout :D i've seen some ban mentions in the activity tab on the right, no channel-wide stuff. and only the admins can do it anyway 
solution: I've sent some emails out to the SQLite mailing list over the weird stuff I've found, btw.Just thought I'd share, too.Before that, I thought I'd never have to use a mailing list again. 

issue: JesperKSmith: , don't you want/can't you just use String enums? 
solution: 

issue: TIL: [<-CODE->]  [<-CODE->] 
solution: 

issue: This feels like a bug to me? if they both extend from the same root object, then it should be comparable 
solution: 

issue: Regarding the thing with incomparable generics: TS seems to treat generics, in general (no pun intended), as universal quantification.  If the implementation isn't valid for every possible instantiation ofTthen it flags an error That "will always be false" error should be reworded though IMO: that's a pretty absolute-sounding statement but you can't prove that in a generic context So if you do<T, U>then TS will treatTandUas incompatible because it's possible for them to be instantiated in such a way that they are  [<-CODE->]  [<-LINK->] You just have to give it a hint that it should infer tuples instead of arrays Disclaimer: I have no ideawhythat works, but it does. 
solution: 

issue:  [<-CODE->] https://www.typescriptlang.org/play/#code/IYIwzgLgTsDGEAJYBthjAgggOwJYFthkEBvAKAUoQAcoB7CAU3kYBMEBhAC2F2wB4AKgkYAPJtlYYcBIgD4AFADNsALgQAxAK7Z4uOtgA0CbIwDugrnwDmAfnWCAlKQpU3sA2DrJGAOmR01goA5Ny82ACEwY4A3AgA9PEIDFyMUAiQWkpKCGZ0WsjsPNTUjNgIqVCMrm6UKgqxNbVVEFpQ5aYWVtjWCAA+fQgQVmAxTQC+ZJNkKGgYACKBIuJlUlh4hMTkbtRaIMi4sAgA6nR0Sg3qi73btZQtbeXDuGC+YXwKDQgAvHIud3cPNgvD5-IEQnlzjZomMAQhxo03NMdnsDkdBI8AJLYCB0DjACCXTgE-4AoGQJAk74mczEwmNJpuB7tIYjN48D5fX6kuGUcnePwBILBDHtGwIPi4ykQKKIgHjYywAlyyiTaazdB05YSNYyTY8miow4IACyjDoZiJ+MQtzuzKebPe2E+zm5tt5-NBQpC+HNZmhKtqCNhVGRVF2+2Nouw2Nx1yJ1wN7k8iFYS2pnQQ8cDTMYrRZz1eTpdPz+7rhnsF4JFj3FkroCDT1llIbuCsbgUDarIZEz1oaTV8ZotA7cvmjsbo2cHp3ODRiQAI thought maybe I could do it via overloading, but no luck:https://www.typescriptlang.org/play/#code/IYIwzgLgTsDGEAJYBthjAgggOwJYFthkEBvAKAUoQAcoB7CAU3kYBMEBhAC2F2wB4AKgD4AFADNsALgQAxAK7Z4uOtgCUMwRSq0GzJu268BghIwAeTbKww4CRMZJkKlEFdgA0CbIwDugrj4AcwB+TQ0EU3IqGKRVMDpkRgA6ZDog0QByIz4AQky1AG4EAHoShAYuRigESHlxcQRfOnlkdh5qakZsBCqoRm1YhElRIsHY-oh5KB6ff0DsIIQAH2WECECwQvGAXzI9shQ0DAARdLNLbpssPEJiaJ15EGRcWAQAdTo6cVGZM6WHkNJtMehtcGBkjlsKJRggALzCUjjIaUWDxRIpNIZTLNb7BArbFEIHZjGIHGLUJ4vN6CEEASWwEDoHGAEF+nFZSKJaOwkCQnLh3j8HLZY2RVGBM3Wm0hPD4MLU8MRgKJcV5GNS6SytJmwQQfCZ-Ig+VJKJ2XlgrNNlD2ByO6BFFys1zsdy5j2erwQAFlGHRfOyWYgVTFJaCZVCFUr3aq1Qkkprsfg-b58dbYiTCVRyR7qZF6Yy6P92f8Y7EeXzWOdBXMEMX06HGFMpWCIZHYQiy9z0QmsdqQXqDXQEFWgias0NzSP0unbWQyLWg6Nxslff7lzFkjrsAymfWV59vqNCkA Hmm, yeah specifying T works, but the methods consuming Chain can't correctly infer the type so you need to specify it each time. Not the worst, but not a great experience for people using this code! how would your two-types suggestion look?  [<-CODE->] https://www.typescriptlang.org/play/#code/IYIwzgLgTsDGEAJYBthjAgggOwJYFthkEBvAKAUoQAcoB7CAU3kYBMEBhAC2F2wB4A8gBkAIgkYAPJtlYYcBIggC8CCF1xgAfAAoAZtgBcCAGIBXbPFx1sASmMjRAbgpVaDZk3bdeAxxOlGWXk8QmJVdU0AGgQAOQBRAHUAmTksUKVVR10DY3NLCGtsGOxGAHcAFQ1sAHMAfmMExPs4pJcqGnomFm8ePiExFKC0hTCVNQ0wGKah4PTFcIRs-SNTCysbEvKqvnrGpJaZ8g6O2BswOmRGADpkOhqdAHIfPgBCR9snBAB6b4QGLiMKAISBmPR6BBlOhmZDsHjUahBBCAqCMVwnBAGHSfdEnVEQMxQbAIfhNXSlSrVGoIAA+NImmhxHQAvmRWWQUGgMKJ7rMRhliMc3GYQMhcLAEIk6HQ9NjSLiOvjCcTImBri9sDo5cotPKMRiztgLldbvcnlCZbsPu19cymVR2R1qCKxRKKsqAJLYCB0DjACByoUG86IWD+8YUzj+7EuBVUJVEhlqjVa2wqXVB-WUQ3Gm53B6Pd1E3YIPg+pD+972jHMmJhiDVhCs9mc9BRxBSVIhBZ64Wi8UIACyjDoZUDccoCZVk3VfU12ozE5OOcuebNj3wI7KVsbLMbjr7roQRewXp9PIeaczpxDCFYvNUkYvMaXU6Ts98qfTvaz2fOq9NAsTxLMs6Dve4qxtGsYnvGp9zZMgyEjP0A1sXFrmHUdsXQk8zzoZ80I6a4pRlGMgA <3 TypeScript 
solution: 

issue: oh I see, you get the whole object, not just the type so is this valid... [<-CODE->] now I just need to figure out how to consume it lol  [<-CODE->]  [<-CODE->] I'm obviously confused lol oh wait!receiveJsonBatch<T extends MyTuple<A4NotificationData[]>>(items: T) {(i had T[] ) ohhhh.... :D :D that seems to be working! :D right so you took the tuple type away from T so you could separate T from the tuple, but still enforce the tuple in the actual param type I don't think I would have thought to do that lol but it all seems to be making sense now I'm reading it :D you really do have to think "now, what exactly do I want" before starting... fatcerberus: thank you very much for your help, you saved me a big headache :D 
solution: 

issue: alanbuchanan: there are some proposals out there that would help with that, try searching the TS repo for "unique string". But for now you could use so-called "branded types".  Basically you would change the paramter type to the branded type and would construct that separately.  Thetypeis a runtime value, so you can't enforce that constraint without a runtime check. 
solution: 

issue: hey guys… is it possible to have type checking work with node_modules installed in a Docker container? reason is that I’m not abble to install some packages on Macos… and can only install them in a linux container I’ve been stuck on this for a day hope someone has advice/help, thanks! wow awesome! thanks looks like this might be what I needed… but on steroids lol thanks@MicahZoltu 
solution: 

issue: would suggest moving your whole dev environment into docker then. mount your source directory into the container, but install node_modules inside the container and do your builds there. 
solution: so for some projects I can build in either the host os or docker, but it's docker that matters. 

issue: i have my whole dev env with the IDE and everything in a cokcer container docker* 
solution: jamespacileo: Check out [<-LINK->] for details on how to do all of this.. 

issue: Does [<-ISSUE->] bother anyone else? I'm also still regularly slapped by [<-ISSUE->] , and the lack of--strict 
solution: 

issue: I haven't ever used alt-shift-f, so no. Is there a way to define atypeas optional?  [<-CODE->] I'm guessing thatProxyHandler<T>doesn't usekeyof Tfor the same reason thatObject.keysdoesn't returnkeyof T? willnwhite: I suspect you mean generics, in which case the answer is yes.  [<-CODE->] 
solution: 

issue: see I would think that's a regex literal, not a string that matches a regex I'm guessing that would only work with literals anyway? 
solution: 

issue: MicahZoltu: exceptions as flow control is very valid. Exceptions are not always errors and for some code an exception is the best cleanest way. Its used a lot in communications code. Im just amazed the TS/JS plug in doesnt have any provision thus for for this ;( 
solution: 

issue: Bruce sucks.  Stop saying nice things about him. get off my lawn 
solution: 

issue: fatcerberus: yeah, I was making a joke.  There is no--strict, there is no--strictBindCallApply, and the Playground is therefore not useful when type checking uses ofbind/call/apply, since it uses the oldFunction.bind(this: Function, thisArg: ♀, ...argArray: []): ♂typing. 
solution: 

issue:  [<-CODE->]  [<-CODE->] Presumably this is because of the name mismatch between the places.js package and the places types package. Is there some way to resolve this? It's just weird because the ones in DefinitelyTyped do correspond to the places.js library They seem right, I just can't figure out how to refer to them... it makes me think somebody must be using the thing 
solution: 

issue: i think that was just filler :/ 
solution: 

issue: There is one case where direct vs. indirect matters: excess property checks.  Shouldn’t affect null vs. not null though You intersected it with aMaybe What is the definition ofMaybe There you go Sorry Gitter is being stupid and jumping everywhere 
solution: { id : string } & { children : null } is assignable to {id: string}. 

issue: Ok, seems like an issue with the code generation library which makes heavy use of intersections. So, what are the conclusions? 
solution: the intersection doesn't work the way you need/want it. 

issue: Yeah you can't do that, as I found out the hard way.  Something like this is about the best you can do afaict: [<-LINK->] 
solution: 

issue: Hi everyone,I have an interesting challenge. I have a type I would like to cast as const. But I would also like to verify that the keys are of a certain type, and if they are not that an error will show.I tried: [<-CODE->] The = is a set operator, so it's a syntax error. Any suggestions? How can I verify that the types are equal? 
solution: 

issue: @yxliang01 You can't get an instance of a runtime type at compile time, though you can access the implicitly created type for an object that is available at compile time. [<-CODE->] 
solution: 

issue: need help in understanding below code. [<-CODE->] yes..  [<-LINK->] Its taking the types from "component" prop passed to FormikField Class. Can't understand how? need some explanation. 
solution: 

issue: Hi guys, is there elegant way to make it work: [<-LINK->] ? 
solution: 

issue: Yeah I mean I am not totally against OOP :) Honestly a lot of these opinions are coming from Scala haha since it does a good mix of both Oh don’t get me wrong, I am not excluding OOP I am just saying a lot of the functional ways of doing things is really nice 
solution: 

issue: I've never had a strong use case for safe navigation, personally Maybe it's because I never have deeply nested objects/arrays. Where a lot of stuff is null/undefined I can see how it would be convenient 
solution: 

issue: heavy in a sense of writing additional code or in a sense of performance? By two way you mean what to do on success and what to do on error? :) I used this lib only once so sorry if the question is dumb, just curious 
solution: AnyhowStep: but with a TL;DR what's the target of io-ts?. 

issue: Yeah, that’s how I write code too - to interfaces 
solution: Though yeah, interfaces were meant for that. In Java I use them extensively. 

issue: orta: @AnyhowStepFor example, I build my table models like this [<-CODE->] 
solution: 

issue: One week to the 3.7 Beta <3 It's a pity Angular doesn't even support 3.6 as of now. So I'm blocked on 3.5.3 czhower: you wrote you wanted something likeassertType(value, 'string').Actually you'll be able to do [<-CODE->] AnyhowStep: hahahaha Doesn't sound that bad 
solution: 

issue:  [<-CODE->]  [<-CODE->] Is this behavior correct? Note that if I changeassert0to be a declaration of a const function variable, then it works properly. See below: [<-CODE->] lppedd: The compiler also errors out when feedingxto a function that expects anumber. [<-CODE->] 
solution: 

issue: nimashoghi:  [<-CODE->] This works nimashoghi: thanks! nimashoghi: when I ask the IDE to tell me the arrow function inferred type, this is what I get  [<-LINK->] So yeah, seems a type inference issue. Though it might just be IDEA which is wrong. Can't know that. 
solution: 

issue: That's strange. This is what I get on Code: [<-LINK->] 
solution: Okay, I had forgotten IDEA has two ways to show the type, CTRL+Hover and CTRL+SHIFT+P.They have a different behavior, unexpectedly, and I had already opened an issue many months ago because of this, [<-LINK->]. 

issue: I think so too :D I already have some unique features in mind. If everything is fully typed and also has runtime type information, the CLI app could provide an UI by launching an installed browser I've never seen a CLI lib that could do that but with type information its very easy. 
solution: 

issue: I have generated a typescript definition file from a swagger and now I have something like this:  [<-CODE->] but I can't import { IArticles } but it tells me that the file (is not a module) so how do I use those definitions? 
solution: 

issue: Hi@all, I am getting the cannot find module errors when i use mocha with ts-node, here is my spec file and the command to run it and the tsconfig.json file  [<-CODE->]  [<-CODE->]  [<-CODE->] the resource loader.ts has the definitions too  [<-CODE->] 
solution: Is it possible to do generic type inference on an unbounded number of properties in an interface? Suppose I have such an interface: [<-CODE->]  [<-CODE->]  [<-CODE->]. 

issue: Out of curiosity, let's say we have a variableobj?: stringand I need to check if it's non-nullish using a shorthand if.Would you prefer [<-CODE->] Forget about the underlying problem of''being falsy. Not in scope 
solution: 

issue: Hi again guys :) [<-CODE->]  [<-CODE->] 
solution: 

issue: eyelidlessness: that's a question I always ask myself, when is it appropriate to use a uniontypeand when anenum.Not easy, although it seems it is also a matter of personal preferencies 
solution: 

issue:  [<-CODE->] 
solution: I think enums have a disadvantage in term of duplication [<-CODE->] It doesn't feel "lightweight".. but that's only because you're actually duplicating it. you can have different values. i use a convention of keys beingUPPER_CASElike the old constant convention beforeconstwas introduced. 

issue: Latex is good for exercising your pinkie finger to reach that backslash for those of us not on windows. I honestly can't think of any other reason I ever use backslashes.  Although for me it's on the same key as pipe, which I use all the time :P 
solution: 

issue: I think that fits in the scope of the typescript compiler plugins work I’ve notseena PR for this though so I’m starting to doubt it will ge tin with 3.7 
solution: That’s not a feature of TypeScript’s compiler I believe. 

issue: I've seen compiler options in source files// @strictNullChecks: true I'm having trouble finding where that's documented? Thank you! Also I found [<-LINK->] 
solution: 

issue: Thank you! Still hunting for an existing issue regarding inferring a union from a tuple? 
solution: 

issue: restrictingowouldn't help, I guess  [<-CODE->] I need the type oflennoto; 
solution: It must be possible I just don't don't have the right lingo/keyword. tl;dr: I need alengthofoperator aking tokeyof. 

issue: None, right now.  Types are already ambient, by definition.  There’s a proposal for forward-declared types that would use the latter, though declare type Foo; Umm... why. (What caused that error I meant) 
solution: 

issue: It's just how SQLite works.There's an error code with value21. It actually means "You misused this function".But when you try to get the error string of error code21, you get"not an error". So, just a confusing error message. 
solution: 

issue: So, divide and conquer? Like merge sort? I'm not sure it's applicable to all cases, though. For example, figuring out the type of a call tocoalesce(...args).args = [X0, X1, X2, X3, ...] You have no choice but to do this iterating from start to end (and early exit the moment you find the first non-nullable type) 
solution: And ifX0is something likeT0|null, you need to rememberT0and move on to the next element.IfX1isT1and non-null, then the result ofcoalesce()isT0|T1. 

issue: The flatten thing probably can't be tiled, though Always happy to see more zero dep libraries. I try to use as few dependencies as I can with my libraries, too. 
solution: 

issue: Short answer is sort of. Can you describe in a bit more detail what you expect as output?@MicahZoltu Are you referring to my question which was [<-CODE->] ?Basically I'd just like to customize JSX, so that when I write [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] The actual output of [<-CODE->] is something like [<-CODE->] So such a feature is desired by the TypeScript team, and is a work in progress? 
solution: 

issue: Totally fine, we can use JSDom for that But that's sort of a separate issue. Once we have the type support, then the SSR implementation (whatever it may be) can have nice types too.  Anyone know how to use multuple tsconfig.json files with @babel/preset-typescript in one go? (I imagine having separate runs in separate folders would work). [<-CODE->] 
solution: 

issue: Hello guys, can u help me with this:https://codesandbox.io/s/unruffled-water-b4kht [<-CODE->] MicahZoltu: yes i know, that why i want type it with generic or something like tuple with array, but for dynamic number of arguments and pass it down to .map() problem is in deps.map(), where container.get also accepts type but i cannot explicity specify type like i do in container.get<AuthService>(AUTH_PROVIDER_TOKEN). 
solution: 

issue: give me few mins i am trying to figure out what i can do with ur example) okay, now i get autocomplete and no errors:https://codesandbox.io/s/unruffled-water-b4khtbut its not type safe beacause of any?container.get() signature is: [<-CODE->] 
solution: 

issue: Got it. Thanks. 
solution: 

issue: I had to work with an old code base And realized TS makes typing for old callback-style code safer  [<-LINK->]  [<-CODE->] I find it way safer than overloads Anyone got any nice db agnostic migration libraries they use withnode?I've looked atnode-migrateand the documentation and internals are bad.db-migrateisn't great, either, because they bundle in some drivers. Documentation is also bad.Also looked atknexbut I'm not a fan of a migration tool and ORM/query builder bundled into one. I remember asking about it before but must have forgotten to write down the answers because I can't find it anywhere in my notes... 
solution: 

issue: Hi everyone, I'm joined to get help and pratice my English 
solution: 

issue: AnyhowStep: , yeah, it's just a general lock so only one migration batch runs at the same time and whati personally did was override the default name to be "_migrations" so that both of those "metadata" tables are sorted at the start of the table list so as not to mix-match data and metadata 
solution: 

issue: hello are there any command line utilities to minify a typescript file and preserve new lines and tab space characters? 
solution: 

issue: Is there a way to make knex run .SQL files for migrations? All I see are migration examples with their query builder , 
solution: 

issue: If you doconst arg0 = foo.arguments[0]before the if block you should get your expected behavior@AprilArcus Ah, behavior seems to have changed in recent versions for that.  Looks like what you're doing works in [<-LINK->] but not in [<-LINK->] 
solution: 

issue:  [<-LINK->] Why doesreadonlyon a class property for an array allowspushandshiftbut not for aReadonlyArray? When using it in a function, it works as expected. 
solution: One is areadonlyproperty set to a mutable array.  The other is a mutable property whose value is a readonly array.  They are not the same.. 

issue: But yes, as described there is a bundle size reduction using tslib, on the order of 1-10 kb per chunk.However I can observe this only on dev builds. --prod ones are equal. Though honestly I don't even know why I'm using 3.7 now, I can't even format using Prettier hahaha 
solution: 

issue: I'm pretty sure you still don't get FKs, so a row gets deleted and you have stuff pointing to a non existent row. Or you insert stuff and point to a non existent row. I'm not sure if multi collection transactions are a thing now? But they weren't back then. Only single-document transactions. Array operators of mongo were bugged/not useful, IIRC I'm packing now for a trip =x so I probably won't be active for a while. (You all can breathe easy now, no more SQL jammed in your throats) Thanks! Stringy row format? 
solution: I don't think you can SELECT them in MySQL at all but I may be wrong. I think you can only use them as syntactic sugar for some expressions. You can't actually select a row expression.. 

issue: ktosiek: Yes, the issue is this is a sample. In reality I have 50+ enums, so a generic type would be best :) The enum's are used as a mapping of database properties. I have a lot of database properties that are represented by an integer, which then translate to a specific value. The examples I included are just to demonstrate the issue I'm facing 
solution: 

issue: isobjectInputa validDatainstance? no and that's why i deleted my answer :D  [<-CODE->] should work your initial code doesn't take "style.enabled" into account 
solution: 

issue: they might not be compatible 
solution: I find it redundant to re-define the2ndgenerics, since it should be automatically inferred. Yeah, you can either pass no type parameters (in which case they will be inferred), otherwise you have to provide them all. There was a proposal to implement partial inference a while ago but it stalled out. 

issue: Anyone know how to connect TypeScript to a Teradata Database? There seems to be an open source app for connecting to MySQL, Oracle, etc but I didn't see Teradata. I see TypeORM project for MySQL... I'll look around 
solution: 

issue: Don't get me started lol 
solution: That says it's a server plugin, so I think it just offers intellisense-type stuff. I don't think it affects the types. 

issue: Peeja: Not sure if that's only for VS Code, or if it will actually catch errors when runningtsc. yeah You should make a feature request on GitHub! 
solution: Yeah, I might do that. I certainly will if I can't find an existing conversation, but this feels like it must have already been discussed.. 

issue: I have a switch(a) a can be foo | bar how do I force typescript to check all a cases I have "noFallthroughCasesInSwitch": true, but it seems it's not enough hey all I'm quite desperate I can't get flatMap to work compiler never wants it I edited my tsconfig to have --lib es2019 but it still doesn't work? any wild guess? 
solution: I've got lib and target set toes2019and I'm using it without any problem.. 

issue: it's either that or they come and break your legs 
solution: 

issue: typeof SomeNamespace? Well yeah you can’t just go and declarefs: typeof fsas that’s tautological - I assumed you wanted the type of a namespace that already exists apalaniuk: The problem withfs: typeof fsis that your localfsis in scope by the time thetypeofis evaluated, so you get a circularity.typeof fswill work if you rename the parameter 
solution: 

issue: fatcerberus: Thanks, you’re right (wrong mention?) I mean that it doesn’t throw that particular error, but I still get:Property 'ensureDir' does not exist on type 'typeof import("fs")'. 
solution: 

issue: Could someone explain this sample to me? I thinkfoo.itemsshould be consideredstring[]instead ofstring[] | undefinedin this case. Is this a language limitation or am I missing something? [<-CODE->] 
solution: 

issue: kerhong: , your interface definition hasitems?which makes it "optional" i.e. possibly undefined. remove the question mark. TS won't look past it as it refers to the interface definition for the type, not the specific instance. 
solution: 

issue: I expected (hoped) that the assignment tofoowould work as a type guard foritems.  Thanks 
solution: I guess my example wasn't that great, I could use object without a type, but then the next issue appears. I think I either need to annotate it as{ letters: string[], numbers?: number[] }or check for existance offoo.itemsbefore push. What is the idiomatic way to write this? [<-CODE->]. 

issue: x as neverin this case is justx as any- it lets you brag that your code has noanys without being functionally different from the latter cast neverbeing the bottom type is assignable to all other types neverdoes, however, buy you some type safety overanyif it accidentally slips through type inference: [<-CODE->] Whereasanywould let that slip through the cracks AlexMax: Yeah but the issue was about theno-explicit-anylint rule triggering So the response was about how to write the code withoutanys 
solution: Yeah that didn't seem right to me, but being caught out bynullmade me not want to push back too hard - his advicewashelpful in that switching tounknownas a parameter type was probably a better idea.. 

issue: fatcerberus: I'd like to file a bug report for this compiler bug but I don't know where to start on creating a reproduction since it's not telling me much. Any way to get some more debugging info when running tsc that could help? Or what would you recommend? 
solution: 

issue: union types they are described in the docs 
solution: Do I have to do anything magical to satisfy a union type? I keep getting a error when trying to use a union type.Type '(event: ActionEvent<KeyboardEvent<Element>, BaseModel<BaseModelGenerics>>) => void' is not assignable to type '(event: ActionEvent<KeyboardEvent<Element> | MouseEvent<Element, MouseEvent> | WheelEvent<Element>, BaseModel<BaseModelGenerics>>) => void'. Types of parameters 'event' and 'event' are incompatible.. 

issue: Avinar-24: doesReturnType<typeof createFieldList>work? what are you trying to do with thetype FieldList? it should be the ClassType of FieldList (and not the InstanceType) 
solution: I made a small playground to verify ur case, is this right? [<-LINK->]. in any case, probly need to wrap theReturnType<>withInstanceType<>to get the correct type. 

issue: Is there an easy way to transform a string literal type to a string array? types are not objects type example = "value1" | "value2";i dont want to writeconst arrayOfExample = ["value1", "value2"]; 
solution: 

issue: Crisium: welcome to the room.. you already have a reply: (not me... trying to paste it here but gitter is goofing up again) anyway check your stackoverflow link again.. there is an answer posted. 
solution: 

issue: Wow that guy was a little high strung wasn’t he 
solution: 

issue: ablakey: , this is such an isolated case of code that it's impossible to say. it depends purely on the larger context technically by the time you're checking whether it's a "problem" state or not the input state should already be verified to be something, not null. because you're already saying "this is a string array". [<-CODE->] 
solution: 

issue: Okay yeah that makes a lot of sense.  I think I'm squinting really hard and hoping to see this API:[1,2,3].includes<any>(anyValue)But in implementationincludesdemands T to be within the array.  Which makes a lot of sense. I guess I could always doconst myArray: (number | null)[] = [1,2,3] That actually makes this all make a whole lot more sense to me. Which is why aArray.prototype.includes<T>generic doesn't make a lot of sense. If it's about the array not the value. 
solution: I definitely think it’s almost certainly an error to ask whether an array known to contain only strings, contains a number, fwiw. 

issue: Unless I'm wrong I can just useas stringorconst arr: string[] = ["foo", "bar"]which gives me the room to define more specifically what I'm widening to. I learn a lot when I come here. 
solution: 

issue: then give them either dummy defaults or use! yeah, i agree with@fatcerberus pretty much it doesn't matter whether the node publishes that data or not,you don't know itat this point so act accordingly. technically it doesn't matter how you represent the actual state of not knowing but if you already have some kind of a state enum then utilize that 
solution: Yeah true. So the UI's enums are wider than the robot's C and Python enums because from the UI's perspective, there actually are additional states. [<-CODE->]. 

issue:  [<-LINK->] @ablakeyYou can alt-click on the timestamp of a message to do .  Also, I have no idea what you are responding to. 
solution: 

issue: The guy ~MaxwellBurson has only written only 2 blog posts. :/ Can someone explain to me what exactly is "type <…foo…>”, why exactly they are using comparison operator ? In [<-LINK->] function identity<T>(arg: T): T { A detailed explaination would be helpful ! 
solution: 

issue: Thank u@fatcerberus, I will note it and understand. Thanks for the reply ! Got it ! Thanks again. 
solution: 

issue: Hey folks, I wonder if someone can help me with a rather weird problem. I got a TS project that has a npm dependency, from within that dependency I'd like to access a file in the root project: [<-CODE->]  [<-CODE->] 
solution: 

issue: why can't I do obj.hasOwnProperty on an obj: Foo where Foo = {//etc} 
solution: tonisostrat: I've just tried that, sadly it skips that line completely and there's nothing related in the transpiled output,. VulcanRav: , i think your Foo needs to explicitly extend Object. 

issue: import  X =require("./X");instead ofimport * as X from "./X";solved my problembut there is no compile time checking :(I have many other modules 
solution: 

issue: paths/types are just dirty dont use them 
solution: 

issue:  [<-LINK->]  [<-CODE->] can anyone provied some hint about why this happens? the error above is if i remove cast toanyat the end of the line 
solution: 

issue: Yeah that's a good translation for this:Type 'TemplateNodeType.Interpolation' is not assignable to type 'TemplateNodeType.Text'. 
solution: 

issue: I was gonna suggest what you ended up with but you found your answer first :) Have you looked at return type inference in simpler examples?  I'd expect it not to break like that, but maybe it's a limitation in general? 
solution: 

issue: Is there a reason why overloads don't narrow as a group like discriminated unions?  [<-CODE->] Hmm, interesting.  It seems that you can do discrimination on overloads, but discrimination doesn't work with all types. 
solution: MicahZoltu: I assume that’s for the same reason you can’t narrow other variables off a type guard for one.  The analyzer doesn’t track data dependencies, it’s a big can of worms to do so. Like you can’t golet x = typeof foo === "number"and later check the value ofxto have it work as a type guard. 

issue: TSConf is packed I got asked if I use Angular I replied with, "ng-if only!" My last name is "Ng" lol It was on my badge Got to shake hands with Anders Hejlsberg. I don't have to wash my hands today Welcome and opening remarks starting soon I saw Ryan Cavanaugh 
solution: 

issue: I think that's it yeah your actual implementation has to work with both 
solution: So the implementation just has to worry about the signature's argument count and names and order (and defaults maybe) but not types. TypeScriptignoresnarrows them and looks at the overloads.. Yeah it makes pretty clear sense now that I'm seeing it as the implementation and not an additional overload.  I guess I was assuming TypeScript would use the overloads to make the implementation. But it likely cannot automagically do that in every case.. 

issue: yeah it will autocomplete (sort-of) based on the overloads only, and error if your call site doesn't match one. Often the challenge is just making the the types jive on the implementation, but you can cheat pretty easily withany. I think the real motivation was to model JS patterns, and IMO does so pretty well. 
solution: 

issue: SOAP isnt that widely used any more. Simple REST and JSON is the most common today. 
solution: 

issue: Gross. He introduced a type parameter that's never meant to be specified by the caller sounds like existential types? I.e.somebodyknows whatTis, but it’s not us 
solution: The talk for dtslint was saying using a type alias to determine if two types are equal was infeasible. But if it’s the same one I’m thinking of, is interesting because it works out mathematically too. 

issue: Actually I had it the wrong way around.  I had to add a__mutableproperty to my mutable version, and then usetype Input = Omit<Readonly<MutableInput>, "__mutable">; 
solution: 

issue: is jquery.validate different from jquery.validation?  The latter has types. yeah as written I think that would be hard to catch in most languages Things like Haskell'snewtypecan help, so you actually distinguish your keys and/or values with a distinct type. I thinkuniquecould be useful there.  [<-LINK->] 
solution: 

issue: Maybe it's only broken for 3.7? Then again, I remember using an older version of 3.7 and none of my fluent API tests broke, either I only had one instance of max depth error I'm not sure if I nest switch statements often or at all 
solution: 

issue: Hi is anything wrong this code snippet? [<-CODE->]  [<-CODE->] Why I getting error in this case, then? [<-CODE->] Can anyone help me out on this? 
solution: 

issue: Hi folks, I've just upgraded from TS 3.3 to 3.6 and some of my code broke and it's pretty weird, could someone help and explain to me exactly why exactly does it error and how would I fix it?  [<-LINK->] if you paste this code into playground you can see that it doesn't error on 3.3.3 but does on 3.5.1 and onward (including 3.7 and Nightly) czhower: well copypasting the code to playground shows both the error and where it occurs  [<-LINK->] Since you wanted the exact error, here it is: [<-LINK->] If that is of any help 
solution: 

issue: It would be useful to declare what the error is and where it occurs. Simply stating "my code broke" with no technical details isn't very conducive to receiving help. Its like sending a text message to your doctor "Im not feeling well, can you tell me what medicine to take?" 
solution: 

issue: dont use e motion. i'll just leave this here [<-LINK->] 
solution: 

issue: Ok ok, you've got me sold! I'll give it a try. It outputs to separate CSS files? What about dynamic styles if I change variable values? 
solution: 

issue: Anyone knows where else I could ask about my types issue? Is github issues a good place for such questions?  [<-LINK->] I've outlined my question here 
solution: 

issue: Hi! Where can I find a complete list of tsconfig.json properties? Can't find them in the reference page it only shows a few trusktr: those are just compiler options tho, how about 'file' or 'compileOnSave' they're not there so I assume there's more else 
solution: 

issue: Having an issue with a method defined asmyMethod(arg1: string, arg2:string): Observable<any[]> | Promise<any[]>when I use that method in another method (e.g. withreturn myMethod('string1', 'string2')) that has a return type of Observable<any> I get an lint error sayingType 'Observable<any[]> | Promise<any[]>' is not assignable to type 'Observable<any[]>'.    Why? 
solution: 

issue: becausePromise<any[]>is not assignable toObservable<any[]> 
solution: acan only be a string, but you want to assign something that might be a number.  That is essentially the problem you have.. 

issue: Hrm, I'm about to submit a feature request for theinopreator behaving like a type guard.  Google and issues search doesn't reveal anything that already exists, but I don't quite believe it - seems like an obvious request. Nevermind, found it: [<-ISSUE->] Wellllllllllllllllllllll Somebody cooked up some insane type guard that actually does that 
solution: 

issue: Hey guys, I have been spending so much time on this and now I would really just like to know, is it true that Reflect.getMetadata can not document object types?  [<-CODE->] In this example I'm setting theargstype to[number]and I would like to access that type in my decorator but I just can't seem to get it logged whatever I try 
solution: 

issue: i mean you can't if you import it via absolute path it needs to be in the output anything you import needs to be in the output secondly you can't, i'd run a script that moves the files after build shelljs is good for moving files around simple syntax, no need for callbacks etc  [<-CODE->] garyking: hope this helps. so long as you have that hack you can't ever have CI/CD 
solution: 

issue: Why doesn't this error? [<-LINK->] I'm casting an object returned bycreateFooto an incompatible type and it's not complaining. However, anything more complex and I get an error message talking about how incompatibleFooandMutableFooare. Is this a bug or does it behave way on purpose? 
solution: 

issue: Ghostbird: It is because generic type constraints are not used in narrowing (generally). If your function wasn't generic and its parameter wasitem: string | numberthen what you have would work.  This issue is specific to generic type constraints not being utilized. There is a feature request somewhere on GitHub to fix this, if you find it please  it.  :) (using the GitHub  response, don't comment on the issue with a ) 
solution: Ghostbird: yeah, theparmsis the one I picked, as the object will be extended in the near future with other properties. I was just trying to understandwhento use overloads in conjuction with unions. 

issue:  [<-CODE->] is not good enough? Without variadic type parameters, I think I can't typeklass.nameeven if the typeof Bar is{ name: 'Bar', new (...args: ConstructorParameters<Bar>): Bar }.. 
solution: 

issue: types are static.  You can't have them based on dynamic runtime values. 
solution: Well there's stuff likex in yand index types. I think it should be possible. 

issue: wish you could react to messages in gitter It’s still getting worked on, [<-LINK->] which kinda surprised me Here’s the 5y old request, [<-ISSUE->] 
solution: 

issue: Good question. I'm compiling the TS withtsc, then running it withnode dist/index.js. Yeah that's true, I might just do that. Yeah I triedsource-map-support. It works as advertised. But I prefer your idea, since with the former, I'd have to add the library to my production code (or add a flag for it, etc. but then it's ugly). I'm getting "Could not find a declaration file for module 'columnify'." errors. But I already havecolumnify.d.tswithdeclare module 'columnify';in my/src/dir. That fixed the errors for VS Code, but not forts-node. How can I resolve this issue? Hm seems liketypeRootsneeds to be specified. 
solution: 

issue:  [<-CODE->] or just extract that to a type and use it in both places 
solution: Yes, exactly like this - need to map between input1 to output1 etc. With declares it’s easy (i has smth similar to ur version). I have problems when i actually add an implementation to that parse function. 

issue: trusktr: Sorry for the late response, if you are referring to having declarations for .js files in .d.ts files and using those declarations in the related js file, no that is not possible as far as I know. trusktr: Don't know if you figured out the error with the provate names. There are restrictions to declarations and types that can't be given a name by the compiler. In this case it's the class inside the function that the compiler can't name (WithEmotion) . Hope you figured out a workaroud .. I'm not really sure what it would be except for an explicit type annotation .. ShanonJackson: I've actually been taking it easy on SO these days .. It's been a busy 2 months, hope to get back into in it when I get back from Seattle :D 
solution: 

issue: Hi everyone,changing from [<-CODE->] to [<-CODE->]  [<-CODE->] 
solution: 

issue: Anyone know whyx1is an error butx2andx3are not? [<-CODE->] 
solution: 

issue: Hello, why does this not work? [<-CODE->] It gives me the error message: "TS2538: Type 'undefined' cannot be used as an index type." I don't understand. What's a fixed-range tuple? "^2.8.3" 
solution: 

issue: Is there a way to make it not error in thestrictNullChecksfalsecase? 
solution: 

issue: hover overtype- you'll see it's inferred as a type literal. which is the only reason it works. 
solution: 

issue: I think you can do better @edgars-sirokovsHmm, maybe not... That bug I linked above really gets in the way here... 
solution: If that is the case and you want a playground link, why not just say that? Ive seen so many such convos go downhill quick when replies are not specific.. About a year ago I went round and round with someone in the TS room.. but that guy made it an art form to be obtuse in his replies about what he was actually saying. Kept repeating something that was clearly not specific and no one in the room either understood what the actual person was trying to say and the person was a native English speaker. I dont think you are being intentinoal like he was, but simply if the lack of a playground link is the key point why not just state that?. 

issue: jcalz: I think he wants a playground link but its being unspecific. It might seem that its small code to paste, but as I do similar support for commercial products its an added step for each and every report that often leads to differences or incomplete submissions.. so we have the same rule.. we generally dont debug quoted code and require a ready to try sample. 
solution: 

issue: I spent 7 years passing dozens of kidney stones and spent long periods in bed... I have a high tolerance for pain.... But Ive also long ago learned that text does not impart facial expressions, voice tones and other clues which are underestimated in their role in communication and that text often has people "read" things that dont exist and combined with different cultures and languages, things like this that are unintended often spiral out quickly. jcalz: plus I also have to do PHP work a bit for Wordpress.. so pain threshold is really high :) animals are popular:  [<-LINK->] 
solution: That looks like a lot of work.. 

issue: fatcerberus: I know, I meta-trolled you  I tried to put zero-width spaces between the quotes and the emoji, but...I can't tell if I actually did. "" "" so it didn't work, tried echoing it fun question, how wide is a zero-width space in a fixed-width font? in my shell it's the same as a full space "  " weak I feel super productive now 
solution: 

issue: Check out@artsy- I was there for 8 years, and left mainly because the company out-grew me, [<-LINK->] 
solution: 

issue: dam they already ticked all the boxes for 3.7 and its not even november on typescript roadmap can't wait for nullish / opt chainining 
solution: 

issue: What I wrote is what really everyone uses as a function constraint 
solution: 

issue: In the case of the following snippet: [<-CODE->]  [<-CODE->] 
solution: 

issue: Shanon's issue is more about the type of the keys I thought, this has to do with the types of the values not being inferred properly AnywayRecord<string, T>is equivalent to a type with a string index signature andTvalues.  What makes it neat though is you can constrain the key by using something more specific thanstring 
solution: 

issue: Maybe we should troll him and be like "he's not arealdev, just a manager" 
solution: 

issue: I would suggest not naming a variable 'string' though. 
solution: 

issue: yeah but what about my windows phone  
solution: 

issue: orta: Well, I can't use the backspace key on mobile I spam the backspace key and the cursor doesn't move. I can't copy and paste code (happens when people do not create Playground links) I end up in situations where I see two or more blinking cursors and I can't type anything Just a lot of weird bugs that make it unusable on mobile I'm on Chrome 76 on Android, I believe So, I was thinking I should just fork the playground and rip out monaco. Just have a dumb HTML textarea 
solution: 

issue: Copy and paste has never worked (at least on iOS), you long press and you get the custom monaco menu instead of the system copy/paste menu Quite frustrating Well that’s just great On an unrelated note apparently iOS 13 Safari on iPads is reporting itself as a Mac browser now Because nobody can get this mobile thing right 
solution: 

issue: orta: random question - I'm designing in my head a little bit on a tool we might build, and thinking about how to support TS in a web app, maybe all client side.  Seems like if you start considering multiple files, things get way more complicated.  The playground just pipes the input through tsc used as a library, right?  I'd probably have to look into how all these fiddle sites work. but quick  fix... 
solution: 

issue: Hello. Could someone help me out with this error message? How can I fix it?  [<-CODE->] Is it possible to mark some, but not all, properties on a type as required? By only specifying the property name, without re-specifying the type? 
solution: 

issue: Like I said in my post below that, Apple seems to have realized nobody is going to get that latter thing right and just has iPads report themselves as Macs in the useragent 
solution: I mean, full-featured ones like VS Code or Atom or Sublime. The ones I linked are just the text editing part, and not (yet) scalable. They're justcontenteditableelements with<span>s added to them for syntax coloring based onRegExpresults.. 

issue: RC incoming Damn 3.7 is not out and I'm already in hype for 3.8 hahaha 
solution: 

issue: Yo Im intrested in TS, I have already used JS for a long time 
solution: 

issue: fatcerberus: Yeah I checked the compiler API docs earlier and noped right out of there. I asked my question after checking those docs, hoping for a simpler solution. I've got experience with writing plenty of ESLint rules, for instance, so AST isn't a problem for me, but still, the docs look too complex for my needs. 
solution: 

issue: (in case the trollface wasn’t enough of a hint, don’t actually do that. ) Tcould be anything You’re essentially applying+to two values of typeunknown 
solution: @corysimmonsAFAIK + in JS is only usable on numbers, strings etc. I dont think it can be used wtih objects or other types unless they covnert via toString etc.. 

issue:  [<-CODE->] this code throws a strange error which I don't inderstand Type 'Component' is not assignable to type 'T'. how can I solve it and what does it mean? 
solution: 

issue: pretty sure VSC just uses typescript language service under the hood meaning it isn't a IDE related issue iv'e never heard of it not being recommended to use declare module for only a single module just use it for all and make sure the module your augmenting is imported 
solution: 

issue: I’m very confused by this comment, it seems like a non sequitur [<-LINK->] I’m not your mom, right? What. But that guy sucks 
solution: 

issue: Can't you usetscwith--emitDeclarationOnly? 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: has anybody made a library with extensions like that to get more type information out? another thing i'd like to see would be the ability to replaceanywithunknownin a lot of places like maybe a compiler option to treatanythe same asunknown? 
solution: 

issue: I'd like that, it wouldn't break some things, but sadly there are places where you needanyandunknownwouldn't work. 
solution: yeah, so maybe just putting it in more places in the stdlib, or having an alternate set of libs (or extra lib) which replaces most of theanywithunknown. 

issue: I'm trying to use an object as a map but TypeScript's indexable types make it so that every property of the object appears to have the given type even though some keys do not exist and so are undefined. But if I include undefined a part of the type then properties for keys that exist show up as maybe undefined. Any solution? 
solution: you either have an index signature or you don't, pretty much.  I think types likeRecord<string, whatever>are kinda dangerous since you don't have to check for undefined.. 

issue: Lets say I have this property assignment [<-CODE->]  [<-CODE->] 
solution: I assume you want the property to not exist at all if the condition is false?. I don’t like it but someone came up with a trick to do just that using object spread: [<-ISSUE->]. 

issue: Hello, I'm comparing Flow.js and TypeScript for potential migration of an existing medium-sized codebase. I got Flow.js working and everything, but I can't get TypeScript to recognize my ES6 imports. [<-CODE->] I tried setting baseUrl and paths, but neither seems to work. web search reveals no solution. This is vanilla ES6 module imports. No webpack/commonjs/amd Here's what I have in tsconfig.json: [<-CODE->] directory structure looks like./app/scripts/modules/mithril.js tsconfigis in the same directory asapp.app/is the root of everything the http server will serve. 
solution: 

issue: mnakama: I can reproduce butonlywithallowJsdisabled.  If I enable it, it works This is after usingtsc --initand tweaking the output file (like you did) 
solution: 

issue: Ah okay, I got it now. Thanks! 
solution: Yeah I get it, I think.itemsis an object.typeofon that gets the object shape of it.keyofgets the keys from the object shape.. 

issue: Seems really basic, but how can I ensure that a var's type is a specific interface? I can't seem to figure it out. 
solution: 

issue: webstrand: 's logger still has it logged, I'll bet Is it really deleted, if it exists somewhere? 
solution: 

issue: Hey everyone, I just found the following behavior (bug?) in TypeScript, where usingfunction f(o: X)behaves strange, whilefunction f<T extends X>(o: T)works perfectly: [<-LINK->] I am now looking for an open issue in the TypeScript repo, but am not sure what I should look for. How would you call this? 
solution: However, you extract out the kind and type into separate variables so now you have something like: [<-CODE->]. 

issue: I expected both to work tbh. Yes, but why? Performance constraints? thanks@MicahZoltu, your explanation makes a lot of sense. This also explains why [<-CODE->] can't be changed to [<-CODE->] (even though that'd make sense imo, perhaps constraints like these can be added to typescript in the future) guettli: I don't think anything was meant condescending @fatcerberusYou have to type less with a type system because you don't need to write as many tests. (probably) 
solution: 

issue: MicahZoltu: do you feel superior now, after making this joke? Do you want how I feel? I feel not welcome. 
solution: 

issue: Doesn't that fall under the same category as asking the genie for more wishes 
solution: 

issue: also there was that whole "your overloads are in the wrong order" thing that was (IMO) completely counterintutitive But my current policy is don't use them as a design tool, that's not what they're meant for 
solution: 

issue: Whenever i seethis &in typescript (just skim read that screeshot) there's a hidden type in typescript you might find useful its one of the few types whos implementation is actually in the compiler itself,interface ThisType<T> { } allows you to do this... 
solution: 

issue: Wait so ifthis & Tworks why did they even addThisTypethatalsohas to be used in an intersection?  Unless the use case is different 
solution: Yeah it types thethisof functions in an object literal. The pattern that benefits fromThisTypewas used a lot in the pre-ES6 days, not as much now. Where something takes an object full of callbacks and passes the current context asthis. 

issue: I wonder why they saw theThisType<>as being worth it to implement Seems like a really obscure edge case They always talk about complexity budgets and stuff 
solution: 

issue: they use it in defineProperties, defineProperty and create (Object.prototype methods) React may have needed it in the old class api mainly react.CreateClass() which takes an object with athis its valid if you have lots of factory patterns i guess and you want to control "this" at each level I.E in that case you can't just chuck... [<-CODE->] because if you're applying many different properties at many different stages getName will have differentthisafter every factory applies its properties Vue.createClass is same syntax as old react yeah 
solution: Problem i find with frameworks that number 1 selling point is performance is that personally my biggest problem is complexity and not performance. 

issue: So TIL that if a file is mentioned inexcludebut something imports it, tsc will pull it in and compile it anyway 
solution: 

issue: ShanonJackson: - did you check the description which is described in my shared link. 
solution: 

issue: Hi everyone,Please take a look at this screenshot. I can't cast an unknown type. Why and what can I do?  [<-LINK->] The idea is that if this element is caught we can't assume anything about it's type. But if it runs in the callback, that I know it's of type ErrorTracker. yeah makes sense. But it seems limited that you can't cast unknown 
solution: 

issue: i guys Hi I'm now getting this error:  [<-LINK->] this is the RegisterForm component  [<-LINK->]  [<-LINK->] can anyone see what the problem is? 
solution: 

issue: keithlayne: Looks like@AnyhowStep's use ofObject.setPrototypeOfis effectively a mixin implementation (though not a common way to do it). But in his case, the classes are simple, and so he hasn't hit any issues yet. :) Or, maybe he's not trying to do mixins? 
solution: For one, after changing the prototype ofthis, it loses theprototype.namevalues that he set.. 

issue: He’s just trying to subclassError.  No mixins here 
solution: 

issue: AnyhowStep: any reason not to usenew.target.prototype? I mean in your project yeah supposedly if you use that then your Error sub-subclass doesn't have to set the prototype, because the right thing will happen when you callsuper(). which is I guess exactly what you said 
solution: 

issue: ES5 vs es6. I have a Todo to bring the target down to ES5 Right now, I'm not targeting es5 because I'm just trying to hammer out features. But it's still a goal 
solution: 

issue: Question - for larger projects do you use custom error classes? If yes, what's your best practice? If not, why? 
solution: 

issue: Cool work 
solution: 

issue: carpben: as any as type "" as any as number baetheus: i'll solve it give me a sec  [<-CODE->] missing typeof baetheus: enjoym harcodedtypeof ABCbut yes that too 
solution: ShanonJackson: Hm I put"skipLibCheck": true,in mytsconfig.jsoncompilerOptionsand reloaded my VSC workspace, but the error still appears.... 

issue: Hey everyone. I've been trying to figure out this error message but am having trouble. Could someone tell me what's it mean?  [<-CODE->] The paths are the exact same for all four occurrences. I'm trying to usemoment-duration-formatby doingmomentDurationFormat(moment). 
solution: 

issue: Dunno. Here's the code: [<-CODE->] ShanonJackson: Yes that works, but nowmoment()is not a function. Something like this? [<-CODE->] The above works. I'll use something like that I guess then? Thanks, you were very helpful  Was a confusing error message. 
solution: try change*. 

issue: ShanonJackson: Awesome, thanks. Not sure how I long it would have taken me to stumble upon that syntax! 
solution: 

issue: garyking: works for me f.e.const exec = util.promisify(require('child_process').exec)and exec has the right type. I have@types/nodeinstalled @keithlayneit appeared in a post about subclassing builtin classes...in ES5 [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: defolos@guettliNow that we have webassembly: essentially anything that isn't js and that compiles to WASM? defolosoh, well there goes my hope for a sane language to be used in the browser :( 
solution: 

issue: browser native lang like DartDidn't Google give up on that quite a while back? 
solution: 

issue: it can be a gotcha but let's be honest, who actually accepts* code like that? do you have a more real life example you can share? i'm genuinely curious as to what the supposed end goal is for writing code like that 
solution: 

issue: :open_source: I can finally work onINSERTstatements for my query builder -___- Who knew theSELECTstatement was so complex? 
solution: 

issue: I agree with postgres being a pain, I actually like mysql's impl, where it updates onanyduplicate unique constraint.I think it's unsafe for statement based replication or something, can't remember. Might be MySQL only  [<-LINK->] Seems like the most portable thing to do is, [<-CODE->]  [<-LINK->] That's current behaviour, but we should do better =x You can have a for-loop and do step 2,3 repeatedly Then finallyCOMMIT;everything fatcerberus: asyncshould be better typed 
solution: 

issue: I think you need separateON CONFLICTclauses. Plus AFAIK you have to use the name of the index and not the keys.  If that's not true, I could have done my implementation easier probably. well not really I just used the pattern pg uses by default for PKs based on table name.  I have a bunch with composite PKs. 
solution: or ON CONFLICT DO NOTHING, it is optional to specify a conflict_target; when omitted, conflicts with all usable constraints (and unique indexes) are handled.. 

issue:  [<-CODE->] I don't accept arbitrary strings for conditions/column identifiers/table identifiers/etc. (yet?).So, the "accepts all strings" shouldn't be a thing =xA lot of the methods takes a callback function, and the arguments to the callbacks are all fully typed.Then, the return type of the callback is checked during compile-time.So, hopefully it'll be super awesome =x [<-CODE->]  [<-CODE->]  [<-CODE->] garyking: declare const arr : [1,2,3]? 
solution: So, the "accepts all strings" shouldn't be a thing =xYeah I know thats the theory, but I also know how hard typing somethings can be :PHonestly, I think you'll have nailed it and it won't be a problem, but it's just one of the things I think of whenever I see a really cool library that seems too good to be true ;). 

issue: I was told TS can't solve some fundamental issues which JS has. Is there already a list of those things? Equality operator was mentioned yesterday. Which other things can't be fixed by JS? 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Hello all, [<-CODE->] Getting error "Type '{prop: 1;}' is not assignable to type 'Partial<T>'". Is that a bug or I'm missing something? T extends Some, so it will definitely have property 'prop' of type number. 
solution: 

issue: ok, got it, thank you all 
solution: 

issue: Hi everyone. A style question. Is it more appropriate to check for a property inside an object using [<-CODE->] Or [<-CODE->] tonisostrat: heh! That's right 
solution: it's technically not a type guard but an existence check. instance to some serialized value, static from some serialized value. 

issue: tonisostrat: the problem is, if I'm not mistaken,hasOwnPropertydoesn't act as a type guard This is correct. Thanks for the info guys 
solution: 

issue: You want tuple to union. I forget what the syntax is for that, but it is pretty simple.  [<-CODE->] 
solution: I've seen that lightshot thing used a bunch of times on github issues and stuff. 

issue: Yeah they bumped master to 3.8 So all the nightlies say that now 
solution: 

issue: Hey guys. Is it possible to have a normal interface, likeinterface Item { a: string; b: number; }and then for an object that uses this interface, also specify that all other properties on the object must be[key: string]: number? I tried[key: string]: numberbut then there's an error on thea: string;since of course it doesn't match it. Just combining two interfaces should be enough?& Record<string, number>? Yeah that did it :) 
solution: 

issue: So I found a FAQ entry that isn't true: [<-LINK->] Proof: [<-LINK->] Why was it changed?  The rationale given in that FAQ makes perfect sense 
solution: 

issue: you can withnamespaceat least.  Butimport { item.type } from ...is a syntax error, and will never work. but I don't advise usingnamespaceever unless you're writing declarations for JS. you canimport * as foo ...and then types will befoo.Type. So I too have different sports like nba and nfl with different types likeGame.  I just use modules. i.e. you might have sports.ts withimport * as nba from './nba'; export nba; thenimport { nba } from './sports'and usenba.Game. 
solution: 

issue: Generally you’ll get a type error upon trying to assign the promise to something else - though that doesn’t help you in case ofvoidReturningPromiseFunc(); 
solution: 

issue: If I import a type from one file into another, is it possible to then export the type from the second file (where the type was not created)? Since just doingexport Typedoesn't work. I could probably doexport type Standings = Standings;but that seems unnecessarily verbose. Oh right 
solution: 

issue: yeah I agree it's a little goofy to test schema, but functions are another matter. 
solution: Also, I don't write stored functions/triggers, usually, anymore.I used to do them a lot.But then the lack of compile-time checks, tooling (like debugging), etc. just made me move away from stored functions and the like.. 

issue: Is there a built-in type, along the lines of{}orobjectwhere the things onObject.prototypeare not assumed to be available?  [<-ISSUE->] 
solution: fatcerberus: so basiacally it is calling l.makeThunk. 

issue: Hi everyone. I was browsing a minified JS source and noticed this syntax [<-CODE->]  [<-CODE->] 
solution: 

issue: irc.gitter.im irc.gitter.im 
solution: 

issue: yeah.  Better to check. there's pretty narrow use case for type assertions usually - those times when TS can't tell the right type, but you know what it is for sure. 
solution: So far I think the only legit time for an assertion was when the input was fromprocess.argv.. 

issue: Oh I see If you're loading stuff from disk then basically you're starting fromunknownand your types should reflect that as much as possible Though I acknowledge that narrowing fromunknownis difficult in many cases 
solution: that was so much more painful to write before recursivetype. 

issue: IIRCtypeRootsis in fact not what you want to use. I'll check my config 
solution: 

issue: I'm creating an npm package which buildsamdandesindist/amdanddist/esrespectively.  From what I can tell I can set the package.jsonmainandmodulefields to point to the folders of each bundle. However, what do I do with thetypesfields in package.json? I want to ship types, but there's only one types field. Recommendations? 
solution: You can output the types to a folder that is neither dist/amd nor dist/es. The types for both outputs should be the same, anyway. So, it shouldn't matter which dir you point to with your types config. 

issue: Since you have an index, have you tried not settingtypesand consuming the and/es packages and seeing if TS can find the types? Also note that if your main declaration file is named index.d.ts and lives at the root of the package (next to index.js) you do not need to mark the "types" property, though it is advisable to do so.  [<-LINK->] 
solution: 

issue: you'll never have a function that is a union of two generics wrapper(a: A | B) will just be wrapper(a: A) where A is the union can't understand the second part but the answer is always "yes" when dealing with any kind of inference around functions typescript has everybase covered (A === number | string) ====    (A == number  | B === string) 
solution: but yeah@fatcerberusthere's no way to infer the generics of "wrapped" unless your plan is to hardcode them. 

issue: I think A and B are meant to be concrete types there but from what I can tell there’s no way for it to infer the generic X or Y type parameters They will just default to unknown The<T>comes before the parameter list 
solution: 

issue: Usual design would be to have useItem will throw an error if its null/undefined. Combined with a type check you can then return string if its not null/undefined. throwing an error when its null/undefined is consistent action. or you can return "" if thats within your wants. 
solution: 

issue: well, s3 is not made to serve web pages... 
solution: The other side of this is that in my experience the problem is usually that an app has 1000 dependencies, not that many requests are slow.. I have built apps without HTTP/2 push and without bundling and they load faster than most pages on the internet.  This is primarily because I don't bring in the world for what amounts to a relatively simple application.. 

issue: fatcerberus: Yes, as long as you are OK with not supporting iOS users.  Safari is the new IE. fatcerberus: I wrote a TypeScript transformer that auto-adds.jsat compile time. [<-LINK->] If you change the imports to.jsat the TS level then your code won't run ints-node. fatcerberus: No extra step with a TS transformer. You can if you usettscinstead oftsc.ttscis a very thin wrapper aroundtscthat just adds custom transformer support. [<-LINK->]  [<-LINK->] Yeah. I have seen web projects with a 700MB footprint on disk and ~1000 dependencies. This is not reasonable to me. 
solution: Right, though as pointed out in that issue, 40MB is alotto pull inas a dependencyif all you need is e.g. the typescript parser that would otherwise fit in < 1MB. 

issue: browser stuff usually doesn't :P plus, you can't use a transformer with justtscright? 
solution: 

issue: I wish I could give iOS and Safari the middle finger. A lot of my users use iOS =/ 
solution: 

issue: MicahZoltu: Thanks very much for theinkeyword. That is very helpful. I have a related problem. The error message is in the code comment, if someone knows how to fix it: [<-CODE->] trusktr: No, just the same error occurs. Yea, that's why I'm having trouble figuring out this issue. 
solution: And""is falsey, even if it exists. (empty string). MicahZoltu: Yeah usually that would be great, but I also want to use the type in the function's body. Which is my second question: Is that even possible? In the body, I wantconst items2: T = []for instance.. 

issue: But! Based on your types,aalways exists. Oh, I see your problem though, just read above [<-CODE->] Because, you'd need to narrow the type. 
solution: 

issue: I'm all up in some graphql lately.  Turns db into well-typed api with some code generation...it's my ORM. that's why I don't write any of that by hand and everything gets turned into a single query. you do authz with RLS and grants in postgraphile 
solution: 

issue: garyking: , can you explain what you'reactuallytrying to do so that we might be able to maybe find you a way to restructure your code? this Alpha/Bravo bullshit is not getting us anywhere 
solution: EDIT: never mindit can't be a string if it's already an object. 

issue: I believe NodeJS will be getting non-experimental ES support very soon. 
solution: I believe NodeJS will be getting non-experimental ES support very soon.That would be amazing.  IMO, ESM is by far the best JS module system out there. 

issue: buoyantair: hey OMG ah that doesnt work but anyways. 
solution: 

issue: keithlayne: Funny enough, it actually never occurred to me that.everycould work as a type predicate... 
solution: 

issue: Yeah, you can't use type annotations with function declarations, only function expressions (arrow function, inlinefunction) 
solution: 

issue: AnyhowStep: Here's an issue that might intrigue you: [<-ISSUE->] He might change his mind when he sees what that involves Wait does that actually work Oh I see, it works but you have to list out all the numbers manually Pretty neat though It would probably violate spec to do automatic tree shaking If there's an import in the source ES says you have to load it 
solution: 

issue: Hello, guys! For couple of days i am trying to find some documentation about TypeScript AST. All i found - d.ts in typescript package on github Maybe some more comprehensive version exists? Thanks in advance) Sorry for bad english) Tell me if i need to reformulate my request) AnyhowStep: thank you for reply, i have been there)) Actually i spent some hours in source of tsc and found answers to my questions)))) 
solution: 

issue: I have to change the site to desktop mode Then I can hold the emoji reaction And it'll show the hover It's annoying Also, older versions of the TS playground were actually usable on Android I could type stuff and even backspace Now, I can't do it. I can maybe get some alphanumeric stuff out if I'm lucky 
solution: 

issue: More than probably you can't get your code 100% type-safe, who cares as long as the critical/importsnt stuff is covered 
solution: 

issue: the one i'm using does 
solution: Which do you use? I haven't started on any graphql stuff but I may at some point in the future. fatcerberus: No one laughed at my nominal type cross-version compatibility joke and that makes me sad. [<-LINK->]. 

issue: I just looked at graphql filtering. Doesn't look like you can just dump arbitrary expressions in the filter. So, you can't really build complex WHERE clauses like in SQL. Or am I missing something and it's actually possible? 
solution: 

issue: Guys  [<-CODE->] Why doesn't this work? 
solution: It seems like since you have to define the schema up front, there's a lot to his complex things can get. 

issue:  [<-CODE->] If I sort the above, I can have the following topo sorts, [<-CODE->] 
solution: Which is a desirable characteristic for a sorting algo. So, gotta' add more constraints until we only have one possibility. 

issue: -depth also, in my head trees growdownas opposed to nature 
solution: 

issue: That is wild, I had no idea 
solution: 

issue: but the point is that depth is relative to a root, so with multiple roots it's no longer a scalar. 
solution: 

issue: CP seems to lazy load the images now..Gotta' escape the FBI, you know? czhower: I refreshed and got this  [<-LINK->]  [<-LINK->]  [<-LINK->]  [<-LINK->] KajanSandell_twitter:  [<-LINK->] Just say it's cool and airbnb is using it 
solution: keithlayne: I wish I paid more attention to graph theory. My graph algs took like, 10 days of googling and stuff to implement.And just a lot of "This problem is NP complete in graph theory. Just fudge it and hope no one realizes". 

issue: you get a simple, clean-looking and unified stylesheet for most widely used components it's not just the layout 
solution: If I was in the market for off-the-shelf components, I think I would prefer something that built directly on flex and grid rather than implementing its own layout engine.. 

issue: We still support IE at my workplace.. That's a fun one 
solution: Git is probably the best VCS I’ve ever used. alxhub: that explains why up until recently (the last year or so, when they really started putting work into it), git performed amazingly on Linux but terribly on windows. 

issue: actually, i'd prefer starting from scratch to get a better understanding of how to put all of it together. so@typescript-eslintsounds like something i should be looking at yeah, that's basically what i always try to do 
solution: typescript eslint has docs for their rules, and some of them are pretty dumb.  They'll have a section called "when not to use this rule" and it will basically say "if you want babies to die".  Just silly stuff.. 

issue: Hi all I m getting TypeError: Cannot read property 'native' of undefined error why I m getting this 
solution: 

issue: fatcerberus: I think our pining for negated type will go unanswered, negated types  seem dead, at least for the foreseeable future 
solution: :( I was excited to have a faster replacement for conditional types. 

issue: I asked at TSConf and both Ryan and Anders had serious conceptual problems with the feature.. I think it's dead right now. They didn't say it exactly like that but that was the general idea 
solution: AnyhowStep: I don't think anyone will let us near the crown jewls of the type system, and personally I am not sure I have the knowledge to get in that deep, but thanks for the vote of confidence. 

issue: No-no, that's not what I was aiming at 
solution: I’m not articulating this well myself... but basically you can laugh at the illusion of a contradiction while also acknowledging no contradiction exists. Whereas a lesser person might justbedefeatist about it: “this is a thankless job, I quit!”. 

issue: Is there a slightly longer TL;DR? What problem would this solve thatasync/awaitdoesn't solve? 
solution: 

issue: Yeah but wrapping all the calls in(await x)is pretty clunky Yeah, that looks like shit. I usually go with a hybrid approach: [<-CODE->] Well, it failed for consecutive calls, yes But I'd say the goal was not to get rid ofthenbut to be able to access the value in code synchronously 
solution: 

issue: hi guys, anybody has got idea why i got this error while trying to import express and mongoose modules? [<-CODE->] 
solution: 

issue:  [<-LINK->] @fatcerberusi guess yes but it is still reproducing the same error solved it with: [<-CODE->] 
solution: 

issue: LucaHey, I am wondering why TypeScript chose its way of overloading functions. Or why not at least let me write function bodies and have typescript translate them to this ugly "typeof ===" code?  [<-CODE->]  [<-CODE->] Okay I am afraid I don't know enough about the working of TypeScript, but sparing these stupid if statements is also not possible due to this?  [<-CODE->]  [<-CODE->] Okay I am afraid I don't know enough about the working of TypeScript, but sparing users these stupid if statements is also not possible due to this? LucaOkay and because TypeScript can't always do that, I have to write a function because it expects me to know if typeof suffices or not? Luca* Okay and because TypeScript can't always do that, I have to write the third function because it expects me to know if typeof suffices or not? 
solution: 

issue: import maps if you want to interop with npmBasically every project I ever work on. 
solution: 

issue: Seems like [<-LINK->] bundles libs with ES modules into one-file modules. It is so redundant to have to add.jsto all import specifiers (imagine writing them manually like that from the get go, which doesn't even work in TypeScript) 
solution: 

issue: trusktr: I spend alotof time looking at code in a browser's debugger, and having un-bundled/un-minified code is a huge boon.  Source maps are supposed to solve this problem, but they are not problem free.  Browsers tend to not do well when you try to load a 500,000 line file in the debugger. 
solution: 

issue: Yeah, it worked when I changed it from [<-CODE->] to [<-CODE->] 
solution: 

issue: @fatcerberus heard you were talking crap about my IDE :PThat's half true - WebStorm has a semi-parallel language system, which it runs next to the TypeScript service, and is typically a lot faster & more accurate. The final result is a merging of the two: TS is used as the base, and will fall back to if needed; PSI is then applied on top of the TSLS :) But the important thing is that it should always fallback to TSLS if needed - if it doesn't, thats a bug. Yeah, that's b/c it was trying to be clever and didn't realise it needed to fallback to tsc But WebStorm would still have reported tsc errors I.e they are clearly marked separate from it's So for example optional chaining The ide will just freak out at, but error wise it says tsc is fine with it But every ide has that probably. Tsc doesn't and can't remove it *problem. Bloody mobile 
solution: 

issue: trusktr: My solution has been to submit GitHub issues to each repository telling them about my TTSC transformer that will fix their problem.  :)  So far I have a 0% success rate with this strategy. I wish Microsoft would make a move on implementing this in TypeScript directly.  I feel like at this point with imports it is basically locked in that TSCneedsto do this if it wants to be browser compatible in the future. That will break ints-node@trusktr. I went down that path, they do not. 
solution: 

issue: MicahZoltu: Not that bad, I can totally just duplicate stuff. I just wanted to know in case I ran into a similar situation with a larger type where duplication may not be feasible. Out of curiosity, why doesn'tOmit<Theme['colors'], 'mode'>work? 
solution: 

issue: MicahZoltu: that's slightly off (missingcolors?etc.) but I think a variant of that might work... could've sworn I tried that - testing now 
solution: 

issue: Switch to the TS Discord where a bot turns giant playground links into short URLs. reggi: What do you mean "a string key"? 
solution: reggi: Can you throw together a playground link with the type you are trying to achieve?  Right now you referenceUserRepositorywhich isn't defined anywhere, which makes it hard to troubleshoot.. 

issue: For starters, delete the/// <reference ...line. Istypingsfolder in your source root? If not, I recommend moving it so it is. You shouldn't be doingimport Express = require('express')in yourd.tsfile. And I have found good success with this format: [<-CODE->] I generally recommend against adding any types to the global namespace. rhalff: 
solution: MicahZoltu: yeah but this is sails, and it has models and services in the global namespace.@MicahZoltuis /// <reference not used anymore?. 

issue: I see how stuff like json schema is useful and all, but I trust code more than I trust declarations, for validation.At the moment, anyway. Because if there's some edge case the library can't support,You can usually just write your own validator.Whereas, for something like json schema, if they can't express the thing you want, you're out of luck. 
solution: 

issue:  [<-CODE->]  [<-CODE->] And the "soft deletion" is also just adding a row to a log table Like "entityEnabled".INSERT INTO entityEnabled (entityId, enabled) VALUES (1337, false)to "soft delete" And to undelete,INSERTaTRUEvalue to theentityEnabledtable As for libs...You're not going to like the answer, lol.I've just been using the prototype lib I've been working on This is for the older prototype, so it's a bit clunky. But it works  [<-LINK->] It also enforces some opinionated constraints that I have fatcerberus: I need your magic issue sniffing powers =( [<-LINK->] I remember seeing such an issue reporting this but I can't find it anymore 
solution: 

issue: VR with video. But it's much complicated to track objects and do real occlusion, compared to just plain VR. The new ToF sensors are going to help a lot. orta: How about/key to focus the search input on the website? :D 
solution: I can get behind that.  Batman is awesome. 

issue: Hey guys, I'm having trouble with a type predicate. How am I supposed to check that astringis in a typed array, if I can't do it in a type predicate? [<-CODE->] Hm,return extensions.some((extension) => extension === item);works. I suppose I could just use that? 
solution: Yeah, it doesn't make sense to ask if e.g. a string array includes a number (so the error is good), but it's inconvenient when dealing with literal types. 

issue: I write a lot of predicates for data coming from APIs. 
solution: big motivation behind that thing we talked about earlier to turn that intoRecord<string,unknown>. but if you have that and a JSON type that you castJSON.parseto, things are much nicer.. 

issue: Not writing documentation:priceless 
solution: 

issue: keithlayne: good work  [<-LINK->] almost wrapped it up now 
solution: 

issue: not cool enough for that jeepers I'm so dumb, I can't figure out how to merge your changes locally, even though they're fetched :(  Not doing enough open source. but LGTM anyway you don't need approval from someone not even cool enough for twitter Thanks for fixing it up! okay, just checked out directly from your remote, looks awesome. 
solution: 

issue: great, I can start the playground work now 
solution: 

issue: I somewhat dislike the multi-line thing but other than that it looks like a beautiful fluent API to me Not ugly at all But yeah that makes sense now, thanks for explaining that 
solution: 

issue: orta: I <3 you and your efforts 
solution: orta: @keithlayneGood work on dark mode.  Was kind of hoping it would be as colorful as VSCode's default one but beggars can't be choosers. I somewhat dislike the multi-line thingIt's the only way to get proper type inference from TS =x. 

issue: now just gotta wait for the trickle-down effect to all the dependent libs inspect element? um...I'm on chrome on OSX and see the same thing.  Prolly should have looked at that.  My bad. 
solution: Yeah I noticed it got darker - you must have changed that while I was playing with the CSS. 

issue: OK, that’s deploying also in some azure queue somewhere 
solution: Ooh they're planning to improve type alias intellisense in 3.8. 

issue: as opposed to a btree or whatever?  I have only used a few types of indexes. we're not talking about huge data sets either, luckily 
solution: 

issue: In my head, if it hasn't been done yet, it's probably too hard =x 
solution: My understanding of the coverage stuff for ruby is that [<-CODE->] (discouraged style) would get essentially branch coverage while [<-CODE->] would not.  I'm not 100% sure though.  Point being that you could pretty simply generate code from the (maybe) JS for a coverage run.. it's all kind of baffling to me because at the point that the interpreter/instrumenter is actually operating I expect the code to be in an entirely different form.. 

issue: because typescript 3.7 is bringing nullish coelessence and optional chaining aswell as the fact undefined and null are already their own types in typescript correct. and if the pipe operator makes it into the langauge awell that will be the last nail in the coffin for maybe i have my own Maybe implementation we use it, but once nullish/optional chaining come in in 3.7 i will be starting to move away from it because its usefulness wont be worth the file size + added mental complexity to understand code 
solution: 

issue: Now you need to make a is-number package is-string package is-json-array package 
solution: 

issue:  [<-CODE->]  [<-CODE->] I actually found two workarounds, none of which are good: [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] Any others? 
solution: 

issue: I’m not sure I get what you mean about the lack of docs on1.( [<-LINK->] ) 
solution: And how do you guard against type/doc divergence, when using both. 

issue: They really aren't compatible  [<-CODE->]  [<-LINK->] Maybe I'm misunderstanding something but it seems like you're just using thewithSelectAPI incorrectly 
solution: 

issue: mikenolimits: which part i'd say that's pretty hard to type through inference alone because you can't infer what "ownProps" are meant to be, that and also that HOC pattern is essentially useless now with hooks because you can just pull directly from the store inside the component 
solution: 

issue: I've gotten really good at controlling TS' emit behaviour I'm not sure if I should be happy or sad It makes a lot of the type-level code I write look weird as !@#$  [<-LINK->] 
solution: 

issue: AnyhowStep: Is there a way to makePropertyIsModelBaseonly affect the key(s) passed toassertPopulatedFieldand not have it affect other properties? [<-LINK->] Does this make sense? [<-CODE->] 
solution: After the first narrowing,storestill has?modifier. And the types don't looktoougly. 

issue: problem solved then. 
solution: 

issue: That looks the same as what I have: [<-CODE->] Looks like we picked inversed paths to the solution, but I suspect they are functionally the same. 
solution: 

issue:  [<-LINK->] how to configure Visual Studio 2019 project  to use latest 3.7.2 lang. version features ? my  package.json is [<-CODE->] tsconfig.json [<-CODE->] all requirements mentioned [<-LINK->] are installed [<-CODE->] 
solution: 

issue: type alias could be useful there I think 
solution: I love Ryan's comment about the "stupid error" tooWe warned that this would be confusing but everyone said to add the feature anyway. 

issue: orta: dumb question, is the JS pane purposefully editable? I had never actually set it to JS mode 
solution: 

issue: Are TS playground links brittle in some way?  The new Playground is great but I keep seeing SO questions with links that don't work, like [<-LINK->] 
solution: 

issue: Some day, I hope to be able to have playground links in my documentation (for my query builder library) 
solution: 

issue: Wow, those strings are LZ-compressed and they still end up ginormous? I assumed it was some naive base64-like thing 
solution: Probably not, the whole point of compression is to remove redundancy. 

issue: it should, but it’s not monaco embeds it all into one that feature needs to be rebuilt in the playground 
solution: 

issue: I added an extra decoded check to the playground, better to be as accepting as possible orta/typescript-play@0689705 haha well - I did need to do another deploy once my v2 work has done 
solution: Now you just have to deal with triple-encoding. 

issue: jasonkuhrt:  [<-ISSUE->] we were umming and ahhing about basically doing what Jessidha says here: [<-LINK->] 
solution: 

issue: and that's what you get. getParam doesn't actually do anything, but I realize this is just an example. better to just get rid of it and use the type guard. eyelidlessness: you mean the secondxin(x: any): x is whatever?  I just saw that yesterday, I just used_xto silence it.  Not ideal. but that was a lame fake type predicate, it's hard to imaging writing a legit type predicate that doesn't use its argument. 
solution: martabrzeszczyk: you're looking at either conditional return type or overloads.  Overloads have the best end user experience, conditional return types are problematic.. 

issue: keithlayne: less painfull for who ? let me try the one you proposed @keithlayne the [<-CODE->] seems to work as expected what do you mean its not perfect ? 
solution: 

issue: In general, you shouldn't hijack a user's attempt at usingany, even if you can It works because of math. If X is a proper subset of Y, then there exists aTthat extends Y but not X. The reverse is also true. If they X and Y overlap but are not equal, then there exists aTis X and not in Y, and also the reverse The only way to satisfy that type is if X and Y are (extensionally) equal 
solution: Yeah I think the fact that it matches the logic is not actually tied to how it works.  I'd have to find that SO answer.  I may be wrong.. 

issue: i wish there was a way to defineRecord<string, string | undefined>where you can onlyassignstring 
solution: 

issue: I know, it's on my wishlist, too. Someone opened an issue about it yesterday, I think. 
solution: i think there are safe accesses (anything iterating over/using known keys) and all unsafe accesses should require a null/undefined check. 

issue: Take dat back  fatcerberus: I'm not sure if that's always true for more complicated types but I can't think of any examples at the moment =xI should sit down and experiment carefully (like you) 
solution: 

issue: that's nearly all i use it for 
solution: 

issue:  [<-CODE->] for [<-CODE->] 
solution: 

issue: I'm special, at least my mom says so 
solution: 

issue: That looks like a TS bug to me, just addingconst hooks = block.hooks;before the loop (not even using it in the loop!) makes it compile. 
solution: I was pretty fascinated when he explained how it happens. 

issue: Gitter is just so awesome isn’t it There’s a reason I just refresh the page constantly Their webserver must love it 
solution: 

issue: Is it possible to declaration merge intoglobalThis? I need to add a property to theglobalThistype (set by a third party library). Is there a way to make this work without introducing a type assertion functionisStringinto my codebase? [<-CODE->] Ah, I can inline the type assertion: [<-CODE->] 
solution: 

issue: is there a way to import all exported names*defined in a namespacensin another filefile.ts? something with the semantics of a putativeimport { ns.* } from "./File.ts"; talohana: that is the behavior i would have expected but it is not working for me at all if i do that i have to still use qualifiedFoo.aor else my setup can't find the name just to be clear my question is whether there is an import statement that will allow me to use the names in a namespace defined in another file unqualified. are you saying the answer is no? because however i do it i will need thefoo.qualifier? 
solution: jcalz: Yeah that's frustrating.  I totally get what he wants and even why he wants it to work that way, but the fact is it's working as designed.  It applies to the whole expression and would likely need some engineering changes to work only on the final part of an optional chain--or even a new operator. 

issue: Any ideas why typescript is saying updater is not callable: [<-CODE->] I can get it to work with the following, but I'm not sure if it's any good: [<-CODE->] 
solution: So the problem you have here I think is that your type guard, no matter what you do, can't narrowT.  You can sometimes narrow individual variables, but you can't narrow the type parameter itself.  It's generally not sound to do so. You've only proven thatupdateris a function, but that doesn't say anything aboutold. 

issue: Agree.  I make it a point to not touch baseDir/path unless absolutely necessary. not even that - what are the defaults?  What is the effective config for any particular tsconfig?  Needs to be a tool for that. I know the defaults are at least documented, but you get no info about defaults when you runtsc --help and tons of options are not listed when you run that I guess there'stsc --allbut that's a pretty terrible flag 
solution: 

issue:  [<-CODE->] Thanks! Is this because the enum values are of typenumberso any numeric assignment would work? evenmyFlags: Flags = 3is fine 
solution: 

issue: talohana: yeah numeric enums can actually be assigned any number at all.  They’re not really that typesafe.  String enums are better in that regard Similar to enums in C/C++ actually If it has only number values then it’s secretly just a type alias for number 
solution: Also, going back to fp-ts' implementation of HKTs. And it was a 17 page paper and my eyes just glazed over and I didn't glean anything helpful.. 

issue: Hi guys, do you know how to type an interface that can have two properties of any type, but both must be the same type? I've tried: [<-CODE->] but this actually doesn't force both properties to have the same type T.. 
solution: 

issue: kuchta: What you have should work, but you shouldn't put= any. kuchta: Works for me: [<-CODE->] 
solution: 

issue: You can't stop someone from doingIArgumentDescription<FooObject>.  But that shouldn't matter - if you have anIArgumentDescription<number>then you can only use it for numbers TypeScript can't infer type parameters for interfaces Only functions 
solution: 

issue: I'm seeing different results in the playground and locally has anyone else seen this?  [<-LINK->] locallyfirstisnumber in 3.6.3 
solution: the playground needs to start using ones shipped with the language version, which I gather is tricky in monaco ATM. 

issue: what's up with the union?  Does that throw an error for being a non-scalar? why notSELECT 0/0if you just want an error? 
solution: 

issue: Handy.  PG throws a 'division by zero' error.  I was trying to think of something with like an invalid cast from a string error message, but I gave up after like 5 seconds. 
solution: 

issue: well, it's common for forms to ask it that way vs. move-in date 
solution: tomenden: But anyway to get back to the point, sinceBuffer(in the node .d.ts) is global, you can't import it separately like you can with module exports.  You either pull in the whole node declarations--which I know you don't want to do, and I don't blame you--or you just copy and paste it over. 

issue:  [<-CODE->] Actually , Shanon's is better (though you don't need the intersection in the condition)  [<-CODE->] 
solution: Any kind of Serialization is tricky to type generically. 

issue: Hey guys. Is there some way to use a type predicate to fix this error? Ideally, the type predicate's return type would be something likestring is a key ofpropsobject: [<-CODE->] Alright I'll consider the options. Because in reality, I'm not getting the keys withObject.keys. keyof typeofworks great! 
solution: 

issue: just got this fun errorThe type 'readonly [(request: Request) => { a: string; }]' is 'readonly' and cannot be assigned to the mutable type 'readonly []'. how isreadonly []a mutable type tho? it rightly can't be assigned, but the error seems incorrect i think it's my favorite TS error ever i want to frame it and put it on a wall i was just lettingreadonlyinfect everything after trying to solve something else withas constlol i think the entire approach of what i'm trying to do is just not going to work :( 
solution: 

issue: seems like an empty tuple vs array, otherwise I think it would be typednever[]. didn't even see that word, wow, that's pretty awesome.  I missed the only important word. Not the first time :P although as@fatcerberusis fond of saying, readonly arrays only defeat assignability by removing some stuff to make the types not match, so maybe TS can't really tell the difference?  My guess is that it's either a totally borked error message or somehow related to that. 
solution: 

issue: How can you reproduce that error?  Oh, I see: [<-CODE->] I probably never would have even looked up there, since the length is obviously the issue I only start reading upward if the stuff at the bottom confuses me But yeah, that's not the right error I'm confused; you saw that error as thebottom-mostmost specific error somewhere? 
solution: 

issue: Just write error-free code and you won't see that confusing error message 
solution: 

issue: true extends falsereally threw me for a loop, back then I questioned my sanity, too 
solution: Yes that's a thing, iftrue extends truewasn't the case then um... I would consider the type system very broken. 

issue: I don't know why but I find the fact that the issue was just named "true extends false" hilarious Like you were in such disbelief that that was all you could say about it.  "true extends false." Oh yeah, I remember that one.  The property simultaneously exists and doesn't exist, like Schrdinger's cat I'm concerned about Ander's comment about possibly producing a circularity error.  F-bounded types are a perfectly valid form of self-recursion, heck that's howthisworks under the hood even 
solution: 

issue: reggi: overloads because "T" cannot be inferred from no arguments wait acutally im not following all your cases work as you've commented ahh i see 
solution: 

issue: I think they were all supposed to pass Is this what you are looking for? [<-LINK->]  [<-CODE->] Sidenote: I strongly dislike generic arrow functions, they very nearly always force me to hack around specifying the generic when I need to. Yes, it infers it, but when I don't want it to infer it... 
solution: 

issue: Would fp-ts and its hacky HKTs with for binding generic functions? Work for* There are examples in the issue about the type system being Turing complete  [<-ISSUE->] ParticularlyPopFront Removes the first element from a tuple 
solution: Yeah that’s a known limitation - type aliases can’t reference themselves as a parameter to another type alias. You are actually reducing the type, which is... interesting. It seems like there ought to be a way but I'm missing it right now.. 

issue: ShanonJackson: get back to work 
solution: 

issue: He's at it again: [<-ISSUE->] 
solution: People who use....!grrr.... Yeah, that's different though.  This is using!to cast away nullity which is pretty much always a code smell. 

issue: I never read the spec But I'm surprised this is allowed  [<-ISSUE->] Optional chaining and the delete operator 
solution: 

issue: @ShanonJacksondon't have time to actually make it work with your implementation but here it is rough [<-CODE->] 
solution: 

issue: Seems like a ridiculous construct, to me =x But everything finds a use, the moment it's supported eyelidlessness: Do you have a repro showing it doesn't work? 
solution: 

issue: sure lemme put it back together  [<-LINK->]  [<-CODE->] WHY :(  [<-CODE->] ??? 
solution: 

issue: Hello, I'm trying to add an interface around Window and build a module with webpack. I add the Window type interface viatypeRootsin the webpack config. But when building I get an error Propertymy_propertydoes not exist on typeWindow Can anyone tell me what I'm doing wrong or better yet how to fix ^^ ? orta: I'm actually trying to help@tummetiwith this. I forgot to mention that he's trying to import an existing packaged module to a new project and then getting the error above. We just tried changing the interface defintion as suggested in that article but it didn't solve the problem. Looks like the source tree has thewindow.d.tsunderpackages. Then he has a seperate src path. If he copies thewindow.d.tsdefinition into hissrcpath then he doesn't get the error. But he wants to be able to justimport the moduleandhave the interface work 
solution: 

issue: so i'm becoming increasingly convinced i cant do this there is some obscure TS bug every time i try another thing and they all amount to... recursive types don't actually work like you can recurse but you can't use it as a type param, you can't spread it, you can reference it as an object property but you can't do that recursively or it becomes "potentially infinite" i know someone said it's turing complete so you can do anything, but then immediately said "except..." either i'm not clever enough with the type system, or this is not supported 
solution: 

issue: I can think of a bunch of cases where union to intersection makes sense, though Thanks to contravariant positions  [<-ISSUE->] jcalz: it's just funny, asking for Java output. It's not part of the design goals 
solution: 

issue: I'm getting the following error after a fresh install of TS: TS2403 [subsequent variables must have same type] in a WebGL file, is there something I have to do?  [<-LINK->] 
solution: 

issue: That makes me wonder if I've hit the same thing but not noticed the correlation. 
solution: 

issue: eyelidlessness: this bug maybe? [<-ISSUE->] 
solution: 

issue: eyelidlessness: jsut got back from a sevitcal it works maybe its just 3.7.2  [<-LINK->] 
solution: ShanonJackson: it works until you actually try to use it as rest params in a fn. yeah i saw that. 

issue:  , can anyone help me type this or at least tell me some keywords I should be searching for? [<-CODE->] This results in a type error of [<-CODE->] 
solution: 

issue: fatcerberus: , thanks, not sure how I missed that one I've went with<K extends keyof State>. And I've found your explanation why this occurs and that makes sense to me. Though I can't wrap my head around why it's okay using generics 
solution: 

issue: It does, a union is not exclusive 
solution: Because if it is the first part of the union, thenfirstNamedoesn't exist. You probably want a predicate function: [<-LINK->]. I see. That can only be done at the cost of an extra function call?. 

issue: I haven't readallof the scrollback because Gitter doesn't have channels so I can't pick and choose what portion of the 100+ messages in here since last night are relevant to me. This conversation did seem to spring up out of nowhere though, looks like it started here?    [<-LINK->] 
solution: Since Discord has channels, the worst you'll get is someone suggesting you move a conversation to a more appropriate channel".. 

issue: yeah, turns it from 'index signature' to 'mapped type', so the error message was pretty good, but not that useful fatcerberus: good job...is it working totally how you want now? 
solution: 

issue: I'm still torn on whether tsc errors should be treated as warnings or errors in my build system, haha 
solution: 

issue: I get the same error: [<-LINK->] 
solution: Yes, get rid of the overloads.. You only need the one signature. 

issue: Oops, I expected those to be errors for some reason.  [<-LINK->] 
solution: yeah i fought so (as i writing more in C# that was my first instinct) but its not valid in TS. It is in 3.7+. 

issue:  [<-CODE->]  [<-CODE->] Is there some way to keep the protectedness of the properties?I'd really like to get this working: it will greatly increase the organizational potential of a code base. Yes, and runtime too. Using Proxy for runtime I'm pretty sure the closest you can get is the mixin pattern.Yeah, I'm already using that, but it's a total messy boilerplatey ugly error-prone cauldron of hot spaghetti soup. I mean, it is simple in plain JS, but super absurd in TS. Like the level of complexity added from TS, just for typing, is crazy compared to how simple they are in plain JS. How long will I have to wait for TypeScript to allow mapped types to support protected? Looks like the only way to pass protectedness is withextends. Hmmm.... No, can't think of a hack. Darn. Well, works perfectly in plain JS. 
solution: 

issue: Yay, I finally arrived in the final frontier! The thing is, the underlying implementation that is usingProxyinside mymultiplefunction doesn't need to be typed, I can cast everything toanyinside the implementation, but what I can't get to work right is the parameter/return types of the function (the inside, with the Proxy, is a black box to the end user). 
solution: 

issue: You could also, instead of iterate on the keys initially, return a Proxy right when desired ("membrane pattern") So it'll work without knowing the keys in advance, for any future key 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: yeah if you look at the JS produced it probably gives a clue about the problem but maybe not to a MS competitor?  Don't hold your breath. also, how dare you!?!  Gitter is awesome. 
solution: 

issue: I need to poke at this later, wondering if I can suss out whether it’s just a design limitation or if the issue is more fundamental at the theoretical level Can’t do so right now as I’m at work Hey Gitter actually fixed a bug.  Will wonders never cease It no longer opens the side menu when scrolling horizontally in a code block 
solution: 

issue: It seems to happen consistently while I'm in my Gitter tab.  [<-LINK->] ^ And this is what it looks like on a tab where it doesn't crash. Yeah. If you copy/paste that code while you are here on Gitter, into your devtools, in chrome, does it crash? 
solution: like if you have two proxies each one updating it on change. 

issue: Wanna make Chrome tabs crash? Try running this in devtools of one tab, and it will cause that tab (and possibly others) to crash: [<-CODE->] go go go I ran that, and crashed my current tab, and multiple extensions Ah, that could be! 
solution: 

issue: I'm trying to check an array of functions, and see if the input and return types correspond correctly. [<-CODE->] StackOverflowPlayground Is this even possible? I created a more specific typing for a pipe / compose / flow function (using lodash) I haven't seen anything like this in a lib. Thoughts? Posted on [<-LINK->] . 
solution: 

issue: There was an issue about making tsconfig understand workspaces 
solution: So, the company I'm with is trying really hard to start a project using event sourcing.The idea is that they want to avoid relational databases and have all the logic "in code".Kind of worrying.... 

issue: orta: Thank you, will do!Can I please trouble you to trigger [<-ISSUE->] as well? 
solution: 

issue: fatcerberus: I broke tsc again Originally, [<-CODE->] Then, publish a package with that.Use the package downstream, it works fine. Change it to, [<-CODE->] Publish. Use it downstream  [<-LINK->] 
solution: 

issue: Maybe some Proxy magic going on 
solution: Whenever I encounter a bug I always want to know why.  I don't like to make fixes without understanding the cause because that just leads to a lot of fragile hacks. 

issue: there were some solutions to that yesterday I think? but that probably gives you a union and you just need UnionToIntersection like you were talking about before, when key == value it's not an issue tryas conston those args probably won't work :( 
solution: you need them inferred as tuples of literals.  I think there are some other tricks, but I don't remember.. 

issue:  [<-CODE->]  [<-CODE->] 
solution: 

issue: Is there a tool to programatically update tsconfig file and preserve commnets? 
solution: You can make it infer a tuple but you can't prevent widening of literals afaict. 

issue: I feel like it was a missed opportunity to not link to [<-ISSUE->] as a referenced issue. Or maybe Duplicate of [<-ISSUE->] . 
solution: 

issue: Re [<-ISSUE->] : [<-LINK->] 
solution: 

issue: bab2683: No, this is just a simplified test case to show that the compiler thinksthis.bananais possibly undefined in that location. I'm not calling a function there, just defining one. 
solution: 

issue: I don't think it's smart enough to catch the readonly thing.  But I would guess it has to do with CFA rules about not narrowing for deferred stuff, because it can't guarantee that banana hasn't changed by the time that function is actually called. also, I don't think we have the same definition of "variadic" a lot of things are possible, don't give up hope but I'm not sure exactly what you're trying to achieve (and I don't have time to look into it right now).  Besides, everyone else here is smart and can probably help you. 
solution: 

issue: Hi everyone,I think this is a real brainer:  [<-LINK->] Can anyone figure out why I'm getting this error?  [<-CODE->] setUrlState should be able to accept QueryObj, shouldn't it? Here is the thing I don't understand  [<-LINK->] Could it be a bug? type TP should be equal to type QueryObj The thing you are missing in your demo is that Thing is also a Partial 
solution: Which makes sense - look what we passed in.  But by the same reasoning the call tobard(y)should be an error too. 

issue: your buffers are little-endian  [<-CODE->] looks good in node at least? where are you running that? 
solution: I assumedbyteOffsetwas0. I don't think it's unreasonable to assume a newly created buffer'sbyteOffsetis zero, though =(. 

issue: BufferpredatesUint8Array- they later made it a subclass, so I guess they needed some slack for metadata or something 
solution: 

issue: fatcerberus: , It's definitely inconsistent.  [<-LINK->] Thanks a lot that was very helpful! 
solution: 

issue: Hi all! I'm having an issue with module resolution (I think).  I'm getting an error compiling withtsc,error TS2307: Cannot find module 'emotion'..emotionis installed undernode_modules, with atypesfieldinpackage.json, pointing toindex.d.ts, which is where it's expected to be.  I'm a little confused why I'm getting this error. I tried passing--traceResolutiontotscand it's telling meResolution for module 'emotion' was found in cache from location ....  Is there a way to tell the compiler not to use cached locations? 
solution: 

issue: keithlayne: I was hopeing this would work but it doesn't :( [<-CODE->] 
solution: 

issue: This seems to work: [<-CODE->] 
solution: 

issue: you gotta stomp on those stray commas, they reproduce like rabbits 
solution: The return type breaks though ^. 

issue:  [<-CODE->] Or just add a constructor toRoot 
solution: Wouldn’t that work as-is ifnamewas a regular field in the base class?. By declaring it as a method it goes to the prototype. 

issue: but also don't worry about being that 'DRY' not all duplication is your enemy 
solution: stolen from here which explained typescript better for me [<-LINK->]. even though its a scala article. 

issue: WORKING AS INTENDED 
solution: AnyhowStep:  [<-LINK->] in the comments talk about setting the PK (and resetting the sequence). I know, I agree in principle with the current behavior. 

issue: trusktr: It’s not considered a bug. [<-LINK->] 
solution: 

issue: Alternatively ifkeyof Twas opaque, then you wouldn’t have the set theory baggage getting in the way But I don’t see how that could work I think that’s howfor...inworks.  It’s nominallystringbut allows indexing as a special case I think 
solution: Yes it is.  But it was worth it to get seamless TS support in my build system (without the need for separatetscinvocation—which ismorepainful). 

issue: I am trying to get an exhaustive switch working in TypeScript. I thought that it was once possible, but this code compiles where I thought it shouldn't... [<-LINK->] Gerrit0: Hm, if I do that, then I getArgument of type 'string' is not assignable to parameter of type 'never'even if I have handled all cases. If I pass(type as never)it works, but then it still compiles even when not all cases are handled 
solution: 

issue: Ideally I'd like Request.body to beunknownrather thanany, and Request.params to be{[id: string]: string | undefined} So many SO posts about how to do it, seemed to work for people but not me I would think you'd be able to refine body from any to unknown 
solution: 

issue:  [<-CODE->] Maybe.  I also didn't test.  :) Actually, I think@ShanonJacksonwas right. [<-CODE->] 
solution: keithlayne: that one did it. Type '"SINGLE"' is not assignable to type 'C'.  '"SINGLE"' is assignable to the constraint of type 'C', but 'C' could be instantiated with a different subtype of constraint '"SINGLE" | "SPREAD"'.. 

issue: how can I create a type that requires property "name", but all other keys are optional? Required<{ name: string }> & Partial<any> seems wrong 
solution: 

issue: I hate that name lol. 
solution: 

issue: How can I avoid this error? [<-CODE->] 
solution: 

issue: I have a monorepo setup with a few folders:api,auth, andcontracts.contractscontain a few functions that can be used by, for example,apito grab data from theauthmicroservice. But whenever I try to import that function:import {auth} from '@contracts/auth'I get the following error:TS2307: Cannot find module '@contracts/auth.proto'What is happening here? 
solution: 

issue: Thanks for this particular solution, but that's not the solution I was asking for. 
solution: yeah I think you have a config issue, probably show the path mapping section and someone can help you.. probably have to config both tsconfig and webpack to match?. 

issue: That’s not very useful of an error message 
solution: 

issue: Even this does not work:  [<-CODE->] 
solution: reggi: you didn't give it a type.  It defaulted to unknown.. 

issue:  Pull requests that have a failing status can’t be merged on a phone I never knew of this "feature" before ShanonJackson: you lose run time validation/data mapping, since there's no reflection Can't get table columns, types, candidate keys, etc. from an interface that gets erased Also notice you have to specify 'key1', 'key2' every time. 
solution: I don't think you can merge enums but I may be wrong. Never tried it. 

issue: I once saw a microwave with a toaster built in. Like the downfall of all relational ORMs - trying to support them all is doing too much. okay, so it's a pretty terrible analogy, but even supporting all the different versions of a single db is maybe intractible when you write it like that is it actually a "method" vs a function property?  Is there a difference? 
solution: 

issue: fatcerberus: It forgets thattableAliasis a valid property ofmapper After the narrowing 
solution: 

issue:  [<-CODE->]  [<-CODE->] Playground 
solution: 

issue: Is this crazy enough to work, it looks crazy enough to work... [<-CODE->] 
solution: 

issue: 55    54    53    52    51    5045    44    43    42    41    4035    34    33    32    31    3025    24    23    22    21    2015    14    13    12    11    10 I want this output by just using one for loop include <iostream>using namespace std;int main() {    int i,j,temp;    for(i=5;i>0;i--){        for(j=5;j>=0;j--){            cout<<i<<j;            cout<<"\t";        }        cout<<"\n";    }} 
solution: 

issue:  [<-CODE->]  [<-CODE->] The type error is totally hard to understand though: [<-CODE->] 
solution: 

issue: Is there some obvious reason I'm missing for this? [<-CODE->] 
solution: It should technically behave like a never type. 

issue: it's not somehow proxyingcountis it? 
solution: If I have infinite recursion on that line, then if I place a pause break there, it should pause on there many times until eventually I hit the limit.... but no! It gets to that line, then when I hit play, I get the infinite recursion / max call stack error, which indicates it is infinitely recursing in the native code I think, not in my code.. 

issue: i've been using anEqualstype in tests to prevent regressions in certain types... i would also like to test error scenarios, without actually causing compilation errors. is there a way to do that? 
solution: 

issue: keithlayne: I believe that could happen, but if it were the case, then I'd be able to step through those calls, but I can't. The control goes into the nativeReflect.hascall and doesn't come back out, it seems. No idea what it's doing in there. 
solution: yikes. i wouldn't expect that. 

issue: include <everything> Done. No more work to do!!!!! 
solution: 

issue: can't be bothered figuring this one out if someone knows how to do it already 
solution: 

issue:  [<-CODE->] Is there any way I can avoid declaring overloads? currently I have declared till 10 variables.The above function takes chain of functions and executes them. it does work here is the library : [<-LINK->] , this experimental library is to write linq style code with generator functions ShanonJackson: - looked at Ramda pipe ( [<-LINK->] ), they also provided overloads 
solution: 

issue: @enisdenjo Your tuple changes type when there's 2 items in it.Change the first to [<-CODE->] and you can see it's the same as the rest. enisdenjo:  [<-LINK->] 2 main changes: [<-CODE->]  [<-CODE->] @enisdenjo Actually that still doesn't work. [<-CODE->] So desperately want overloads to work this way. Anyone know of a way to get similar syntax? [<-CODE->] 
solution: 

issue: talohana: not sure exactly what you're trying to do but there are a bunch of problems there: [<-CODE->] 
solution: Gerrit that example looks like you're trolling tslib. 

issue: I was trying to discriminate unions on the length of an array, but that does not seem to work. Anybody got an idea how I could get that working? [<-LINK->] 
solution: 

issue: stoici guess, if the closure is executed sync (as is the case for me, i forgot the()) itcouldprobably do the right thing, but detecting that is is not easy or something stoicoh wait, if i execute the closure the compiler doesn't complain. ha. 
solution: wow, that must be new, I could have sworn the IIFE didn't work previously. 

issue: Here I have condition arguments: [<-CODE->] This works the second function argument  needs to be a string here. I am curious though. [<-CODE->] OK something funny aboutvoidI need to use the  argument type later, so I need it as a generic, but I can't assign void. Thoughts? [<-CODE->] Is this a bug in typescript or intentional? [<-LINK->] YEEEEEESSSSSS lifesaver Thanks@keithlayne, i made an attempt to use array and spread before and it wasn't working Anyone have any docs on the difference between=andextends 
solution: Be careful - there is no partial inference so if you specify only some of the type parameters and the rest have defaults, it won’t infer them - it’ll use the defaults. 

issue: what are you trying to do? why not makeCheck<T>return[]or[number]and thenreturn (...args: Check<T>) => a? or are you just trying to explorevoid? not sure why the inner function is generic. 
solution: 

issue: Yeah I feel like there have been a lot of proposals for HKT syntax but it's tough to make any of them really jive with existing syntax. fatcerberus: I expectUnionToIntersection<never>to benever.  It's easy to fix but I don't remember ever seeing anyone mention the issue with the implementation you see everywhere. It's actually kinda weird to me - the LHS of theextendsis parenthesized, so I assume that it's treated as not a bare type param and thereforeneverisn't short-circuited as usual, but inside the parens itistreated as a bare param and triggers distribution.  Hard to describe what I mean, hope that makes sense. But re U2I I assume people are passing arbitrary unions to it and you'd think it would be quite common for some wrapped type alias to end up asnever. That's super interesting but I think that output is basically a leaked implementation detail.  Result intuitively should benever.  I can't tell if you agree or not. Maybe we should ping jcalz and get his thoughts on the U2I thing.  His SO answer is probably (?) the most-used reference for that. 
solution: 

issue: Is there a good way to debug definition files? When I make a certain change to my definition file all the types it defines seem to vanish, but I don't get any output fromts-loaderto indicate why that might be and VS Code doesn't highlight any problems in the file 
solution: 

issue: What's that issue number again? 
solution: 

issue: I found another weird one: [<-CODE->]  [<-LINK->] ^ see? 
solution: It seems wrong to me that the type system lets you accesssuper.n...nisn't on the prototype. Yeah, there should be some sort of type error.. 

issue: I keep shaking my head at this mess:microsoft/TypeScript#33401 I just can't believe that TC39 would make such a problematic change. And that every engine is implementing it.  [<-ISSUE->] It's causing headaches everywhere. I'm so glad there's a new"useDefineForClassFields": falseoption, to preserve[[Set]]semantics. 
solution: 

issue:  [<-LINK->] No unread messages.  I can't actually get those to disappear without reloading, and it blocks the latest message. But...you have to be pretty motivated to do that when there are so many better things out there. But maybe there's one person who really can't switch...we can only hope. 
solution: 

issue: Hey guys, is it not possible to pass a rest operator as a function arg? I'm getting an error here: [<-LINK->] 
solution: 

issue: fatcerberus: ahhhh got it cool [<-LINK->] matrixbot: I've been doing that and I just have no where left to break it down.  I've verified that every piece of it works independently but when I put them together it falls apart.  I know that message I gave was vague as hell but I just really truly have no idea what's going on and the error message hasn't been of much help I've also gone and looked at other projects that have typescript and redux-saga working together (e.g. github.com/resir014/react-redux-typescript-example) and tried to reproduce their setup as much as possible but in the end since I've not found any redux-saga project that uses both typescript and babel I'm starting to conclude that it just doesn't work 
solution: 

issue: Thisalmostworks. [<-CODE->]  [<-LINK->] As it is anyone who usesdefineOpjust has to also use declaration merging to add the method, so not completely impossible. 
solution: AnyhowStep: NO REGERTS. 

issue: um...  [<-CODE->] 
solution: 

issue: Sure, send a PR 
solution: It's just [<-LINK->]. 

issue: I'm not sure how that works... you read value from database, you have to put it insomeformat in order to hand it back to the caller Oh, you meant "built in to SQL" not "built into JS" 
solution: 

issue: That decimal problem really annoys me 
solution: 

issue: Gerrit0: Thanks for the overload example earlier! Really cool! I am trying to have a class have the same keys as another class and restrict it so that it can't have any other keys. [<-CODE->] Womp yeah that's what I was thinking. 
solution: 

issue: Hey all, is there a reason that usingrequireto import a module rather than theimport { x } from 'x'syntax doesn't include type information. Unfortunately we need to use arequirethat's not on the top level because some global state needs to be set up. I haven't tried with dynamic imports, I'll give it a try. Still seems weird thatrequirewould resolve toany. There's probably something in my config doing that, or is it expected thatrequirewill always resolve a module with typeany? 
solution: 

issue: trusktr: the ordering thing is kinda an analog ofswitch.  You probably order your stuff correctly without even thinking about it. The problem is that the "right" ordering in some cases is not obvious or documented. 
solution: 

issue: I’m pragmatic about this though, I understand there are totally valid uses for it It’s just not the end-all be-all that lots of people think it is, and is often the completelywrongsolution 
solution: 

issue:  [<-CODE->]  [<-CODE->] 
solution: paarthTS has become a pleasantly expressive type system that can express a lot of functional stuff. Yeah under the covers it only works as long as you follow the contract but that's how literally every type system works so nothing new. I feel llike there's still a weird and seriouswallwhen trying to bridge functional shit and classes and makes it feel like they are two worlds. For example decorators being a class based thing. I get that decorators for functions would be essentially equivalent to wrapper functions and the reflection story hasn't been great, historically, but I think there's value in parity.. 

issue: keithlayne: I like Haskell from a theoretical POV.  I don’t think I want to write a Real Program(tm) in it Yeah I won’t give up my braces easily either, heh 
solution: 

issue: Anyone around with compiler API experience? I'm trying to get the same result from an object literal as I'd get with typeof myObj. The issue is something like { a: 3 } says a's value is NumericLiteral.I can write code to manually sort this out, but if anyone knows of a method that I'm missing, I'd be grateful. 
solution: 

issue: Do you recall an existing issue for the following? [<-CODE->] 
solution: 

issue: Hi everyoneWhy does [<-LINK->] compile with ES5 target and doesn't compile with ES2015/ES2016? 
solution: 

issue: Interesting, with ES5 TypeScript recognizes that it is an array and transpiles to afor (i = ...loop, but with ES6+ it uses an iterator instead and gets confused. Unrelated ^ the issue is that switching to the newer target causes a compiler error. Interestingly, it works if you don't have the outerBattlewrapper... 
solution: 

issue: Just seeing your response now@ortathanks I am trying to use the tsc api to extract type information about code. For example something simple: [<-CODE->]  [<-CODE->] Any tips? 
solution: 

issue: Hey! I'm struggling with optional and undefined types. Would love some advice. How can I make the following assignment work? [<-CODE->] 
solution: 

issue: you should provide the compiler trace@jonlambert anyway I think it's a that should not work not b 
solution: you could've copy pasted the message alone. 

issue: Typescript doesn’t make much distinction between “property set to undefined” and “prop doesn’t exist” for optional props There’s no real way to enforce that If you have a type with an optional prop you have to assume that someone might have handed you an explicit undefined, because the type system won’t enforce that it’s not there 
solution: 

issue: @tonisostrat @ShanonJacksonhe probably menas that you can't extract a single argument from a class and pass it to another class as it's bound to the the wrong this instance [<-CODE->] Usingthisas an instance of a named namespace (class) containing variables and functions (some props inherited from other namespaces) is convenient. We just need to use each programming paradigm for what it is useful for. It's easy to make inheritance messes. But it is also easy to mix pure functions in inflexible ways. 
solution: 

issue:  [<-CODE->] So, once you get passed those, there's no big issue. 
solution: 

issue: At the end of the day your data is still going to be typed in some specific way... So like just write out all the types The narrower your possible state is the easier it is to work with and the less bugs you are going to have 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] But those errors are not accurate; the methods are inherited and in plain JS there's no issue. I'm just not able to make the type system work in TypeScript.playground example I'm new to TS internals (haven't made a contribution yet). I'm not sure what wording to use, maybe I explained that issue with the wrong terminology. 
solution: 

issue: Yeah, I think that feels reasonable to me we’re down a few folks for the holidays, so it really might be a while before someone with some seniority gets around to giving a solid aye/any 
solution: 

issue: Is there really any benefit in using interface over type 
solution: 

issue: Yeah, you'll probably be using type aliases a lot.In one of my projects, I have, [<-CODE->] 
solution: 

issue: tsc and tsserver are different .js files And they don't import any shared code 
solution: 

issue: In this exampleactioninCreateDirectoryneeds to be a prop, can't be a method. How can I makeactiona method? [<-CODE->] 
solution: 

issue: I mean you didn't expect that to work did you? 
solution: 

issue: Explicit param asstringseemed like the obvious (?) problem hmmmm...."explicity" is kinda fun, I might keep that. yeah, but could sorta work, you'd just get a union of the import types but really, need a way to have exclusive upper bounds (don't know of a language with anything like that) or a way to say "a single literal" or both. that would be one thing you can probably force a type to actually be exclusively upper-bounded but I doubt that TS realizes that in the function body. 
solution: 

issue: awesome, thanks! I don't quite get it, but it sure seems to work.  Guess it's time to learn about Extract<> 
solution: 

issue: I'm not sure you can type that because there can't be anything to the right of the rest param 
solution: 

issue: Overloads and generics  are  not really friends. 
solution: huh. Is there any way to correctly and strictly type that sort of wrapper for apply? (target, method, ...args). 

issue: Jacob this is working as expected and infact how most people exploit union -> tuple functions are pretty much 100% typeable i dont think there's been a problem with function typigns iv'e seen in the last like 6 months that can't be solved a wrapper for apply so it wraps a function takes what that function takes? and return what that function returns? or it takesfandargscurried and applies args to f jbr: oh you gave a playground link i'll check there 
solution: 

issue: This issue is about not transpiling optional chaining away specifically when your target is to es2020 it’s very likely that would happen, for now it happens in ESNext but to answer the core question: it already supports it in 3.7 - [<-LINK->] 
solution: 

issue: looks like a type definition issue? it only seeunsafeExecutePromise 
solution: 

issue: Does anyone here perhaps have an example of usingmonaco-editor-corewithmonaco-typescript??I am trying to follow the advice here [<-LINK->] (my use-case is different, as I'm not interested in a new language, but rather in changing the implementation of typescript) and I've been struggling with it for days and cannot get it to work... Any help will be highly appreciated There is already an issue open for it - [<-ISSUE->] - but I was unable to find any way to make it work, or any examples in the wild I actually got it to work now!! nm :) 
solution: 

issue: aaronbeall: you don't want that you want discriminated unions 
solution: the whole reducer pattern is built around having unique action strings whether its redux or flux. 

issue: That screenshot test sounds nifty as fuck Always hated when shit would go out of alignment and not get spotted till days later 
solution: 

issue: Wait like 1+ years for nullish/opt chaining and the transpiled code is so huge that it makes it unusable great work TC39 team 
solution: 

issue: The thing about trampolines being unperformant in TS' case seems to just be something about downleveling generators  [<-LINK->] Not so much about tail calls 
solution: 

issue: (...args : [number]|[string, number]) => void Boom. Safe to call and implement I'm on mobile, so I can't give a better example but it's a nifty trick to have in your tool belt 
solution: 

issue: is there a way to ignore .spec.ts extensions via the cli? I want my tsconfig to work for all my files, I just don't want them in the output 
solution: 

issue: Hmm.  Another option is to have a separate tsconfig thatextendsthe main one, but excludes the stuff Then you run tsc on the one with the excludes While your main one is used by e.g. vscode 
solution: 

issue: eyelidlessness: In my experience spurious breakpoints is usually an issue with source maps not lining up with source code.  Not sure if that is your specific problem though. 
solution: 

issue: What are you actually trying to do? 
solution: 

issue: Loop over it during run time, or compile time? 
solution: 

issue: Hmm, so there's no way to actually loop over constructor argument types for my use case? 
solution: It is an exercise for the reader to assign something to it.  :)  I was just trying to give an example of how to get constructor argument types.. 

issue: It is just a tuple, so you can interact with it the same way you would interact with any other tuple. e.g.,[1, 'hello', true] usuallyyou don't loop over a tuple, but instead index into it. 
solution: 

issue: Hi! Any ideas on how to write a generic functiongetVal = <T, K extends keyof T>(obj: T, key: K)that allows only thosekeys whichT[K] extends number? numberonly used as an example, in reality, I need it to validate against some object type My attempts [<-LINK->] . Can't get pass theProperty 'find' does not exist on type 'T[K]'error 
solution: 

issue: keithlayne: it removes the error, but the result is alwaysunknown 
solution: 

issue: AnyhowStep: that whole$section reads like parody, especially once you get to the code example.  Scary that I don’t think there’s actually a bit of irony intended 
solution: so i got a migraine last night reading vscode logs, but i'm back to trying to figure out what's causing random debugger pauses. definitely not a consistent error condition. i have two cases where in logs the debugger pauses for reasondebugger_statementwhichdoes not exist, both immediately after a bunch of script parsing events. 

issue: @eyelidlessnessyep, you use a breakpoint in the sidebar of vscode when building vscodeI think he means that you build and debug vscode using vscode  [<-LINK->] 
solution: 

issue: I feel like I'm missing something obvious, isn't there some way to conditionally cause a compiler error with a user provided message showing up in the error? I'm looking for something that lets me do something likeT extends [] ? CompileError<'Msg'> : T Its unclear what you are actually doing...T extends T[]doesn't make sense to me. 
solution: 

issue: Depends on where you want it I do it a lot at function parameters foo(a); gives you an error squiggly ataifais an invalid type Invalid as computed by some crazy recursive conditional type  [<-LINK->] 
solution: 

issue: I have no idea I'm posting an issue now Source maps are great, but when there's a compiler bug like this... they work against you You're stepping through the code looking for the bug... and you'll never see it because yourownsource code is fine 
solution: 

issue: Not in the latest nightly 
solution: 

issue: Is it possible to get a private field withReflectsomehow? I might be missing something but I dont see a way. 
solution: 

issue: I don't like him =( 
solution: 

issue: Hey guys, one a bit random question I'm currently facing issue with typeguarding So I have something like this [<-CODE->] Can anyone tell me why it doesn't work in first case I receive error like [<-CODE->] It's like it doesn't calculate that typeguard ondataassigning, but instead does attribute by attribute 
solution: 

issue: I'm pretty sure you could do the JSON thing with recursive Interfaces, but not recursive types, in the past Also, that's just how the CFA works When you used old.type, old was not narrowed yet So, type is A|B And { type : A|B } is not assignable to { type : A }|{ type : B } 
solution: 

issue: sorry that should have a const in front  [<-CODE->] This is resulting in a  compiler error 
solution: 

issue: Sorry I fixed some issues with my question here: [<-LINK->] Thanks didn't know typescript supported currying ... feel dumb now too will read up on it AnyhowStep: I can't see currying documentation on the website 
solution: 

issue: Hi there, I wasn't having this issue before but changed my tsconfig and now I'm getting some odd typescript/expressjs errors. Can't find anything about this on the interwebs.Anytime I have a "res.status(500)" in my controller, I get a "error TS2349: This expression is not callable.Type 'Number' has no call signatures" My res variable is of type Response from Express.  [<-CODE->]  [<-CODE->] 
solution: 

issue: @/allHave any of you had this issue withnpm linked modules? [<-LINK->] 
solution: 

issue: Hi, I have an angular project and want to use both !raw-loader! and json loader for json files, but when trying to import bla from '!raw-loader!./bla.json' I'm getting a parse error, it seems its trying to simultaneously use both importers I can't seem to find any good documentation on the syntax for filenames/paths fordeclare module "*.json"(how can I make the json loader not trigger when using !raw-loader!?) 
solution: 

issue: @Ackos95 I don't really understand what's your use case. You can legally declare the type like this. What do you mean, it cannot be implemented? [<-CODE->] This looks very valid to me. Am I missing something? 
solution: 

issue: Hey ho! Can somebody tell me what's wrong with my typings here? The inference of the encoding prop and the acc.data doesn't work  [<-LINK->] What am I doing wrong? Ok, I figured I have to make the class generic. Someone pointed this out to me. 
solution: Because you can't tell if an object type is "fresh" or not using conditional types. 

issue: eyelidlessness: It seems to break all type inference forTand makes it inferSomeObj  [<-LINK->] It probably breaks it becauseTis not used directly during type inference 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] This may or may not be a mistake, but I don't want to annoy developers, [<-CODE->] 
solution: @keithlayneDoesinstanceofcan be used withgetTypeAtLocation?. And... This is exactly why I like to explain my thought process. 

issue: annoying but valuable IMO Bruce is just a massive troll 
solution: 

issue: @AnyhowStep is it possible for null checks to be disabled in certain circumstances? [<-CODE->]  [<-CODE->] In another file, I'm assigningit as undefined, but no compile-time error is being thrown. [<-CODE->] Unlike that bug I fixed yesterday where it does seem to correctly be checking for null/undefined.Sigh I'm so confused fatcerberus: I am getting null errors in another file of the same project 
solution: 

issue: Hello. can anyone please help me avoid this error? [<-CODE->]  [<-CODE->] And if I try this: [<-CODE->]  [<-CODE->] Unfortunately in my actual use case using a type union is not an option here. Ok. The solution I found myself is the following: [<-LINK->] 
solution: 

issue: how can I add a type parameter to this:const Header = React.memo<HeaderProps<T>>(Header_); can't figure out where to supply the T const Header = <T>React.memo...? i found this suggestion on github: [<-CODE->] 
solution: AnyhowStep: - yeah - I only got into this because of generics. Wanted to have a HOC that would accept a React.ComponentType, which can be generic. 

issue: That only blockstest And not other extra properties Liketest2,test3, etc. There isn't a non-hacky way to do it in the general case 
solution: I think I can actually make setting the variables to 'never' work for me, but yeah, unfortunate. I stumbled upon some people asking for "Exact<>" but doesn't look like that was ever pulled through.. 

issue: Hi guys, can some one help me please.I am trying to define module interface in different files.I have index.d.ts where I am defining [<-CODE->] I want to define additional interface props in different file, some plugins: [<-CODE->] but new definition visible only in current file, not in others. 
solution: 

issue:  [<-CODE->] But this means R can be anything that extends Request and as such I cannot do type narrowing using a discriminated union on req: [<-CODE->]  [<-CODE->]  [<-CODE->] But there has to be a better way right? How can I constrain R here properly? Note that I can't just remove the generic because the return type of the function is a dependent type Response<R> defined as follows: [<-CODE->] bottom lines are not visible so adding this comment 
solution: 

issue:  [<-CODE->] To further illustrate: [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: I just wrote a toy type system and wrote the equivalent of, [<-CODE->] And a few quick tests show that the toy type system seems to handle it It requires so many damn nodes, though 4 type parameters It made me realize that<A>() => /*snip*/is pretty special. Because you can't really do that with type aliases, interfaces, or classes (I think) 
solution: 

issue: I like the title of this SO question: [<-LINK->] Unfortunately it doesn't mean what it sounds like it means.  I was envisioning a company-wide "Bring Your Recursive Function to Work" day 
solution: 

issue: @fatcerberus thx. Ad yesterday's intersection talk: [<-CODE->] Why purposely omitted? They play part in the intersection type (i.e., the types of props are "intersected" themselves)  [<-CODE->]  [<-CODE->]  [<-CODE->] not really: [<-CODE->]  [<-LINK->] Yes, it can be worked around in many ways --- I was just interested in the reason. Can't find any info on it. Will prob try my luck on SO. 
solution: 

issue: strictNullChecksis a compiler option. when enabled, that will error i think the defaults are permissive primarily to support gradual typing scenarios (someone can correct me if i'm wrong about the motivation) 
solution: 

issue: Your editor is probably not usingstrictNullChecks. Whiletscis. So, it makes sense to me that your editor andtscdon't agree on what exactly an "error" is 
solution: 

issue:  [<-CODE->]  [<-CODE->] Any ideas? 
solution: 

issue: Is it possible for a function signature to also guarantee a property on the function exist s Because in JS functions are a type of object they can have properties I want my type annotation to ensure the function has a specific signature and it has a property  [<-CODE->] Sorry on my phone when I get back to laptop I can explain further Awesome thanks 
solution: 

issue: if existential type isunknown-on-readandnever-on-writeas@AnyhowStepsaid then yea not sure why the above doesn't apply tounknownas is, tho yes 
solution: const a : { x : string } = { x : "hi" }. 

issue: Say you have a function like [<-CODE->]  [<-CODE->] yeah generics aren't that great either because of unions.  I guess it can be overcome though. Trying to allow end users to augment something in a lib. One problem is that the arg in the real life original function is optional. 
solution: 

issue: If you didn't have that someone could pass in a key that doesn't go to a function 
solution: just trying to wrap my head around it. 

issue: Gerrit0: beat me to it, was going to post basically the same code he already did Not sure what's up with theFunctionKeystype though, I was going to try to just useParameters<> Oh I see, it filters it to only function props 
solution: Gerrit0:  [<-LINK->] works, but the autocomplete experience is horrible.. @Gerrit0 found a trick to get the params to expand: [<-CODE->] with names as well.. 

issue: Does the index signature work with getters? I have effectively this: [<-CODE->] Where I would expect to do something like this: [<-CODE->] 
solution: Yeah it just popped into my head that they have those internal tags but the only way I know of setting them is with a function type.. Been through some iterations, am [<-LINK->] .  Only thing to make it more ergonomic would be to get autocomplete on the augmented keys.. 

issue: ndcunningham: I don't think that's possible without giving some way for TS to know that the parameter is defaulted. Looking just at the types I can't tell that 
solution: 

issue: I'm fine with that really, it would be kinda weird to include them.  In this case probably isn't worth that added complexity. Ah, what I want is to error when you give the wrong payload for a known key.  That's why I ditched the overloads. 
solution: 

issue: tsc by default will emit even if there are errors no Not sure what that meant.  It will emit unless you tell it not to.  Type errors will have no effect, the types will just be stripped out.  A JS syntax error will screw up emit, but it will still do a best effort: [<-LINK->] 
solution: 

issue: cphoover: I am interested in hearing about this too. Can't help though, I use emacs. 
solution: 

issue: fatcerberus:  [<-LINK->]  [<-LINK->] dwelle: They use the notation{}\xfor describing{} & not { x : SomeExistentialType } 
solution: 

issue: Hello, I was wondering if there is a way to construct an object with a key given by generic paramSome smallish setup code: [<-CODE->] but now I would like to control the key in the returned objectinitial approach which doesn't work for me [<-CODE->]  [<-CODE->] 
solution: 

issue: Nope, that's not possible. TypeScript avoids type-dependent code generation as a rule If you can provide typescript information about the type of the key, then you can do it. But random numbers are runtime-only and cannot be narrowed more thannumber Err, I misread your code. Most of what I said above does not apply Yes! Hello! ksaveljev: You could force the issue via [<-CODE->] That's kinda odd behavior, here's a simplified example: [<-CODE->] yepninja: That's expected behavior, typescript doesn't check for excess properties generally, except when constructing an object literal { a: string, b: number }is assignable to{b: number}, so it succeeds when you passobj yepninja: You can bypass this problem by usingconstructor(args: { [P in keyof DefaultProps]: P extends keyof Props ? never : DefaultProps[P]})instead No, that wont actually work either, because you can't construct anever yepninja: This'll work  though:constructor(args: Omit<DefaultProps, keyof Props> & { [P in keyof Props]?: never; }) Beware that solution isn't perfect,super({ a: undefined, b: 123 })is not an error. 
solution: 

issue: I believe it's a bug, I've opened a few issues about it, myself Something about measuring variance incorrectly  [<-ISSUE->] Maybe this  [<-ISSUE->] Maybe this 
solution: 

issue: Hi, i'm currently converting a nodejs javascript lib to typescript and I 'm nearly complete except a show stopping issue where the 'Node' type which should just be universally available (as its part of the dom), appears to be undefined when I go to run the tests with mocha. The compilation completes successfully, but the error I see is: 'ReferenceError: Node is not defined'. I am using "lib:" ['es5', 'es2015', 'es6', 'dom'] in my tsconfig. Thanks. Yeah I do, but I havent pushed the changes yet. I suppose I could push my feature branch ... (... just a sec) (having problems checking in due to test not passing) Gerrit0: its available at [<-LINK->] cheers@Gerrit0 
solution: 

issue: is there a reason the typescript playground doesn't auto redirect to https? i didn't think this repro would be so simple. what the heck is going on here? [<-LINK->] how can a subclass have no overlap with a generic of its parent class?? this looks like the same thing [<-ISSUE->] but like... i can't see how this is "working as intended" it's possible fortto besubclassInstance, it will sometimes return true and it's useful to check for a sentinel value. i don't understand why this would be the expected behavior 
solution: 

issue:  [<-ISSUE->] 
solution: Last time I checked Santa Claus wasn't a religious symbol - it's like, the most secular aspect of Christmas there is. Is that the first time Gerrit has ridden the troll-eybus?. 

issue: How do you implementtype KeysWithType<T, U> = ...which returns the keys of T that have values in U? I triedkeyof T extends U ? keyof T : neverbut that seems to get all the keys. Just can't figure this out. 
solution: 

issue:  [<-CODE->] I think.  
solution: 

issue: Yeah so the big caveat about experience with other statically typed languages is that TS's type system is probably different in ways that you might not expect. 
solution: 

issue: Personally I see structural typing as “necessary evil” - it wouldn’t be my first choice and I‘ll always view it as the price we pay for being explicitly built on top of JS Nominal typing and idiomatic JS wouldn’t really mix IMO of course I don’t really have any evidence to prove that, it’s just my gut feeling Today I realized async IIFEs can be used in lieu ofPromise.tryand that I'm probably stupid for not realizing this sooner: [<-CODE->] 
solution: 

issue: Why is this trowing an error? [<-CODE->] 
solution: 

issue: I believe I should be able to use BigInt now in TypeScript...but changing some code base to use and I get"Cannot find name 'BigInt'. (2304)"any thought on why I am getting this error?  [<-CODE->] I also used the code snippet listed in the documentation about BigInt, but got the same errors [<-LINK->] i am using version 3.7.2 
solution: 

issue: Yeah you start down the path to checked exceptions with that kind of thing.  They have mixed reviews :P It seems to be pretty difficult to statically analyze that in some languages.  Like I figured@eyelidlessness's idea for the compiler API might be NP-complete. They're too easy to dodge. I think you can't be sure without actually executing basically. Just catch whatever the top-level exception class is and throw it away.  Just handled all types of exceptions. 
solution: 

issue: Add this to your documentation: "do not throw" 
solution: 

issue: I just let it bubble up It'll bubble up to some userland code again, anyway 
solution: i really feel like it's being misunderstood what i'm going for... so to clarify... i want to identify explicitly thrown instances of a specific error class (and its subclasses) to autogenerate documentation (swagger in this case; these errors trigger HTTP error responses). 

issue: ok stripe thanks i just told you im a fucking individual i find their support absolute garbage tier i don't know if thats just me i love the instant chat response times etc but the information they've given me is just wrong and/or just links to the documentation 
solution: 

issue: what's that signature supposed to mean lukka: my TS might be rusty and weak but I think that you're trying to assign a concrete value to a type parameter You're not merely saying that the function is returning a string, llok at what you wrote you wrote that the function will return T and your implementation does not simply return agenericstring, you are actually constraining that T to be only "hello", thus the first line says: Type '"hello"' is not assignable to type 'T'. The problem isn't that hello isn't a string, the problem is that you made something that was meant to be generic exactly T. You said you'd return a generic T, but you aren't you're actually returning only "hello", thus this generic does not make any sense. Is it understandable@lukka? but 'T' could be instantiated with a different subtype of constraint 'string'. that means, (the whole line): while 'hello' makes being a string constraint okay, 'hello' itself cannot be T, because T has to satisfy the properties of all the strings, not just "hello", it has to begeneric, not a concrete type 
solution: You can make it return the same type as T but you cannot make it return a value derived from what T is. 

issue: ericblade: So if I try to reconstruct what you've got I end up here: [<-CODE->] which seems to compile. If I try to add ArrayConstructor to the mix...  [<-LINK->] the from will then error due to incompatible signatures, but the constructor is still operating. Would that be a viable option for you? liondancer: {handleSubmit: (formData: UserInfo) => any, handleChanges: (formData: UserInfo) => any}replacingUserInfow/ your type. In a pinch{handleSubmit: Function, ...}should also work but isn't as safe. 
solution: 

issue: You can't really 
solution: 

issue: Hey, guys! I'm having some problems using Array.includes() method. They say I should set compiler options ( "target": "es2016" and "lib": ["es2016.array.include", "dom"],). But it didn't help. Can anybody advise? Probably I need to download these libraries (like npm i, you know...). looks like its all about compiler options. It shows an error in IDE "property includes does not exist in type of number[] 
solution: 

issue: I'm trying to write a generic function wrapper but running into issues. Could someone help me?https://www.typescriptlang.org/play/index.html#code/MYewdgzgLgBAFgQzAEwDYFMBOMC8MAUyCUCAXDAN4xkzSYCWYA5gDQwBG5djTMAvgEpcAPkoxQkEBgB0qEE0LEE0hGyIlp7IXwDcAKD0ToMALb1kadAHcEmdLhgAeABLD8iFBkzlFJcs6EcUQA3EHNA0Qo9GBjxcGMwa2ckS2w8XxoAeTMoFzYAcgR84QjKaNiKj1T8Kmk69VVqckKABxaMfP4BfQq+cpi7KABXTDAYRKtkzyx9PsN42Amp1IczCwwbO3cUr269JZ2sGo5m9hAAT07BHSA Thanks for responding! I don't fully follow your explanation, could you elaborate? On the surface, this seems really similar to how React HOCs work, passing props to a child component. What am I doing different? 
solution: You are trying to describe a functionHwhich takes an argument with a propertyawhich must be astring, but because the typeHis generic, all you can assume within the function body is thatais a string. You might try to create a middleware function whereacan't be'hello', but can only be'1' | '2', so TypeScript doesn't allow it. 

issue: Tried to play with branded types for type-safety  [<-CODE->] Then, this happens lol keithlayne: Another thing where TS and intuitions about set theory don't really apply [<-LINK->] 
solution: 

issue: That's casting it, hiding the problem not solving it 
solution: I found the culprit, I think. Not yet sure why it behaves that way -. monfera_twitter: -I extracted the index type expression and handled the specialnevercase - [<-CODE->]. 

issue: You know what would be neat? Compiling to TS to JS, and having the types preserved in the output in the form of JSDoc comments. Is this possible? It'd make inspecting library code (f.e. in VS Code) more pleasant, in cases when we're doing that. Sometimes I open up files innode_modulesto quickly test small changes. Maybe the.d.tsfiles would be enough, but those type only the external interfaces, not internal code like JSDoc can. 
solution: 

issue: I need to import a class and re-export it. Is [<-CODE->]  [<-CODE->] 
solution: If you don't needTranslatorin that file, you could just doexport { Translator } from './lib/translator'. 

issue: Gerrit0: -tx Gerrit "If wishes were horses [...]" [<-CODE->] Maybe not that much horrible... [<-CODE->] UnionLength<{ a: 1 } | { b: 2 } | { a: 1, b: 2 }>=>3 UnionLength<{ a?: 1, b?: 2 }>=>1 When they are distributed inU extends any, the loop actually happens how many times ? That's it 
solution: 

issue: How does structural typing in TS tie into prototypal inheritance ?Why doesn't this cause a compile error: [<-CODE->] Playground Link Why wouldn't it say trying to assign any to blah? 
solution: 

issue: Takes 11 seconds for me with 16k lines Just my code 
solution: this mean that by that time I will reach 10k lines, compilation would take half a minute *(. 

issue: Is the error message that important? Trying to callundefinedwill also throw... 
solution: I'd rather not make the experience worse for non-TypeScript users if at all possible. I miss having nodiscard when working with TS.. 

issue: dstaley: you could use a transformer to emit a method that throws the error wheneverabstractis found in the ast. I've written a few custom transformers before - I could look into it further for you if you'd like otherwise, you can use aninterface& then implement via a class. That'll also mean you don't have a hard runtime requirement 
solution: 

issue: Yeah that's what I'd expect given the error, but the question is why :) 
solution: And I can't see how my quasis type would factor into it - I can see how it could in some cases, but not this one given you're just testing against type. 

issue: i am using"typescript": "^3.7.4"but i cant use[]?. 
solution: 

issue: so all this time i've been thinking negating type guards doesn't narrow, but it turns out it's just particular about how you negate i'm trying to get a playground link that demonstrates what i'm seeing, but i keep getting 404s on the link :( i've had this happen when i mistakenly hit cmd-L to focus the location bar, but it doesn't seem to want to let me do anything to get a working URL now here we go [<-LINK->] why would!behave differently than=== false? i don't my team's coding style disallows!operators (for better and worse) so i've just thought this whole time you can't negate a type guard then this morning i thought to myself, "boy that seems like a weird oversight, i wonder if!does what i'd expect" and it turns out it does 
solution: 

issue: It's not an oversight 
solution: 

issue: that seems like an implementation detail. like they chose syntactic narrowing for something that in reality is semantic well like i said, i've come to appreciate the explicitness (and kind of resent the insinuation that i'm not sane for that) 
solution: 

issue: Seems like I've done it 5 times \s+else.+?\n\s+if Did a search for that regex Another "stylistic" thing, [<-ISSUE->] 
solution: 

issue: AnyhowStep: @keithlayneis correct that I don't use explicit else, and thus not had that problem :) ShanonJackson: happy new year :) 
solution: 

issue: Happy New Year, TypeScript channel AnyhowStep: w.r.t.x || y- all I have to say about that is, thank goodness that nullish coalescing is a thing now There have been a few times when I wished this was a thing though: [<-ISSUE->] Type '2020' is not assignable to type '2019'.hmm... maybe it’stoostrongly typed. 
solution: 

issue: devbinod: Happy new yearI had created  REST API using nodeJs with typescript, MongoDB and express. I am requesting, Please review my code and want suggestion from you guys. Here is a [<-LINK->] link. Happy new yearI had created REST API using nodeJs with typescript, MongoDB and express. I am requesting, Please review my code and want suggestion from you guys. Here is a [<-LINK->] link. 
solution: 

issue: Why would you do that when you can justimport * 
solution: No, no, if everyone else is cool with that thing I don’t like then it’syourproblem :P. Not as interesting as you may expect, but try that in any of the node “VMs” and it’ll take down the interpreter anyway :P. That’s just to make it resemble the classic bash fork bomb.. 

issue: …yeah. I mean, I could just concatenate along the way. It’s possible that’s more efficient nowadays. But the input buffer is bounded and small. Like, 16 entries. The LUT’s going to be faster then that template string + slice, I…think. I guess I should go profile these. Profiling these is actually going to suck a bit since I need to make sure my tests aren’t so synthetic that they get JIT influenced. 
solution: 

issue:  [<-CODE->] Sometimes it'd be useful to specify one of the type parameters while letting the other unspecified (inferred from constraints etc.). Is there a way? 
solution: 

issue: fatcerberus: Yup, I know, I just figured join was still fast as well, and it’s a Python habit. keithlayne: Happy new year! I can’t hang around here much any more because work has me too busy. 
solution: 

issue: const createAction<P = undefined>(type: string, payload: P = undefined) => ({ type, payload })TS will not let me do it and github didn't help here. is there no way to say "payload is undefined if no 2nd parameter is provided, otherwise it gets that type?" 
solution: no, then the response haspayloadalways optional (basicallyP | undefined) even when it got provided. Ibelievefunction overloading does not allow a different parameter count. at least I am getting the error "This overload signature is not compatible with its implementation signature.". 

issue: karanlyons: I used to think I wanted native nested selectors in CSS, then I found out how specificity worked.  In almost no case do you want your selectors to be that specific It actually means “this overrides everything” That’s understandable 
solution: DanielNetzer: you seem to want higher kinded types,T<Arg1, Arg2>. keithlayne: One thing I've learned with CSS is that you want to take advantage of the "cascading" part as much as possible, which usually means using the most general selector possible.  Overly specific selectors like you get by nesting them work against that. 

issue: I found another bug but gotta' find time for a minimal repro interface Foo extends Blah<Foo> {}gave me a compile error.But this worked, [<-CODE->] And the error message was absurd It said thatFoocould not extendBlah<Foo> & SomeIrrelevantType But neitherBlahnorFooreferencedSomeIrrelevantType Probably some type cache thing fucking up 
solution: 

issue: Doesn't always drop info But you need to write it in a certain syntax  [<-CODE->] IthinkI can replace thosePick<>with TS'Omit<>and it should still work fine 
solution: (i use that extensively since you showed it to me). 

issue: What is going on here :- [<-CODE->]  [<-CODE->] yeah ! 
solution:  [<-LINK->]. cool. 

issue:  [<-CODE->]  [<-CODE->] :D 
solution: bmchx_gitlab: -That's the rule I've come follow. 

issue: AnyhowStep: the only time the strict check for null/undefined matters is document.all.  That said I would probably write===anyway just to be explicit.  Not everyone has the loose equality rules memorized and even I sometimes forget that null == undefined Now that I use typescript though it’s rare for me to have something typed such that null and undefined are both valid values 
solution: 

issue: TypeDoc doesn't support that yet, but it's TypeDoc's problem, not yours. There's at least one open issue about it I don't understand what's wrong... Seems to work correctly. [<-LINK->] 
solution: 

issue: outed yourself for using windows/linux right there I tried the vscode-in-docker thing today for the first time on this 3-month-old mac.  It sucks.  Have a linux box on my desk, maybe I should use that. I'm at like 80% CPU and everything sucks.  I suck.  Suck. garden hose 
solution: 

issue: On generics discovery: I find myself writing  (well... sometimes mashing up ideas and workarounds  from SO, obscure gh convos on long-time open tickets  etc ...  stuff  like this: [<-CODE->] I also got fantastic help from several of you, again, for generic, domain-independent utilities. [<-CODE->]  [<-CODE->]  [<-CODE->] Only loosely related (as  in my current  stage of TS learning  I couldn't  just search based on type signature): is  there a https://hoogle.haskell.org/ for TS? A quick search turned  up this  defunct initiative but not much else Also,  why  doesn'ttype EmptyArray = Array<unknown>;work?  :thinking: I'm concerned aboutany 
solution: 

issue: this probably comes up every second day but I can't find anything on Google for how to use enums as indexes? [<-LINK->] key in LeaderType works on it's own but when I introduce more indexes I get:A computed property name must be of type 'string', 'number', 'symbol', or 'any'. 
solution: You can't safely type object.assign unless you have exact types for the second type param onward, or you have negative property types. TS doesn't have both. 

issue: Curious if someone can help me understand some typings that mimic a promise? [<-LINK->] Trying to get chainable promises typed correctly. I'm not sure why the following  is needed forChainablePromiseLiketo work: [<-CODE->] 
solution: 

issue: collincusce: that's because it replaces the"in module names with_- the typedoc-plugin-external-module-name lets you specify the module name & thereby avoid this issue. 
solution: 

issue: this code strange as hell what should function AorB exactly do? Losses: why not justreturn x==='a' : <blah> ? <blahblah> 
solution: 

issue: I've added the "experimentalOptionalChaining" : true config to my tsconfig.json Yet I'm still getting [<-CODE->] versions [<-CODE->] Any suggestions? wait I added the babel plugin and I think it might be working 
solution: 

issue:  [<-CODE->] I basically want to do a [<-CODE->]  [<-CODE->] this is what I have so far, but it's polluted with allobj's private properties and method names: [<-CODE->] this does work, the implementation in the link I've provided earlier just needed a few adjustments  [<-LINK->] 
solution: 

issue: I really wish I could turn off the format on type in the TS playground. It doesn't let you indent conditional types in a readable manner.  [<-CODE->] Uzlopak: you'll have a much higher chance of getting help if you provide some code showing what you've tried, what you want, and what should error... Making guesses about all of these, I came up with this [<-CODE->] What's the error you get when you removeas any? With the elipses.. 
solution: 

issue: i posted this yesterday @fatcerberus I am currently trying to use commonjs. since it was AMD before the way of exporting was different and now all the files throw error. It is not able to locate the file. Mostly it is the way of exporting.i simply used 'export class MyClass{'ANDimport { MyClass } from './AMD/MyClass' this worked for amd but not for commonjs.i think i have to change the way of exporting and importing and it might work. We make use of node modules but it's not a node application 
solution: 

issue: andrevmatos: does your index.ts export those types? IfMyFoois part of your emit, your index.ts should exportMyFoo Otherwise, you'll seeimport("mypackage/path/to/myfoo").MyFoo Because TS can't accessMyFoofromimport("mypackage") 
solution: @fatcerberus actually it works with [<-CODE->] Just by removing the first outer parenthesis. 

issue: error TS7015: Element implicitly has an 'any' type because index expression is not of type 'number'. export enum Decoder {    I = 1,    V = 5,    X = 10,    L = 50,    C = 100,    D = 500,    M = 1000  }export function solution(roman: string): number {    const split: string[] = roman.split('');    let total: number = 0; [<-CODE->] }I'm getting this error inside the forEach, can anyone help? 
solution: 

issue: there's noassertsin your code? 
solution: 

issue: What's a good name fornumber & not NaN? type aNumber = number & not NaN? 
solution: 

issue: =( 
solution: 

issue: So [<-ISSUE->] is fun: [<-LINK->] And I guess falsandtru blocked my account, so "don't touch my issues" is now enforced by GitHub.  I can't interact further (not that it would be productive to do so on that particular issue) with any issues he opened: 
solution: The only thing I'd do would be to report the comment as abuse, but I'm unable to do that (ironically due to a feature meant to prevent abuse... wait, is that irony?  who knows).  That user has been warned multiple times by multiple parties about abiding by the code of conduct but it doesn't seem to do any good.. 

issue: I have 31 commits in the last 2 days.  But that's because in the last 2 days I committed the last 2 weeks of work. :P Nice mix of small, well-commented commits and enormouse changes with one-line messages. 
solution: This is why many of us have just embraced the ickyness and let prettier handle it.  Never thinking about it again.  Until prettier is dumb or breaks.. 

issue: AnyhowStep: Why are you mixing await andthen?  [<-CODE->] 
solution: Yes, but the issue was caused by switching out a specially-designed mobile page for a universal responsive one, which smacks of just following the buzzwords, so to speak.  I’m aware it’s not a new concept—but “responsive” didn’t start getting thrown around as a buzzword until the last couple of years. 

issue: as per earlier, I got an issue with augmenting context interface of koa: [<-CODE->]  [<-CODE->] is there something I'm missing? The same approach works for styled components 
solution: 

issue: Eric - is the declaration file referenced anywhere? If it isn't getting loaded... The declaration file itself -notkoa That's probably it, if you use a/// <reference file="..." />comment in one of your project's source files, it should be picked up Ah, path not file  Glad it worked I'm not sure, declaration file discovery is magic that I don't really understand 
solution: AnyhowStep: my types aren't part of the index.ts because they're internal. I don't have much problem with theimport("mypackage/path/to/myfoo").MyFoo, but instead with the types (sometimes huge, because of generics and conditionals) beinginlinedinstead of imported and used "as is". Interfaces are always imported, but I've seen some type aliases being emitted as imports, and some being inlined (with the whole resolved type, as I said sometimes huge, in place instead of the imported type).I've noticed when this happens, it hurts whole tsc/tsserver performance, not only emitted declarations size. 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] Found from: https://dev.to/andreasbergqvist/typescript-get-types-from-data-using-typeof-4b9c 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] Is there are workaround? 
solution: 

issue: That isn't really possible@monfera_twitter. Well, it is, but it grows like a factorial.{ a: number }  => {} | { a: number }isn't so bad but just two properties...{ a, b } => {} | { a } | { b } | { a, b }. Bump that up to three and you are already exploding in complexity...{ a, b, c } => {} | { a } | { b } | { c } | { a, b } | { a, c } | { b, c } | { a, b, c } austinbv_twitter: I think you should be able to reference the other declaration... something like this: [<-CODE->] Hmm... the reference should load the googlemaps declaration file, I haven't actually looked at its shape though. 
solution: 

issue: I still can't think of a name for my query building library Why is naming stuff so hard? uql - uninspired query language Have you ever just defined too many functions?  [<-CODE->] 
solution: 

issue: reggi: Am I missing something? [<-CODE->]  [<-CODE->] 
solution: 

issue: Thetrue | neveris tricky in a way that I like... but someone will certainly try to change it to false and be surprised when it doesn't work. 
solution: 

issue: I like theoptions : Objectify<Options>workaround =( Anyone familiar with emscripten? =x I'm losing precision with double data types,kripken/sql.js#295kripken/sql.js#325 
solution: 

issue: In layman’s terms though: construct a type consisting of only those props of T where T[K] is number There are actually two concepts in there: mapped types and index access types Type level magic can get complicated quick :) You got it You’re indexing the type using the keys of the original type I think it would be clearer askeyof { ... } 
solution: 

issue: i'm just going to reiterate that this looks like my experience with multiple things callingsource-map-support, and i highly recommend starting a debugger inside that package and seeing what is calling it 
solution: 

issue: G-Rath: i was more encouraging@collincusceto try that. but if you can get a repro that's awesome of you to go to that trouble to help 
solution: if you don't run a debugger already, you can just add aconsole.dircall and get the current call stack from that. 

issue: Why you should use an IDE that actually uses the TS language server ^ Why doesn't the playground have that issue then? 
solution: 

issue: I briefly looked at webstorm but their licensing model turned me right off.  Like, you do get a perpetual license but only for versions that have been out for at least a year since you started paying or something.  SaaS isn’t my thing 
solution: That works out well, as I've already reported it on YouTrack :P. 

issue: Thanks@G-Rath- no objection to linking the code snippet into the issue 
solution: 

issue: if I cp the folder into another folder in a lower directory 
solution:  [<-LINK->]. this makes no goddamn sense. 

issue:  [<-LINK->] G-Rath: - thanks again, VSCode shows the proper, inferred type ^ While the hover showsany[]in IDEA:  [<-LINK->] 
solution: 

issue: np. Thanks both I see. No problem. :) TypeScript Version:  3.7.3Search Terms:esModuleInterop named export enquirerCode [<-CODE->] This is very interesting and completely caught me by surprise. [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] The corresponding code: [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: I got the feeling the wayAssertionErroris used on [<-LINK->] is not the correct one. In the fileassert.d.ts(node) it is specified as: [<-CODE->]. It also requires me toimport * as Assert from 'assert', then access it viaAssert.AssertionError.. 

issue: when usingpathsintsconfig.jsoneverything compiles fine but when I look into compiled code see that it does not replace my alias into correct path so it is stillvar _ecsr_1 = require("@ecsr");in compiled code should I use side libraries liketsconfig-pathsor it should work out of the box? this is how I'm using it [<-CODE->]  [<-CODE->] ouch, this is indeed does not work out of the box, with a bunch of opened issues on gh *( 
solution: 

issue: Im using gulp withgulp-typescript` and so far I did not found way to make it work it would be so convenient if ts would resolve those module names according topathssettings alas.. 
solution: keithlayne: yeah, I mean it should compileimport from '@blahblah'into something@blahblahis aliaced in tsconfig's paths. 

issue: Super keys are a big problem, for me. I have documentation that says you can pass variables to functions accepting super keys, but that you really should always use object literals Because super keys end up being {key:T, nonKey?:U} And optional properties are yuck For databases I feel like initialization tends to be lower risk Can't have discriminated unions for super keys, though =/ 
solution: 

issue: is there a way to convince TypeScript that a field on a parameter is not null when the method has a certain decorator? (in this case, the decorator adds the field to the parameter object) it seems decorators can't change the method type basically I have: [<-CODE->]  [<-CODE->] 
solution: 

issue: I've found that data validation libraries tend to have shit error reporting validation and mapping Are there any that are decent? Even io-ts isn't great with it Especially when you start composing more complicated types Basic example illustrating my point  [<-LINK->]  [<-LINK->] The "ideal" library would factor out duplicate assignability errors The problem is that a lot of it is based on composing functions And not enough about being data-driven/declarative and how to merge these declarations in a way that removes redundancies and improves error reporting It's a gripe I have with my own data validation/mapping library, too I was so focused on getting it to work, I left error reporting as an after thought and realized I can't just tack it on 
solution: 

issue: Hi - working on porting a react app from javascript to typescript.. Having an issue with one of my libraries missing a property in the types definition. I see you can augment the type with declaration merging, seems to work well for interfaces, but the types in the library I'm working with are declared as type alias and I'm having a hard time augmenting the type definition If I declare a new type in my typings, its not being merged, just replaces the existing definition. Actually I'm not sure if its a type alias, the export looks like this:export type BarProps = Partial<{ 
solution: 

issue: Hi guys, got issue in TS  [<-LINK->] any thoughts about this? for some reason in my other team its working, but in my end i got an issue Prase 
solution: Yep I was wrong.  Although public is default, so not sure the value there.. 

issue: I think access modifiers only work on class properties maybe?  i.e. not static ones. 
solution: 

issue: I'm too lazy to remove them at the moment. I'm trying to shove dist in a zip file and deploy that to AWS So I don't have to build on AWS Ithinkremoving tsconfig.tsbuildinfo will cause ts-node to rebuild the project I guess I could just runnodeon thedistdirectly But I'd rather not do that. Would prefer to keep the dev, staging, and prod set up the same When zipped, the file is actually really tiny. 3Mb Wrote stupid test, got error message in test:MergeProducesNeverDescriptor: (1, 2] & [3, 10] = never Can't intersect non-overlapping ranges 
solution: 

issue: You can't check that they're all valid...without checking they're all valid.  So, those checks have to happen somewhere. Thus the appeal of those libs to automate.  Which is also less error prone.  If you make a mistake here, it will possibly compile but lie. But most often the validators can validate any input value.  Like when parsing JSON, you have no idea what you've got.  (Not 100% precise, but you get the idea). fdafdsa wow, couldn't even send a message for a minute.  I guess this? [<-LINK->] But@cphooverif you try that, it won't compile, because you're not returning anything. 
solution: 

issue: I keep getting this error, not sure what it really wants me to do? [<-CODE->] I have this code: [<-CODE->] 
solution: 

issue: Yeah class MyClass {}andfoo(MyClass)should work I'm on my phone so I can't check the playground  
solution: 

issue:  [<-ISSUE->] so the suggestion is to reorder the overloads ofArray<T>.reduce()so the generic one comes first, I guess?  Hey, I'll write that as a commen—oh [<-LINK->] , guess [<-LINK->] 
solution: 

issue: My 2: It's good to at least get familiar with vim if you're on anything other than windows (probably doesn't hurt there either).  There's nothing worse than typinggit commitand havingfreaking nanopop up.  The shortcuts areshown on the screenand I still can't use it.  And my commit will invariably have:xembedded in it. 
solution: 

issue: ShanonJackson: not to start a flamewar... But why is autoimport such an important feature? I never use it. 
solution: 

issue: I'm trying to copy over the type definition of a optional objects own property but usingA["optionalObj"]["someValue"]is erroring because "optionalObj" it could be undefined. Is there any other way to access the type definition ofA["optionalObj"]["someValue"]in the code below? [<-CODE->] 
solution: 

issue: Soooo the first time I try to build my library, it works just fine. The second time, I get a missing types error. [<-LINK->] here's my configs [<-LINK->] any idea what could cause it? haha finally figured it out my tsconfig needed typeroots to be "./typings/**" and not just "./typings" fixed the issue, though not sure if that's the preferred way to solve it 
solution: 

issue: Has anyone here written Typescript transformers before? I'm struggling to understand whether I'm allowed to introduce new syntax or not Since you cannot transform the parsing step, only work on the AST 
solution: 

issue: Hey all, I am having some trouble with this abstract class and optional methods. Would appreciate some help [<-LINK->] 
solution: 

issue: Can somebody explain this?  Because I can't  [<-LINK->] Oh wait I'm stupid I read that asmanifestbeing a union type but theanytype is actually the return type *sheepish* 
solution: 

issue: Hi everyone,I've just seen#char being used in JS for the first time. Am I missing something? I thought # can't be used as an identifier in JS. Using # as an indentifier in VSCode presents an error.  [<-LINK->] It's a packeage called sweet-js Thanks@fatcerberus 
solution: 

issue: I have no idea what you're saying.  You can't narrow the type of radius without runtime checks.  for free: if TS thinks something is possibly undefined, then it probably is.  So you should decide what you want to do in the case that it actually is undefined, then something like: [<-CODE->] Look up type guards in the docs.  This is just an example, but shows the basic idea. There are other options too depending on how much type safety you're willing to give up. 
solution: 

issue: keithlayne: got it, understand. Thx! 
solution: 

issue: Hi Team, having a very basic typescript issue.Object is possibly 'undefined'.  TS2532. If anyone is free and would be able to jump on call to help me debug would appreciate it. Can pay 20USD per 15min through paypal. keithlayne: - Awesome thanks for this Keith. Definitely need to run through the docs again. 
solution: 

issue: inonly works as a typeguard in unions AFAIK, and it's not sound, just a convenience. 
solution: 

issue: Hi guys, i'm trying to connect my nodejs app to firebase but i'm getting always this strange error. Does someone know what can I do? [<-CODE->] 
solution: 

issue: I assume you mean tuple-to-intersection danilosilvadev: i can’t say what’s wrong without seeing your whole project but what that error means is that tsc has detected that multiple source files would produce the same output file, which of course would result in a broken compile if it didn’t warn you “Overwritten by multiple input files” is awkward wording and I wish they would change that 
solution: I assume you mean tuple-to-intersectionmaybe this. it is possible?. 

issue: Hey all I am looking for a way to "pick" an intersection of a type.Here's an example: [<-CODE->] I think I got it ? [<-CODE->] AnyhowStep: I can convert F to a union Struggling with this if anyone has a second: [<-LINK->] Any idea why this works, but the union to intersection does not? [<-CODE->] 
solution: 

issue:  [<-CODE->] How is typescript not throwing an error here? A and B are not the same by reference. 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Rush.js is pretty friggin cool Just tried it today. So easy. A blessing on multi-project management I've also been liking [<-LINK->] . It allows you to take dev dependencies and package.json scripts that are common across projects, ship them as an NPM module to share across projects. So I share all my build/publish/test procedures between projects as a dependency. Rush makes it easier to coordinate this. 
solution: 

issue: simoami: can you try with--watchoption to passserverfolder entirely? See similar: [<-ISSUE->] 
solution: Can someone help me with this optional parameter for generic function example ? -Pretty self-explanatory; just want the function param to be optionalhttps://www.typescriptlang.org/play/#code/FAFwngDgpgBACgGwK4HMCWA7A6mkALAeyRAHkIQ0CMBDBAHjhgF4YBvAXwD5mYAKA8pQwBnAFzwAlM24A3AmgAmwYAGMqwkDGqJUmAIwB9PeJ3psuQsTIUqtOqy3iARgQIIo1DDC49eD6t5STNyswDAwaiJuUAB0CAQovAAGACSs1OwwaMIwBADWSRLA7MqRGlqm+gYATCbIZjj4RKSCtgi+QSFhEerRcQnJGASa+YXFytr1VXp+jjAgAE5IsOxFk7oYhtW8RcoA9HswALQnp2fnF5dXF8rg0PBT5vjWQnaMLBzcLPytIgD8Jk6MDkilK6k06zM1SMdQ2jTwLza9jmLminm8Xz4-kC0jY3TKfXiiVS6Uy2VyBSKJVU4Iqj2htQecIsiJo7W+QNC4QJ7n6xKGI0p42AkMw0Jm-nEi2WgRFlQwDJ2yiAA. 

issue: elmpp: what's the problem?  [<-LINK->]  [<-CODE->] Like this 
solution: yeah i see but i want the optionality to be dependent on the generic params. i know! Do you see where i’m coming from though - making it optional results in the function params always beingtype | undefinedwhich i don’t want when the generic param is supplied. 

issue: That makes sense, you have a rest param.  So you’re saying you want one or more ThreadKernelVariables as individual args 
solution: But I don’t I want to use it directly, I want to be able to use:gpu.createKernel(function(arg1: number[], arg2: number[]) {}), but typescript throws an error that it is incompatible.. 

issue:  [<-CODE->] But use it without the type param for more general use. but that may need some tweakage to actually work 
solution: To clarify the variance thing and why TS yells at you: [<-CODE->]. 

issue: Can't reflect on types of function parameters, anyway. 
solution: You can reflect and say athis variable is a function.You cannot reflect and saythis variable is a function whose first parameter accepts a string. You can't even really reflect and say if a function takes a fixed number of arguments or a variable number of arguments. 

issue: robertleeplummerjr: Thanks! I've learned a lot of weird shit ever since I started working on it 
solution: 

issue: Sorry it took so long to get to the root of the issue 
solution: 

issue: keithlayne: hmmm it's not pointing to the bad line in the stack trace is it? I don't think so. could be wrong Nope stack trace not useful ooo lemme try that... thanks@keithlayne 
solution: 

issue: cross-fetch depends on node-fetch + whatwg-fetch, it just uses the correct one depending on the environment. So that explains a bit of it 
solution: 

issue: if (typeof fetch == "undefined") { } else { fetch(stuff) } If undefined, check env, if browser, they hecked up and need a polyfill If node, use node fetch 
solution: 

issue: i feel you 
solution: 

issue: Hi guys,I would like to know if this is a bug or not (it seems like a bug to me) [<-CODE->]  [<-CODE->] But as soon as I introduce another handler option compilation works just fine [<-CODE->]  [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->] 
solution: 

issue: I'm stuck on a TypeScript module for more than a day now, I don't understand why TS cannot find the module in my project but in another project it just works. My project : [<-LINK->] and the project I'm draining information from is [<-LINK->] . In my project "ProjectTypes" is declared in store/types.d.ts and imported in store/index.ts, but TS doesn't find it. In the other project, it is declared the same way in store/types.d.ts and also imported in store/index.ts. It just works fine for one and not the other. Versions are the same, and afaik after several check every config is the same. I must be missing something, I can't figure out what it is. I tried to --traceResolution, it says it uses "cache" to resolve the module in the other project, and only search in node_modules for my project. 
solution: 

issue: ksaveljev: void does not mean what you think it means Your function is being matched with HandlerCallback A function accepting one argument is assignable to a function accepting two arguments, if the return types and the first argument type match Your return type is a promise And handler callback has return type void They're compatible First argument types are number They're compatible TS can't inferR. So it assumes R is the constraint type. And it all works out since R is only part of the ignored second Arg In TS, void means that you will not use the value. Not that there is no value. 
solution: Just note that having void|T is generally a bad idea for return types. And your union of functions basically has that return type. 

issue:  [<-CODE->] Any ideas as to why it's not building, and what I can do to solve it? :d 
solution: 

issue: My function receives anunknownand test it withif (typeof input === "object") { ... }. But from there how do I access any potential properties? doingif (input.hasOwnProperty('foo') { // does not let me access foo, either input.foo or input["foo"] } obj is { foo: number, bar: number } 
solution: 

issue: That's the best I don't think there's a really nice way to say that.  Try starting with "Why don't you sit down." I think that's version that you have to like drop in liquid hot magma to destroy. 
solution: 

issue: Another break caused by handlebars, it bit me too The issue was this -wycats/handlebars.js#1633 
solution: 

issue: Types of property 'mode' are incompatible.   Type 'string' is not assignable to type '"NOT_SELECTED" | "SELECTED" | "FETCHING"'. why do I have to cast itas 'NOT_SELECTED'  [<-CODE->] 
solution: I guess I never really paid attention to [<-ISSUE->] but boy is it yucky.  There's a lot of sadness in the issues for [<-LINK->] but everyone seems to be resigned to unpleasantness. Classes and inheritance are probably a little-used feature of TS anyway, no problem. 

issue: as a rule I never actually recurse in practice; I just pick a depth and unroll things like [<-LINK->] 
solution: So my wife got the kids a trampoline, my opposition was ignored.  There's been at least one concussion.  Turns out that it's hard to steer in midair.  That is all.. 

issue: Lesson learned, don't try to do search and replace on 1,300+ files with vs codethe next step: try not even using vs code :D 
solution: 

issue: ozyinc: I think you are making something that is just going to be horrible to work with in general... At first glance that looks like it should work. This does the trick... still think it is going to be terrible to work with though. [<-LINK->] Yep^ reads like some of the code in Shannon's article from earlier XD 
solution: 

issue: This seems to work, but is kinda lame: [<-CODE->] oh, your example had one bracket.  I assumed your typo meant the other interpretation. declare function makeArrayOfHomogeneousObjects<T>(arg: [T,  Opaque<T>]): T[] just make it a tuple instead.  But yeah, you just need to interfere with inference.  I think if you inline that it won't work. is it supposed to allow any number of objects in the array? 
solution: 

issue: fatcerberus: :x fatcerberus: that's not a smiley, try it in vim instead of:wq.  Shorter and you can't screw up the ordering :) 
solution: orta: Since I’m assuming the playground works by providing a custom CompilerHost, this is how to get TS to select the correct libs based on the target like tsc.  Implement this in your CompilerHost: [<-LINK->]. 

issue:  [<-CODE->] 
solution: 

issue: arnonym: You should change your default into a never assertion so you get a compiler error if you forget a case. 
solution: 

issue: In my experience, enums are second class citizens to string unions in TypeScript.  Someone else may be able to give more specifics, I just have never seen someone successfully use them without frustration (when compared to string unions). I think there is a way to have a generic type be one-of a union... I'm trying to find the code for it... keithlayne: knows how to do it...  [<-CODE->] I have to step away, but that is close to what I have in mind (still not working though).@arnonym Bleh, apparently theAssertNonUniondoesn't get around the problem of returning generic instantiations without an explicit cast. 
solution: And even with an explicit cast it still fails withProperty 'meow' does not exist on type 'AssertNonUnion<T>'.on the property access after the type guard.. 

issue: That is weird, but if you wanna make it generic I suggest you make the prop name the type param.  [<-LINK->] .  But maybe that's not the real problem?  I think the real issue is thatkeyofa generic is pretty much being inferred askeyof any/PropertyKey. 
solution: 

issue: Would looking into metaprogramming be a step in the right direction ? 
solution: I suspect the answer will be "use C++ to make your own language". To a degree you probably are :). 

issue: That's actually not sound becauseTcould be  e.g."hello" | "goodbye"and then you'd be missing one or more properties in the return value.  There's no way you can constrain it to a single string literal Casting doesn't fix it, it just suppresses the error.  The compiler is right to produce an error here It compiles, sure But it doesn't fix the underlying problem that triggered the error message in the first place It just sweeping it under the rug 
solution: 

issue:  [<-CODE->] 
solution: 

issue: foo!.bar()is not optional chaining right? what is it doing? I'm failing finding it anywhere in docs oh thx. why is this in release notes and I can't find it in docs? :( 
solution: 

issue: damn, so learning ts is gonna be pain in the ass I see any known good cheetsheets or something like that to recommend? 
solution: 

issue: Ifrefis using its type param in an output position, that may be the cause of the problem Obviously() => T|Uis not assignable to() => T But I don't use react much, either. I don't know the methods off the top of my head 
solution: 

issue: is it possible to pass something into a method using decorators that's scoped to that method without passing it as method parameter? what i'm looking for is a way to have a debug() method that automatically knows about the method name it was called from i could put the method onthisbut that would probably break when async code is involved 
solution: There should be a TypeScript Unsoundness Support Group that helps people work through their grief when they first discover things like covariant property writes.   ( see [<-ISSUE->] ). 

issue: I am dealing with something like: [<-CODE->]  [<-CODE->] I had hoped thatobj.hasOwnProperty("value")would get me there, but it doesn't seem to do the trick eyelidlessness: 
solution: i don't thinkhasOwnPropertyever narrows. i would probably use a type guard for this. it's a risk any time you actually use structural typing as structural typing. i don't think it'd be a risk in this particular case. it's known the type is a union of one of the two types, narrowing should correctly determine which one it is. 

issue:  [<-CODE->] 
solution: This risk is specific toin-as-typeguard, because of structural subtyping. 

issue: Are you talking about 5.7 or whatever? A lot of stuff like that mysql has tightened up on. 
solution: 

issue: 5.7 and 8.0 And MySQL's behaviour is actually desirable, in this case The other two databases are the weird ones It might be weird to useSUM(x)when you know for a fact it'll only apply to one (outer) row But it's even weirder to throw an error just because of it 
solution: 

issue: A warning would have been better I guess Especially since that "optimization/error check" is so easily defeated by using+y*0 Trying to checkthatduring compile-time, with TS' type system, and the types I currently have... A fucking nightmare Ugh And that check only happens in the WHERE clause The HAVING clause lets you do thatSUM(outerQueryColumn)BS SQLite allows it in HAVING clause.PostgreSQL still errors in HAVING clause. !@@$&#%)()#&@*#^@$)(%# I'm gonna' call it a day  [<-LINK->] At least I have this halfway decent error message now If you try to SELECT a non-aggregate expression that uses a column not in the GROUP BY clause 
solution: 

issue: Hi all, I have a question about extending the declaration of an external library on import. [<-CODE->] So I worked around it like so: [<-CODE->] This preserves the the interface, while allowing me to use a ref. My questions are: [<-CODE->] Navi0419: Perhaps... could you explain what issue you're running into? I'm not sure what "schema" or "pattern" means in this context. 
solution: 

issue: vegaidoes typescript work well as a scripting language? I mean for tasks one might usually go for bash or powershell? Any good libraries for making such a thing easier? 
solution: 

issue: AnyhowStep: Nope I've never tried it. I have exclusively used SWI-prolog. But that looks really cool (the advantage to SWIpl is that (nearly?) all distros have packages for it, so it's easy to install) tau-prolog is really cool, though I'm not sure why they chose it over something like datalog or an implementation of minikanren 
solution: 

issue: Yes it is You can add JSDoc types and typescript will pick them up You can easily incrementally adopt typescript aswell there's many options to enable to transition big js projects to typescript with not much pain alukach: 
solution: I had the intuition that linting engines were basically just rule engines. Declarative languages such as Prolog have been designed for this use case, so I decided to give it a try. In the end the result made sense, so we went with it.As for integrating it into Yarn, it's been much easier thanks to the work of the Tau-Prolog team which has been doing an amazing work implementing Prolog in Javascript (note that it's an external plugin, so it doesn't eat space unless you use it).. 

issue:  sorry, can't help it 
solution: for (const fruit in fruits) addResource(fruit). Or modify addResource to acceptstring[]. is there an option in tsconfig to disallow assigning a literal number to an enum type. 

issue: Gerrit0: just a heads up - [<-ISSUE->] Oh good, looks like they recently merged a fix 
solution: Huh, so that's why there was a double conditional, I thought it was weird.. Yeah, they check whether the function has nothisfirst but didn’t account for bivariance. 

issue: jcalz: that block is completely uncalled for, the post he originally blocked you for was completely relevant to the issue but he just said you were stupid or something Being able to block people in issues you post in any repo shouldn’t even be a thing - you should only be able to do that for your own repos He doesn’t own the typescript repo so why shouldn’t you be able to post just because he’s the one who posted the bug report AnyhowStep: I’m starting to think the TS team just has a fetish for weird inconsistencies: [<-LINK->] 
solution: 

issue: For node obviously and yeah postgres yeah typeorm is too oop'y for me and its 1MB big Problem is the bigger your library is the more you rule out the serverless community 
solution: 

issue: Gitter mobile is broken on my end. Can't see the text input field when keyboard is up ShanonJackson: what's the total size you're looking for? Don't you zip up stuff for AWS lambda, anyway? Those fancy function code packages You have a 250 mb limit. 1mb for typeorm doesn't seem too bad 
solution: 

issue: What I'm trying to figure out is where theneveris coming from AnyhowStep: ^^^ the above behavior is weird 
solution: 

issue: Size grows ever more of an issue on the server as of lately golang basically ruled themselves out of the serverless market share because their base runtime is like 10MB because they never considered server size an issue My cold boot times vs my warm response times in my lambdas make a difference of about 20 points on my lighthouse performance score 
solution: 

issue: Where's the unminified size?  That's a cool site Is there some version of npm serving minified versions of packages?I know npm shoves packages in a tarball, and that's what gets downloaded.But it's not like the source files are actually being minified with some js minifier. 
solution: 

issue: StoneCypher: .d.ts, if generated by tsc, typically goes alongside the .js file it describes so I’d say that’s fine I don’t think there are any official recommendations for that kind of stuff, it comes down to personal preference mostly What I’m not sure of is whether you can do a dual-bundle for ESM and CJS with types for both - there’s only onetypesfield in package.json So that’s something you would need to research if you go down that path 
solution: 

issue: I've been experimenting with TS transformers and it doesn't appear to me to be possible to make changes in a transformer that affect the type correctness of a program (e.g. if I want to change a parameter's type fromfootoOmit<foo, 'bar'>, some previously incorrect calls will become correct, but the transform doesn't seem to run before type checking fails).  Is there some way to achieve this? MicahZoltu: it's before emit or after emit, not before or after type checking type checking apparently happens well before the transformers execute 
solution: 

issue: AnyhowStep: thanks for the update! Hopefully I'll grab some time to check it out tomorrow at work Ouch, that's a lot. Hopefully that's mostly boring work and it should "just work"? Or you think some operators might be tricky? 
solution: 

issue: AnyhowStep: "remove feature entirely or emulate" wit B or you can just remove that from the typings in an overload for when the driver is B and leave the method on the typings for when driver is A 
solution: But I have a use case for it, since a lot of my users are in places with poor/expensive internet.And I really wanna' run SQL on browsers.And I really wanna' share that querying code across the front-end and back-end.. 

issue: Gerrit0: I thought the whole purpose ofconst enumis that the values are inlined by the compiler and thus the enum doesn't generate any code in and of itself And thus doesn't need a backing runtime representation 
solution: 

issue:  [<-CODE->] is there a way to have this sort of discrete state management that just works? typescript can't figure out that when code is 422 then data must be T (Data422) type weirdly enough it all seems to work if i don't nest it: [<-CODE->] it's very strange to me, why would this break if it's nested :/ 
solution: if it still doesnt work, you can at least give a type tothisas the first argument. 

issue: Hi, Can anyone help me in resolving this, I'm getting an errorthis.find is not a functionin statics of mongoose in my controllers?here is the code snippet:ContractorProfileSchema.statics.getBusinessProfileByContractorId = (reqObj: any): any => { Let me try with that once 
solution: 

issue: AnyhowStep: i see the comment in both on your playground link and in vscode 
solution: 

issue:  [<-LINK->]  [<-LINK->] You're probably thinking of a different kind of hover There's hover for thefoo/foo2identifiers There's also hover for the parameters, themselves They come up as you're filling in the argument list of the function call Why do you think you have to useany? JordanBoltonMN: I don't particularly use enums anymore but here's a hack you could use, [<-LINK->] I only see two uses ofanyand replaced them withneverandunknownand it seemed fine, [<-LINK->] Weird requirement. Doesn't seem like your actual use case isaddToArrayProp<T>() 
solution: It's just that if your actual use case is something else, it may make the type easier to write. 

issue: AnyhowStep: thank you so much for that answer. I ended up using typeguards that set a variable at the depth & then do the test AnyhowStep: i thought it was a big ass weird bug and i couldn't really sleep last night because the bastard was in my head... i kept doing the ... tracing? of types in my head to see what wasn't aligning i guess this whole type thing is a bit like set theory i guess these are algebraic data types though, yeah? AnyhowStep: do you have any idea where they talked about the depth performance probelm? I've googled around but can't locate it 
solution: 

issue: The main issue for nested tagged unions, [<-ISSUE->] I can't remember where I saw the perf comment though 
solution: 

issue: Is there any way to have a function that takes a supplied generic and infers the other from params?This doesn't work, for example: [<-CODE->] Ah ok. I've come across it, but haven't read into it yet. Haven't had the need til now. Thanks If you're going to infer, I don't think you could initialize also Unless maybe if a was optional 
solution: 

issue: =( Yeah, it does prevent it. But I don't rename files often So, I'm okay with losing the incremental bit when I move stuff around 
solution: 

issue: AnyhowStep: looks like [<-ISSUE->] 
solution: 

issue: I rename files often to re-organize and keep code clean, and it is too easy to do in VS Code (renames all import statements automatically, etc). I can't believe TS team didn't handle this part? It's like the first thing that came to mind as soon as I started trying incremental builds (today) 
solution: 

issue: martabrzeszczyk:  [<-ISSUE->] One of those control flow analysis (CFA) things dwelle: ArrT[number]["type"] ArrT[number]should be{ type: "dog" }|{ type: "cat" } ({ type: "dog" }|{ type: "cat" })["type"]should be"dog"|"cat" 
solution: 

issue: upgrade to typescript 3.7+? vscode probably not using the node_modules version of the typescript language server No problem 
solution: 

issue: heh [<-ISSUE->] 
solution: 

issue: The fun thing about that code is that, in a.tsfile, it would be grammatically ambiguous, since(e | 0) | (k | 0)is a valid type expression Here's a fun rendering bug that just bit me, apparently flexbox and<pre>don't get along: [<-LINK->] trusktr: The error message is weird but it appears the cause is thatmodelPromises.segmentsis probably undefined/null  [<-CODE->] It's trying to read the[Symbol.iterator]off ofundefinedwhich fails because you can't read properties off of null/undefined I can't explain the weird error message though Firefox arguably gets this right but ends up being ambiguous (you don't know whetherfooorbar--or both--is undefined) [<-CODE->] Fun I don't think JS has any concept of an unsigned integer  [<-CODE->] JS apparently doesn't like it Probably because it's rare to use a variable on the RHS of a bitshift I can't think of a single time I've ever done it 
solution: 

issue: got 2x enums like so: [<-CODE->]  [<-CODE->]  [<-CODE->] Seems fine in 3.6 but not 3.7.5... can't even cast it toArray<Comparison | Logical> 
solution: 

issue: Someone kill me  [<-LINK->] It's like playing an "idle game" But I'm not being idle. And the numbers are going up so slowly 
solution: Is there a way to force TS to consider a file as a module without resorting to import/exports?. 

issue: Does somebody has an idea for my issue on stack overflow? [<-LINK->] vsiles: this means, that the object key is  a string e.g. { "1": "something"} would correct but { 1: "something"} would be wrong 
solution: iskeya keyword in there or can be changed to something else ?. I think I found the relevant part of the doc. Is that an 'indexable type' ?. 

issue: AnyhowStep: yeah, so if you have something likeclass FooClass { constructor(stuff: Stuff) { } }you still have to import the symbol for Stuff or you can't describe it to the injector 
solution: 

issue: Is it possible to enforce, that an interface is a partial from another interface and if you add additional attributes then typescript throws an error? EdwardDrapkin: @AnyhowStepPartial is just making attributes optional  [<-LINK->] I will have external and internal interfaces, and as such the external interfaces will have only parts of the internal interfaces I want to ensure, that the external interfaces will not have additional attributes, as this would be wrong code ah wait i think i got it?  [<-LINK->] so by doinginterface B extends Pick<A, keyof B> {i will get an error in  keyof B, when it has additional keys I guess it is not possible to enforce this error on the additional key? 
solution: 

issue: Sample use case? What's wrong withtype B = Pick<A, "a">? 
solution: I remember making a joke feature request for compile-time Math.random(). 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: So, I fucked up at work and no one noticed for 3 months lol And it all happened because of the implicit assumption that promises always either resolve or reject My code was all promise-based. The libraries I was using were all promise-based Butsomewhere, a promise was not resolving Our error tracking never reported any problems because no promises were rejecting! So, we had a background task that worked for over a year without problems And stopped working a few months ago Because an unknown promise wasn't resolving/rejecting !&$##&%# So, now I find myself paranoid about every other library I'm using and code I've written Gonna' have to start implementing apromise-timeoutlibrary >.> throw new Error("Promise did not resolve after " + minutesSinceStart + " minutes") 
solution: 

issue: We wouldn't have this problem in the first place if Paysafe had fucking proper webhooks in the first place They only upload csv files once a day to some SFTP server Stripe has proper webhooks 
solution: 

issue: ? you want to ensure that not setting a property in tsconfig defaults to a predefined value? why? 
solution: 

issue: @EdwardDrapkinwtf are you doing that you have to declare react components in the global namespace??All browser builtin elements and custom elements are defined in global scope. That's not my fault. 
solution: 

issue: thanks for the tip on -incremental@ShanonJacksonwas able to get it to work with fork-ts-checker-webpack-plugin which cut consequent type checking times from ~30s to ~2s 
solution: 

issue:  [<-LINK->] I am struggling to get the type alias in the above code snippet, I want the name, not its structure, any advice? 
solution: You might want to have a play around with this@bsdis [<-LINK->] i'd probably recommend them 100/10 for react dev. 

issue: Off-topic: I decided to try a MBP and I hate the Touch Bar already.  It made me realize that I tend to rest my fingers just above the keyboard when I'm not using it and as a result I always end up hitting escape and closing things :-/ 
solution: 

issue: I told my coworker yesterday to rename a file in one of our repos that he already had a shell in.  He was like "okay", then proceeded to open finder, navigate to the folder, do something to show hidden files, then clicked on it and typed in the new name.  My mind was blown. 
solution: granted, typingC:\%PLACE WHERE HOME FOLDERS ARE MAYBE%\FatCerberus\stuff\%FART NOISES%\almost\there\phewis kinda more onerous on windows.. 

issue: i would imagine http2 could help with that 
solution: 

issue: hi, i am doing this import { Router, Route, Switch, Redirect } from "react-router-dom";   in my tsx file. If i put "noImplicitAny": false, in my tsconfig.json it works, but if i put "noImplicitAny": true i get error: "/react-router-dom/index.js' implicitly has an 'any' type." What is going wrong? found out 
solution: 

issue: fatcerberus: You can useopen .to open the current directory in Finder, analogous toexplorer .on Windows. Saves a lot of fiddling to find stuff that is hidden. 
solution: 

issue: Does anyone know why VSCode on macOS isn't honoring my.zprofilein the embedded terminal?  I have aPATHaugmentation in there - it's honored if I open Terminal but not inside VSCode drewwyatt: CF-based narrowing doesn't work with generics 
solution: It's considered a design limitation and unlikely to be fixed. 

issue: yo dog, try it in .zshrc instead.  Different stuff is sourced depending on whether or not it's a login shell like I think Drew was getting at. I would have expected tape to be the least-resource-hungry testing library there is. 
solution: 

issue: Hey guys, What is the best way to export an enum in my package/library? 
solution: I've also triedexport const enum Foo {  ... }. 

issue: clicked link, now I have PTSD flashbacks from my first real job where I had to actually write a grammar to put in production here's a tip: stay the f away from the mathematica language it's ewwwwwwww 
solution: 

issue: the platform is incredible, the programming language itself is a mess I had to write a parser to index Mathematica documents based on their source code and output 
solution: 

issue: I think we're talking about different things here Most parser generators give you this, [<-CODE->]  [<-CODE->] Would be nice to have, [<-CODE->] It doesn't have to type-check the parse It's all syntactic But justParseTreeisn't very descriptive It can't be helped in languages like Java, I suppose 
solution: I mean yeah, I would, because it means that I don't have to modifier the parser/generator every time I want to experiment with changes to my type system. 

issue: Morning I am getting the following Error [<-CODE->] Is there anyway to ignore it, as it does not break any functionality. [<-CODE->]  [<-CODE->] to [<-CODE->] 
solution: 

issue: AnyhowStep: I did not consider that, as VSCode indicated to me it was already anArrayBuffer. Thanks for the option it has resolved the issue. reverted all code back 
solution: 

issue: I read it as, "I hate my backend team". 
solution: 

issue: Is there a solution to: [<-CODE->] ? I'm using TypeScript 3.7.5 I figured it out: [<-CODE->] 
solution: 

issue: hi, for some reason when i click submit button the sites is getting refreshed and the handleSubmit function is never called. Why is handleSubmit not being called? [<-LINK->] 
solution: 

issue: It's hard to stay sane when databases can't even agree what this evaluates to, [<-CODE->] G-Rath: They can agree on this, though, [<-CODE->] 
solution: 

issue: What you want is discriminated unions if you're going to be doing that alot Waruto_gitlab: Discriminated unions allow you to narrow a union of types based on a "discriminated" property a property they all share yet contains a unique value  [<-LINK->] 
solution: 

issue: Hello!  In VisualStudio Code, I've handwritten a JS file called  my-commonjs-module.js  , and I've handwritten a TS declaration file,  my-commonjs-module.d.ts .  When I import "my-commonjs-module.js" from another file, the .d.ts typings seem to come through automatically in VS Intellisense.  Which is great!  But when I am editing the "my-commonjs-module.js" itself, those same .d.ts typings don't seem to be enough for Intellisense to work, while editing inside the file itself.  I've tried triple slash refs and things in the .js file, but can't seem to make it work.    Have read the TS docs quite a bit but not finding much on this question, so thought I'd try this forum – any pointers appreciated! 
solution: 

issue: but did it follow the template  [<-LINK->] I think?  I'm not 100% sure what you're saying.  But if it's emitting .d.ts files and you just want JS, you should setdeclaration: falsein tsconfig.json.  Not sure of the rollup way, but maybe that's a start. so disappointing 
solution: 

issue: Hi, why is [<-CODE->] working, but not [<-CODE->] ? 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Why would 0 * Infinity == 0? 
solution: 

issue: tsc processes everything ininclude+ whatever those files import.  I don’t think you can prevent it  [<-ISSUE->] Working as Intended 
solution: 

issue:  [<-ISSUE->] And probably others lazarljubenovic: 
solution: 

issue: thanks 
solution: Is it possible in typescript to retrieve a value based on type. something like get<T>() ?. When I runtsc --watch --diagnosticswithin a Docker container on Linux, parse time is4.80s. On macOS, with Docker for Mac, parse time is26.55s. The other metrics don't have this discrepancy. Has anyone ran into this before, or can anyone link to a resource that explains what "parse time" means?. 

issue: This may be what I'm running into: [<-ISSUE->] . It seems it's freezing up generating a1.5MBcache file called.tsbuildinfo. Subsequent incremental builds are fine, and runningtscwithout--watch(which does not generate a.tsbuildinfofile) is fine. Thank you again for going down the rabbit hole, with me,@AnyhowStep. 
solution: 

issue: 0? 
solution: Only because I thought I remembered reading that it rounds toward zero. 

issue: a boolean why? You mean it doesn;t work as a type guard? 
solution: I userollup-plugin-modifyto replace and inline functions likeisObjectafter typescript has compiled the javascript. It works pretty well. 

issue: if I have to use Ramda for validation... I'd use io-ts but I wanted to write my own type guard 
solution: and I use runtypes for non-trivial validation.  There are several options.  Ramda by its nature is difficult to type accurately.. 

issue:  [<-ISSUE->] is giving me second-hand cringe (maybe first-hand cringe: go team) 
solution: I've kind of accepted copy-pasting as a fact-of-life in TS. 

issue: Hi guys, is there a way to lookup ainstance oftype, from atypeofwhen using generators, like this? [<-CODE->] themessagein the callback should be an instance of the type provided as the first argument (this way themessageis expecting the constructor type, not the instance) 
solution: 

issue: How mature is the team like is it 3 seniors? 3 intermediate devs ? some combination? Yeah that was my life 3 years ago Anyway my advice to anyone starting a react project would be to checkout NextJS; It has a feature called multi-zones which can abstract away alot of the common micro frontend problems for them and potentially help them out if they have their heart set on it. However my advice would be with an engineering team that size they're going to find themselves doing alot of work around how applications build/compatibility/share code and not much just getting shit done if they go with micro frontend. [<-LINK->] 
solution: 

issue: "No more Mr. Passive Resistance" Heh, [<-LINK->] links to my [<-LINK->] 
solution: 

issue: Bruce why you trolling jcalz?  HE IS A NATIONAL TREASURE and I'm not trolling you either... ... 
solution: fatcerberus: , the order of the keys is unimportant. 

issue: cheers, so I decided to make my own 
solution: 

issue: error: Error | AxiosError<any> | ErrorState<VALIDATION_MESSAGES> You want non-inferential usage here, it seems Try this [<-CODE->] YourACTION_FUNCtype param is useless  [<-LINK->] 
solution: 

issue: The problem is you can't really polyfill it because there's dedicated syntax for it, plus a JS-based polyfill would likely be slow 
solution: 

issue:  [<-LINK->] has the same issue. I'm not disagreeing that putting hard limits on it solves the problem, I'm just confused as to why type inference is expanding the type. 
solution: 

issue: webstrand: does your validator dedupe for error reporting? I haven't found any libraries that do that, or even know how to in the general case I have that set as my next project After the SQL thing If I don't find anything decent by then 
solution: 

issue: webstrand: my ts code consumes modules withimport from, but I have some dynamicrequire()calls that need to happen during runtime and can't be compiled away into static ones. will rollup choke on it?I'm using them to have a module/addon/extension system in my app well, thats better asked in a rollup discussion place anyway. you gave me some great pointers guys. thank you :) 
solution: AnyhowStep: That's an interesting proposition. Currently myRuntype.Unionisn't capable of introspecting its member types, so it generates a report for each.. I really want to extend myRuntypeso that it can compile entire types down to boolean expressions. I haven't implemented that part yet, but the hooks are present. 

issue: Nope. There's an issue open for it "number as range type" or something like it "range as number type"* My bad  [<-ISSUE->] 
solution: 

issue: If they both can be used to express each other, though... I tend to side with overloads, just to avoid using generics for the conditional I'm less likely to mess up, that way function foo (a : A) : A; function foo (b : B) : B; function foo (arg : A|B) : A|B If I try to return an expression of type C, I'll get an error with overloads With conditionals, I'll get errors no matter what Return A, error. Return B, error. Return C, error So, with conditionals, I just cast it. And I'm more likely to cast C by accident lol 
solution: 

issue: anyshould only really be used when you need to tell the compiler "get out of my way, I know what I'm doing". It's an escape hatch from the tyranny of the type system. you can replaceanywith eitherunknown(all types are asssignable to unknown) ornever(never is assignable to all types).anyislikeunknown & never, if such a monstrosity could exist. unlikeany, you can't useneverorunknowndirectly, without casting them first. One caveat,anyis still necessary in some function signatures, because of assignability issues. These situations are rare, however. good luck! you'll probably uncover bugs in your program (unless you were especially careful to begin with) What do you mean byproject references? 
solution: 

issue: the biggest issue is horrible documentation. the official is incomplete, a lot of stuff is only in change logs, which are also lacking. I have like 10 tabs open with various cheet sheets, articles, books, stack overflow pages, ... and it's all so chaotic that to be sure I have the correct info I still have to bother you guys and ask a lot of stupid things here :( 
solution: 

issue: You also can't get rid of stuff like raw-input-value -> sql-string transformations. Likeadd(x, y). Wherex, ymay be a JS number, or a SQL expression built using the library. If it's a JS number, you need to convert it to the SQL stringCAST(x AS DOUBLE PRECISION). So, pre-processing of input and post-processing of output also can't really be removed in many cases, imo. I guess you could count that as data mapping but to me, the data mapping part was more like "converttrueto1in MySQL" Postgresql doesn't seem to have double value literals. Just integer and decimal literals If you want double literals, you need to cast 
solution: 

issue: it will fail when the sql query executes and throw so at runtime exec(Select * from undefined) // will throw because exec will call the driver, the driver will run the query and the query can't execute so we wont have to include it in our library 
solution: 

issue: EdwardDrapkin: that's what I thought. But I think I figured it out by implementing the. Children as static variables ofLayout. I still dont understand what the problem was though. I figured it  would assume that they are used as elements...? But like I said.. I really only use TS for my own sanity when implementing my own code and not for generic nature of what I'm trying to do..??? 
solution: 

issue: AnyhowStep: Ugh, looks like it's not possible to compile the intersection of multiple type-expressions with out some truly nasty code. So I'd recommend against runtime codegen for type checkers. I wind up having to wrap every subtype in ado { } while(0)block 
solution: 

issue: Haha wow: [<-CODE->] Playground interface Baz extends Foo {...}does not implyBaz extends Foo Damn you, polymorphicthis!!!  What hast thou wrought? 
solution: I just think it's funny that you can literally writeBaz extends Fooand have it be trueandfalse. 

issue: Is there a type that is not assignable to any other type? 
solution: 

issue: unknownisn't assignable to any type except forunknownandany all types are assignable tounknown neveris just the opposite. No types except forneverandanyare assignable tonever butneveris assignable to all types. There's some unfortunate funkiness  around functions that return never() => never. They're assumed tonever return, i.e. they alwaysthrow ...internally typescript can't help you there. It'll catch the error later on, once you try to actually usex. I suppose, if the normal return type ofmyFunctionisunknown, you're just kind of out of luck If that's the case, you're better off further constraining the acceptable arguments tomyFunctioninstead 
solution: it's difficult or maybe even impossible -- haven't figured that out yet -- for me to constrain the parameters in this case, so I'm relying on using a conditional return type that sometimes results innever. It works OK but doesn't result in an error at the call site, where the error actually happened.. 

issue: I get this error when I run a standard tsconfig.json build task in vscode:tsc : File C:\Users\John\AppData\Roaming\npm\tsc.ps1 cannot be loaded. The file C:\Users\John\AppData\Roaming\npm\tsc.ps1 is not 
solution: 

issue: figured it out with a work around 
solution: 

issue: Definitely not, and it seems counterproductive I'd rather they be assumed public domain in case upstream wants to put them in their test suite Also, calculating the square of a number should not have a side effect of dispensing a tasty treat for your dog.Of course not.  The correct behavior is for it to feed the cat, clearly.  The dog can starve 
solution: 

issue: Hey, anyone here know the keyboard shortcut on GitHub, where I can just type the issue/PR number to jump right to it? If I'm already viewing a repo. If a shortcut even exists? I've never needed to jump directly to an issue number until now, and I can't find a way to do so, unless I modify an existing issue's URL. Even searching for#123just brings up every issue that mentions that issue, it seems. 
solution: 

issue: webstrand: I've used function params in generics to force contravariance  [<-LINK->]  [<-LINK->] It's a dummy function prop Yeah, it's why I don't use methods if I can help it  [<-LINK->] I had this for my data mapping library. I'm not too happy with how it does error handling There's stuff you can only do with method syntax That you can't with function props Like overloads and thethiskeyword That mapper.ts link I posted has a Mapper<> type that is essentially a generic function where input and output are generic type params. Seems to behave well enough, in most cases 
solution: 

issue: when I was working with a complex inheritance treeI think I see the problem 
solution: 

issue: What structure did you end up using to represent decimals? 
solution: 

issue: Hey guys, I am having a strange config issue on a project I just started. I am using vscode and typescript and I do not need to export an object or import it in an other module to be able to use it Everything seems to be global Any Idea of what is causing it? 
solution: And the fun part is that I copied all my config from an other project. 

issue: is it not possible to enforce a constructor definition in an interface? [<-LINK->] ShanonJackson: you can't specify static methods in an interface either I want all instances of my interface to be constructed the same way I want to enforce either they all accept a JSON string as a ctor param or they all have a static factory fn with the same name that takes the same param either way doesn't matter 
solution: because I want to define that there's any object that supports being (de)serialized to disk. I don't care anything else other than they 1) have a serialize() method and 2) have a standard mode of construction that accepts a string. 

issue: That's not what TS' noImplicitAny does, though You explicitly gave the parameter a type T extends FactoryFunction<infer U> ? U : never The explicit type offooisT extends FactoryFunction<infer U> ? U : never If it resolves toany, it's still explicit 
solution: 

issue: Must be a difference of opinion, then I just see an explicit type resolving to any It's resolvable, though The problem here is your type parameter You don't actually have a concrete, naked usage ofT, that isn't hidden behind a conditional type 
solution: 

issue: ah cool. I've never had to do anything like that. I would've gone done the rabbit hole of trying to automate it myself with docker 
solution: 

issue: AnyhowStep: If you want nominal classes, just add a private member IMO they should be nominal by default, always, but what can you do 
solution: 

issue: Is it possible to specify certain@typesapply  only to certain files, not all files? F.e., I want globals likedescribeto be correctly typed in my test files, but I don't wantdescribeto also be available in regular source files. 
solution: 

issue: webstrand:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: I use thethiskeyword inside of thethisparam quite often. To ensure users don't invoke methods when they're not supposed to. Yeah, it's why I have to use this weird-ass pattern to usethis. 

issue: Hey, can anyone help with inferring lookup types? [<-CODE->]  [<-CODE->] can you do that? key is a value, not a type. it works! 
solution: I mistyped, I hadU extends keyof Tin my original. 

issue: Might actually use that smaller version Because the recursive solution is actually extremely slow I don't think i need like past like 7-8ish because i'm using it like this 
solution: 

issue: Can somebody please have a look here? I dont know why my IReadHandler does not mark an attribute as faulty [<-LINK->] 
solution: 

issue: I want to give props the MenuProps type, but if I do it like that, it gives me an error 
solution: 

issue: keithlayne: how do I actually view that information though? Hovering over the type in VS code omits virtually all the methods. yup! 
solution: upvotes for upvotes. 

issue: Why can't I do this: [<-CODE->]  [<-CODE->] 
solution: 

issue: Wtf Why istypeof undefined=="string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function" Gdidecimal.js  [<-LINK->] So, I triednew Decimal(10).naturalLogarithm()with precision 2000  [<-LINK->] Nope, 1025 digits is the max How is it an "arbitrary precision" library if it doesn't support arbitrary precisions >.> 
solution: 

issue: Hey, may I post it in here? [<-LINK->] I've got some roadblocking issue with typing reselect method 
solution: 

issue: AnyhowStep: My theory is becauseundefinedis actually a global variable due to a weird idiosyncrasy of JS so the type system treats it at the type level as "I don't know the type of this" Prior to... I think it was ES5, it was possible to do stupid stuff likeundefined = "foo"; The trick was that you were accessing a variable that didn't actually exist, and before strict mode, doing so wasn't actually an error, it just gave you backundefined It'sstillpossible to shadowundefinedwith a local variable 
solution: 

issue: I wish I could put a terminal in a tab of VSCode instead of having it pinned as a panel. I usually don't need to see it, but don't really like needing another window for just a terminal. 
solution: 

issue: "node developer" is funny.  99% sure he's the "only developer".  And in reality a "C# developer".  As evidenced by his "node" library that looks like a straight transliteration of C#. because I need moar java in my life. 
solution: 

issue: I guess I get to become a node developer. What software would you recommend I use to build a http server (with websockets)? is expressjs still standard? 
solution: socket io + express And/or serverless + api gateway. Serverless is basically a method Node can use to become completely overpowered should leverage it when you can. 

issue: When you do something likeGroup & { name: string }, what's that called? Are you augmenting theGrouptype? maybecreate an intersection type? 
solution: where-as unions can be read as "THIS OR THIS". // type Group doesn't have a name property, so we create an intersection type that doesdoes this sound clear enough?. 

issue: G-Rath: thattypeof undefinedis only correct if you're targeting < ES5 (does tsc even support that?).  In ES5+ there's no way it can possibly be anything other thanundefined(unless it's shadowed by a local variable but the type system would know that) because it's nonconfigurable and readonly And technically it should be anerrorin <ES5 because said variable doesn't even exist I don't know why I know all these little tidbits about the weird things JS does under the hood... it's a blessing and a curse Dammit tsc got stricter or something in 3.8.  This code was perfectly fine in 3.7: [<-CODE->]  [<-CODE->] Ifdoneis false then the data can't possibly be undefined AFAIK (it's afetchresponse) 
solution: 

issue: Yes.  In the above code it infersdataasUint8Array | undefinedanddoneasboolean Would be annoying to have to specify the types  [<-CODE->]  [<-CODE->]  [<-CODE->] Oh... I bet it's because of the destructuring.  It can't do the discriminated union narrowing through the variable 
solution: No regression, they changed the types.  Just checked 3.7 and it was instead defined like this: [<-CODE->]. That's kind of annoying because destructuring feels perfectly idiomatic in this context. 

issue: fatcerberus: but the fingerprint thing...if they just integrated  that somewhere unintrusively with real function keys that would be terrific. yeah I saw that yesterday I thought the lib was fixed in the playground um, bad wording, I meant "can't be changed" and isn't affected by the target setting, due to limitations 
solution: 

issue:  [<-LINK->] This "up" arrow actually means it's sorting byDESCENDINGorder The "down" arrow actually means it's sorting byASCENDINGorder Is today opposite day? Couldn't you make the props a union type I've never tried it, though 
solution: It works if I explicitly definered, green, bluein each union member and make all but one optional: [<-LINK->]. 

issue: EdwardDrapkin: Fair points, but it comes down to personal preference. The example isn't precise, either. FWIW most of my team wants it the way I've tried to implement it. 
solution: 

issue:  [<-ISSUE->] is giving me flashbacks to [<-ISSUE->] (just because of subject matter, not tone) 
solution: 

issue: Working on an arbitrary precision math library is traumatizing me.So many hard-to-debug precision loss errors, almost always resulting in just the final digit being wrong,and everything else being correct...You think you finally get it correct and you increase the precision and it breaks again -__- It doesn't help that pg is also bad at calculating square roots Oh wait, pg isn't bad at calculating square roots.I'm bad at staying within its precision limits. [<-CODE->] Because, internally, the max limit is something like 100k digits. But performing math gives you 1k digits.So, I was going over the max precision without realizing it, causing results to be off-by-1 Okay, pg is bad.It can't look ahead more than 5 digits When calculating square roots of up to 1k decimal places, there are somtimes 9s that repeat like 5 times. pg just rounds it all up 
solution: 

issue: I've heard good things about swc, but I've never actually used it 
solution: 

issue: I'm more used tols. So, I got confused Sometimes, I'll have code that sorts directories/files and performs operations on them.Then I look at vs code's sort order and wonder if my code is borked Then I look atlsand feel assured again Not that the order matters too much. Doesn't look like there's a way to change it -__- explorer.sortOrderdoesn't have the right settings  [<-ISSUE->] Seems like I'm not the only one 
solution: 

issue: Hey guys. Im trying to have a class that has its properties forces to all be boolean, except for a single property. Issue is that themessagesproperty on the newClass object is giving this error:Property 'messages' of type 'string[]' is not assignable to string index type 'boolean'.is it possible to do this? [<-CODE->] 
solution: 

issue: Yeah that's definitely a bug - was just pointing out the logic that likely led to it The compiler just goes "oh it has an index signature, it can't have any other properties" and rejects it 
solution: It's hard to tell sometimes, especially with class fields, where a few of the tc39 decisions are completely unintuitive to me. 

issue: AnyhowStep: are you using taylor approximation for your calculations? AnyhowStep: ok - should be pretty fast. is it not? 
solution: 

issue: python-coder-2020How can I detect tor in typescript? python-coder-2020yes it is a browser used to hide the users IP I am making a  anti bot verification machine in typescript so i can't have people using it python-coder-2020samething! python-coder-2020then it is technical a proxy python-coder-2020ok python-coder-2020anyway i guess the question is how to detect afk with typescript then python-coder-2020It is posible on js 
solution: python-coder-2020continue as if i was dead. 

issue: tor is not really a browser. Its an onion network. A browser can just make use of tor not really quite different things actually maybe you could try to make multiple connections from your typescript to your server and see if ip changes all the time maybe using a websocket  [<-LINK->] lol 
solution: 

issue: I had to play with fingerprinting for my company a few months ago It made me feel dirty  [<-CODE->]  [<-CODE->] Any sane free CI provider will tell me to fuck off after like, 2 hours I haven't tried bc for this number yet Maybe I should  [<-CODE->] This won't be fair tobc, though, since decimal.js is also fighting for CPU.I'll just run it now anyway 
solution: 

issue: you just need the extension, right? just put.json your imports.  TS will work, it will emit the extension.  
solution: 

issue: Still an issue with dealing with.mjs.v..jsfor supporting both ES6 and standard JavaScript modules. I still think I need a file path/extension rewriter. Found this :- [<-LINK->] 
solution: 

issue: I prefer having the explicit type aliases, actually Makes code more maintainable in the long run Or maybe that's just my biased view because I keep writing large convoluted types 
solution: 

issue: More immutability guarantees and performance is always good Just unsure about a new value type because bigint was introduced in a terrible way that made polyfills a nightmare I guess that isn't the problem with new value types. It's more like the standardized API didn't account for it Yeah, that does seem pretty heavy-handed  [<-ISSUE->] Yay, even Google employees get OOMs You've heard of true, false, file not found Now, get ready for  [<-CODE->] Also, [<-LINK->] Could someone sanity check me? I don't get why it's circular 
solution: 

issue: keithlayne: yeah postgraphile looks really neat actually. I was considering to use it together with django, so that i dont totally throw away the power of python 
solution: 

issue: They do in Java-land, though 
solution: Rust solves that problem by allowing you to define interfaces for types from other libraries.. 

issue: Actually it didn't work for some reason. I think the literal type widened my FooValue and dropped its readonly. 
solution:  [<-LINK->] should work. webstrand:. Perfect!. 

issue: Mike | NeurotraceORES (Gitter): Short answer: no. T is unused and won't restrict typeof store.dispatch 
solution: 

issue: Thank you Bjarne for your awesome acronyms BJARNE INVENTED ALL THE THINGS Try adding children yourself.  I think the type isReactNodeor something.  You can look atReact.FC's type to see the right definition. aaronbeall: children?: ReactNodeshould work 
solution: 

issue: I'm trying to subclass a JS array and TS's inference seems to be off. [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: EventBridge is dumb -__- That I can't get it to fucking work lol So, I can't just look at events that the bus is receiving I need to create a lambda that logs, and create a rule, that routes events from the bus, to the lambda, and let the lambda log it Then I can go to CloudWatch, and look at the lambda logs Sounds great (Not really) I go do that I create my lambda. I test it. It works. Stuff appears in the logs I create my rule,  I tell the rule to match all events. I tell the rule to target the lambda. I save. I go,eventBridge.putEvents() And the response is the new event id Great But not great. Because nothing shows up in the logs Not even that the lambda is starting or error'd or anything So, !@#$%% that shit Just give me a damn admin panel for looking at events for an event bus gdi It's either dropping messages, or my rule is borked and I don't know it It's probably the rule that's borked but I can't find any way to "test" a rule If "All Events" doesn't mean "All Events", then someone fucked up the naming Oh, I just saw a log appear 6 minutes ago The documentation said I can expect it to go through in 0.5s <.< 
solution: 

issue: lambda logs take a while in my experience to show up plus the cloudwatch interface is horrific If they would make something nice for log aggregation, I'd use it in a heartbeat 
solution: 

issue: lazarljubenovic: Map<"foo" | "bar", ValueType>?  That said, I thoughtMapwas more designed for cases where your keys are arbitrary values, not just strings Oh, just re-read, no you can’t make the value type conditional on the key thats not whatMapis for, you have to use interfaces/objects for that Mapis for lookup tables and similar 
solution: 

issue: keithlayne: Yeah I can addchildrenmanually but that shouldn't be necessary... seems the types are not working correctly. SinceReact.memo()addschildrento the rendered props available to the function it shouldn't require puttingchildrenon the props, that's redundant. Looks like if I separate out the non-memo'd FC and pass it then it works: [<-CODE->] 
solution: 

issue: I really want to compute 9007199254740991^9007199254740991 but I'm pretty sure it'll kill my computer It'll require about 143,706,169,087,762,620 characters to print Assuming each char is 1 byte, 133,836,799Gb 
solution: 

issue: I wish negated types were a thing Then I could write this, [<-CODE->] Since, you know,=in MySQL is not null-safe 
solution: you can wish in   and  in the other and see which fills up first. LikeIS NOT DISTINCT FROMin pg. 

issue: keithlayne: have you ever added custom data types to pg before? I'm wondering if equality is implemented for all data types Or if it's possible for some data types to not implement equality in pg So,x = ywould throw an error I know some data types don't implement comparisons like lt,lteq,gt,gteq Like POINT(1,2) < POINT(3,4) throws an error on pg because lt is not implemented for the point data type As far as I can tell, all data types in pg implement equality 
solution: 

issue: So, I've been playing around with conditional types... Is there anyway for TS to understand this?  [<-CODE->] It doesn't resolves[p].toLowerCase();tostring- instead it's typeT[keyof T] oh actually I might have boinked my type, b/c it's allowingidto be passed when that's a number in which case my question is: how can I make this work? Right, so then the conditional is doing nothing? Thats odd haha yeah 
solution: 

issue: AnyhowStep: @Gerrit0I didn't realize what you were talking about with the module augmentation thing until I looked at that issue comment.  I actually knew that because I've run into it too.  I think I rediscovered the workaround by painful trial and error.  Note to self: search issues. 
solution: 

issue: I need to define an entity (either a module in DefinitelyTyped, or a standalone npm package) that will contain only types (called ghost modules or non instantiated modules). I found an old article ( [<-LINK->] ) that explains the process of contributing types to DT, but this seems slow and beaurocratic. Is there anything wrong and/or technical issues with simply creating a new npm package that contains only types?? I definitely (pun intended!) prefer the latter option (since I won't have to wait for somebody to process my pull request. 
solution: 

issue: Hi there. I'm gettingTypeError: Class constructor Model cannot be invoked without 'new' my tsconfig: [<-LINK->] node ver 13.8.0, esc ver 3.8.3 any ideas? tsc* ver 3.8.3 
solution: 

issue: AnyhowStep: I totally resigned myself to just refreshing the page every minute or so while active, and every time I take my phone out of my pocket.  I don’t have to refresh as much on desktop, at least 
solution: 

issue: oh wow, gitter still sucks.  You'll see this message tomorrow. 
solution: 

issue: I'm wondering if it's worth adding source maps, declaration maps and src files to npm packages when publishing They really make the package size blow up Not that it should matter when stuff like webpack will just ignore all of them, I suppose ShanonJackson: Thoughts? Since you seem to be pretty vocal about package sizes 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] so it looks like the paths aren't relative to the specifyingtsconfig.jsonfile, but rather relative to...? well, i don't know.tsc -bnow actually works as expected. but i'd've preferred to just havereferencesin my root. All relative paths found in the configuration file will be resolved relative to the configuration file they originated in. (0)i have not found that to be the case 
solution: 

issue: Is it possible to force theTypeCheckerto instantiate aTypeReference? I know this happens with Anonymous types but not with interfaces. 
solution: 

issue: Why does TS complain  about me adding new properties to an empty array object? [<-CODE->]  [<-CODE->] How do I create one that does? This playground seems to have different rules from TS on localhost. I'm using VS Code and it has so issue with this: [<-CODE->] But the playground says I can't do this: [<-CODE->] Is there a 'correct' way to do this in TS? I'm not. I'm trying to subclass an array and I don't want certain methods Ya, and I'm doing that, but I also want to restrict certain methods You can't override array methods inside the class TS doesn't allow it Overriding them is good enough Super, thank you The playground doesn't seem to support use ofObject.entries.Property 'entries' does not exist on type 'ObjectConstructor'. fatcerberus: how did you make that share link? I can't find this option anywhere  [<-LINK->] 
solution: 

issue: Gitter is horrible.@osdiabExtractdoesn't work because1 | 2is not assignable to1. You can make a type that does work by inverting the check (while still triggering distribution), not on a pc right now but this should work. [<-CODE->] @osdiab [<-CODE->] Gotta go to work now, this seems to work though. 
solution: 

issue: Seems like Google doesn't understand DST It's complaining that my time settings are wrong When we just skipped an hour because of DST 
solution: 

issue: I think transformers are applied after parsing/typechecking? Hmm, maybe not, since JSX is handled by a transformer. 
solution: I've started experimenting with transformers only a few days ago, so not sure exactly on details, but it seems to be the case. But parsing JSX isn't handled by the transformer, so I think I was right.. 

issue: webstrand: you're totally my go-to if I decide I want to use some of these rollup tricks.  Some of the ones you've mentioned seem pretty darn handy.  I just don't think I need anything like that...yet, at least. 
solution: 

issue: I know you can have something like this, [<-LINK->] But it's not exactly what you're after 
solution: AnyhowStep: I think that's perfect, actually?. There might be a way to remove it, I have no clue. 

issue: Hi everyone - I hope it is ok to post questions here, I could not find channel rules stating the opposite. I am trying to find out how to apply Mapped types on tuples and arrays with types that have a constraint on their generic. The following example does not work: [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] webstrand: Oh ok - I did not think of that. Feeld weird, but if it solves my problem, I am happy. Thanks! 
solution: 

issue: so... the polyfill is faster!? can you run your own travis instance? wow, I never would have expected tha I'm guessing that the polyfill is missing some sanity checks 
solution: 

issue: From reading@jcalz's often linked answer on SO, it seems like there is no safe way to transform a union type into an intersection type that actually covers generic cases - is that correct? My case is about function parameters It boils down to [<-CODE->] But it breaks onboolean, doesn't it?  [<-LINK->] will transformboolean | booleantonever 
solution: 

issue: Subclassing natives works in the TS playground, but breaks in nodejs/webpack output. Anybody know why that may be? I concluded that I probably need to use@babel/plugin-transform-classes, but I haven't seen this work yet. The methods I define on the class, come up asundefinedon the instances I'm subclassing Array I'm not specifically targeting ES5, I just don't understand why this breaks in nodejs v10.16.3 I'll try a more recent version 
solution: 

issue: isn't es5 the default target? ouch LionC: OptionalFoo | OptionalBar==={ foo: string } | { bar: string } | undefined.  This is what gets passed into U2I.  You can't get unions out of that type alias. you could maybe doU2I<[OptionalFoo] | [OptionalBar]>[number]or something probably not 
solution: 

issue: webstrand: Oddly enough while I prefer to write"target": "es2015", I prefer"module": "es6"instead... not sure why 
solution: 

issue: I'm not sure this guy realizes that tsc is perfectly happy to process valid JS code (sans type checking) and therefore the integration he wants is not actually an issue: [<-ISSUE->] i.e. it already supports "TypeScript output", by definition Ah, I see, I misread the issue.  He actually wants syntax for types 
solution: 

issue: AnyhowStep: alright, I've now created my very first issue [<-ISSUE->] . Let's wait for them to roast me. 
solution: That's an example of "type-directed emit" which is not and 99% will never be supported in that way.  But there are probably transformers or compiler plugins or whatever they're called to acheive that kind of thing.. 

issue: I tried this but it doesn't work  [<-CODE->] A computed property name in a type literal must refer to an expression whose type is a literal type or a 'unique symbol' type. 
solution: 

issue: Right, cycles is another thing I have my own dumb format for those { $recursive : ["path", "to", "recursion"] } Makes reading error logs easier 
solution: I've been thinking of making my own format, a hybrid of markdown and TeX (the syntax\foo{}). 

issue: It wouldn’t really be practical to distribute over every possible value of a double (2^64 possible bit patterns) how would that work though 
solution: I'd most likely implement special cases for all the uses that I could think of, and otherwise bail-out with a type error. I would say the problem is less aboutextendsitself and more that there isn’t a separate “distributive extends”.  It rarely ends well when you conflate multiple things into one operator. 

issue: AnyhowStep: source maps are fine; It just puts responsibility onto the consumer to remove them from production but it should be like htat But yeah; Big packages; Real issue. Or the wider issue itself of developers just treating npm modules like magic talismans of functionality without really understanding the tradeoffs dependencies come with. Short term velocity for long term maintainability; Your project will always outlive the lifespan of your dependencies 9/10 unless your dependency is on some enterprise grade thing like .NET core etc 
solution: 

issue:  Is there a way I can temporary disable noUnusedLocal type warning - for type asserting? [<-CODE->] 
solution: The typesomeItem['type'](accidentally wrote with camelCase) is changed often in my codebase, so I wanted to ensure it with compile error.. 

issue: How can I use type variables with.map()to dictate the container and the children types? For example,Array<String>vsOrderedList<Dot>(ordered list is a subclass of Array). The return value should be determined by the mapping function and potentially a 2nd argument. I'll make one 
solution: 

issue: I'm looking for examples of member function type guards that change the type ofthis.  I had thought the lib.*.d.ts files had a bunch, but I can't find any? my regex-foo may just be failing me 
solution: fatcerberus: this is where my knowledge falls way off. The "property" is declared with a decorator, so truthfully, it may not be a property at all. 

issue: If you’re just trying to reference thenamein some mapping, then you can use a string key.{ "foo": "bar" } obj["foo"] === "bar" // true That’s not going to work, that’s using thevalueofProduct.someThingas the key to index the object Yoy would have to dotable["someThing"] 
solution: 

issue: I had that thought, too, but resigned myself to it lol Also, today I learned SQLite is recommended as an archival format  [<-LINK->] 
solution: 

issue: but I click the link and it says "we're a team of four guys" and art is the major thing motivating my statement I'd say that's a major accomplishment with that small a team regardless. fancy Unless  trolling counts 
solution: 

issue: I need to refactor TS code to js + jsdocsI'm aware oftsickle, not fit my needsMy googling haven't found anything useful, so i'm trying my luck here :) 
solution: 

issue: Doesn't seem like there's an easy answer for your rather basic use case. Not that I can think of, anyway.If you're doing random numbers and whatnot, it seems like type safety is thrown out the window So, you might as well abandon type safety in that particular case and add an overload Something like this  [<-LINK->]  [<-CODE->] 
solution: 

issue: This? [<-CODE->] Gonna' need a code sample of what you're trying to accomplish =/  [<-CODE->] ? 
solution: 

issue: bsdis: I'd say you can remove that props completely, since those props are just sent to provider itself, and that component is used only on one place, so I think you can safely create no props component Jared-Miller: could you give more context, I'm not sure I understand your question I actually tried that third option, just withoutany 
solution: 

issue: I'm using auto-generated types for apollographql and experiencing a problem with union types. [<-CODE->]  [<-CODE->] When I'm trying to test the resolver... [<-CODE->] ... I'm getting an error [<-CODE->]  [<-CODE->] @AnyhowStep I've tried this before but it doesn't seem to help? Or am I doing something wrong? bingo, thank you very much! :) 
solution: 

issue: Is there any way to call a method onsuperthat doesn't exist?(super as any).foo()doesn't work I'm trying to privately extendSet, so I need to castsupertoSetso that I can access the underlying methods 
solution: 

issue: Gib Given that example: function sumVariadicSafe(...numbers: number![]): number { return numbers.reduce((total, n) => total + n, 0) }why is there a, n)at the end? What does it or for what does it stand for? Sorry guys for multiple messages, I' currently using the Phone app Sorry, I meant the,0)at the end Ok thank you 
solution: 

issue: ts-loader claims to support project references but it doesn't work -___-  [<-ISSUE->] 
solution: and the results aren't affected by order anymore, as far as I can tell.. keithlayne: that's a nice tool. I [<-LINK->]. and ifop()is changed to useadd()instead ofhas(), inheritances ranks higher (2nd place). 

issue: webstrand: dumb me didn't think to reload gitter earlier, I was having a conversation with myself :(  [<-LINK->] you so fancy, gitter Had to reload to see my own upload 
solution: 

issue: Gitter is being stupid today.  Not only are messages not coming through without reloading but it’s also refusing to mark them as read Remind me not to ever design a tool that works like that Thats ridiculous Looks like it failed to load the CSS properly Now I get to have fun figuring this out.  When running tsc within my sandboxed file system (using the compiler API), the source files come from$/scriptsand the output is written to@/scripts.  These are both absolute paths and neither one is accessible from the other.  However tsc doesn't understand this and writes the source path in the source map as../../$/scripts/foo.tsand then SSj can't find it :-/ 
solution: 

issue: not sure the gitter/HN overlap is but wanted to drop a link to a yet-another-runtime-schema-to-static-type challenger that got some attention on HN today [<-LINK->] it's a lot like a young io-ts and has a bit more idiomatic API. i don't think it covers all of the use cases for io-ts for me, but it might be good for folks who want something similar but simpler 
solution: 

issue: On Linux, it is too white, so you can't really make a difference between the backgrounds 
solution: 

issue: Hi, I am trying to build private/protected routes like this: [<-LINK->] My problem is that i dont understand how i can return a spinner component and have that displayed until servercheck is done and i can make a proper page display. Can anyone help me understand how that should be done? 
solution: I think this might not be ts related but anyway. You need a variable holding the loading status, and check that in the template, and if it is done, change it again. 

issue: Beware that might evaluate to an intersection if you try to assign to it because of contravariance I’m not 100% sure about that though If so, intersection of string literals isnever 
solution: 

issue: Is it just me or should<stringConstant> a  </stringConstant>mean" a "... not"a". nand2tetris wants me to use the latter and that just seems fundamentally wrong to me Hmmm 
solution: I assumed plain text is always trimmed. <stringConstant> a  </stringConstant>is"a ". 

issue: my understanding was that any repeated whitespace of any kind is collapsed to a single space.&nbsp;is about controlling line breaking AFAIK. JSX (at least in react) doesn't work that way, leading to the{' '}hack. 
solution: 

issue: keithlayne: right....but the JSX is perfect when i dont have the ternary operator 
solution: you have in the true branch something like<div /><div />. you need to return a single element.  You can return a fragment<>...</>.. i see. 

issue: you havenew LoggerContractsomewhere, and it's not a constructor. in the boilerplate project if lerna is failing on one project, you should probably go into that project and try running tsc to help you debug.  Once you have that one building on its own, then try lerna run tsc again. 
solution: 

issue: hi, i have these interfaces and the function using it defined here: [<-LINK->] (very small code snippet). I am getting: TS2322: Type 'undefined' is not assignable to type 'LoginState'. I tried with null also. Why can i not assign null? 
solution: 

issue: keithlayne: no im not dead set on anything...i am just very new at typescript so i dont know the best practices. Could you maybe implement the funtion the way you think it should be...then i could learn from it? keithlayne: any chance you would spend a few minutes on that? :) 
solution: note that writing your own type predicates is tedious and error-prone, so people use libraries likeruntypes(my current favorite) orio-ts.  But for simple stuff like this you can write your own.  Basically you write them the same way you would in JS to satisfy yourself that the data is in the right shape.. 

issue: Projects always seem to have one or two functions that I'm sure seemed like a great idea when they were first written but just get in the way all the time when maintaining the project. Ireallydislike TypeDoc'screateDeclaration. [<-LINK->] 
solution: 

issue: Hey All, [<-CODE->] What I mean is, I would like to send data messages that are of different types for different scenarios. For example, my worker should be able to send different types of errors, and different types of messages. But I cannot help but write my own functions to check types based on the presence of a property or the shape of the object... any easier way to do this ? 
solution: 

issue: I'm guessing you wantNodeChildren = RuleChildren & TokenChildren, intersection not union 
solution: 

issue: unclechuGerrit Birkeland (Gitter): i didn't settargetat all in mytsconfig.json, i just usets-node, what's default for it? unclechuGerrit Birkeland (Gitter): when i try to set it toes2015it ends up with a lot of linter errors, like "cannot find 'typescript'" module, some parameter has implicitly "any" type (but i think the latest comes from that modules cannot be found). how should i set it properly forts-node? 
solution: 

issue: I'm not sure how slow you think the other way is? webstrand: knows a lot of details like that And others for sure you're thinking the parsing is the slowdown? I never really think about that that sounds vaguely familiar, 
solution: 

issue: I'm so sick of random monaco bugs -__- If two interfaces have the same name and same structure in different packages And you import them both You're gonna' have a bad time import both packages* It's doing some kind of caching But the wrong way  [<-LINK->] This is supposed to betm.mysql.Decimal, it shows justDecimal  [<-LINK->] This is supposed to besql.Decimal, it showsany It breaks "Go to definition" in VS code import {Decimal} from "my-decimal"; And I tell it "go to def", it brings me to theDecimalof theotherlibrary !@#$#&#&^%*# 
solution: 

issue: can anyone help me with this? [<-LINK->] thanks. I will give that a try I'm confused. Did you put that in a field called global? I can't change the production code in any way or else it won't work when it's actually run does your suggestion require me to put global. In front of the setup code? or can it still be [<-CODE->] 
solution: 

issue: okay when I put that on the test, it compiled this doesn't work for me. The production code will be executed in a website, so it doesn't have a global variable at runtime and (window as any) doesn't work becuase window isn't defined 
solution: 

issue:  [<-CODE->] 
solution: Has anyone of you guys tried to use sveltejs in TypeScript?. 

issue: Why am I not getting any output here? [<-LINK->] 
solution: 

issue: Papipo:  [<-ISSUE->] thetutlage: replace withUserinstead ofthis You're setting a static property Not an instance property 
solution: 

issue: can anyone explain to me why [<-LINK->] ? this seems incorrect to me you can assignnumberkeys to a{ [x: string]: Whatever }so... not sure why it would inferx: number but that distinction seems to be incorrect it is telling me that the keys are numbers when they are in fact strings the only place[key: number]is supported is on arrays 
solution: you may want to describe a record that only accepts numbers for keys (i guess, not sure i could identify a use case for it). but it certainly doesn't feel like it should be the default behavior for inference. 

issue: @AnyhowStep Yeah, both files. So basically this: [<-CODE->] then [<-CODE->]  
solution: 

issue: Hello, I am looking for a little guidance on using the typescript AST apis. Is this the right channel for that? 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] dwelle: thank you 
solution: 

issue: that's weird.  [<-CODE->] 
solution: 

issue: no, it's just the implementation.  if it's called from TS it won't match.  If called from JS all bets are off anyway.  The types there don't really matter as long as they are compatible with the overloads. 
solution: 

issue: yeah, you don't want to declare the type signature of state you want to declare the type signature of global and declare that it has a state of type that probably won't work because of ambient contexts, etc 
solution: 

issue: how do I overload this without getting theoverload signature is not compatible with its implementationerror? [<-CODE->] 
solution: 

issue: SimonMeskens: he said that it was hard NOT to make a TC type system, not that it was hard to make one that is i would be okay with enums if they were actually type safe, but they’re not so yeah, I’m in the “avoid them whenever possible” camp 
solution: 

issue: Then my question is how do you get that to work? Do I need to have my production file in a module? Alright I'll try this again, but every time I do, I get a loop of compiler errors and I can't figure how to resolve them that's a good way of doing it I think I'm a tackle one thing at a time my first step will to be to run my unit tests in browser mode 
solution: 

issue: I shared my TS config above "target": "es5", not using Babel or shim 
solution: you should really take control over your build system. setting up a build system can take days of work and you're just trying to skip past all of it and then trying to do tricky stuff. 

issue: is ./ relative to the tsconfig file or the rootDir? 
solution: That glob means any interface.d.ts anywhere in the source tree. 

issue: it does in Visual Studio code, but it has no effect on the command line 
solution: could this be because my eslint isn't looking in this types directory?. eslint has nothing to do with your command line. 

issue: there's only one way it's fine I don't want to have to explain rabbit holes :D no this specific lint error comes from eslint, not the typescript plugin for eslint  [<-CODE->] this should be in your .eslintrc.json or .js whatever you're using 
solution: 

issue: but prettier's parser can't handleimport typeyet :( Just gonna interject here - I'm kind of a fan for making any globals that I (rarely) need to use optional.  You have to check that they're defined, but that's probably a good thing. 
solution: 

issue: I'm having trouble with writing types for [<-LINK->] . ? What's the issue? It's being used as a Symbol but works for IE I was going to use a Symbol for this situation, but found that I could support more browsers withnew Number() Okay, I'll give that a try 
solution: 

issue: number & symbolisnever, so that doesn't work quite how you'd like@SimonMeskens... willprobablyusually work though 
solution: 

issue: eruigivmmzpoir8159vmt0-3ajkHello. :) eruigivmmzpoir8159vmt0-3ajkThere is something I just can't make the type checker happy and I have already wasted a few hours on this. Basically, I have a higher order function that works with some generics. However, typescript does not seem to support backward type inference and my example does not work. eruigivmmzpoir8159vmt0-3ajk [<-LINK->] eruigivmmzpoir8159vmt0-3ajkDoes anyone have any idea how I can tackle this? eruigivmmzpoir8159vmt0-3ajkYou can specify the function signature:<A, B, C>([a, b, c]: [A, B, C): Readonly<{a: A, b: B, c: C}> => ({a, b, c}). eruigivmmzpoir8159vmt0-3ajk* You can specify the function signature:<A, B, C>([a, b, c]: [A, B, C]): Readonly<{a: A, b: B, c: C}> => ({a, b, c}). 
solution: 

issue: Hello I have a lot of rxjs code that ends up doing things like map(([a, b, c]) => ({a, b, c})) I was wondering whether there was a way to automated this while keeping type information, so that if I have a readonly[a: TypeA, b: TypeB, c: TypeC] I would end up with a {a: TypeA; b: TypeB; c: TypeC}? Although now that I write it down I'm seeing it couldn't get the field name lol s/get/guess But still, could I somehow write map(arrayToObject('a', 'b', 'c'))? Hm yup but I don't know the types of number of elements in the array ahead of time s/of/or (I can't type today) Not the field names :D Nor (damn it) 
solution: 

issue: rraziel: Tip:s/foo/bar/(note trailing slash) will actually do the replacement 
solution: 

issue: dude it was me like last week, you boomer Yeah that's a real pain with that particular type of overload - you screw up and you have no idea because it falls back to such a wide type. But that's a pretty cool solution, even if it does potentially set you up for pain in the future. 
solution: 

issue: It isn't even really SO, SO answers questions... it isn't really for blog posts And SO Blogs is... well... nothing like that. 
solution: 

issue: Hi, I am trying to load initialstate from my treeview from redux in TS, but thats not working for some reason. tree implementation works great if i dont load initial state from redux. What am I doing wrong ? [<-LINK->] 
solution: 

issue: I would think you get into the same kind of complexity that you get with microservices in general.  You trade simplicity in each lambda for added complexity in the integrated whole.  But every use case is different, it just doesn't seem to fit much of what I'm doing very well. rraziel: what's your experience with appsync been like?  After I started my current project my coworker brought it up to me. Seems like once you need to do stuff outside the box it would be a handicap even if it allows rapidly getting a project started. that looks like it will always bestringand your conditional will only ever go one way. but not sure 
solution: 

issue: keithlayne:  [<-LINK->] Amazon RDS Proxy supports Amazon RDS for MySQL and Amazon Aurora with MySQL compatibility. Support for Amazon RDS for PostgreSQL and Amazon Aurora with PostgreSQL compatibility is coming soon. Amazon RDS Proxy – now in preview Fuck. So, serverless and all that jazz is still not a solved problem in 2020? !@#$%^$&%#@$%^ 
solution: 

issue:  [<-CODE->]  [<-CODE->] 
solution: 

issue: Yeah it does, it's because I'm trying to create the simplest copy of what I actually have I can't seem to create simple example of what I need I can copy some simpler example from my code  [<-LINK->] Here, just imagine thatclass-validatoris installed (andreflect-metadata), and thatcreateSubClassis defined But that is a problem If I simply return a class, without first declaring it, it starts complaining about that decorator can not be applied While if I declare class first, and then return it, it works, but the method start throwing that error I started with 
solution: 

issue: AnyhowStep: yeah I used that before, but it's not my favorite thing at this point. you have a gift 
solution: 

issue: I am gettingNumber cannot be used as an index. Should i somehow cast my Number to int first before i can use it as an index? ah valueOf() did the trick 
solution: 

issue:  [<-CODE->] but that's pretty silly, and if you add some keys with different types it will break robchristian: io-ts and the like aren't going to help you I think. They work by defining types in terms of runtime values to generate validation funcitons because you can go value => type, but never type -> value 
solution: so if you are confident that everything is properly validated, just dooptions[key] = value as any;.. 

issue: per my question above, it looks like there is an open issue for it from 2016 :( [<-ISSUE->] and this isn't something i can resolve with tsconfig  paths 
solution: 

issue: I am using Jasmine. Why do I get this error?  [<-CODE->] here's the signature toEqual(expected: Expected<T>, expectationFailOutput?: any): boolean; oh... Thank you I'm working on a legacy app that doesn't use modules. What is the right way to declare lodash? declare const _: ??? 
solution: if it doesn't just work, thendeclare const _: typeof import('lodash');. 

issue: I have no idea either Keith. I know I want it badly enough that I'll probably end up doing it sometime though. Trying to answer [<-LINK->] and I've passed my threshold for type assertion testing. 
solution: Also the playground auto indent is infuriating.. 

issue: Regarding this:If I don't use it in the file i import it into, does it still get imported?TypeScript strips the import in this case.  Which is quite frustrating as it deviates from native ESM behavior (imports are always loaded, even if not referenced) 
solution: 

issue: playground doesn't work with es2019 lib  setting right now. 
solution: It doesn't work on my project either. 

issue:  [<-CODE->] ``` ha I suck at gitter again 
solution: you're a douche. . 

issue: Can anyone help me with this issue? https://stackoverflow.com/questions/60821476/why-cant-i-get-this-typescript-plugin-to-workStack OverflowWhy can't I get this typescript plugin to work?I'm working on these plugin examplehttps://github.com/MCKRUZ/TS-Plugin-HWEssentially the issue that I'm having is that I can't get the module loader to recognize that the plug-in has additionalI have been trying for quite some time now and can't get it to work 
solution: 

issue: His coworkers are in fact totally competent; they just like trolling him NEVER AGAIN 
solution: 

issue: That seems pretty reasonable and readable for what it's doing TS requires it, so I say'a' if you're assigning to that type I mean it's almost like you need a tuple of variants but that's a slippery slope, can't really think you could make coherent use of that you're a gentleman and a scholar  ha 
solution: 

issue: I'm getting a 50 line error message from typescript with an apparently incorrect usage of immer. I'm kinda proud of myself. 
solution: I don't know much about AWS lambdas and serverless. But I'mpretty confidentthey've done it wrong. 

issue: but you said they're using serverless, right? 
solution: if that makes sense. It seems like tsc is the last step in the build. 

issue: prettieris confusing  [<-CODE->] Well, shit, I literally just toldprettierto run. Andprettieris telling me I forgot to runprettier 
solution: run it against that file individually I think. huh.  When I ran it against a file it just printed it out.. 

issue: That's whyArray.isArrayexists ^ Well, I just spent 10 minutes wondering why build script didn't like my code but VSCode was fine... This project was still on TS 3.6, which doesn't have.?. TS: This may be converted to an async function... would anyone actually do that though? [<-CODE->] Yea, just a hint, but seems like nobody would actually use it here 
solution: 

issue: that's not a warning though is it?  Just a lightbulb or whatever? since it uses method syntax I guess you can't just usebind? I don't use classes really but it would be nice if JS had a nice way to do delegation. 
solution: Probably could actually... But I'd have to type it as a property anyways. 

issue: Hi,I have studied the docs but I am having a hard time figuring out exactly how to use createAsyncThunk.Below is a snippet I wrote which is giving me the error: [<-CODE->] What am I doing wrong here? [<-CODE->] keithlayne: frames of what? 
solution: 

issue: Hi.  I am importing a 3rd party library that returns the following type [<-CODE->] In my code I'd like to be able to project into a stricter type e.g. [<-CODE->]  [<-CODE->] 
solution: 

issue: Hi, I am suddenly getting TypeScript error in node_modules/pretty-format/build/index.d.ts(7,13)  I never even used that library, i suspect its some dependency to one of the libraries i am using, but i have no idea which. I suspect its react-toolkit 1.3.0 since i updated that library and error started to come, but I am not 100% sure...How do i identify what causes this error and fix it? 
solution: 

issue: webstrand: i restarted it multiple times before this fixed it yes, but I was already seeing the problem when I switched it back and forth in my original project 
solution: But their middleware stack resolves after.... The very first middleware resolves. 

issue: I can't use modules in my project. Is there a way that I can have two files see one class definition? in my other file, it says "Class" is not defined 
solution: we're targetomg a device that runs a hacked version of NW.js with a hacked version of Chromium.  But that company's not listed.. (a line of devices actually). 

issue: I have 2 files that are referring to global interfaces In one, if I put this there's an error because it's redeclared:declare const State: TwineState; But in that same file, if I delete that line, any usage of State says it's undefined so I have an error one way or the other 
solution: this is really annoying. Typescript is getting in my way twice as much as it's helping me. 

issue: webstrand:  [<-LINK->] thanks for the help after annpm install, runnpm run test and I get [<-CODE->] 
solution: I suspect once you get Jasmine running , it will complain thatwindowis undefined or something .. 

issue: Gerrit0: Thank-you, this'll work wonderfully! 
solution: 

issue: You can't turn types into values, period. What you can do is the opposite i.e.:  [<-CODE->] 
solution: 

issue: Try thisNoInfer<T>type: [<-LINK->] tieTYT: I've updated the [<-LINK->] to include rollup it changes the build process slightly. Does that work for you? dgreensp: It may not be possible to prevent the inference. Have you tried adding overloads to catch the unwanted inference? In any case, an example would be useful if you can make one Ah, you mean the oldNoInferno longer blocks inferrence :) 
solution: 

issue: webstrand: thanks a lot for the help. I have this other file that wasn't in the repo that I shared with you and it is not compiling anymore. It's a testcafe test, and now it's saying it can't find any of the testcafe types, including the import for testcafe  [<-LINK->] sure 
solution: 

issue: is this relevant? [<-ISSUE->] 
solution: 

issue: I guess they have kinda LE setup for issuing certs and setting up route53?  Or maybe AWS is issuing the certs somehow? 
solution: 

issue: facepalmwhy did I not think of passing the type parameter explicitly Thanks@keithlayne func()andfunc(undefined)are generally equivalent Unless the function explicitly checksarguments.lengthof course 
solution: 

issue: Does my monad tutorial qualify It has no silly burrito analogies 
solution: 

issue:  [<-CODE->] or something. 
solution: You can also doexport default foo as whatever. I probably wouldn't do any of those things.  (default export, annotation, or assertion).. 

issue: I brought my office setup home  [<-LINK->] but even with 2 4k monitors Icancareabout line length This dude on discord told me the other day that his coworker told him that functions aren't valid TS, that they are just JS.  That only methods or (I guess) static methods are actually TS. I told him his coworker was wrong, but namespaces reminded me of that. In some languages you can't define stuff outside a class, so it's the basic namespace mechanism.  And I agree,thatis disgusting. 
solution: 

issue: There's a standard lexicon of short names that are acceptable, though: expr, i18n, mk... I can't think of any others off hand... nice. I had to leave mine behind, to act as a vpn server. 
solution: 

issue: Where we are in agreement though is: I also hate namespaces.  They make the code more verbose for questionable gain.  It’s why I kind of hate c++‘sstd:: 
solution: 

issue: I imagine it's harder if your engine does JIT and therefore uses native machine instructions.  It's trivial in an interpreted language e.g. Duktape passes the ES6 tailcall tests 
solution: 

issue:  i want to make a function that accepts a callback. What type is a callback? 
solution: 

issue: yes, but now assigning tofoo.fur = "whatever"is a no-op are you just interested in thetypeofAnimalWithFur, not the implementation?  [<-CODE->] would work for you, then 
solution: Yes all the implentation is in Animal, AnimalWithFur doesn't add any properties or methods.. 

issue: hello webstrand: uses/me {action}to emote fatcerberus: like that, I guess maybe, lemme think... 
solution: 

issue: Hi all! I'd like to usePickon an enum to create a subset of it but I can't seem to get it to work the way I can withExclude. Is this something I should be able to do? 
solution: Try picking fromtypeof Enuminstead ofEnum. 

issue: ts kinda does that checking for you Non-interoperation with JSON and the fact thattypeof null === "object"make that a non-starter for me. I use both, though I tend to preferundefined 
solution: 

issue: Doesn’t using JSDoc exclusively compromise type checking in some way though?  Honest question, I don’t remember 
solution: Not really. There were some features it didn't support compared to regular TS, but it's catching up. I think last time I looked, it didn't support  generic constraints. But now it does: [<-CODE->] is the same as [<-CODE->]. I'd like for more terse syntax for various features though, because honestly if ALL type features are in JSDoc format, then it blurs the line between semantic documentation and types.. 

issue: Since TS is all about type erasure anyway, would be nice if regular JS engines could run TS code as-is.  Pretty simple for the most part - just ignore the type info and run the code like normal 
solution: yeah, sort of like what Deno emulates, but in C++ instead of JS+tsc.. 

issue: Notexport type { fetch }? I'm not entirely sure what you're asking 
solution: 

issue: I have a problem with covariance in interfaces. [<-LINK->] a variable of typeGuard<number>is assignable toGuard<number|undefined>buta variable of typeIGuard<number>is assignable toIGuard<number|undefined>when [<-CODE->]  [<-CODE->] new example link 
solution: 

issue: don't they use generators?  Sounds like the one you were talking about is just broken. why don't you just use koa then? 
solution: Apart from the potential type-safety issues, I don't see anything else wrong with it. Seriously, there's no viable argument against using something well-established (and well-tested). 

issue: I like reinventing the wheel well, if it has 200+ dependencies that I'd have to vet, I'd rather write it myself. Or just pick a less-complex solution I'm mostly complaining about babel, nevermind me 
solution: 

issue: 50% rounder! why do they think they need middleware anyway? 
solution: 

issue: they can just be functions and connecting to a db in a lambda is probably a bad idea lambda already logs runtime IIRC and just throwing an error should handle most cases there sorry, my comments aren't too relevant 
solution: 

issue: What kind of functions do you put in lambda, out of curiosity? It seems like frequently used functions would be cheaper run in an acutal instance 
solution: 

issue: I didn't write that mongo code.  [<-LINK->] But it seems like it's a thing now 
solution: looks like data doesn't stick around between requests, so connection pooling becomes more of an issue. nevermind, that's not a problem. Only http requests may be made from with a Worker, so it can't connect to a database.. 

issue: So I just found this ridiculous error message in the miniSphere code: [<-LINK->] n.b. I released it this way.  I apparently did this and forgot all about it...  
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Hey guys, one question, I added@typesscript-eslint/no-non-null-asertionrule to my linting And there is one problematic part, I extracted it into playground Here is a snippet [<-LINK->] Can someone take a look and help me understand why it's not recognizing check in that first case 
solution: Ackos95: As far as I understand TypeScript, with this optionally outer var you are preventing TypeScript from type checking, since it is optional. So, also a linter won't find it. But there are a few work arounds: Make only the inner var optional, but the outer not. Or change it to an array with any possible amount of vars in it.. 

issue: Hi everyone can someone help me with this problem please? [<-LINK->] 
solution: 

issue: ericblade: Does this version pass tests? [<-LINK->] keithlayne: I don't have much experience with that, I just started playing with electron last sunday. My technology of choice is unpm, typescript project references, and rollup (of course) really? They worked fine for me. ericblade: I actually didn't know about@ts-nocheck. Which ean_reader_new do you mean, mine or yours? 
solution: 

issue: Anyone know why I can't import fromreact-bootstrapon the playground? [<-LINK->] It has built-in type defs (not to be confused with the pre 1.0@types/react-bootstrap)  and works locally 
solution: 

issue: does@returns { (x: string) => Either<Left<string>, Right<RequestParams>> }work instead? I'm not familiar with the jsdoc syntax, but that looked wrong to me 
solution: 

issue: Changing it to age still returnsstringfor you? 
solution: Inside the class it still says it will return IsString<this, "age">. Which means it is never. 

issue: does it need to store objects? or just primitive values? i.e. would wasm work for you? 
solution: 

issue: Why can't I write to a readonly field in a sub class constructor? 
solution: 

issue: why can't I reassign like this? [<-CODE->] it acts like the one inside a function is local or something 
solution: : TwineStateis in the wrong position. you could dogameState = (window || global).State as TwineState. but the: <type>syntax is only used in definitiona. 

issue: Hi! I have an issue where I want to check two types are equivalent.Naively I have tried to do the following: [<-CODE->] However this doesn't work for unions: [<-CODE->] Since conditionals are expanded into the union.Is there anyways to get a generic type AssertEqual such that it will be true for T = string if and only if K = string ???Thanks 
solution: 

issue: What's the better way to write this code. I'm trying to do type checking+ some more validation. If it fails validation, it returns an error [<-CODE->] Error message - [<-CODE->] 
solution: 

issue: davidmdm: The index signature is a universal quantification.  It means "for all keys you would use to access this object, the value is such-and-such type".  A lot of people think it's a "rest signature", but that's not how they work.  It can't really work that way: For the sake of argument let's say TS lets you define that type.  Now later someone doesx[key]wherekeyis astringand happens to be "a".  Now TS tells you you have a string (because that's what the index signature says) but you really have a number, and things blow up I'm a bit surprised that intersection works tbh @webstrand Yeah, the intersection thing doesn't actually work [<-CODE->] PlaygroundWould be nice if the error were on the type expression though, rather than only manifesting during an assignability check In general TS is way too happy to manifestnevers from intersections that don't make sense instead of, you know, erroring on them davidmdm: The fact that that works seems like a bug.  The following produces a type error as I would expect: [<-CODE->] Even when it works, there's this that you need to watch out for: [<-CODE->] And the type system can't save you from that because: [<-CODE->] That's why it's not treated as a rest signature - there's no way to make it typesafe when I start the appThere is no type checking at runtime... types are erased 
solution: 

issue: trying to troubleshoot some very slow typechecking.. Using CRA/TypeScript and it used to be fast, but now when I start the app it can take as much as 10 minutes for the initial typechecking to finish.  I've looked around and haven't really found any good resources to help me figure out what is causing this but it's getting pretty difficult to work with. 
solution: 

issue: hi allI'm trying to restrict the keys of an object which is being passed through as a prop.So, I'd like to be able to do: [<-CODE->]  [<-CODE->] So, based on this: https://stackoverflow.com/questions/51659420/consider-using-a-mapped-object-type-instead-whats-a-mapped-object-type-and I tried: [<-CODE->] but now I get the following error: [<-CODE->]  [<-CODE->] thanks@fatcerberus 
solution: 

issue: He thanks you for your permission I guess the distinction is that the type language is turing complete but some things the type system can't represent you expect anything else from me at this point? I always feel kinda weird when people mention Turing's "tape" haven't decided on the word to describe my feelings 
solution: 

issue:  [<-CODE->]  [<-CODE->] Then i do [<-CODE->]  [<-CODE->] Why do i get error `Type 'IterableIterator<number>' is not an array type or a string type. Use compiler option '--downlevelIteration' to allow iterating of iterators.  when i do this? [...Array(2000).keys()] 
solution: 

issue: Why am i getting error? [<-CODE->]  [<-CODE->] Is anyone in here? 
solution: 

issue: @keithlayne [<-CODE->]  [<-CODE->] 
solution: you still have to check to see if it's undefined.  And now that I look at it you weren't probably checking exactly the same thing as what was erroring.. Looks like you could get a lot of mileage out of optional chaining here.. 

issue: Seems to work fine here (press Ctrl+Enter): [<-LINK->] Prints 0 Ah, I see, it doesn't work if you compile to ES5.  Extending builtins didn't really work prior to ES6 The problem is that the ES5 code does this [<-CODE->]  [<-CODE->] 
solution: 

issue: I have a function that returns either Array<number> or number.  I'm trying to use this function in another function but it expects only Array<number> .  So I'm getting  "type 'number | number[]' is not assignable to type 'number[]' " .  any idea how to solve this ? obergodmar: @keithlaynethanks guys :) 
solution: 

issue: Can someone explain why this doesn't work? [<-CODE->] 
solution: 

issue: Hello, I have problem correctly typing this code: [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] if I changed it to: [<-CODE->] then different error happens: [<-CODE->] 
solution: 

issue: Hello! I have a problem with tsify and modules. The repo is here: [<-LINK->] ... Please help me. Thank you. 
solution: 

issue: Hello. I upgraded Typescript from version 3.2.4 to version 3.7.5. I am facing a little problem, the command is executed from the root of the project into a workspace"${somePath}/node_modules/.bin/tsc" -p ${somePath}/tsconfig.json. The problem is that now, all the path (somePath) is generated in the folder structure of the transpilation"dist/some/path/...etc". Any idea if there is some change in tsconfig I should take into account in this new version? Ok, fixed. Seems the default behavior of"rootDir"changed. Setting"rootDir": ".",in the targettsconfig.jsonfixed my issue. 
solution: 

issue: TS can't do runtime type checking 
solution: 

issue: alanbuchanan: That's just one more bad blog post. amazing that it's not on medium fetch itself is fine usually boils down toJSON.parsereturningany. If it returnedunknownor an easier-to-work-withJsontype that would be much easier. But all this is what validation libs are for. another short story:Once upon a time, there were blogs about programming.  Mostly they sucked.  The End. 
solution: 

issue: So much getting deprecated ._. [<-LINK->] 
solution: 

issue: yeah probably the caveat forruntypesis that it doesn't filter the result, which I thinkio-tsdoes by default.  As in ensuring that what you get out is exactly what's validated. but that's beneficial sometimes if the other data could be useful but not critical. AnyhowStep: you using elastic beanstalk? I looked at that a couple times over the last 6ish years, and always thought it sounded terrible. IIRC at first it was basically heroku, you'd just push to a git remote to deploy My boss just got a not-so-great TS error and I had to get on a call with him to work it out.  Good times. sounds really typical TBH.  And not good. 
solution: 

issue: webstrand: a type can have both a string and number indexer.  I believe there must be a subtyping relationship between them though The number index type has to be a subtype of the string one Because all keys are actually strings 
solution: this COBOL thing is getting out of hand. because unemployment systems are getting overwhelmed. I mean it's been a good way for masochists to make money for decades now. 

issue:  [<-CODE->] Error: Errors in typescript@next for external dependencies:../../react/index.d.ts(36,22): error TS2307: Cannot find module 'csstype'. Fornpm testI getError: In package.json: Dependency jimp not in whitelist. Neither of these seem related to anything I'm doing... 
solution: 

issue: I'm playing withExtract<UnionType, {type: T}>but it does not work as I expect, any idea how to fix it? I've put comments in code snippet. [<-LINK->] I've tried this: [<-CODE->] but no difference also, this should fail: [<-CODE->] but it doesn't and instead type is widen to: [<-CODE->] 
solution: 

issue:  [<-LINK->] This is the first time I've ever seen this error message 
solution: I feel like that was written just for you.. Also the first time I've seen<<unresolved>>. I reloaded VS code and all that weirdness disappeared..... 

issue: Buh, mongoose.Automattic/mongoose#2438 [<-CODE->]  [<-CODE->]  [<-CODE->] Why are validators all so bad  [<-CODE->]  [<-CODE->] 
solution: i mean, if you try to useundefinedfor anything, you do get an exception. Does haskell prevent you from constructing anundefinedvalue?. 

issue: If you're importing from somewhere, exclude won't have an effect sounds like a decent use case for project references excluding stuff that would otherwise be included even if not explicitly imported? 
solution: 

issue: Think in this project I managed not to have anythingnullever Nonulland maybe 0.001%letvsconst, not much that can be uninitialized either 
solution: 

issue: undefined properties are where it mostly arises. That and optional function arguments. but undefined is (now mostly was) slow to construct, so I preferrednullwhen I need to explicitly construct that value. 
solution: 

issue: I said that a while back Now I say "I should have left 3 years sooner" :D (actually quit my job in October, and 6-month notice later officially out 31st of March, perfect timing lol) 
solution: Yeah, silly executive requirement thingie (+ it's Europe so even for any random job it's already 3 months by default). Took a bunch of days off I had stacked over the years during those 6 months anyway. 

issue: yeah in general CFA doesn't cross function boundaries, if that makes sense.  Pretty sure you know what I'm talking about.  I just didn't know that they special-cased that until somebody here told me IIRC. Gerrit0: why you crushing hopes and dreams in discord? 
solution: But yeah as for CFA rules being documented... probably not.  There's a lot of really inconsistent stuff like that and since the [<-LINK->] hasn't been updated in years--with seemingly no intention of updating it ever again--we just have to deal with the idiosyncrasies. 

issue: I have a type aliastype CypressElement = Chainable<JQuery<HTMLElementTagNameMap>>. When callingcy.get("smth")that returns aChainable<JQuery<HTMLElementTagNameMap>>, and I want to doconst smth: CypressElement = cy.get("smth").  This seems to not be allowed :( Is that correct, and if so, can I work around  it? (The actual type IMO is both poorly named and horrible cumbersome to work with) 
solution: 

issue: no feeding so do you get the same error with  [<-CODE->] you might wannat trytype CypressElement = Chainable<JQuery<HTMLElementTagNameMap[string]>>. because I think you're right, it's a map of tag names to element types but that still might not work. 
solution: yeah looks like you're right on both part. Now I get another error:TS2537: Type 'HTMLElementTagNameMap' has no matching index signature for type 'string'. but you're also gonna end up in that case with a union nested in a couple of generics, which probably also has assignability issues.. 

issue: Sorry to butt in - I think you probably need project-specific typeroots anyway because iirc that’s not inherited Someone correct me if I’m wrong Also don’t know if this is relevant: [<-LINK->] TypeRoots is only used for global files, but not for modules 
solution: 

issue: globals.  yay. same fundamental issue as@types/nodeI guess 
solution: 

issue:  [<-ISSUE->] - this looks similar, perhaps But it got auto-closed :( 
solution: Member visibility is enforced only by the compiler, so pure-JS code can still get at it.  Non-exported variable simply can’t be imported at all, so it’s a stronger guarantee of privacy. 

issue: Can i somehow avoid writingstate.measurementSitestwice in this statement?state.measurementSites = [...(state.measurementSites ?? []),...action.payload.results,]; Hi, can this be rewritten to smaller and more understandable code in TS? [<-CODE->] rraziel: yeah they can both be null 
solution: 

issue: Can't next and previous be 0? But even though it could be made shorter with ternary and stuff, I don't think it would be more readable (I'd make it an else if though) I meant 0, like index 0 for a page number Although since you initialize with 1 I assume they are 1-based 
solution: 

issue: but Iamtyping the initial assignment asItem | null or did you mean something else? also, how does the control flow analysis relate to the fact I can't use a type guard? in what case would that not be sound?  [<-CODE->] 
solution: 

issue: I am writing a library. How can I document my option objects such that in VSCode when I hover above a property intillisense will display my comments and not just the type? 
solution: 

issue: Can anyone explain to me why this error is happening despite the early return on line 57, and why it isn't happening on line 67?  [<-LINK->] Ah excellent, thank you 
solution: 

issue: a few weeks ago I was dissuaded from using enum's. But I've got a list of things calleditemNames, and I want to iterate these and prevent things outside of this list of names from being passed into functions. It would also be useful to use it as an index type. Is there any way to get all of this functionality? Gerrit0: never seen that. I'll look into it thanks a lot Gerrit0: how do you iterate all those values? Do I have to refer to the lowercase? 
solution: Gerrit0: that seems to compile and run fine without the as const. Do you know why? Also why do I need [number] in the type?. 

issue: Const arrays. [<-CODE->]  [<-CODE->] It's useful if you are doing something like this: [<-CODE->] If you aren't though, using a union of literals is a better idea (I say as I continue to use enums with no plans of changing that code anytime soon... it works...) 
solution: 

issue: This is a contrived example, which I've boiled down to its basics. My real case is in react land rendering where I'm doing something likeoptionalList.list && optionalList.forEach(...I'm just trying to figure out why's that :) I assume TS can't be sure you won't modify optionalList.list and set it to undefinedOh, I was hoping it could tell here. Any tips on what keywords/issues I should search for to read more on this? 
solution: 

issue: victor9Hi! I'm working on learning typescript with react. My first issue is using it with a drop down. I get the error below. I understand the error but looking for a good solution to it. The value should be a number. victor9Argument of type 'string | number | boolean | (string | number | boolean)[] | undefined' is not assignable to parameter of type 'SetStateAction<number | undefined>'. victor9Wow just that worked. No casting or nothing. Thanks :) lkestelootTry{ [floor: string]: string } lkesteloot(the word "floor" is arbitrary.) 
solution: 

issue: same way as you do in JS Gerrit0: you must be an early riser I thought for some reason you were in MST 
solution: 

issue: The answer is another 15 minutes. So not using that again. 
solution: 

issue: Oh I don't mind, and was likely never going to use it anyway (+ haven't heard from it before either) 
solution: For some reason,propertygets removed in the first example, but not the second. 

issue: keithlayne: yea, I'm in MST. I find I get more done if I get up early 
solution: 

issue: Is it possible to overload the returnType based on the argument type? This is not my actual example but would work the same way: [<-CODE->] This syntax makes no sense but I want to have a different type based on the type of the Generic T 
solution: You can do that but you'll have to cast inside the function.  tsc and conditional return types don't tend to get along. Excellent. This is fine by me. It's for a lib so I will be testing it to the bone anyways. I want the user to have the correct return type. Internally I don't really need typescript to validate much. 

issue:  [<-LINK->] why's this not updated since 1.8? sooo open-source language with close-sourced language spec. got it so "is this invalid typescript" is basically gonna be just "does the compiler produce an error" crazy world thanks for the issue link 
solution: 

issue: You will get the same answers here (and just like it was not an Angular question, it's not a TypeScript question either) Asking the same question over and over again won't change the answer Let's sum it up: you can't spy documents from other domains, there is a postMessage API to communicate between windows, OAuth already has a mechanism to redirect to your own domain, and you can use Auth0 or similar if you don't understand OAuth There's nothing more to tell you 
solution: 

issue: There’s—showConfigbut I don’t think that shows inherited options  [<-ISSUE->]  [<-ISSUE->] 
solution: 

issue: I had a similar problem, my chair was comfy, but I didn't have a large enough desk (only 18 inches) So I got permission to borrow a desk, and my productivitity went way up but when will they get here. All my amazon packages are scheduled for delivery sometime next month :( 
solution: 

issue: To inspect a certain attribute on my object i can do props.data.uncertainty. Can i somehow inspect the same property if i have the propertyname in a string? (for example "uncertainty") props.data["uncertainty"] is not working 
solution: 

issue: props.data['uncertainty'] Ah nvm you wrote it Well, it should work :D (slowest reply ever) 
solution: 

issue: papaiatis: There is one small but annoying caveat you could do at compile time but it does not work with "any" but for the sake of completeness.I expect this is kind of what you don't like: [<-CODE->] You could do this: [<-CODE->] 
solution: 

issue: hey all.. i need to come up with a method that allows me to use a Web Worker .. i'm having some pretty serious difficulties figuring a way to do this with webpack and typescript . . . . anyone have any experience doing that? an idea that had been in use in the project quite some time ago, back when webpack v1 or v2 was still a thing, was a custom plugin that would dump the entire module source-code into a variable that the module creating the worker had access to, which it would then create a Blob of, and pass the Blob to the new worker. i've been digging around, and I can't seem to come up with how to do that in webpack v4 
solution: 

issue: trufa: While it's true that from the perspective of "Which properties does this object have?" you could make the case that&produces a union, mathematically speaking the category of types is usually identified with the category of sets so you'll find that what TS calls "union" (Foo | Bar) matches what that concept means in other languages that have it as well as more generally in type theory (where it's also known as a "sum type") alanbuchanan: Like Lokesh said, you can use optional chaining and null coalescing (they work really well together!), but I just want to point out that if any of the intermediate properties can benullthen it's odd that your interface doesn't reflect that... you should probably enablestrictNullChecksto catch that going forward 
solution: 

issue: iirc there was a loophole where thatXORtype didn't always work but I don't recall the details now TS doesn't have exact types 
solution: How would I filter a Union to only get the string types?say we have: [<-CODE->] what I want is: [<-CODE->] My first approach was to simply do this: [<-CODE->] Which does seem to work but then it  breaks all my other generics because my types don't expect something with properties trim, toUppercase, match, slice, (string prototype methods)... [<-CODE->]  [<-CODE->] Anybody have an idea?. 

issue: jmptr:  [<-CODE->] Typescript doesn't know at what will be what at compile time. So you gotta spell it out in a lot of conditionals 
solution: 

issue: It seems that my household government failed to maintain the strategic stockpile of hot sauce :( 
solution: 

issue: that sounds awesome, but I really feel like you would have to make something extra special to claim that name. it's a type constraint for a generic, as intype Foo<T extends string = 'id'> = ...; IfTisn't provided (or can't be inferred), then it is set to the default, in this case'id'. yeah it's ugly probably easiest to write an interface first Here's a lame example:  [<-CODE->] It's really not so bad that way, but if you inline an overload type, that's horrendous. 
solution: 

issue:  [<-CODE->] that work for you? the handler type in the implementation seems wrong. 
solution: 

issue:  [<-LINK->] I could have sworn TS was supposed to give an error here 
solution: I've stumbled across things like this in the past. [<-LINK->]. I made a typo and wantedobj.prop + strbut accidentally hadobj + strand the problem only presented itself during testing -___-. 

issue: you almost need to wrap string concatenation to get sensible behavior. but I use template strings all the time, and that doesn't really protect you at all I don't think. and go ahead and wrap addition while you're at it so you don't accidentally get coerced to the other thing. 
solution: But, theresult.lastErrorObject.nmay return the total number of documents updated. 

issue:  [<-CODE->] Just bumping this. Thanks! 
solution: 

issue: I tried using override constructor method from the TS handbook [<-CODE->] But couldn't get it to work 
solution: 

issue: hmm strange I did exactly that, and all my tests failed doing it that way to be precise this is the code [<-CODE->] it seems to work just fine when I run it via the playground... hmmm :/ is there perhaps an issue when using Jest as the test runner 
solution: 

issue: Your literal there is inferred as an array, not a tuple. But even if it's treated as a tuple,['A'|'C', {foo: number}]is not assignable toUnionTuples. 
solution: yeah I guess so, since it's trying to convert to a tuple type, it must try to treat it as a tuple.  My bad.  Without the annotation though it will make it an array.. 

issue: wierd should be there maybe "dom" isn't in your tsconfig lib setting Oh wait HTMLInputElement is the wrong type  [<-LINK->] in in React.ChangeEvent<HTMLInputElement> 
solution: I have two projects set as composites. Project A requires some files from Project B. According to the documentation, Project A should be pulling from Project B's d.ts files, but when I create a Program instance, it's loading the full .ts files instead. (I am relying on the described behaviour, as I transform the d.t.s output)Am I misunderstanding how it's supposed to work?. 

issue: Anyone know why a union with undefined seems to be hidden in vscode:e.g. [<-CODE->] Hovering over [<-CODE->] same with null 
solution: 

issue:  [<-LINK->] My DI =) 
solution: 

issue: Why does this: [<-CODE->] Gives me this: [<-CODE->] 
solution: 

issue: This is a copy-and-paste from@types/angulardefinition. [<-CODE->] namespaces do exist after transpilation I tried that too.  Still givesProperty 'lowercase' does not exist on type 'IAngularStatic'.error. If I trydeclare module angular {, I get ===>Cannot use namespace 'angular' as a value. 
solution: 

issue: keithlayne: at least it's not "cloud data-driven no-code monoserverless nanoservices" (although cloud is getting old) servicemesh sounds cooler but it's too geeky 
solution: 

issue:  [<-LINK->] tslint.json is already configured, why is there a warning message?  [<-LINK->] 
solution: 

issue: hi, in this function cmp: [<-CODE->]  [<-CODE->] 
solution: 

issue: finally is always called then is called on success catch is called on failure Your code could be simpler, the whole new Promise/etc is doing nothing (also not sure why you use a promise at all when you have an observable but who am I to judge) Anyway, might want to start with why getMarker() fails 
solution: 

issue: Thanks for the clarification! Yes I need this info in my program 
solution: 

issue: Shouldn't the compiler know it won't be undefined, here?  [<-LINK->] (don't mind the JSON.parse(JSON.stringify( part.. I'm gonna change that) 
solution: 

issue: Why can i not do:if (typeof(daterange) == Date[])? 
solution: 

issue:  [<-CODE->]  [<-CODE->] Playground Link barstill has abfield (equal tosecond) 
solution: 

issue: anybody knows why this doesn't work? type P<T, K extends string | undefined> = K extends undefined ? T : Omit<T, K> 
solution: 

issue: @rraziel [<-CODE->] And expected output will be 5th June, 2020 i have did something but not get the expected output i dont want to install another library is there any other way 
solution: 

issue: The vue-cli generated TypeScript like this: [<-CODE->]  [<-CODE->] Thank you@han4wlucBut what makes the!in it? Without I'm getting an error Is it possible to do a string type defintion with an exact length of 2? I got country ISO alpha 2 list and I'd like to define as a string that persists of exactly 2 characters 
solution: 

issue: How would I type an abstract base class such that child classes should return new instances of themselves? Because something like this: [<-LINK->] doesn't work. I don't want to lose type information, so typing the return value asBase(or in the exampleAbstractBaseClass) isn't really an option. Something likefinalwould really solve that problem, but I understand that no such thing exists? 
solution: 

issue: Less bad than left pad? Shorter at least then. AnyhowStep: I'm pretty sure it was you that filed the issue but can't seem to find it... wasn't there code that works until you turned on --declaration and then TS errors? Ah, that's it. Thanks! 
solution: 

issue: Hi, I am having some difficulty creating a flexible multi-class factory and was wondering if anyone would be able to help.I've currently got this code: [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: hi all.. can somebody please clarify why typecheck doesnt work when key is dynamic? [<-CODE->] but if I do items.key it all works any ideas? 
solution: 

issue: AnyhowStep: stay safe my friend So I'm trying to figure out if theres anyway to make this work: [<-CODE->] but no matter what i do I can't get TypeScript to agree thatactionPerformers[<T>]is the same type asActionPerformer<T>(i.e if I have a function that takesaction: TwhereT extends ActionEvent['action'], it still complains that the function inactionPerformers[action]is not typeActionPerformer<T>) 
solution: 

issue: AFAIK TS can't do that.  I would strip out all those types and just cast.  Best I know of without a cast is a switch.  If you add a generic it won't narrow.  Basically you createdUnionToIntersection. As is,event.actionis a union of two functions, so the only thing that will satisfy the arg  is an intersections of the event types. If you make it generic, in theory it could work but generics don't narrow like that, and there's always the possibility of passing a union-typed arg or specifying a union type arg.  Then you get the 'could be instatiated with a different type' error. so, it sucks that even though it's sound (AFAICT) TS can't realize that.  So....exactly what type assertions are for IMO. 
solution: 

issue: Why can't it do that? (just for my own learning) Ok cool thats what I thought it was: that its sound, but secretly a subtype error the annoying thing is that there isn't a nice single line cast :/ 
solution: 

issue: Hi guyz sorry if I asked noob question, I'm not quite familiar with typescript, can you please enlighten my mind is this language is a reaplacement for javascript or like jquery ? mostly in my web development I used jquery. . sorry again please enlighten my mind, thank you 
solution: 

issue: hello everyone I have an issue with module augmentation. anyone care to help me? :) basically, I'm trying to extendfabricmodule to use alsofabric-history. It's a really 'simple' augmentation, because all that is needed is to addundo() => voidandredo() => voidto thefabric.Canvasinterface and class. well, there are some issues that I cannot overcome and it's starting to become very, very frustrating I've tried to create a file for augmenting only, like this: [<-CODE->] (this is the last iteration, really) but so far nothing worked and I continue to get:TS2339: Property 'redo' does not exist on type 'Canvas'. what I'm doing wrong? the fabric types are at [<-LINK->] 
solution: 

issue: carpben: I use Nx for that (not sure how it does it, but even VSCode picks it up) 
solution: Gives you a mono repo with a bunch of independent modules/libs, and you can add constraints/etc to the dependencies (and display a dependency graph too). 

issue: you'd need negated types (was proposed, don't think it's moved much lately) but you can't avoid the runtime check because someone could  pass'special' as string. or, you could use branded types, but that still involves a runtime check. it's an array with one element. 
solution: 

issue:  [<-CODE->] I feel like i've seen this work elsewhere, how would i devise theNarrowtype? found this@jcalzanswer ( [<-LINK->] ), but it doesn't seem to support the situation where the discriminator is itself a union, i.e.: [<-CODE->] 
solution: 

issue: I'm missing something, I don't see aFootype? 
solution: 

issue: dfee: I've made some progress: [<-LINK->] but it's not perfect I'm still working on it perfect: [<-LINK->] dfee: does that work for you?  [<-CODE->] could still be a problem for you? I suspect you actually want it to produceA | B | C, right? dfee: if you want the latter behavior, this works [<-LINK->] 
solution: 

issue: am i the only person using node14 that is also getting a warning every time i run npm that it doesn't work with node 14?  (yes, i'm using the npm 6.14.4 that came bundled with node 14)  i feel like i must be because i don't see anyone else complaining 
solution: AaronNGray: .mjsis a node thing, it was never really standard.  They invented it as a way to distinguish between CommonJS and ESM, but that’s now handled by thetypefield in package.json.  In any case tsc won’t output .mjs and afaik there’s no way to make it do so. 

issue: Hello all, I have a rather peculiar issue with a typescript dependency that tries to use type declaration files from a transitive dependency. First off, the error message: [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: @ceoaliongroo @keithlayne  Thanks. This [<-CODE->] Maybe not the most elegant, but seems to work for now 
solution: 

issue: Sun erasure, type erasure Close enough It has threads, making the whole green unread thing not only annoying but also sneaky 
solution: 

issue: I am trying to use aSecret#secretValuein a CFN resource but am getting a type error on secretvalue not being a string. Has anyone used SecretValues in CFN resources? keithlayne: I ment to be in the CDK channel sorry! but yeah CDK 
solution: 

issue: keithlayne: Since I'm a java / C# programmer, I'm not a fan of that misleading ECMAScript usage of constants. I only use constants where it is intented to be real constant. So, not for XHR rquests, as often seen, and not for itarators, that changes in every iteration. @keithlayne @ezekel But there are some issues with modern ECMAScript, if want to use jquery and jquery ui: You can't import it twice on the same sign. I mean this is impossible: [<-CODE->] Never found a solution for this. If you know more about it, I'd be pleased to hear it rraziel: I tried it already, this solution throws an error To be fair, as learned from many languages, garbage collection doesn't work as expected in theory: It may collect it later, even if the end of the block was reached. Most scripting languages have a garbage collection probability due to perfomance reasons. They say, if you do it all the time, where it should, it consumes too much  cpu cycles 
solution: 

issue: tieTYT: Playground tip: Ctrl+S to copy to clipboard.  Or just copy the url as it’s updated in realtime 
solution: 

issue: Hello.  I would like to know if typescript has the ability to apply a class decorator to all classes in a project or a way to target the decorator at a group of dependancies etc. Didn't find anything in the documentation. Is that covered in the documentation? 
solution: 

issue: I wish I had an explanation for that, that's a bit weird I can't find an issue about it 
solution: lack of assignment to  trigger some inference?  Although I would have thought that's like sayingexit = function()..... um,Tis a record, and you're passingkeyof  UEnv, which clearly leads to that error.. probablykeyof UEnvshould beRecord<keyof UEnv, PrimitiveType>. 

issue: Nope, sorry. You can't pass generics through typeof You can manually define a type, like: [<-CODE->] aw, this doesn't work either: [<-CODE->] 
solution: 

issue: struggling with covariance. can some help me figure out the right way to enforce thatUEnvcan only have string keys? [<-CODE->] the error is onstringifyEnv<keyof UEnv>(envValue),... [<-CODE->] keithlayne: yeah that messed up when i refactored. just found that over here and then checked back into the chat. unfortunately, that doesn't solve it. the easiest way for me to solve it was to expandstringifyEnvto takeT extends Record<string | number | symbol, PrimitiveType>(i.e. adding innumber | symbol) i'm not sure that's the right way to solve it though :/ it's fine.. i'll just update stringifyEnv to ... stringify the key. i do feel like i run into this problem frequently though 
solution: 

issue: i've got a monorepo... should i be importing from@company/project-a/src/fooor@company/project-a/dist/foo? my thoughts are that the second one is more correct. but perhaps both work? ah ok... assumably the former would be duplicating code? (like... literally duplicating code, not in the DRY sense) 
solution: 

issue: then definitely depend on dist, it's the safest you'd run the risk of trying to depend on code that hasn't been passed through your preprocessor *compiler not preprocessor i.e. you decide to use syntactic macros from babel, then depending on src will just break 
solution: 

issue: Hey all, are there any typescript typing gods around? Im writing a library for making MobX State Tree flow functions type-safe but running into a small issue, would anyone be able to help? Issue here: [<-LINK->] Theres a simpler example in the readme  [<-CODE->] I shouldnt have to type "result" as "number" there, it should be inferred from the previous step The code for the library is pretty simple really, it should be fairly easy to grok, I just dont understand why its not working, it works with the alternative version of the funciton where you dont supply an array and instead just a list of functions, e.g. :  [<-CODE->] This is all typed just fine 
solution: 

issue: keithlayne: that might be what is happening to me too 
solution: But back to the other one, each function call is kind of a hard boundary in TS that it can't look past, so when you curry/partially apply TS can't use the second arg in inference.. 

issue: The@types/nodehave been updated to use it, but there's a bug in the publishing process that makes it so TS doesn't pick it up. [<-ISSUE->] Actually looks like it is fixed if you go for 13.13.5 [<-LINK->] 
solution: 

issue: Oh nice, I'll keep an eye on that issue. Thanks G-Rath? 
solution: And import maps stopped working in chrome 81, unless they changed the flag.  I was quite upset since I need them for oozaru. 

issue: You can't... you told TS to throw away the more specific type. 
solution: Actually, it makes sense. Because I'm assigning a value of given type to a variable of another type (a superset).. Yes,  I realized that in my last message. The assignment of a value (of a subtype) to a variable of another type (supertype) makes the assigned value inherit the variable's type.. 

issue: The issue isn’t theas const- it’s that you explicitly typed it asreadonly { shape: string } Thus losing the literal types 
solution: 

issue: Bruce - My issue search skills are failing me. I feel like this must have been reported and closed but can't seem to find it. [<-CODE->]  [<-CODE->] I've even been to that issue before... Yea, that's what I thought  [<-ISSUE->] 
solution: 

issue: Isn't there an import type in 3.8  [<-LINK->] Seems like it would be cleaner (and work) Hm isn't that what you're trying to do? Seems like a type to me 
solution: 

issue: Question: disregarding the fact thatanyis outside the set theory, I couldn't find a n explanation for whyanyisn't assignable tonever.anyshould technically be a subset & superset of everything at the same time (hence it not being part of set theory), so as such, why can't I assign it to an empty set (never)? More so whenneveris assignable toany. I mean, the reason is probably pragmatic, and nothing else. I should probably stop trying to map set theory on things that it doesn't apply to. So my question is more like: is there an issue/PR that lays down reasoning for this choice -- an authoritative source I can link to? Right. I arrived at pretty much the same reasoning. What you say here is especially important: [<-CODE->] Thanks for your explanation. I wish we had a document of sorts that would aggregate reasoning like these so we wouldn't need to rethink the wheel all the time :). For what it's worth, I'm aiming at compiling one, but I bet it'll fizzle out as everything non-essential that I do :) 
solution: Honestly, you’ll find that a lot of TS’s designs are kind of ad hoc and pragmatic.  Type theory still applies but there are lots of exceptions like this because they try to cater to real-world JS patterns as much as possible.  There used to be a spec but it’s obsolete and no longer maintained. 

issue: Hi , I have the following type: [<-CODE->] Is there a generic that can allow me to do the following: [<-CODE->] 
solution: 

issue: Hi, I'm trying to figure out how to get a value from an interface but can't figure out how. Help is much appreciated! :) [<-CODE->]  [<-CODE->] 
solution: 

issue: so I get the type of true but not the value of true cause if I do [<-CODE->] I'll get an error saying type mismatch i see.. I was hoping I could get a value that in theory is available there thank you for the help 
solution: trusktr: glad you figured it out, and@types/bleh pollution is exactly what I used it for, too.. 

issue: yeah, in that situation it can't produce anything the thing is that I would want to reach the Enum that the interface is linked with without actually having to import both the enum and the interface 
solution: 

issue: dwelle: thanks for the answer!! I appreciate it :) 
solution: 

issue: vancha112Hey everyone :) vancha112I'd like to ask a quick question, I need to add some extra functionality to a function, but i can't change the original function. vancha112let's say i want to change function x() {}, to print something to the console whenever it is called. is there a way to just re-declare the exact same function, call preventdefault(), and then resume the calling of the original function? 
solution: 

issue: It's as the TS error says:HTMLElement(returned fromgetElementById) doesn't havevalueproperty on it. You'll need to narrow down the type because TS doesn't have access to the DOM to infer it itself. You can do so by either type asserting (not safe, but if you're sure, it won't hurt here), or using a type guard (e.g. an if statement using aninstanceof) 
solution: is there a vscode issue proposal for supporting clicking through types in vscode's intellisense popups? Can't find it.. 

issue: If you end up using type assertion, useasinstead of<type>--- it'll be future proof when/if you move to JSX (document.getElementById('get-token') as HTMLInputElement) it's also more readable butgo to definitionoften goes to variable declaration, or function definition etc when I e.g. mouse over a function call, and see that it takes a parameter ofSomeTypeIDontKnow, I wanna easily go to that types definition and there are also cases where the typing is so indirect that you can't easily get to the definition even if you click through everything you can 
solution: 

issue: Hello, first time on here -- was wondering if someone could help me with a problem I'm having in configuring the Typescript compiler viatsconfig.jsonto recognize SCSS modules in my React project? I'm currently getting the following error  [<-LINK->] And I have a custom definition defined as:  [<-CODE->] 
solution: 

issue: Where is yourstylesvariable coming from? It's not directly from the scss file, because it has the type{}, not{ [key: string]: string } 
solution: 

issue: I have a top-level import in the file:import styles from './_toggle.module.scss' 
solution: 

issue: Haha, wow that's great Getting the same errors via TSC  [<-LINK->] Hard to conclude -- I believe that error output from TSC is related to the default export Looks like we've got ourselves one stumper of a problem lol node_modules/@typesand thatsrc/global.d.tsdefinition files are the only ones I have I'm gonna try reinstallingnode_modules Ah, I'll check Wooooaaah Reinstalling node_modules worked for me! 
solution: 

issue: Can someone help with this ^^ PLEASE :) 
solution: 

issue: yes, is there a reason not to dofoo(x: any) {}at that point? right so you'd do [<-CODE->] less ergonomic, sure 
solution: I would be very happy if there was a non-emitteddeclare x is anythat redefined the type of a variable. 

issue: It makesextends anyredundant, because that concept is already covered byextends unknown. I think I'd be happer if they had just straight up banned it. Now it's another conceptual stumbling block. 
solution: 

issue: well, from a community member, thank you for your s.o. responses :D 
solution: and it seems this also doesn't apply to arrays, andanyremains: [<-CODE->]. 

issue: Hey everyone, I need some help.  [<-LINK->] I'm trying to use google analytics, I installed the npm module, but for some reason it says the module can't be found. It already gets install with types, so I don't know why its not picking it up? Any ideas? 
solution: defolos: If you control the function definitions, you can dofunction callbackConsumer(fn: (this: unknown, ...) => void)) {}. 

issue: In this case you want the values of the array, not the keys, so [<-CODE->] 
solution: 

issue: This is working: [<-CODE->] 
solution: 

issue: Yeah, it needs to be abstract. I could explain in more detail what I'm working on. It's an unusual idea I had for the v1 launch of Deno. Getting my feet wet 
solution: 

issue: in a way it's already kind of a mess considering how much is out in the wild that was built with older versions.  I mean a decent percentage of stuff should still work, but still. 
solution: 

issue:  [<-CODE->]  [<-CODE->] 
solution: 

issue: As long as it works the way you want it to, it's correct =PThis seems to work, too, [<-CODE->] KeyedObject<string | KeyedObject<string>>is not the same asTextMap = KeyedObject<string | TextMap>, though The former only allows one level of nesting The latter seems to want arbitrary levels of nesting So, are you looking for the former or latter?  [<-LINK->]  [<-LINK->] 
solution: 

issue: AnyhowStep: I basically never use the git integration in vscode.  It’s either command line + vim or github’s client So I never even noticed there was a change 
solution: 

issue: struggling here a bit... trying to model functional pattern matching via objects in TypeScript... <T extends { type: U }> (handlers: Record<T["type"], () => any>) I want to say - hey there will be handlers you need to register against existing union type family.. type will be discriminator.. but the type is not known ;] can't sayU extends string, that's too wide need to say something along the line ofstring extends U:D 
solution: So you want aUsuch thatstringis a subtype of it.  In other wordsUcould be e.g.string | number | boolean... that seems really unnecessarily wide. 

issue: Has anyone worked with immutable-js and ts? I am getting an error when iterating over a map  [<-LINK->] What do I have to do in order to pull them in? im just doingimport { Map } from "immutable"; 
solution: Right, its a immutable-js map. 

issue: that almost looks like you're not pulling in the iterator types I guess I never responded.I made a test project, and this works: [<-CODE->] 
solution: 

issue: Sounds like they really aren't in a position to tell you not to make your job easier by doing X. 
solution: I have a tendency to get caught up in details that could be irrelevant or at least not important now, and Idoneed to be kept in check sometimes, and I can't convince them of the valueright nowof things like tests.. Their attitude is that "that's for later, when more stuff is done".  Which we all know translates to "never.". My goal is to impose good dev practices while building a team, but both of those have taken a hit in the last 8 months or so because of different circumstances.. 

issue: Hm don't think anyone ever replied a while back, might as well try my luck again I pretty much never have classes with methods for "pod" types (stuff coming from JSON APIs, states, etc), so I end up doing an awful lot ofinterface X extends Readonly<{ blahblah }> {} Is there any alternative (other than typing readonly on everything)? I know there'sas constbut that doesn't work on types 
solution: Gerrit0: Yeah, pretty much you're in the same boat as me - I use GitHub Desktop to review diffs and author commits and that's it.  However I use the old version (that they don't officially offer anymore, but you can find a link in a GH issue with a quick google search) because it does automatic hard-wrapping of commit messages.  I'm OCD andmusthave the 72-character wrapping in all my commits ; however it's quite nice to have soft-wrapping while still writing them.   For some stupid reason they refuse to implement it in the new client, not even as an option. 

issue: The interface thing is about as good as it gets keithlayne: Each API endpoint I've been writing for work recently comes with at least 10 test files (each with multiple tests) 
solution: Moments like these make me feel like I'm the only person in the world using bigint. Apart from the fact that almost no packages I know of actually deal with native bigint types. 

issue: Prettier annoys me because I like to have 80 chars max per row. Because I have a tiny screen. But prettier ignores that all the time. Now I have to scroll horizontally to see code. Good thing I only have to use it for work 
solution: 

issue: Uzlopak: whats strange is when i run like this     "test:mocha": "mocha -r ts-node/register/*.ts --opts tests/mocha.opts" instead of     "test:mocha": "mocha -r ts-node/register/*.ts -t 120000"i am seeing below error [<-CODE->] this is my tsconfig.json [<-CODE->] yes it is excluded 
solution: 

issue: so you can make a global tsc -p . and different subfolder tsconfig.json are respected for each corresponding subfolder? 
solution: 

issue: Try this, [<-CODE->] Seems to run for me after that So,@Uzlopakwas right Now, I just get "no such file or directory, report-config.json" 
solution: 

issue: Hey, I'm currently trying to do a large scale de-clutter of the global node type defs (DefinitelyTyped/DefinitelyTyped#44814) and I'm running into an issue where a type in a namespace isn't properly resolved within aglobal { ... }definition within a module definition.Specifically [<-LINK->] (NodeJS.ArrayBufferView).When usinggo to definitionit will ONLY show the namespace definition here( [<-LINK->] ), however when usinggo to definitionon the namespace declaration it will correctly show all related namespace declarations. I believe this to be a TS bug but I'm not 100% sure The corresponding error message is6> Error: Errors in typescript@2.8 for external dependencies: 
solution: 

issue: thanks for the help I don't know if it's typescripts or if it's Visual Studio code, but is really hard to decipher some errors I had no idea the problem was with that gain state object. The error didn't show up anywhere around it 
solution: 

issue: Hi, I'm having a problem with following code [<-CODE->] But at the error line. mutable can be{ type : 'one', next : SomeType } If next has a type other thanSomeType, it will be OK. Also, if mutable.next is not assigned to variablemutable, it will also be OK 
solution: 

issue: if i have a type: [<-CODE->] and a class that implements it: [<-CODE->]  [<-CODE->] i get thatMyTask.executecould take a /more/ specific type of T... i guess... but why isn't the defaultT? at least i'm not crazy, then. 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: If you are using getTypeAtLocation, that means you have the node already - can't you check the type node? 
solution: 

issue: Definitely the second one.  The first one is trying way too hard to be clever I actually had to study it for like half a minute to verify they actually did the same thing I will however sometimes do this: [<-CODE->] But that's just because I have an unhealthy obsession with the ternary operator 
solution: 

issue:  [<-CODE->] Yes, its a interface So... I should use a class instead? That's a nice metaphor hahaha Probably yes.  An interface Just tells the compiler the shape of an object that it can check, it doesn’t exist at runtime [<-CODE->] yes I imported the Document from mongoose 
solution: 

issue: What happens with a@typedefinition if an npm package starts to write the package in typescript and include its own type information? Is it possible to have both sets of type information in an interim period where the package isn't fully typescript? Or does the user have to choose one or the other by installing or not installing the@types? Or should the@typespackage be migrated in and deprecated? 
solution: 

issue: where could i find the "type" of TSConfig? (i.e. i want to use it dynamically in my code) 
solution: 

issue: Does anyone know of a type for constructable objects? We have implemented this in our definitions: [<-CODE->] But we have a new use case that asks for statics and it's not letting us access those.. 
solution: 

issue: hmm... did you know there was a compiler option called "plugins"? I can't find any documentation on it other than"List of language service plugins." its defined like: [<-CODE->] yep 
solution: facepalm. Must have to do with this - [<-LINK->]. 

issue: indeed! I wish it was more obvious in the docs too. it's underConstructor functionsin an almost anonymous example :) thanks a lot! now all they need is reactions! 
solution: The only way to follow threads right now, is to click on the notification.. 

issue: I'll probably try it out on my app, soon, it's audio intensive dw, I shamelessly plug all the time, I get you :D wait!! should I drop webpack?! :D it's my first day using it and it's been a pain to use, maybe I should just quit it now lol is it like a language you write the game in? I don't neeed special file imports I just got annoyed that I have like 30 script imports mehh I was just thinking of going back to vanilla unless I make sure to follow modularity but whatever I can't be trusted 
solution: 

issue: Just noticed, there’s a gitlab icon in the gitter topbar now Guess they got bought out Ewwvarhoisting I embraced the TDZ semantics with open arms pretty much immediately Block scoping was just a nice bonus i like function hoisting I wish classes were hoisted too the problem with var is that the initizer isn’t hoisted.  Functions don’t have that issue 
solution: Huh, I never noticed they weren't. That's too bad, they're slowly making the concept that a class is just a function with a prototype a lie :(. 

issue: they bought gitter quite a while ago 
solution: 

issue: trusktr: You want to do a bounds check on every iteration of e.g. a for loop over the array? Because that’s what would happen with undefined in the type As for the number | string thing - arrays are mutable and have reference semantics Therefore the assignment must be invariant to be fully sound 
solution: 

issue: You can name the file .mjs and it will do so I don’t know if there’s a CLI flag Apparently there is: [<-LINK->] You know how CommonJS works under the hood right? __dirnamecouldn’t possibly work with ESM CJS works by wrapping the whole file in an IIFE and then calling it.__filenameetc. are arguments to the IIFE That is weird though that you can’t run a module from the command line.  miniSphere can do that, I don’t see why node can’t. 
solution: I want to write a pretty tiny JS script that will run in a GH action, but I don't wanna fuss with making a place for it in the repo.  Right now the root tsconfig has an empty includes and blah blah blah.. 

issue: trusktr: solid looks really nice. What I'm trying to figure out at this point is, is it worth the effort to switch from s-js/surplus to solid?As you mentioned, my least favorite thing about solid is the State API.I use computations extensively in my application's controller layer 
solution: 

issue: It's probably the only case where I would choose one or the other based on what the implementation looks like 
solution: My current thought is use generics if I have to, and if I need multiple implementations, make multiple functions instead of overloads.. Probably for the best.  Overloads are painful in TS. 

issue: biesbjerg: The globals should be automatically provided.@types/nodecouldn’t work otherwise 
solution: A difference I see is that innode_modules/@typesthere is anodefolder though, should there be acordova-plugin-purchaseone as well? Not really sure how to debug this. 

issue: It probably can't just be compiled to WASM directly.  The thing to do would be pull the hot spots into functions that were implemented in WASM.  (Stuff like node APIs wouldn't exist in WASM). Although I think WASImightbe able to provide more stuff like I/O etc. hmmm...there is that, but it has to read files and stuff.  But oh yeah, the have a FS abstraction. 
solution: But that was just an example - I know there are some limitations, just not sure what they are.  For example apparently AssemblyScript puts a lot of limitations on TS to target WASM.. 

issue: TS is vomiting a block of error on me and I can't decipher it at all the last part is: [<-CODE->] does that mean it's explicitly expectingundefinedthere instead of something? I essentially have:features: { $in: gameFilters.features || [] }, gameFilters.features is: [<-CODE->] these work: [<-CODE->] does not work: [<-CODE->] surely that error message is wrong if the problem is inside that array? when hovering over the features property: [<-CODE->] Condition type is: [<-CODE->] TypeScript 3.5.3 as well as far as I can see I'm satisfying Array<T> ah... because it'sArray<T[]>I think although this doesn't work for the $in type:$in?: Array<T | T[] | null>; the Entity type does have this actually:public features: GameFeature[] | undefined;  [<-LINK->] hmmm. I need to flatten the generic I think the generic can have an array of things, but I want that to be flattened so if the property isP[], it should allowP problem is that it fetches the properties dynamically: [<-CODE->] but the property is an array and you can't sayFlatten<T[P]> 
solution: 

issue: how come object-literal return values aren't checked for excess props?  [<-LINK->] how do am I supposed to guard against this? [<-CODE->] mhm, [<-ISSUE->] yea, but that's not helpful yea, we really need that support for nominal types.. I don't wanna shove brands down everyone's throats except it may not help in this case yea, I believe they mentioned it in the issue the more I work with TS, the more I get a feeling of being sold a false promise.. I mean, I don't accuse anyone, because no one sold that promise in the first place -- it was I who formulated it but coming from years of working in JS, I hoped that moving to TS would make me trust my code.. but there are so many of these gotchas that you can't really trust TS either yea, i understand all that. It's just unsatisfying :) what TS comes down to is "catch more bugs before CI/production" better than nothing, for sure also "make codebases more readable" 
solution: 

issue: There's something else about prettier that bugs me.I like to write some exports like this, [<-CODE->]  [<-CODE->]  [<-CODE->] But if listing them vertically was done in the first place, the diff would be easy to read. Also found that they haveprintWidth: 120on.prettierrc.js No wonder I felt so annoyed at how long it was allowing each line to be 
solution: 

issue: enjunearhi all, I'm having an issue with express query types. Can anyone help?The problem I'm getting isArgument of type 'string | string[] | ParsedQs | ParsedQs[]' is not assignable to parameter of type 'string'.Do I have to manually do some type checking?  [<-CODE->]  [<-CODE->] derp, I have to use some type guards to narrow the types 
solution: 

issue: Hm probably have a similar resolution but then my screen is 36 or 40 inches (can't remember) Which means when it's unplugged and switches to the 15" laptop (which is 4k too but with 200% scale) I feel blind 
solution: fatcerberus: where would having unused parameters be a good thing? Do you mean overloaded function that specifies parameters just for types/tsdoc, and usesargumentsto work with them?. 

issue: Hi guys, how you guys are doing? I hope everything is fine =)I'm starting to work with aws-sdk-js, but I think I have some limitation in my knowledge of typescript,I was trying to get the response data from the support.describeTrustedAdvisorChecks in such a way [<-CODE->] and it wasn't working, so I decided to take a look on the typescript implementation [<-CODE->] I'm really not sure but I think that I won't be able to get the data out of the describeTrustedAdvisorChecks method, unless I pass a callback and work with that data inside of it, is that right?So using async await won't help me in that case right? =(I was trying to avoid indentation, and async await help me really good to prevent it, is there any way of getting the describeTrustedAdvisorChecks data in such a way? =) 
solution: 

issue: dwelle: Even if there were a heuristic like that it would only work for builtins.  For third-party libraries you'd either have to fall back on the prefix or else have a way to annotate the parameter as "this can be ignored" = more complexity in the compiler and more stress for API designers ("Is the callee allowed to ignore this?", etc.) It's the price you pay for the language supporting higher-order functions 
solution: Yeah, that's why I originally wanted to see his code.  Since he just needs access tothisin the event handler, one can use an arrow function for that. 

issue:  [<-LINK->] Now I remember, it's stage three.  But I can't find if they're including the bitwise operators. I guess not, that would be a different proposal. 
solution: 

issue: you can have that right now: [<-CODE->] I assume that example is just a golfed version taking advantage of&&short-circuiting? as in, if!a=> no-op I think for||you'd need to invert all the things maybe!a && (a = b)(not all the things) 
solution: So it short circuits and doesn’t execute the assignment. 

issue: wKovacs64:  [<-LINK->] "Parameterized" to me means "something that takes parameters", i.e. the uninstantiated type constructor My vote is for instantiated type That sounds fine to me n/p importstatementsare static, they're resolved at load time so you can't use a dynamic location If your environment supports it youmaybe able to use dynamicimport()  [<-LINK->] But keep in mind you're not going to get type checking for such imports because tsc won't know where to get the types from You can’t without using dynamic import.  That’s what I’m trying to tell you.  Static imports are resolved at load time,before any of your code runs.  It’s impossible to use a variable in the filename there You must load the module at runtime if the filename is variable, and the only way to do that is withimport() 
solution: You can still call the function/class.  You just don’t get the intellisense or type checking. 

issue: Hi, is this intented behavior in Typescript? A type that implements or extends some other type should always be compatible with the extended or implemented type. What's shown in the example code looks like a Typescript bug to me. [<-CODE->] Unfortunately, it doesn't. I already had"strict": truein my tsconfig I was searching for a github issue for this 
solution: 

issue: This comes up like every week.  My 2 cents: don't use methods if you can help it.  Function properties are properly contravariant in their args. sorry, can't type somebody's got a case of the Mondays 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Chevdor / WillI actually setup a playground that should show the issue, I would appreciate if someone can provide some ideas of what can be wrong: [<-LINK->] Chevdor / Will* I actually setup a playground that should show the issue, I would appreciate if someone can provide some ideas of what can be wrong [<-LINK->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: Chevdor / WillYou do raise a critical point as I assumed that I could get a grab onthis. But I understand that the decorators applies even before any instance is created. I got some success however storing my list of handlers but strangely, binding them after the fact fails: [<-LINK->] 
solution: 

issue: Is there any way to type a function with signature(T, K): T, whereTis a discriminated union, aKis a record with keys that'snotcommon to that union? this actually seems to work, but not in the real codebase for some reason: [<-CODE->] actually, the above is not what I want I want the merge ofbaseandspecificto give meT.. so something like: [<-CODE->] 
solution: 

issue: if i remove "dom" fromlibsthen i no longer havesetTimeout. however, i'm trying to develop for both node and web... what should i declare forlibto getsetTimeout?target: "es2015"andlibs: ["es2015"]isn't enough hmm. i guess installing@types/nodeworks... but i feel like that's not the right answer to "supporting both nodejs and web" 
solution: Of coursees2015wouldn't give yousetTimeoutbecause it's not an ES function.  It's a DOM function that just happens to also be supported by Node.  In general there's not a lot of overlap between the two platforms (web and node). 

issue: Hi Everyone, I am trying to work withPromise.allSettled([ promise1,promise2 ]).then(results=>results.forEach((result)=>{            console.log(result.value);        }));with typescript 3.9.3 & tsconfig have "target": "es2020",    "lib": ["es2020"],still i get error as error TS2339: Property 'value' does not exist on type 'PromiseSettledResult<string>'.though lib.es2020.promise.d.ts has : -interface PromiseFulfilledResult<T> {    status: "fulfilled";    value: T;}interface PromiseRejectedResult {    status: "rejected";    reason: any;}type PromiseSettledResult<T> = PromiseFulfilledResult<T> | PromiseRejectedResult;why can't use dot notation for accessing value of result ? 
solution: Any semantics experts around? In CS terms (language-agnostic) what would a proper classification for anything-allowed or nothing-allowed types be? (ie, TypeScript has 'any' and 'never', JSON uses {} and { not: {} }Ideally, a word to categorize: Anything, Nothing, and Empty (void, undefined). 

issue: Chevdor / WillBruce Pascoe (Gitter): thanks again for answering my question yesterday, it helped me find a solution.  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] Chevdor / Willok, so far the best option I found is: [<-LINK->] 
solution: 

issue: Hello, how could I make this kind of interface work: [<-CODE->] Now I get file is not assignable to boolean. 
solution: 

issue: Anyone know of a lint rule to flag as a warning/ or error if an optional property of a certain type is undefined? 
solution: 

issue: I am still facing this issue. Any help on this Please?I have two stepdefintion filessay abc.steps.ts which has [<-CODE->] Another step definition file xyz.steps.tswhich has [<-CODE->] I am facing this error [<-CODE->] I tried using export { } in step definition file before import . it did not help. Any help on this please?? Yes its something related to cucumber-tsflow as far as I know, I dont have a variable assigned for the import statements. Its the second file where its throwing the error since its already seen a similar import in the first file. 
solution: 

issue: it's a test runner but that's as far as my knowledge goes :) 
solution: 

issue: ok, i keep facing a certain scenario over and over again and i'm hoping to get to the bottom of it. there are many times when i want to use a value whose type is something likeobject | null, yet when i do a null check at the top of my function, tsc still thinks that it might be a null anyway and gives me an error if i, for example, try to access a property. why does this happen? 
solution: 

issue: Hi everyone. I have a issue with visual studio 2019 and rxjs https://stackoverflow.com/questions/62055357/rxjs-module-not-found-in-vs2019-but-is-found-with-the-tsc-cliI cant seem to find the module from within visual studio but I can see it from visual studio code and it compiles correctly with tsc.I'm a bit lost on what to try next to resolve my problem, anyone got any ideas? 
solution: 

issue: It narrowsappState.editoritself, but not the containing object.  I think there’s an issue about that Probably some edge cases there that would be hard to deal with, is my hunch That’s why we have discriminated unions, it’s kind of a way to get around that limitation 
solution: 

issue: yea, in that particular issue it took 3 days 
solution: 

issue: I think interfaces are a special case? For instance [<-CODE->] I'm not sure why, though. 
solution: 

issue: IMO unlike arrays where it makes sense the way it is, theundefinedshould really be implied for index signatures webstrand: Yeah, I meant “safe” from the compiler POV Ryan’s “safe vs. dangerous keys” thing You can’t run.tsdirectly with node.  You need to run tsc first and then run node on the output. Unless you use ts-node I’m not sure ifthisworks in interfaces If it does you’d specify the return type of the method asthis 
solution: From what I found you can use the polymorphicthishowever, that would specify thatI.methodreturns the specific instance ofAand not any instance ofA.. 

issue: '{ [key: string]: any; }' is assignable to the constraint of type 'A', but 'A' could be instantiated with a different subtype of constraint '{ [key: string]: any; }'. could anybody help me understand this message? 
solution: You can say thatAis{ a: string }, which correctlyextends { [key: string]: any }, but that doesn't mean that you can assign any other{ [key: string: any }to this specificA, which requires keyaof typestring. 

issue: Deserialize<T>(stringUnrelatedToT)is already an antipattern what Oh, I didn't notice, haha Assuming you have to do one or the other, I'd take the cast because it's explicit in the source text.  The generic is secretly a cast but doesn't look like one (because it wouldn't be in a language with type-level reflection) NoteArray<explicitT>is fine.  The problem is when you dofoo<T>()because you can't do anything meaningful depending onT 
solution: 

issue:  [<-ISSUE->] So, basically, it behaves very unintuitively. And there was another workaround besides the one I discovered 
solution: 

issue: yeah I guess it gets hit more than I was thinking. but you can't really use it easily outside of that, which is totally fine it seems. 
solution: 

issue: Just read through the above conversation - taking different overloads depending on the type argument is really weird and not something I even knew was possible I guess that's the case to be made for explicit type arguments Although in reality the overloads all call the same function at runtime and runtime can't see the type you picked so... isn't that still a cast at the end of the day I don't know, I've never used react so I don't have a horse in this race  - I mean I would, but it got eaten by a pig 
solution: 

issue: what doestypeof import('foo')do if it's not installed?  Error? yep, just checked. optional deps seem really problematic for ESM.  Never thought about that before. 
solution: 

issue: Hi there, question about an issue I found with type inference: [<-CODE->] 
solution: 

issue:  [<-CODE->] but short story, there's no partial inference, it's all or nothing. you can curry to help with that: [<-CODE->] 
solution: 

issue: useful helper for that situation: [<-CODE->] then: [<-CODE->] @fatcerberusthat's a no-go.  The only narrowingindoes is selection from unions (which is unsound but convenient). 
solution: 

issue: rraziel: that seems wrong.  Although you shouldn't be able to chainfindcalls...so I'm guessing that's not the full example. findreturnsFoo | undefinedthough. 
solution: 

issue: Assuming you started withFoo[][], your first.find()would returnFoo[] | undefined So you can't immediately call.find()on that again Because it might be undefined and then *boom* You either have to check for undefined there, or if you're like 110% sure it can't be undefined, use the!operator The warning aboutabeing shadowed seems weird though Unless there happens to be anain the outer scope already That was what I was trying to imply I was adding to what Keith was saying aboutFoo | undefinedand chaining finds It seemed relevant tslint is deprecated isn’t it? 
solution: 

issue: they are in fact equivalent in that example. I might take back my comment. but: [<-CODE->] yeah 
solution: 

issue: on that index signature thing, I feel like intersection has been used a ton for jamming conflicting static & dynamic parts together.  Although your issue looked pretty darn clear. 
solution: 

issue: NikoEscobar: Youre usingtype=module, you can pretty much run them as-is on the web as long as all your imports use relative paths and include the.js I do that in my project 
solution: 

issue: does someone has experience here with typeorm in combination with heroku postgres I am new to Typescript and tried to setup my first db, bcs i loved jpa when working with java i also wanted to use typeorm here. My problem is that i just didnt understood how it should work. Do you have maybe a code example or a good tutorial how do you connect to the heroku db(should also work from starting the application local) 
solution: 

issue: i seem to recall a type liketype ClassType<T> = (...args: any[]) => Tthat's the inverse ofInstanceType. am i imagining things? what I now have in my code is: [<-CODE->] 
solution: 

issue: MyOptions is assignable to U, not the other way around. 
solution: 

issue: newbie question why i am getting Property 'toString' does not exist on type 'T'.(2339)  [<-CODE->]  [<-LINK->] 
solution: 

issue: That doesn't work ifvalueisunknown.  Need to useString(value) 
solution: 

issue: Eh, close enough.  It maps one type to another.  I realized I used the wrong term after I posted it but can't edit on mobile I confused it because a mapped type maps over properties of an object type, not members of a union 
solution: 

issue: Need some help with this syntax  [<-CODE->]  [<-CODE->] 
solution:  [<-LINK->].  [<-LINK->]. 

issue: I'd just use Nx (although the way it gets shared is not the same) So you no longer want it to be readonly? Because then it seems like MyVector is not a Vector 
solution: 

issue: Curious about how did I build my own Medium story editor with TypeScript from scratch?! Here is the design doc!!! [<-LINK->] 
solution: 

issue: rraziel: I built a prototype 
solution: 

issue: es20xx libs are cumulative, earlier versions are implied by later versions so e2015 is redundant As for your issue: what happens if you set lib to esnext, out of curiosity 
solution: 

issue: TS is JS + compile-time type checking, for the record node 12 should already support es2018 builtins without a polyfill I’m not actually familiar with the codebase.  All of what I know is based on experience with the compiler API and following TS GitHub issues for like a year So I have a decent idea of what the design limitations and such are, but what the internals look like is above my pay grade, so to speak The pain you describe is averygood case for avoiding enums (at least numeric ones), though Besides the type safety issue 
solution: And you're doing the same, jumping to conclusions.  I was speaking about numeric enumsin general, the general consensus around here is to avoid them whenever possible, the fact that they show up only as bare numbers in the debugger providing another good reason for that.  It's unavoidable if they're used as bit flags, you can't substitute a string enum there, I agree. 

issue: found the issue, it should betypeof BasenotBase 
solution: 

issue: Yeah but in the case of promises they are equivalent in practice, because the promise is only observable when it settles.  Before that it's like Schrodinger's cat Koroeskohr: Yes.  ConsiderArray<A> | Array<B>vs.Array<A | B>.  The former guarantees the array is homogenous, the latter doesn't And AFAICT there's no way the compiler can know whether they are equivalent or not based only on the structure of the type 
solution: 

issue:  [<-LINK->] is this a bug? even if behavior can be justified, the error message is bananas 
solution: 

issue: interface Foo { foo: number }; let x: keyof Foo = "foo"; let obj: Foo = { foo: 812 }; obj[x]; // ok Dont use the index signature.  Delete it keithlayne: i know you’re trolling but the cause of the error was that he tried to put thekeyofinto the index signature instead of just removing it 
solution: 

issue: but that error is about the difference between{ [key: string]: number }and{ [K in number | string]: number }for example.  The first is an index signature, the latter is a mapped type. Hey@fatcerberus [<-LINK->] fatcerberus: check out the return type on the last line of this [<-LINK->] it's a bummer I feel like there was an issue around that you maybe remembered seeing? hmmm...I think it was maybe around the proposedAwaitedtype. 
solution: 

issue: Hey peeps, does anyone have trouble excluding node_modules when runningtsc? My truncated tsconfig.json looks like this, yet somehow I'm still getting errors inside node_modules [<-CODE->] 
solution: 

issue: if I use Array.from and I have the settings: [<-CODE->] Will this poly fill to something that works in Internet Explorer? According to MDn, that function doesn't exist on Internet Explorer I guess I can compile it and see 
solution: 

issue: pretty good response I actually don't know if I should it it for my current project but I will on the next one, cause... jobs 
solution: 

issue: Hi. I was doing a axios post response using axios.post<MyInterface>(response => myVar = response.data) but was puzzled why I didn't get an error when the response data was just a String that couldn't be mapped to the interface. Am i missing something? 
solution: 

issue: mowol: What you did there withaxios.post<MyInterface>is tell TS to trust you that the data there is of typeMyInterface.  It is completely unsafe.  TS types don't exist at runtime, so it's impossible to write something typesafe with that interface.  The only reliable thing to do is validate the data you receive from the API just like you would do in JS. martabrzeszczyk: you seem to have strict null checks off.  Also,{}actually matches any type other thanundefinedornull(assuming strict checks are on).  Also, inference doesn't happen where your comment is anyway because you have explicitly annotated the type of the var.  Also, you can't assign thatpropvalue to aTypewith an object literal they way you have.  There's a lot wrong with that snippet. carpben: probably you want something likeconst validity: Record<FieldType, string | undefined> = ... or actually, you probably want it to be optional, so wrap that inPartialor use{ [K in FieldType]?: string }instead. export = 5equates tomodule.exports = 5 you generally have to useimport = requireonly with theexport =stuff. It really is just a mismatch between CJS and ESM. 
solution: 

issue: Hey all, does anyone know the difference betweenexport = 5andexport default 5? Both seem to work. There is also the weirdimport X = require('')syntax that is very vaguely explained in the docs. 
solution: 

issue: lazarljubenovic: afaik you can't, because of structural typing.  JS strings implement the correct interface forIterable<string>and TS doesn't have negated types (i.e.NOT string) so you can't exclude them microsoft/TypeScript#29317- this is what you would need Iterable<string> & not string That being said, if your types are correct and your function indeed acceptsIterable<string>, it should have no problem dealing with a string, regardless of what it does with the result Do you mean contextual typing, where it infers the parameter types of an arrow function?  It can't do that since they're generic, so you have to either 1) explicitly type them, so thatTandKcan be inferred from the callback, or 2) explicitly provideTandK, and contextual typing will fill in the parameters Without type annotations, what happens is that it needs a type forxandyand it can't infer it, so it picksunknown(the implied constraint ofK).  From there it doesn't matter whatkeySelectorreturns since everything is assignable tounknown; as far as type inference is concerned its job is done.  ForTthe situation is even worse, as its only inference site lacks a type annotation By the time it gets to the second callback, it’s already inferredunknownforK, which is compatible with everything so it doesn’t have to do anything else.  It seems to be left-to-right, like you say 
solution: 

issue: Hi guys. Do you know how to correctly type ...args in this example so that I can pass it to original function without  that type error: "Expected 1-3 arguments, but got 0 or more." [<-CODE->] 
solution: 

issue: Hey everyone, I am facing kinda unexpected behavior for generics. Is the generic inferring only processed from left to right?I am dealing with the following method: [<-CODE->]  [<-CODE->]  [<-CODE->] It is still kinda interesting as it can infer the type of car but not assign the return type toK. At least with this usage. If I specify the type (eventhough it is correctly inferred) it works fine ohhhh I see what you are saying. Due to the fact that everything matchesunknownit will not inferr it, just if it is explicitly typed? 
solution: 

issue: ohhh interesting, wasn't aware of that, do you might have a blog post or article or whatever going deeper into that? 
solution: Contextual typing is a compromise that lets it infer parameters of anonymous/arrow functions by reversing the usual direction of inference. 

issue: This is for dealing with globals, though, not imports i.e. the stuff provided by the underlying platform (node, browser, miniSphere, etc.) 
solution: 

issue: Not so slick now are we method(arg: number = 42) Well, in your exampleconstructor(x: number = 0, y: number = 0) You don't need the overloads btw The ? makes it optional  [<-CODE->] 
solution: public, not private heheh. 

issue: rraziel: Gerrit0: right, since it uses jquery, thanks! 
solution: 

issue: hornta: did you not see this? [<-CODE->] That seems like a pretty clear error. 
solution: Sometimes that’s useful, I’ve found, in the case of stubborn errors caused by design limitations.  But that’s more of an “advanced user” feature and should probably have been disabled by default. 

issue: I have a problem with an error on my abstract class member fields: [<-CODE->] It gives me: [<-CODE->] But I can't see no place where type and radius isn't initialized? 
solution: 

issue: fatcerberus: But in my case Typescript should know there are not other subclasses that are not initializing all member fields? fatcerberus: What can I do to avoid this error? 
solution: 

issue: tc98765can functions run a docker container? 
solution: 

issue: My sweet spot for lambdas are things that maybe take a lot of memory/CPU but run only sporadically,  which would  cause utilization issues in k8s. 
solution: 

issue: Using AppSync as a proxy would work. TIL about its existence I guess they chose websockets for bots so they didn't have to put in extra work to implement webhook stuff. Since browser clients would already use websockets. But I can't find anything authoritative that says so 
solution: 

issue: golang really twists my underpants though.  It bugs me a lot that basically the whole docker ecosystem is built on top of a GCed language. 
solution: 

issue: sinistrecyborgIs it advisable to use ts-node in production? sinistrecyborgIt also gives error messages that refer to ts code instead of js sinistrecyborgthat's the part I liked 
solution: 

issue: I asked into the group to get a group answer well what did you expect? why are your test files in your src folder? you could write another tsconfig.json tsconfig.prod.json use that for transpilation no this is a style decision 
solution: Anyway yeah that's what Nx does, it creates a common tsconfig, then one for the sources and one for the tests that inherit from the base one. 

issue: I hereby refuse to participate in threads heheh 
solution: HTTP 403. 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: it’s a fairly common thing to do these days, some people like it - I personally hate it. I said what I would expect.The test files are there because we're organizing files by domain. So a component file along with all its test files and stories and everything are stored in the same directory.. 

issue: Is there any way to tell Typescript that a member field is guaranteed be of a certain type based on a condition? I have this class and I know that if a is of type List then b must be of type MyObj: [<-CODE->] Because I'm getting the "Object is possibly 'null'" warning from Typescript. But I know it can't be null(in that particular case) so I was looking for if I could give TS some sort of hints. That does it :) thanks. 
solution: I think.  May need tweaking.  And I'd personally check both just in case.. This is starting to feel like an anti pattern if it's this hard :). 

issue: code doesn't make sense, why can't you just do this?  [<-CODE->] 
solution: 

issue: I don’t really buy the moral angle, because like I said plants are alive too, and we kill them for food Its just not as bloody to do so Plant based burgers, they say they can taste just like beef.  But if they do there’s no way that’s natural, so the concept itself puts me off What is that 
solution: 

issue: seems like it would be weird to throw in those cases, considering it uses the float rules. andInfinityseems similarly problematic. The best answer I can think of is a wrapper lib with the semantics you want.  Would be a ton easier if you could do operator overloading. 
solution: 

issue: Trust me, you noticed.  The buzzing produced was quite loud, as it was every 2000 samples or so the mp3 decoder was giving it blocks of like 2300 samples I think Yeah, I can’t explain that 
solution: 

issue: I'm trying to setup a declaration file for a library that doesn't have typings. The default export of the library is an array of objects. I can't seem to find anywhere that describes how to write a declarations file for that kind of data structure. Can I get some help? Would that need to go in the library itself? I'm trying to make a file for my application to add typings to it. I figured I'd have to do something like [<-CODE->] 
solution: 

issue: keithlayne: I had forgotten but the reason that’s a syntax error is that unlike named exports, the default export is avalue.export default 777;is legal syntax Named exports export abindingbut the default export is just a plain value 
solution: The real fix: something like [<-LINK->] that animates your type assertions with lightning and fireworks.. 

issue: Woops, accidentally deleted. Hello! I wonder if it's possible to write a function that takes an rxjs Observable<T>, and simultaneously filters and maps T by whether a given property is null/undefined.Example usage: [<-CODE->] An even better syntax would be: [<-CODE->] I already have this one, which filters out the entire input object if it's null and otherwise maps it to a non-null type: [<-CODE->] But I can't figure out how to write the input and output types. I'm imagining something along these lines: [<-CODE->] Is it possible? Has someone already done it? Any ideas? 
solution: 

issue: Eh my bad, why did I use | heheh But you get the idea 
solution: 

issue: magnusbakken: you can't putTon the outer function,  as there is no  inference site.  You can't inferTfrom one of its keys.  If you put a constraint likeT extends Record<K, unknown>(on the outer function)  that's not going to help much.  This is the issue around curried functions I mentioned earlier. 
solution: 

issue: is it possible to remove a type from a union? for example, how would you create a new type fromtype Example = Foo | Bar | BazwithBazremoved? can't seem to google the answer. I'm just getting guides how to remove keys from types ty 
solution: keithlayne: funny thing is I’ve actually forgotten most of the details now re: what the monomorphism restriction is.  “Not doing hindley-milner inference” can be stated more simply as “TS won’t infer parameters/variable types from how you use them”... I should probably say the latter to avoid confusing people even more. 

issue: The choice to have all the things curried and then proceed left-to-right simplifies some things IIRC although I not sure how that impacts i.e.flip.  But I guess it's not an issue, it essentially creates a different generic function. as fatcerberus: yeah I'd seen that  but like you said I didn't  think it would apply very well in the case from earlier.  Maybe I was wrong. 
solution: 

issue:  [<-CODE->] Code example: https://gist.github.com/seraph0x/9b1e4caea3e8a1f4f4e35575776fb299Error message (on line 13): [<-CODE->] Yes, exactly! Is there a way to do that? Amazing, thank you - I'll go play with that! Thank you very much for the help!! 
solution: 

issue: rraziel: it was gathering data to send google xD 
solution: 

issue: Hello, I have a quick question  [<-CODE->] My IDE says'M' only refers to a type, but is being used as a value here.and I honestly don't see what's the issue. Sorry if this is not the right place to ask this. 
solution: 

issue: rraziel: ugh, my first task at my last company years ago, involved a whole lot of building complete operating systems.. would take 8-10 hours to get a change built and tested got an answer to my problem last night.. had to enable esModuleInterop in my tsconfig. not sure how that fixed it, but whatevs 
solution: 

issue:  [<-ISSUE->] got merged already 
solution: 

issue: 3 - Types have an implicit index signature, interfaces do not. thanks markdown for being so smart Although I'm not sure if that qualifies as an "important" difference, in practice it doesn't matter very much. I don't know if I can come up with a good example that shows it.  Maybe@Gerrit0or@fatcerberuscan. I don't think that's exactly it, more like certain situations where an interface should be assignable but isn't because it can't be indexed.  My memory of the difference is fairly vague. yup This is where@Gerrit0chimes in about multi-cursor editing saving your bacon. 
solution: 

issue: I guess I'll just fork typescript to addconst type X = { .. }orinterface X { } as constthat makes everything readonly then \o/ Doing all that to avoid carpal tunnel from all the extra typing (even though it'll require even more typing to fork) It strains my eyes too \o/ 
solution: That was totally missing in my skill set, so in the past week I've been trying to learn how to do it.. Normally I'd just do a bunch of regex replaces with vim or something.. But think of all the bytes I'm saving for mother nature. 

issue: @andykais  - if you want the function to accept only string or number you'd have to define something like [<-CODE->]  [<-CODE->] you can even do something like this (I'm sure there's a way to simplify it but can't think of it rn) [<-CODE->] 
solution: 

issue: thank you for the explanation@AntonSidorov,@keithlayne. Its too bad I cant get this to work, but I appreciate the effort! 
solution: 

issue: hahaimport { FirebaseFirestore as FFS } from ... I refuse 
solution: If there's a thing that requires 3 generics and the first two are inferred correctly but I want to specify the 3rd. Is there a way to do that?. 

issue:  [<-CODE->] Does anyone know how to make the setTimeout continue when it reload the page?for example it will load first all the list data for 1 second and then when it click addData() function then it will add the new data after 50seconds it will display the new data but when it reload the page for 20seconds it will continue the time remaining. someone also said that I used the local storage but I'm not familiar to the local storage. 
solution: 

issue: Dunno, make it a setInterval and store the countdown in local storage or something (can't think of any scenario where you'd want such a feature though) So you want that specific field to stop being optional/undefined/whatever?  [<-LINK->] (although that one is for all fields but you can mix with omit and unions and stuff) 
solution: Is there a way to define on the called function though that the type of one of the parameters is now different? I know that user-defined guards would be one way, but they have to return a boolean.. 

issue: Is there a way to define on the called function though that the type of one of the parameters is now different? I know that user-defined guards would be one way, but they have to return a boolean.@itsjamie  Have you looked at assertion functions?  That's exactly what they do: [<-CODE->]  [<-CODE->] Did you install@types/aws-lambda?  That's what I use. 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] For posterity, this seems to do the job: [<-CODE->] 
solution: 

issue: Oh, ok I guess thatTypeis from@angular !? 
solution: Which editor are you guys using?. (probably not many people using something other than those 2). Since yesterday, I have not been able to configure TS for myglobal.d.ts(Angular 10 w/ solution file). 

issue:  [<-LINK->] seems to work, but it's pretty gross. This is IMO way nicer and more straightforward: [<-CODE->] 
solution: 

issue: 3.9 was supposed to have a bunch of perf improvements that would help with a lot of vscode slowdowns.  I couldn't really tell the difference.  Supposedly the refactors that touch multiple files will go a lot quicker now. 
solution: nspaeth: - Have you considered exploring the definitions of Express.js ?. 

issue: Hi. Can anyone tell me the best way to go about typing the parameters in this function?: [<-CODE->]  [<-CODE->] SalathielGenese: Yes, that is where I got theExpress.ErrorRequestHandlertype, but I don't see an example of its usage. SalathielGenese: I suspect this is more of a misunderstanding on my part of how the arguments are inferred. But also, I searched for the issue and found [<-LINK->] suggesting to do basically what I am doing. 
solution: Oooh,@ericblade, do you mean that it is importing a JSDoc type that is notexported? That might be a bug, if so. Unless, maybe TypeScript automatically exports JSDoc types. Don't know though. But you can definitely import things from JS files and rely on the JSDoc types in TS.. 

issue: so.. i was working on a .d.ts .. and i started typing a type name that I hadn't yet written, and it prompted it to fill it in with a type that is only part of JSDoc comments in another file.  Surprised, I accepted, and it seems? to work. i'll be actually trying it out in practice tomorrow or the next day 
solution: 

issue: Hi all. I'm trying to access one of my service's methods programmatically by brackets notation. But the function used to get the dynamic name part is not evaluated. What's wrong in my syntax? [<-CODE->]  [<-CODE->] 
solution: 

issue: do you have any ideas how I could assert if that function is a callable or a constructable? hello, I have a type which is a function, either callable or a constructor - so basically() => Something | { new (): Something } typeof myFn === 'function'is not enough since both are functions and if I trytypeof (new myFn) !== 'function'then I get a red line there because it could be it's not constructable nope, [<-CODE->] gives error, as it should 
solution: that type is supposed to beundefined | string | () => Something | { new (): Something }and I can in my unit tests assert that it's one of the latter two, but I can't get around to test the remaining stuff without using ignores. 

issue: hi all - I'm fairly new to using typescript and I'm running into a scenario I didn't run into before. I'm using the auth0-js library in combination with React. I'm trying to use auseRefto create an instance ofauth0.WebAuthwhich in itself is going fine, but if I try to use any of the methods on theWebAuthinstance, I get the errorTS2339: Property 'login' does not exist on type 'MutableRefObject<WebAuth | null>'. I imagine I'm missing something fairly straight-forward - I'm using the@types/auth0-jspackage (definitions are here: [<-LINK->] ) but I don't understand why it's not letting me do this 
solution: 

issue: Anyone have experience using opaque types with Typescripts records?The following code is giving me the following error: "Element implicitly has an 'any' type because expression of type 'UserID' can't be used to index type 'Record<UserID, Chat>'." [<-CODE->] 
solution: 

issue: Hi can anyone help in solving this error? [<-CODE->] error [<-CODE->] 
solution: 

issue:  July 5, 2020 8:01 AM @desmap - [<-CODE->]  [<-CODE->] 
solution: 

issue: @ericblade [<-CODE->] You can't import ES modules from CJS ericblade: If you want to import your ESM dependency, you'll need to usees2015ores2020for your output module type, plus a sufficiently new version of node. Or, create a CJS build of your dependency, or use a different dependency that's CJS, etc. 
solution: so, after doing that, it switches from erroring with "cannot use require" to "cannot use import outside a module". 

issue: Tools like rollup can generate multiple formats  to maximize compatibility (that one or the other billion packagers) Wouldn't that be GCs? I mean the full drops are GCs, not all the lil spikes/drops Well, both are I guess But there is full GC and smaller GCs There's mark sweep, scavenge runs, etc (iirc) So the tiny drops would be scavenge runs, and the large drops would be full GCs 
solution: 

issue:  [<-CODE->] https://www.typescriptlang.org/play/index.html#code/MYewdgzgLgBAZiEMC8MDaBdAUFhIB0ADgK4QAWAFAIwCUOeRplARHs3VgDYCmsAHiniI0ABmxA [<-CODE->] Is it true that the only way to prevent such code is with eslint rules? 
solution: 

issue: so i finally got to testing that weird thing i found where VS Code would prompt me to import a type declared in JSDoc.  It doesn'tactuallywork when you get to trying to use it in typescript it complains that a .d.ts file is required for that js module well it doesn't work in tsc.  it works in ts-node though. argh, this disconnect where in each project i start in on, i have issues getting both VS Code intellisense and TSC to work correctly, one or the other, but not both, is starting to drive me nuts. so i hit Developer: Reload Window, and suddenly it works. wtf the files.ignore trick in vsc to ignore the typescript build directory however does not :| 
solution: 

issue:  [<-CODE->] Hi all, how would I be able to do something like thisThe error this gives is that [<-CODE->]  [<-CODE->] Well well well you hit the nail on the head @keithlayne thank you 
solution: 

issue: Does anyone has already experiencing some issues according aliases path resolution with tsc build compilation in node js environment please ? Yes tsc -bdoesn't convert aliases symlinked paths into relatives path (like babel does through babel-module-resolver). My build is a standelone package wich need to be serve by another js application. This application, during the compilation time is not able to reading aliases path (node js environment).  [<-LINK->]  [<-LINK->] 
solution: 

issue: kaito2ts kaito2If you call it 'cheating' then yes? The thing is, you're equating the input type to the output type, but when you type-guard the input type, that's not the output type anymore. I guess you could just omit the output type? 
solution: 

issue: darsain: Here's the problem:foo(42); Twill be inferred as42,notnumber.  So you're returning the wrong type.  In the other case it would infer a string literal and would again be the wrong type. This doesn't need generics.  You either want overloads here or even just havestring | numberas the input and output type. There  is exactly one generic function that takes aTand returns aT, and that's the identity function. Note that even if you change the constraint to5 | '5'it will get the same compile error, because that's still not sound. 
solution: 

issue: Hello, I am having a bit of trouble with generics and was hoping for some guidance.There is a working [<-LINK->] I would've thought that theTwould be inferred asnumberwithout issue but that is not the case.The reasonTransformerreturnsT | Kis that the transformer defaults to an identity function [<-CODE->] 
solution: 

issue: Thank you@keithlayne, I am using tsc with nodemon. 
solution: 

issue: kapilpipaliya: you may not like this solution, but :  [<-LINK->] 
solution: bsdis: I think you might have to create an object of that type, index it, and then just get the type of that element. 

issue: That's not a lot of information to pick a name heheh Hmmmmm how would you turn a[A, B, C, D]into aA | B | C | D? Nice, thanks Interfaces don't exist at runtime 
solution: 

issue: Hi, everyone! I have a question regarding TypeScript but I'm not sure if this is a good place to ask it: [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: Well the idea is that I get an object which I can use withtheObject()(a function call) and{ [theObject]: blahblha }(as an index). 

issue:  [<-CODE->] aaronbeall: 
solution: I always do too :). in the general case though, this works:Extract<Car, { nickname: unknown }>. 

issue: That's really not enough info to help you.  It's a runtime error. Resynth I heard you ditched discord. BTW AFAIK Resynth is on an anti-GA crusade 
solution: 

issue: Hi, Why is this ok to do:const colname = "stage_pump_start"; hitstate[row][colname];while this throws an error:let colname = "stage_pump_start"; hitstate[row][colname];Error is:Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'HitStage'. 
solution: 

issue: Moving t TS from Flow. With flow I'd have a terminal watching the flow status. Is there an equivalent for TS? Was easy to do far-reaching changes this way: edit one file, fix the files reported in the flow status. matrixbot: I gave it a go but as soon as it detects a change it wipes the current error list. 
solution: 

issue: Hey can someone point out what I'm doing wrong here? [<-CODE->] keithlayne: G comes from class type, I'm having an issue with undefined conditionals and manipulating the return type based on arguments passed in (handler) [<-CODE->]  [<-CODE->] keithlayne:  [<-LINK->] So I have toas Q extends undefined ? ReturnType<G> : booleanevery return? 
solution: just doas any, I don't even know if casting to a conditional works.. 

issue: keithlayne: Thank you so much! thats exacly what I was looking for! 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: hi gys ! there is aproblem here , The code does not execute properly. Try to figure out why.  / The code does not execute properly. Try to figure out why. function multiply (a,b)    a*b 
solution: 

issue: Yeah that part was kinda obvious heheh 
solution: i know this part is so easy but I am just a beginner. to solve this part , give me achannel or web site to learn about this !. walaa123467:  [<-LINK->] and use an IDE for example [<-LINK->]. 

issue: Is this an unreasonable thing to want to do? Is there a better way? [<-CODE->] Usage might be like so: [<-CODE->] Maybe namespace isn't the right thing to use? I would just make it an interface but they cross reference: [<-CODE->] It'd be a string constrained to the available interface names Specifically, a type from a server fetch that I know but can't be inferred So I could request aBazfrom the server by callingfoo('Baz')which will return data matching the defined interface above 
solution: 

issue: anyone here with knowledge of vercel/next? I'm trying to figure out whydeclare module "*.svg"doesn't work for svgs imported into files that are inpages/, but works for files that are anywhere else 
solution: 

issue: ResynthLolwhat ResynthWhy would they rename the CLI executable tovercel ResynthThat makes -1% sense 
solution: 

issue: I expect the element to betypeof arr[number]...I can't imagine this is on purpose.  The only possilbe rationale I can think of is that the arrays can be of different lengths, so that's all you'd be able to guarantee about a member.  But it's inconsistent and not very pragmatic.  Considering how loose array indexing already is in TS I think it must be a bug. even what I just wrote is pretty incoherent, they're types, not values :( possibly some weirdness around the iterator stuff? 
solution: Yeah I don't know.  I was trying to answer an SO question where the person is using an intersection of arrays (not sure why) and confused about some behavior, and it's such a weird thing.  If you use the iterator directly you get overloads, which I expected, so you only see the first element type.  But that's not what's going on infor..of; you're getting a union of element types.  Maybe I'll file it as a bug and see what they say. 

issue: Hi all, I am implementing a builder (builder pattern) and I struggle to keep the typing clean: [<-CODE->] So I cannot chain them. Is there a way to retain the "this" type in the base class ?Thank you :) SalathielGenese: Yes it is probably the answer but what I dont know is what the typing expression is that says "retain the this type" 
solution: 

issue: If that does change something, I'm using typescript with React and use almost exclusively functional components and hooks. No classes anywhere in my code and I'm also using a lot of types, so maybe I should add some Readonly 
solution: 

issue: I'm curious what happens with the donation, if there's no one to claim the donated ticket. 
solution: 

issue: gabeRaziel (Gitter): gabeOops, sorry, meant to say thanks!  I had found that documentation, but was wondering about things like Event, Node, etc.  Are those just exactly as is from the ES spec? 
solution: If you use them in vscode you can ctrl+click to see the definition, but it's more a signature than a proper documentation. 

issue: hello guys, i have a problem, at the beginning i paste my code: [<-CODE->]  [<-CODE->] 
solution: 

issue: yes thats what i tried But as you see in my 2 screendumps there are some props missing in vs code for some reason@rraziel 
solution: 

issue: I guess it also acts as an explicit check to make sure they are all exported Or you could have done cellProps.value, but it would also work with: CellProps<xx>  [<-LINK->] 
solution: 

issue: Hmm ok this is so weird It seems i can just do like this: [<-CODE->] And then i get only the data value and not all the metadata  
solution: 

issue: Think you didn't commit the package.json 
solution: You mean mylaunch.jsonshould point at the .js file and not the .ts file? I was following this tutorial... [<-LINK->]. 

issue: Going through various type libs, and can't findNullable<>. Is this pattern frowned upon?  [<-CODE->] You'd still need something likeUndefined<> provided you'd want some params non-optional otherwise you could use? 
solution: 

issue: nullable above is also doing| undefined so if your app is generally using nulls, but you want to make using optional chaining easier, you'd make the paramsNullable but I guess it's easier to just not use nulls as you say 
solution: 

issue: should be an error But the fix would be easy 
solution: 

issue: redradist: I can do that, because my generic -Tthrow me error ingetRepository(T):'T' only refers to a type, but is being used as a value here. andProperty 'name' does not exist on type 'unknown'. 
solution: 

issue:  dj-foxxy:  [<-CODE->] Yes, sinceHitStageextendsHitit will contain all its values, so it will pass the check onHit 
solution: 

issue: hey all, I'm working on an app that needs to work in IE11, but I am getting an error'Symbol' is not defined- despite the fact that I have set thetargetin mytsconfig.jsontoes5- am I missing something? 
solution: 

issue:  [<-CODE->] https://nearventur.com  [<-CODE->] https://nearventur.com/home/groups 
solution: 

issue: TS/JS doesn't really have overloads, just different signatures for a single function Array's methods don't have overloads, they have overloaded signatures But still a single method to implement all overloads So if you wanted to extend it, you'd have to override that one method, and call it when it doesn't match your new signature 
solution: when defining class members, is it considered an ok practice to do: name = new type(); instead of name: type = new type(); ?. 

issue: why do you need to wrap function type  in parens when part of a union on the RHS, but not when on LHS? [<-CODE->] 
solution: 

issue: What error do you get? Wouldn't context need to be a T? Well, not T, but T's this type 
solution: But it's strange cause the first arg type seems to be a function itself (for this). Or maybe it's just Function.call that takes a "normal" this. 

issue: xgxis portfolio of same type in State and in WithAllowedRoleStateProps? 
solution: Yeah soportfoliois just just some domain type andStateis my root store shape. 

issue: Hey, I'm pretty sure this was already answered somewhere, but I haven't a solution. [<-LINK->] I see why this could be an issue in some usecases, but if the updated properties are shared across all members of the union, I don't think it should give this error. 
solution: I don't think it's a compiler bug, but more a limitation of inference.. 

issue: opened as a feature request: [<-ISSUE->] 
solution: 

issue: Hello, could someone help me~ I want to define enum in d.ts file and directly use it in .ts file, I followed these two issues but it did not work. [<-ISSUE->]  [<-ISSUE->] 
solution: 

issue: If I have a type like this [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: If you know what you want to pick why not just use the second type param directly? But Pick is more for picking properties of the type, afaik Not pieces of a union 
solution: 

issue: Is partial application of type arguments somehow possible? You can leave them all out when they can be inferred, so I expected this.Eg infunction _mkLens<A, K extends keyof A>(k: K): Lens<A, A[K]>you'd only really need the first type argument. (i'm not building yet another lens library, don't worry) 
solution: You might be able to get away with providing defaultsK extends keyof A = keyof A?. 

issue: I think I have my issue almost figured out: [<-CODE->]  [<-CODE->] 
solution: 

issue: Hi,I'm getting this error from tslint-typescript  [<-LINK->] Is this a bug? The code works, and I'm assigning a new value to that ref. As far as I understandreportis being used. 
solution: 

issue: looks like that's just a bug oh, wait it could be a bug in the destructuring logic, or it could be a bug because you immediately overwritereport(even though you actually use it's value) but isn't tslint deprecated, now? You probably want to be using eslint, if you can. 
solution: 

issue: is there any way how to do this? I just can't figure it out :( [<-CODE->] 
solution: 

issue: darsain: I think I understand what you're trying to do. Does [<-LINK->] work for you? (check the type ofactions2) 
solution: 

issue: webstrand: I assume there is an issue with yourNonemptytype [<-CODE->] 
solution: 

issue: matsakyan: objisanywhich is assignable to every type, regardless. although you're right{ key?: string }will be assignable toNonempty.  There's no fixing that For instance [<-CODE->]  [<-CODE->] 
solution: I agree thatanyis not a good example for this case. But anyway the other case is still actual.. yes, I agree. Also, by dint oflength,foo([])is also accepted.. 

issue: Is there any way to get the raw type of a generic, say it's a union, is there any way to access that type and not what is is passed in? [<-CODE->]  [<-CODE->] I triedtypeof Tlike a dummy. 
solution: 

issue: so today I'm trying to transform array of config objects into an actions map, but again can't figure out the transform type :( [<-LINK->] is loosing all types on the functions. they are just not part of theactionstype at all, and I don't know how else to do it. I'd appreciate any pointers 
solution: 

issue: uuuu its not a good idea :/ 
solution: I get it. The issue is, when you set a type on a literalconst foo: Bar = {}the type offoois set toBarregardless of the type of the literal expression.. ablakey: There are two solutions available to you. Since you can't set any type onconst confgswithout it overriding, you have to assign the literal directlyconst configs = { ... }. 

issue: I am trying to get a "best of both worlds" between an object literal that infers union types, and a typed object literal that enforces a contract on what the literal can be.  I don't know how to type this so that it infers whatfnis from the object literal.  I hope I've described this well enough: [<-CODE->] Yeah!  It's like I want to say,   "Infer the actual type of this type literal, but make sure it all meets the Bar contract, with exception tofnwhich it just has to be any Function. Aha! I was trying to do something like that with the object literal, but alas generics don't exactly work outside a function. I've also considered the idea that "it's config, it shouldn't live IN the code" but without over-explaining a lot here, this one does, given each config as a non-trivial function associated with it. 
solution: 

issue: Is this type of model is even valid as interface should always be key and value pair but MissionTemplate is there alone but when I tried to do the same it didn't worked as it was asking me to define a value. provided I imported MissionTemplate in Mission model [<-CODE->] but not directly [<-CODE->] yeah, me too I don't know why they put it like this.yes@webstrand oh thanks. today i learnt something new :) 
solution: 

issue: Is it possible to narrow the type of a discriminated union represented as an object, with each key representing some different subclasses, but all guaranteed to be of some base class? For example, say I have this interface and mapped type: [<-CODE->] Right now, I get an error when I run this code, because it claims "JobEntity" is missing x properties from "ParticipantEntity": [<-CODE->] Is there a particular reason using the spread operator to self-reference a property from a superclass results in a typescript error: [<-CODE->]  [<-CODE->] If I remove the...this.onspread from the object declaration, the error vanishes. I'm just not sure why applying it means everything that ends up being piped through rxjs suddenly becomes typeunknown. 
solution: 

issue: Hi! I'm looking for a way to detect redundant usages of the non-null assertion operator (!). Say I've used it somewhere, but after some refactoring the value can no longer be null, then I would like to be notified so I could clean up. Does this kind of thing belong in linter land, or is it something the compiler could've helped with? I would love to have a crack at it myself if it's not already available in some form. nonara: That sounds like the way to go! You wouldn't happen to have any links to guides or howtos as a starting point? 
solution: 

issue: hey, i'm wondering how i can work around this limitation of type aliases: [<-CODE->] Playground Link "Type alias Action circularly references itself" 
solution: 

issue: Hi! I asked a question on SO re exporting a type after declaration. maybe one of you can answer it? [<-LINK->] webstrand: hmm, guess I should ask it on VS Code's Github? webstrand: thanks, when trying that, it's actually eslint that gives an error "Parsing error: Declaration or statement expected" 
solution: 

issue: Hey ya'll, I have a weird question about generic classes and I figured I would see if any of you have come across something similar.I'm writing type definitions for a library that uses class syntax for most of its first-class concepts. [<-CODE->]  [<-CODE->]  [<-CODE->] I want to be able to say something like [<-CODE->] 
solution: There are ways to make a type inherit properties from one of it's generic variables. But you will not be able to doclass Foo extends Model<.... 

issue: ResynthCan someone remove this on the Matrix side? ResynthI actually think that is the first spam I've seen on Matrix ResynthImpressive 
solution: are these the only ways to differentiate a type? I was listening to a podcast yesterday that said there's something calledkindbut I can't find any example of it in the documentation: [<-LINK->]. 

issue:  [<-CODE->] also works I'm just saying to avoid that particularArrayType<T>because it uses a conditional 
solution: 

issue:  [<-ISSUE->] 
solution: 

issue: Hi  [<-CODE->] Ackos95: - I am sorry, it has to do withcovariantexcess property checking- [<-LINK->] yw Hello guys... I am curious howundefinedfound itself as a key here...  [<-LINK->] 
solution: 

issue: Please@habibatify_twitter, would you wrap your code in triple ticks to make it more readable? Like this... [<-CODE->]  [<-LINK->] Or paste it in the TypeScript playground an share the link here !? Ackos95: - It is not an error. It has to do with covariant - a concept less doumente in TypeScript, more in Flow. The error reads... [<-CODE->] 
solution: 

issue: I'm taking a domestic flight and the flight number starts with "TS". I just found it funny I can't escape TS I hope the flight software wasn't written with Typescript 
solution: TSC931? Or am I barking up the wrong tree. I've never used flight trackers before. 

issue: This is a bit difficult to describe, but I have a bit of an issue and I'm not sure how to solve this, or is it even solvable in the first place. I have tried to make a simplified test-case.. [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] So my question is, is there a way to make it so that both of these cases work at the same time? I've been banging my head to the wall for quite a while with this, but I haven't figured it out.  [<-CODE->]  [<-CODE->] 
solution: 

issue: let bar = maybeGetList() ?? [];would work but, yeah, sometimes you have to fall back on using!or put a runtime check in your anonymous function darsain: alternatively, you can doconst x = bar;and use `x in place of bar. the issue is, typescript only keeps narrowed types around in the same context. In lambdas, since the type oflet baris[] | null, and since it can't prove that the lambda can only be called whenbaris narrowed to[], it forgets the narrowing. technically, it could prove that condition, but it currently doesn't. assigning to another variable shouldn't affect performance for example, [<-CODE->] is a case where bar isn't permenantly narrowed 
solution: 

issue: can't do that. in my real code I need to do more things in thatif (!bar)condition welp,!it is I guess :/ 
solution: 

issue: Yes,@rekotiira- it is possible rekotiira: - One version that works - [<-CODE->] goutamdh: - [<-LINK->] 
solution: Hmm actually scratch that, when we know thevaluewe knowisMultihas to befalse. I would just like to avoid error for thatbazcase. But maybe the simplest way would be to just rule out the possibility ofisMulti: truefor those cases, so something like: [<-CODE->]. 

issue: hey i'm having a bit of trouble and i'm hoping someone here can help. i'm getting this error [<-CODE->] saying it doesn't like my 'Nav' component i've tried upgrading all the@typesdependencies, targetting es6 vs es5, etc. the 'Nav' component is defined like this: [<-CODE->] is this not the right way to define a JSX component?... i'm still learning so i'm not sure FYI the "Tabs" component inherits fromReact.FC<> OHHHHHHHHHHHHHHH  [<-CODE->] :) 
solution: 

issue:  [<-ISSUE->] holy cow 
solution: 

issue: anybody know how I can stop type widening on an inferred type in [<-LINK->]  [<-CODE->] I tried using this [<-CODE->]  [<-CODE->] 
solution: 

issue: I can't do that as it would surely break the rest of the app. Thatcomponent.formfield is actually defined on theBaseComponent. 
solution: But again, legacy code has some components not relying onBaseComponent.. 

issue: ResynthNo problem ResynthWait no ResynthTFW he is not talking to me :-( ResynthTrue true 
solution: 

issue: const factory = () => new X(); \o/ Not sure what you're trying to do exactly You could also doconst factory = createFactoryFor(X)where it'screateFactoryFor<T extends new(...args: []) => T>(constructor: T) There are also injection libs Or at least IoC libs Hm no like the way I wrote it heheh  [<-CODE->] It mostly depends on what you want to do that can't be achieved with a simplenew X() 
solution: 

issue: my plan is to migrate JS to TS in small steps. Just renaming .JS to .TS didnt worked, it shows lots of erros. I use allowJs=true and declaration=false, but the errors will not shrink. any Idea? 
solution: my plan is to migrate JS to TS in small steps. Just renaming .JS to .TS didnt worked, it shows lots of erros. I use allowJs=true and declaration=false, but the errors will not shrink. any Idea?what are the errors?. 

issue: why do enums not seem to follow structural typing? [<-LINK->] 
solution: m0nkfish: enums are nominally typed, they're the only exception to typescript's structural typing. @arakis You can do this [<-CODE->] if you want to import a module you haven't typed yet. But you'll want to write type definititions for whole modules at a time. 

issue:  [<-LINK->] sure, typescript is helpful :O when i have errors, i spend more time trying to figure out what the error message is telling me than it takes to actually figure out the problem :| ofc that error went away when i tried it again. 
solution: 

issue: demitchell14: You can use "type guards" [<-CODE->] but you'll have to pass the variable into the function. It won't work on variables captured by closure 
solution: 

issue: there's not really any way.neveris a special element. The better question is, why are your functions returningnever? are you using incremental builds? and are the errors reported in commandline, or just in vscode 
solution: in the running development server, and in vscode. 

issue: Hey there. I'm playing around with the TS compiler API, but can't figure out something seemingly basic.I've followed this: https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API#writing-an-incremental-program-watcherAnd I'd like to run some code against each of the TS files when they are changed, but the docs are somewhat limited, and I've no idea how to get either the file name, or content, when changed, so that I can then run it through some processing.I assumed the watch API would support this. Correct me if I'm wrong. [<-CODE->] 
solution: 

issue: Hey folks. I know it's easy to get a discriminated union in typescript like this: [<-CODE->] Is this also possible if the tag is one level deeper? E.g. this doesn't work: [<-CODE->] (PS: I can't really remodel this. I try to make typings for some scalajs code, where my objects are GADTs, using distributive conditional types and it kinda works, but I'm stumbling into problems like this. rraziel: Yeah, maybe that's the best I can do for now.  Thanks! 
solution: 

issue: using CRA? 
solution: 

issue: in this code  [<-CODE->] how to resolve this error Type 'Mission' must have a '[Symbol.iterator]()' method that returns an iterator 
solution: 

issue: keithlayne: ok, even the assertion turns it into| undefined... but intellisense strikes again (actually, I misread the intellisnse) 
solution: 

issue: youcando that, actually. But it can get complicated 
solution: webstrand: Cheers think I can figure it from that. lloydevans: but I was working on an example, just for you: [<-LINK->]. 

issue: Yeah Intellisense isn't that great right now Pretty much hit or miss I miss good old Visual Assist It's more like being sometimes super slow (although the angular language service is hurting it, so can't blame it) But when it sees you've been importing the same type 50 times And then you try to import it again and it picks some import you've never used and don't even have as a direct dependency... :D Maybe you want[K in keyof T[0]]: T[0][K]? Since your T is an array 
solution: 

issue: Ahh, well, I took a different approach that I think solved my problem: [<-CODE->] Instead of using Pair and trying to strip off the left and right side, I started with a simpler type and used type mapping to build up to what I wanted.The ultimate result is that I can get rid of 10 very complicated overloads. 
solution: 

issue: Is there a easy way to generate a bundled declaration file? wasting currently 3 hours and no tool is easy got it working with dts-bundle-generator super annoying, but now it works like a charm 
solution: 

issue: Is it possible to attach trivia to a TypeScript syntax node? For example I'm calling ts.factory.createEnumDecleration(...) and would like to include a JSDoc comment. But I can't find any APIs to modify the leading trivia. 
solution: 

issue: When do u actually need a thing like this in ur app/lib? Honest question - im curious 
solution: 

issue:  [<-CODE->] in this code, how should I avoid this error Type '{}' is missing the following properties from type 'RecordTemplate': type, icon, createdAt, recordValue, usernamets(2739) 
solution: 

issue: I thought there was an improvement in recursive types? I can't find it in the release notes 
solution: 

issue:  [<-CODE->]  [<-CODE->] 
solution: 

issue:  [<-CODE->] @keithlayne [<-CODE->] 
solution: 

issue:  [<-CODE->] I got a work around by defining a type for the const TEST, but i prefer to have not to 
solution: 

issue: there's no way around it. The object-literal syntax disallows excess properties Object.assign({ yo: 'asdas' }, { b: 'asdad' })might work for you alternately, I think you can do{ yo: 'asdas', b: 'asdad' } as A, too 
solution: 

issue: you should have a command.type and command.payload payload then can be typed according command.type and in your switch case payload will have the right property 
solution: 

issue: unless i'm missing something deep here (there's a lot more code than what i wrote to accomplish the same thing) yes typescript supports a lot of things other languages don't so i thought i'd ask :) else if it is 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: You could dofunction assertUnreachable(): never and handle thenullcondition separately typescript treats functions returningneveras "never returning"  [<-CODE->] foo(): voidis nothing will be returned foo(): neveris function will not ever return (i.e. it will throw an exception, or perhaps call toprocess.exit(1), segfault, etc) nevervalues are never supposed to exist if at "runtime" you have a variable with the typenever, there is an error in your program. So typescript can safely assume they never return And the compiler will complain if you have a function that returns anevertype looks good to me just don't put a conditionalif(val)before thethrow 
solution: 

issue: anyone aware of an open vscode issue tracking the fact that index types are not listed infind referencesacross files? created a new one, hopefully not a duplicate: [<-ISSUE->] 
solution: 

issue: That error indicatesC:\Users\15148\Documents\backtester_5\index.jsdoesn't exist. 
solution: 

issue: What am I supposed to do? Its not getting built indist 
solution: 

issue:  [<-CODE->] lines 2 and three make a single match. SalathielGenese: this looks like it would work, but ugh: [<-CODE->] 
solution: 

issue: I try to keep js-free design in the back of my mind, when I'm designing things. I really did like the web, before everything became web-applications 
solution: 

issue: I want to extend the string prototype [<-CODE->] I imported the file in the app.module.tsHow can I remove the interface in the typescript file?Webstorm is not recognizing the method on the string object. How can that be fixed? I’m using this inside a shared library and webstorm is not detecting the method  [<-LINK->] 
solution: 

issue:  [<-CODE->] 
solution: thx. 

issue: Hi,I've just switched to TypeScript 4.0.2, but I still can't seem to be able to use the new||=and&&=operators.  [<-LINK->] 
solution: 

issue: Hello, i am new in typescript, I created a simple plugin in typescript, here is the structure I made [<-CODE->]  [<-CODE->] when i try to call the plugin like this [<-CODE->]  [<-CODE->] why i can't call directly the class not ?Thanks Hello @alehander92I solved the problem by changing on the index page [<-CODE->] now i can call the class [<-CODE->] thanks Yeah :D Thanks! 
solution: 

issue: let cat: Cat =is unterminatedlet pet = isCat(jamp());jampis undefined in the global namespace 
solution: 

issue: Is it possible to extend a class and override a property with an accessor? Is there anyway to describe the interface of the property so it can be extended as a property or set/getter someProperty: (n:number) => any | () => any | number; 
solution: 

issue: webstrand: sorry got caught up in a meeting but your fix worked perfect! Thank you 
solution: 

issue: is there a good way to debug this? [<-CODE->] as in find the source of an error in a cdk typescript file it's ok I can wait. 
solution: 

issue: ahh unfortunately that also does not work.. better I go back to classic for-in loop lol 
solution: 

issue: Oh, wow. I didn't know the new syntax was that powerful. That's nuts: [<-CODE->] 
solution: It's just so crazy.  I agree with@keithlayne's ambivalence here; Anders just created a huge weapon that it's really easy to point at your own foot or face.  But man it's so great.. 

issue: Basically I only use try/catch blocks in places where I can do something with the error No need to have 3 or 4 layers of try/catches 
solution: 

issue: I hadn't realized that regular DSL actually went through the voice switches 
solution: 

issue: True, the reason I've been usingts-nodeis beacue my scripts need to consume code from my project and it makes sense to enforce typing 
solution: 

issue: Think that can only work with a namespace 
solution: 

issue: and namespaces can't do generics, right? 
solution: i mean, if i assign it to a value i can doDerived["value"]. that might actually get me close enough for my case. 

issue:  [<-LINK->] what does one do when he gets this error? stringcan't be used to indexRecord<string, ...>... wat 
solution: 

issue: Nah the one with the...o, the main cause for Greenland losing a lot of ice this year 
solution: 

issue: I got stuck with this error which saysobject is assigned before being used  [<-LINK->] how to fix it? yes, value is need to caclulate in the loop since it is a dynamic key if I assign it just emptyobject without giving type then it will not give that error but  [<-LINK->] i will be unable to access further values on it by . 
solution: 

issue: is it possible to declare the variable first and assign the value in the loop later like this  [<-LINK->] 
solution: 

issue: Well you don't always need a Widget instance to work with its ObjectType 
solution: 

issue: What I was speaking of earlier, "groups" of types :) A Doodad relates numbers and strings and Foos, while a Thingamaijg relates BigNumbers, Messages and Bars But both Doodads and Thingamajigs have a lot in common, they just happen to apply those operations to different pairings of types 
solution: 

issue: More [<-LINK->] with [<-ISSUE->] 
solution: 

issue: yeah it's basically equivalent to currying.  Do you really need the callbacks to be generic?  Are they gonna transform the type? if so you've basically gotcompose, but with that extra wrapper type. 
solution: 

issue: hi folks!at my wits end on this: [<-CODE->]  [<-CODE->]  [<-LINK->] 
solution: 

issue: When I declare a variable in the global scope, when is it run? Is it run multiple times or just one? The initialization of that variable, I mean 
solution: 

issue: And there it goes: [<-ISSUE->] merged into master! 
solution: 

issue: 4.1 is gonna be awesome. Too bad this didn't make it into 4.0, I saw complaints on various forums that 4.0 wasn't a terribly significant release ambasta: wrong chat? ah, I see your earlier message ambasta: Here's a rough example of how to validate in typescript [<-LINK->] I don't recommend using decorators, ever, unless you have no other option. I have no idea how you'd do compile-time validation. the data doesn't exist yet, so you can't validate it Unless you're just trying to validate objects internal to your application's source code? Typescript will do everything you need. runtime validation should only be used on data that is dynamically generated 
solution: 

issue: If I have a generic typeFoo<T extends Id>, and I want to represent a Tuple of them where each entry could have a different T, isFoo<any>a typesafe way of doing so? Not really, Foo in turn "passes"Tto two types inside it, I just want to keep that internal consistency while not caring about it on the level above it Maybe this is so basic that I'm overcomplicating it, I just like to be sure :) 
solution: 

issue: Hi, beginner here (hope this is not the wrong place to ask). I'm trying to track state in a simple object literal: [<-CODE->]  [<-CODE->] Thank you! I'm not that used to having to declare the types first it. 
solution: 

issue:  [<-CODE->] I think the changes in mapped types in 4.1 will make that easier. it removes optionality.  It's not strictly necessary for that type, but if there are optional keys your result will  includeundefined. 
solution: 

issue: bradws: - [<-CODE->] You usetype assertion  [<-LINK->] 
solution: 

issue: That'll break if the method returns nothing or a promise though Maybe open an issue on their github so they write the appropriate overloads This way you won't need to cast when passing the right parameters  [<-CODE->] Where's my color, evil gitter Sure you can do that But the implementation will be annoying to write 
solution: I believe typescript will never have overloading in the same way as other languages due it's relationship with javascript.. 

issue: I was more or less wondering if you had a better way. I can't say I really like overloads, they tend to be fragile. 
solution: I definitely can't think of a better way off the top of my head.  Optional params make generics a bad fit, and that would probably be gnarly anyway.. There is a lot one can do with an array & a number. So it is hard to say... Consider reading this base and read for every links at the bottom of that page to see all you can do with array & indexes - [<-LINK->]. 

issue: Hi guys, I want to define a module scope variable which is just like a class variable for a specific class. Is there any solution on this? I try to mock express-http-context, which need me to implement a simple global context variable just like this: [<-CODE->] But it seems thatcontextis not working After putting a key-value to the mocked http context, the context object is empty when I try to get the same key from it next time no error, just not meet my requirement 
solution: 

issue: Does anyone else find this super annoying, not being able to iterate through objects without casting?  [<-LINK->] like, why can't TS know that prop is akeyof typeof defaultPropertiesffs ah I remember there being some danger 
solution: It's one of those JavaScript gotchas: an object isn't a dictionary, so iterating over it can iterate over all kinds of other stuff too depending on the construction, prototypal inheritance of the object, etc.. 

issue: yeah, accessing stuff is not super easy :/ ablakey: I get the same error withObject.keys:/ 
solution: 

issue: hey all, using typescript with react, I'm getting an error. I have a type definition like this for one of my component's props: [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] as a test I've tried to just useReact.HTMLAttributes<HTMLInputElement>in the component definition, but I still get a similar error: [<-CODE->] the declaration of the component looks like this, for what it's worth: [<-CODE->] I'm sure I'm missing something, but I can't spot it :/ yeah, I found that one before, but that is not what's causing me issues atm haha just super weird, this error 
solution: 

issue: Side note: I don't think you  wanna useReactElementin any of those places.  I'm not 100% sure as I've never used it,  [<-CODE->] (from [<-LINK->] ) 
solution: not for the return type on the component probably - I'd leave that out.  If you must annotate it, I'd useJSX.Element.. 

issue: Hey folks. I'm having trouble getting the inferred types from Package A to Package B.What's in Package A. [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] But when I'm in Package B and I tried to useCardcomponent, the typings are not there. I mean it can find the module but if I changeclassNameto1instead of a string, there are no errors that says I'm supposed to have a string and not a number. 
solution: 

issue: Hello everyone, i want to export the main class with other function for more detail this is a quick demo [<-CODE->] i want to import it like this [<-CODE->] which config(package.json, babel) i need to set to have like this demo, Plz help ! 
solution: 

issue: There's no handyClassThatImplements<ActionScheduler>? that would be sweet ;) yeah that's what's coming up... they both accept the same args so i guess i can hardcode  [<-CODE->] this works... 
solution: 

issue: ;) fair enough... that is much cleaner, thank you 
solution: 

issue: I'm trying to use a pattern where I can have functions used in one class span multiple files. [<-CODE->]  [<-CODE->] I was using this stackover flow post as reference [<-LINK->] when leaving out this as an argument I get the following errorThe 'this' context of type 'void' is not assignable to method's 'this' of type 'Bot'. 
solution: 

issue: that's not howthisparams work. you'd need to dogetPrefix.call(this, '1234') but you more likely want to attach it to the prototype? Either way, this sounds weird.  Trying to split a class across modules is probably a bad idea.  I guess I don't really understand what you're going for. alternatively, just rename thethisparam toselfor something, and it should work as written. (thisis special, and never passed in an argument list) 
solution: 

issue: rraziel: sorry i did not understand 
solution:  [<-LINK->]. rraziel: i work but it does not show. 

issue: Is there a way to tell TS to use strictNullChecks from within a file (no tsconfig.json) Like a pre-processor directive of sorts  [<-ISSUE->] FML The answer seems to be "no"  [<-LINK->] We're at TS 4 and this still doesn't work =( 
solution: 

issue: keithlayne: we already have json schema for the API, so we can generate quite a lot of stuff. Thing is, data contain keys with underscores, while we use cammel/pascal case in the codebase. 
solution: If there's a tool that got you 90% there but the casing was wrong, I'd probably consider just using snake case in my code and moving on.  I don't know if that's viable for you.. 

issue: Why can i not do something like this? a=null;  b={42,a?...a:...{}} 
solution: 

issue:  [<-LINK->] Hi !I have these types : [<-CODE->] I am calling a function, and give it a value which has the second type of below types. But typescript does not infer that the "type" argument of my creator function, is a string As demonstrated in the screen. The other types work, with the first one, typescript will know "type" is a string I get the following error in the screen: Parameter 'type' implicitly has an 'any' typeCan you please help me ? 
solution: 

issue:  [<-CODE->] Maybe? 
solution: but indeed every props are const so it's better in the end. 

issue: It can be != null and still be undefined Maybe you wantif (obj.id === undefined) (not that it'll fix your issue at compile time) 
solution: 

issue: That's just a tslint error you're code is syntactically fine, but the devs behind tslint don't believe in inferred return-types oh wait misread the prelude oh,  then you're not showing the real error.  [<-CODE->] is valid, for example Ah, you can't do it that way. The template variable is associated with the function, not the identifier this is how you make generic lambdas: [<-CODE->] There's a vexing parse involved: [<-LINK->] <T,>(foo: string)would also work Also, you're missing the=>in your example Also, beware that typescript treatsclass { foo() {} }andclass { foo = () => {} }differently Or, rather javascript considers them to mean different things. For instance, you can't do: [<-CODE->] 
solution: 

issue: Jinxit: I think I've said it before but it's what ngrx's Action & ActionCreator do (so then you useconst addValue = createCommand('add-value', props<{ propshere }>()); const command = addValue({ propsHere });) (except they call it createAction, but same thing) 
solution: You can probably simplify their code a bit if you use TS4+. 

issue: then why do I get the error for? [<-CODE->] 
solution: I want two kinds of things: a safe cast: like as in scalaand an unsafe cast: like asInstanceOf in scala. 

issue: because there's no type assertion there. 
solution: theqp: You'd use it like [<-CODE->]. 

issue: That's what I've more or less done I do use the unsafe castfoo as unknown as bar and sometimesfoo as never 
solution: banning is a bad idea for two reasonsyour workmates done stupid things intentionally like classInstance.notMember = .... 

issue: Well you have it returnT, notPromise<T> (line 5) Not sure what's safe about it anyway, it's just a cast Hm I use export namespace X { export const Y } and it works fine (Nx monorepo) But it's not a real lib, since Nx is just tsconfig aliases 
solution: (basically I import the namespace). 

issue: according to [<-LINK->] it is We have a lot of legacy code in this project, so I would guess that might be the reason :D 
solution: niklas-wortmann: looking back, your issue may be that you'reexporting `Constants.. and we actually mix the usage sometimes the alias imports and sometimes normal es imports. No exactly it is a seperate project within a mono repo. 

issue: maybe [<-LINK->] on the first one you can't say you're returning a function that takes a param and then not pass a param. 
solution: 

issue: Is there a way to ignore a package's typings (in the package itself, not@types)? They are slightly wrong for me and I wouldn't like to get on with things working and not fork the package or wait for a fix 
solution: 

issue: ok, thanks just found, element is roit.im 
solution: 

issue: solved by not using globals and importing from 'jest-without-globals' 
solution: I am getting :- semantic error TS2693: 'M' only refers to a type, but is being used as a value here.. 

issue: I'm curious to see if the mapped as types that aren't homomorphic actually behave in more useful ways. Like the "get me all the keys that are assignable to X on T" and then index T with the result and actually get X back. (or the actual types) instead ofX[keyof X] AnyhowStep: you might enjoy this.  I just went through a personal journey of exploration of the best way to set up a table with basically an optional 1:1 relation to make it easily convertible to 1:n in the future. It was transformative. Really enhanced my chi. 
solution: 

issue: yes actually, i wanted to know  i have 2 component and i add one inside another should i import it in the component of another component both are in the same file and 2 diffrent  componenet it shows this error Cannot read property 'call' of undefined no no unfortunately i am using angular 
solution: 

issue: Hi guys, I'm building a Gatsby plugin using Typescript, however when compiling it starts traversing inside multiple parent folders and also inside node-modules of other projects, this is my tsconfig, what am I doing wrong? [<-CODE->] 
solution: 

issue: do you import other local modules at all? 
solution: 

issue: @keithlayne no local modules import,package.json: [<-CODE->] tsconfig.json: [<-CODE->] .ts file that I need to compile: [<-CODE->] 
solution: 

issue:  [<-CODE->] Man I can't wait for Gitter to use Matrix so shit is sane on here 
solution: 

issue: Hello. If I have an interface likeinterface Question { Answering my own question, it'sT["response"]and if I had usedT.response(lowercase) I would have gotten a great error message telling me that :) 
solution: 

issue:  [<-CODE->] Go and download PNPM mate The Black DoveGood investment The Black DoveThenalias npm="pnpm"; alias npx="pnpx";in your bashrc  [<-CODE->] Yep, I'm hyped  [<-CODE->] Agreed. Can't wait to see it The Black DoveThey're also gonna be merging the Gitter web app into Element btw The Black DoveSo depending on how you feel about the web app, you may beslightlypissed off 
solution: 

issue: alright, thank you. I was just using string and boolean as examples of different response types.In reality, the difference is going to be more like.. [<-CODE->] I knew about overloads, I was just hoping there was a more.. convenient approach if you will. sadly I guess not, haha 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue:  [<-CODE->] +100 for saying 'in situ' 
solution: but i agree that i can replace the if statement with a ternary inside the iff function definition. i was hoping there was some magical expression-syntax i wasn't aware of that wouldn't require defining this as a function (which accepted function arguments for the cases). 

issue: that's not lazy, though 
solution: 

issue:  [<-LINK->] that website project that uses cached sqlite file I didn't write a thing for it yet =(  [<-LINK->] Porting it is actually pretty straightforward imo =x Sqlfier directory turns AST into sql string Execution directory actually uses the sql driver (sqlite 3, MySQL, etc) You could probably copy-paste sqlfier, and write your own impl of execution and it should work 
solution: 

issue: I've been trying to solve this one all day:TypeError: tslib_1.__importDefault is not a function [<-CODE->] 
solution: 

issue: I'm trying to get a more robust types working in an input sanitizer: [<-CODE->]  [<-CODE->] 
solution: I still need to go back and read up on what you can do and the common patterns with that feature.  I can use the basics, but I feel behind.. I fucked up my example of course :) I wanted to say that result should be'foo' | 'bar'and notstring. 

issue: Hi everybody... I am wondering how to write a function that would take either an async callback or regular one: [<-CODE->]  [<-CODE->] test should be async, and long should not - I can't edit it for some reason keithlayne: I want to write a function that can either take an async callback or a regular callback... It seemsimmerdoes this withproduce(state, patch)where patch can return either a promise or a value. 
solution: 

issue: how do I solve the errorType 'void' is not assignable to type 'TotalOccurance' code  [<-CODE->]  [<-CODE->]  [<-CODE->] oh no you were right it is not right 
solution: 

issue: Just going to add a mental note to myself to try this when i get home and see if this works  [<-CODE->] Oh, the TS playground is finally usable enough on mobile. It was broken for a bit around 3.7-ish Seems like i can't extend types with no name. Damn God bless you,@orta 
solution: 

issue: Could programming without variables work? 
solution: 

issue: AnyhowStep: that''s pretty awesome.  I think when I ran into something similar Bruce said something about ambiguity with blocks. But he doesn't return my calls.  I think he's just not that into me. 
solution: 

issue: AnyhowStep: I think that's a bug in whatever REPL you're using, [<-CODE->] yeah, that's a bug/feature in Chrome's REPL [<-CODE->]  [<-CODE->] works fine in thenoderepl 
solution: 

issue: Gdi Chrome. I trusted you JomoPipi: If you want to copy-paste code everywhere Or play lawyer with what you mean by "variable" 
solution: 

issue:  [<-CODE->] This looks like garbage, but it's actually valid. [<-CODE->] MySQL is also running out of numbers to use for their comment directives /*!ddddd  */ Only 5 digits allowed. A kind of semverd.dd.dd They're at version 8 already.... Once they hit version 10, they're fucked Because 6 digits is a syntax error in older versions of MySQL 
solution: 

issue: When you make modifications to the playground, you have to copy-paste the URL There is no server that syncs your changes like in google docs 
solution: Because you don't specify which pizza to delete the ingredient from. This needs more information. You can't just say to delete an ingredient without specifying which pizza. 

issue: hm, I get how this works now, but I feel likeExcludeis a bit more explicit and requires lower cognitive effort to understand what's going on. at least for non-ts-experts :) but thank you so much! I would never be able to fix it without knowing that TS doesn't narrow types in branches. it's one of those nuggets of knowledge that is hard to acquire, but will cause a lot of headaches when missing :(  [<-LINK->] ^ why is switch sometimes not narrowing down types? 
solution: 

issue: hello, I am releasing my first typescript project on npm and I'm a bit confused by how it works I tried a first with a simplepackage.jsonand anindex.d.ts they both at the root, works fine 
solution: Then I hope you didn't writeindex.d.tsby hand.. 

issue: hi! i am trying to write the following function [<-CODE->] but typescript  complains that i can't key into an empty object 
solution: is there any way to constraint the obj argument to a  non empty object or to make typescript shut up since the map function won't be called into an empty array?. 

issue: You can't constraintobjtonon-empty. It's structural type.Unless you have a specific property in mind, e.g.{ a: string } But for your example,Record<string, any>with work as@keithlaynementioned. 
solution: 

issue: That's called lexing, and it's a good way to do it :P yeah, been reading about fault tolerance in parsers BTW  [<-CODE->] I think if you runtsc -b --cleanfrominsidethe subproject you get what you want@AnyhowStep (but TBH I don't really trust it) Also@AnyhowStepwhat's up with that fiddle thing?SELECT 1;didn't seem to work for postgres either. ah 
solution: 

issue: Currently I have code like this: [<-CODE->]  [<-CODE->] I'd like to do something similar to enums, where I can define enum and then additional union type with enum's keys: [<-CODE->] Thanks a lot for that, I also didn't know abouttypeof literals[0|1] I can't get my head aroundtypeof literals[number]syntax. I assumetypeof literals[0|1]means same astypeof literals[0] | typeof literals[1], union type of these two types. istypeof literals[number]useful anywhere else? Can you point me to a documentation for that please? Syntax is similar to key typing in this:{[key: string]: number}but not quite. 
solution: typeoftends to be useful if you have a variable of a certain type and you're lazy to copy-paste or write down its type definition.Kine of like the problem you had.. 

issue: Hi everyone, i use react with typescript, react-hook-form and emotions  i have problems how to pass the refhere is typescript playground [<-LINK->] any idea i can't track the input value 
solution: 

issue: So, MySQL only interprets space and tabs as being actual whitespace 
solution: 

issue: Is there one for "anything 0xffff and below"? because that's the one I'm looking for =x At the moment, I just do a lame for-loop and use that formula to find pairs Also, I just hacked together a prototype binder and I'm now testing it So close to type checking 
solution: 

issue: You probably want to look up generic functions and mapped types. There are really two scenarios - when the array is juststring[]and when the members are well-typed string literals. See [<-LINK->] That's probably how I'd type it.  It will work whether or not you pass in an array of literals, but in thestring[]case, you will not have a very accurate return  type. If the strings are always going to be dynamic, then you can use your original function with one change: [<-CODE->] 
solution: 

issue: The issue is most likely what I was trying to show you about the type of the input. you're only going to get an output type with actual keys when you pass an array of string literals. These must be statically typed at compile time. Most likely your function is passing an array of strings - TS can't know what strings they are statically, so the best it can do isRecord<string, string>. 
solution: 

issue: carpben: Nope. It doesn't really make sense to usesuperwith static methods anyway Unless my OOP is that rusty  [<-CODE->] 
solution: and users/roles can complicate things.  Different users could have (this is contrived) access to two different functions with the same name with different signatures.. 

issue: they just use a weird $ quoting format. 
solution: 

issue: oh yeah, mysql's syntax is nasty. I use gpp to fix that, though: [<-CODE->] yep, gpp is awesome. I only use it for DDL statements 
solution: I was partially motivated by work for this prototype compiler.Current work uses C# and loads .sql files from disk and executes those queries.But those .sql files have bad formatting, and I spotted mistakes a few times.And the project is simple-ish now, but using just raw .sql files would be a nightmare to extend/maintain in future. 

issue: that's pretty cool. Looks like MySQL does not inline, unfortunately 
solution: 

issue: there are stored and virtual generated columns stored ones are the indexable kinds 
solution: I've gotten so used to working around the lack ofWITH, I don't really miss it. I've had to do stupid tricks to work around AUTO_INCREMENT and generated columns. 

issue: I have releasedtype-plus3.0 yesterday. Feel free to check it out.The highlight feature is the new runtime type checker: [<-CODE->] 
solution: 

issue: I am using react-table like this: [<-CODE->]  [<-CODE->] This is the full error: [<-CODE->] 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->]  [<-CODE->] Ideally I want the compiler and vscode to have the same behaviour 
solution: 

issue: Like webstrand said, you can't prevent users from specifying type args, and TS will bark at you if you try. 
solution: 

issue:  [<-LINK->] I don't use the ts api but maybe this? I accidentally binged magic videos on YouTube. I'm dying at work now, I'm too sleepy 
solution: 

issue: oh woah! I can't read! I thought this was using theasincluded in 4.1, totally missed that Very cool, this is perfect! Thank you so much!  [<-LINK->] seems to have some issues, but this feel like deff the right direction. 
solution: 

issue: As in a type like<A, B extends { [_ in keyof A]: A[_] }, C extends { [_ in keyof B]: B[_] }, ...> [A, B, C, ...]? It is possible to build such a type, but you have to do it in multiple steps. You can't directly construct a type like the one above 
solution: 

issue:  [<-LINK->] No clue, actually. I generally make it utf8mb4 in code, but I haven't bothered for the cli 
solution: 

issue: @webstrand @keithlayneI think you'll like this: https://github.com/microsoft/TypeScript/issues/6579#issuecomment-710776922 I implemented DFAs and regular languages in TypeScript WAIT, There's more!  [<-LINK->] Agh, I should have optimized the output more.  [<-LINK->] Could have generatedRecord<"+"|"-", "1"> & Record<".", "2"> & Record<"0"|"1"|"2"|...|"8"|"9", "3"> Okay, optimized it  [<-LINK->] Template strings hate surrogate pairs codart1: Your FooClass is returning Foo Not F Foo does not have baz F does Removing the type annotation fixes it Alternatively, have it benew () => (Foo & { baz():void }) 
solution: 

issue: You can use LodashforEachor iterate manually over all keys. What kind of error? 
solution: 

issue: Is there a more elegant way to write this expression?floors.filter((val) => val.id == row.original.floor)[0].name 
solution: 

issue: yeah,  there's a new flag that basically requires you to check for undefined on indexed access. Useinto check, in general: [<-CODE->] The flag is coming in 4.1: [<-LINK->] 
solution: 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] The array of entities is actually a stream, so I cannot pass all the entities at once 
solution: 

issue: TestFunctions only take one argument, the value I'm not sure where you gotcontextfrom? But according to the types, the context is passed throughthisinstead (this: any, value: any) => this.originalValue.length ... beware, the types could be out of date since Yup doesn't provide it's own types nope,yuptypes are crowd-sourced: [<-LINK->] typings for yup were last updated 12 days ago, so they should be fairly up-to-date. 
solution: Is it possible in TypeScript to create an interface with unspecified generic types but concretize them in implementations? I don't seem to be able to make that work.. 

issue: why does typescript seem to be ignoring my undefined check: [<-LINK->] or am i misreading the error yeah.  typo.  should be string | number  [<-LINK->] missed it again.  probably too late for me to be working same thing, though 
solution: 

issue: Hello, really could do with some help for my noobishness. 
solution: 

issue: Resynth (@resynth1943:privacytools.io)No sorry, we can't help you@gitter_james-gardner:matrix.org Resynth (@resynth1943:privacytools.io)Although, we may reconsider if you take the time toexplainthe problem 
solution: 

issue: @keithlayne Fuck MySQL, [<-CODE->]  [<-CODE->] So it did exist. Thanks They even highlighted it in blue lol 
solution: Really? This comes from the TS docs basically: [<-LINK->]. 

issue: Aloha everyone and sorry for interrupting, I'm trying to set a project that uses typescript where I have a server config and a client config that both under a global config, so the structure is like this: [<-CODE->]  [<-CODE->]  [<-CODE->] 
solution: 

issue: @keithlayne  thank you for the help but will try to hack arround it, and another thing, in my client I'm using path aliases like this: [<-CODE->]  [<-CODE->] keithlayne: I'm trying to save some asses including mine :D when using path aliases because it's a very deep nested project actually webstrand: even it's a very nested project and you don't want to save some typing ? 
solution: 

issue: hmm vscode doesn't like path aliases, but for me it's not complaining when I set it up usually Yeah you're right in that 
solution: 

issue: hi! i have another question. i have this property in propskey: string | ((item: any) => any) however if i do this [<-CODE->]  [<-CODE->] this doesn't work either [<-CODE->] making a function to cast fixed the issue [<-CODE->] 
solution: 

issue: it uses it for tsconfig/package.json - so you've probablyusedit 
solution: 

issue: how can I import lodash into the playground? I guess it doesn't really matter for my question: [<-LINK->] why does the error about never (at the bottom) go away when I change the top to become this: [<-CODE->] 
solution: 

issue: you can't write to a get-only accessor which is why it's exposed asreadonly username: string 
solution: 

issue: my problem is related to javascript logic.. can I still ask in this channel? 
solution: 

issue: Resynth (@resynth1943:privacytools.io) Resynth (@resynth1943:privacytools.io)You canexport type,export interface, etc. Resynth (@resynth1943:privacytools.io)Is that what you mean? Resynth (@resynth1943:privacytools.io)Yay :D 
solution: 

issue: Hey there, I have a question. I am learning typescript currently and am running into an issue that is super unclear to me, perhaps someone here can point me into the right direction.The error message I am getting is [<-CODE->] The code triggering the error is as follows [<-CODE->] 
solution: 

issue: Trevsacred.js  48.6 KiB       0  [emitted]  mainin prod TrevVery, very nice. 
solution: TrevAnd if it wasn't already clear, much gratitude to you Keith Layne (Gitter). 

issue:  [<-CODE->] I use Matrix, this room has a Matrix → Gitter bridge Resynth (@resynth1943:privacytools.io)Matrix is a super cool platform, very good investment: element.io betrionI try run tsc and got this problem any idea what this error might entail betrionposted an image: 
solution: 

issue: @zybzzc [<-CODE->] is somewhat better. calling@webstrandif you've got a minute you seem to know a lot about rollup and like it okay I'm thinking about moving to it from webpack for some specific things I'm good like that :P hah, wouldn't want you to get any work done I have a custom webpack plugin that actually inlines some html stuff, very webpacky, and then outputs it to TS files. I know that sounds weird, but it allows an express server to be bundled and serve that stuff. 
solution: 

issue: perfect timing I just sat down 
solution: 

issue: jkratzerHi all.  I'm wondering what the recommended method is for applying and validating type definitions against a large static JSON file.  It appears that type information is not available for large JSON files (related [<-ISSUE->] ) 
solution: 

issue: hmmm...clang seemed (at least several years ago when I last looked) to be really leading the way in error reporting. Do they have their own preprocessor, or do they just use cpp/gpp? 
solution: I was thinking more like, if you have a macro 5 levels deep, and a syntax/type error happens somewhere,the reported error position would be relative to the final expanded source code,rather than pointing to the original source code and then recursively drilling down the expansion stack. 

issue: Also curious about gpp's output. Wondering if it also spits out info good for debugging. If so, I could use that as my preprocessor for my toy sql compiler I just wrote my own prototype macro system and I hate it.Nested macros suck. I didn't place a limit on my recursion either lol.It'll run until node errors if you have circular macros 
solution: 

issue: I wrote a trigger function the other day that was a one-linerRAISE EXCEPTION.  I was annoyed, but the trigger conditions are able to narrow down so it only fires when there's an actual error.  Still sucks having to write a whole function just for that. 
solution: 

issue: last time I tried, my server consumed 100% cpu and never actually managed to sync so that I could reach communities outside of my own server 
solution: Resynth (@resynth1943:privacytools.io)Yeah uhh. Resynth (@resynth1943:privacytools.io)There are two server impl's in dev rn: Conduit (Rust); Dendrite (Go, Official). 

issue: I can't use discord, it's constantly pinging messages at me. If I turn off the notifications, I forget it exists. 
solution: 

issue: webstrand: thank you. can't really follow that, but it works exactly how I requested :) and what about transforming this: [<-CODE->] into this? [<-CODE->] 
solution: 

issue: Hi all.  I'm  looking into adding some missing types for the@types/css-tree ( [<-LINK->] ).  Specifically, the definitionSyntax module ( [<-LINK->] .  This namespace can be accessed by doingimport { definitionSyntax} from 'csstree'.  I've started by defining this namespace in the existing css-tree index.d.ts. [<-CODE->] However, in my tests, tsc raisesTS2304: Cannot find name 'definitionSyntax'. keithlayne: what type should it be then?  I initially tried defining it as an interface but tsc still can't find it keithlayne: something like this? [<-CODE->] 
solution: 

issue: guys I'm starting a business! Could you help me choose a name please? :D [<-LINK->] 
solution: 

issue: Sometimes, I hate the type system so much  [<-CODE->]  [<-CODE->]  [<-CODE->] No error. 
solution: 

issue: Oh? I kinda likekeyof anybecause it's more consistent. You can't do{ [key: PropertyKey]: whatever }unfortunatelyt do you know what the downsides were? (aside from frustrating those persons who would rather bananythrough lint rules) 
solution: 

issue: I was also thinking there were places in the compiler whereanyin certain positions triggers special cases that were useful. kresli:  [<-CODE->] maybe intermediate?  Not advanced. 
solution: 

issue:  [<-CODE->]  [<-CODE->] 
solution: 

issue:  [<-LINK->]  [<-LINK->] Any ideas why I'm getting this error? It seems likeModifieris an intersection type yet the error is that the attribute doesnt exist onT 
solution: 

issue: hmm, thanks!  ThattypedKeysdefinition is pretty close to what I was struggling with. another question:  Let's say I have a type liketype X = { foo: "a" | "b" | "c", bar: "d" | "e" }I want to produce what is effectivelytype Y = {k: "foo", v: "a" | "b" | "c"} | {k: "bar", v: "d" | "e"}.  I can get close withtype Y = { k: keyof X, v: string }.  But how can I better typevthere?  I want it dependent onk.  But I can't usev: X[k] 
solution: 

issue: keithlayne: Well, that's odd. the site doesn't have any local javascript at all, as far as I can tell. It just pulls google analytics wish google gave specific details I really hadn't realized that google had unilateral power to censor the internet... I'm really hoping there was a good reason for this 
solution: You don't need to track the.tupfile in source control. I think you want aTupfile.iniat the root of your project. 

issue: hi webstrand, can you help me with a typing issue? webstrand: please 
solution: yeah thats a pretty neat idea... though im worried the solution might be more complex to really get vscode to understand it. 

issue: Not without ugly haxx haxx that aren't possible with your test cases Not in variable assignments, anyway 
solution: 

issue: I have a.test.tsfile that I've written, but it's showing an error in vscode at the moment when I usearray.flat(). It's odd because it doesn't show the same error when I don't use.flat()in my.tsfiles, just the.test.tsones. Yes, and dang. I have my tests split out intotest/...so I can't even put it in includes 
solution: 

issue: At first glance it may be doable, but you have a bunch of different schema types there that have different signatures and even overloads, so it might be hard. Or it might be pretty simple.  Really hard to tell at this point. 
solution: i don't know if my vscode is somehow broken or if it actually didn't work. could have sworn it worked before but must have been looking at the wrong thing. 

issue: Hey peeps, I vaguely feel like I've asked this here before but I can't seem to find it. Considering [<-LINK->] , is there a way to have TS infer which type ofthingI'd expect, given by theRecord's key? 
solution: 

issue: Oliver-Fish: Not seeing that: [<-LINK->] keithlayne: waves back 
solution: 

issue: Resynth (@synth:tedomum.net)posted an image: Resynth (@synth:tedomum.net)Bridge error? 
solution: 

issue: I'm in the middle of figuring outmy ownmacro system lol  [<-LINK->] it works so well for expanding macros and giving me info about each expansion. But my brain can't seem to process how to use the info to trace text ranges through the expansion Recursion is probably fucking with my brain There's one more layer of expansion I have to map out I'm so immature  [<-LINK->] I giggled at that line of code  [<-LINK->] 
solution: 

issue: Should I not be able to do this?A.map(e=>{{key:String(e.id), text:e.name}})? I get this error: "Cannot find name 'text'. Did you mean 'Text'?" ah got it 
solution: 

issue: but it doesn't work. i get a type error. the children property of MyModal is ReactElement 
solution: 

issue: did you get married while still in the military? ah 
solution: I had this one trooper who should have never been allowed  to join. He actually ended up as a direct report to me, because nobody else cared about him or would deal with him.. 

issue: Anyone following Lerna project? It seems like that major contributor reluctant to support it anymore. Am'I wrong? 
solution: On my last day in the army, my commander refused to sign my paperwork unless I paid for something he was responsible for, but has lost accountability of. It would screw up his evaluation,  so he was desperate to  get the heat off of him.  In a moment of weakness (had  the engine running on the  uhaul already) I gave in, that cost about $1,600 IIRC.  Just bad times.. 

issue: I recommend pnpm, unless you like the advanced features of yarn 3 wait it's not? Then I mean yarn 2. The one that you can't install system-wide. 
solution: 

issue: In the movie Hera wanted to kill Herc. but I can't remember enough about that stuff. Are both names the same dude? 
solution: TBH more people know the name Hercules. I think Heracles' popularity is more recent. 

issue: Got some traps set. I'm going to hold off until tomorrow and see if I can't catch this varmint. [<-CODE->] If it happens without tripping this, I'll know it's a Node thing :) Wabbit season! theqp: Casting toanyturns the typchecker off forObject, so I can monkey around with it without errors  [<-CODE->] Example: [<-CODE->] 
solution: 

issue: Hmmmmm..... got a function thats a complete black box alls i know is it causes process death. can't debug it, can't log inside it, can't get the stack trace, nothing have this code yet the process still dies without being caught  [<-CODE->] 
solution: Also, for my case anyway,response.on('error')generally gets a copy of the error, but made it impossible to stop the stackless throw.. 

issue: Why can i not do this? [<-CODE->]  [<-CODE->] 
solution: 

issue: There are some board games that are like "escape rooms in a box" You can only play each one once, though  [<-LINK->] There are virtual ones you can do, too! Thanks to Covid They seem to all be done over zoom calls https://www.trappedescaperoomvegas.com/booking-online/If you're looking to do a virtual escape room, I highly recommend this one I haven't done the boxed one That virtual escape room has live acting, and he has a gopro on his head so you get a first person view Daw Hahaha, that one is mostly kid friendly except for one part where a toy gun is waved around (but no one is shot) There's also this,https://strangebirdimmersive.com/"The Strange Secret of Mr. Adrian Rook"It's not an escape room but a family friendly somewhat immersive experience You have video calls with about 8 different actors 
solution: 

issue: So I caught that bizarre problem I'd been facing. The traps worked. [<-CODE->]  [<-CODE->] What's a little odd, that @ShanonJackson pointed out is, freeze doesn't normally throw when attempting to re-assign a property. When I try it in node, I don't get an error, however, when I try it on the playground it does 
solution: 

issue: AnyhowStep: I ordered one, will let you know how it goes. Thanks for the tip, wouldn't have thought of that. Apparently the Philly police commissioner's name is Danielle Outlaw. I am amused. 
solution: @ShanonJackson November 7, 2020 12:20 AMThey bring nothing good.Thousands of Issues aren't closed, new features increase complexity making it harder to learn, pushing frontiers away from new comers, and everything - at nearly no benefit. I think the point when TS became disastrous was when they mixed types and their instances.  It was the dumbest thing that could ever happen to the typed language.To say nothing of bringing into language bad practices like enums, structs & namespaces (the latter destroy modularity) etc. Total failure. No amount of new features would improve it, sadly. The code base which is itself was poorly-minded is already bloated.I think MS should discontinue the project and leave it in life-long support state encouraging migration.. 

issue: any way to omit a common key from a type that's a discriminated union? Can't doOmit<SomeType, "someKey">becauseOmitis just glorifiedPick.. 
solution: use case: [<-CODE->] I want the above to be type-safe. you're using a type assertion, so it's up to you to guarantee the type safety.. 

issue: can't do anything but use an assertion, it's not my API -- comes from DB (firebase) theOmit<>is my way of telling the compiler that I know the returned data will come without anid... but I wanna make sure I don't forget to add theidmanually below problem is, theOmit<>is useless in this case 
solution:  [<-LINK->]. Yeah I feel like maybe some utility types distribute and some don't, I have to look at the definitions pretty much every time.. 

issue: Gerrit0:  [<-LINK->] I know that namespaces are more like legacy, but enums are commonplace. Initially these features caused a lot of bad practice. keithlayne: :: [<-LINK->] I'm serious. I don't troll. Today's TS way of development is a complete disaster. MS completely derailed Typed JS as concept. All these sugary types likenever,unknownand endless syntax/types helpers made it completely un-learnable and un-maintainable. Worse, language designers doomed themselves to forever support these features as slightest changes would completely break back compatibility. If I would learn typed language I would better of to start with C++. There is also a lot of trouble, but at least, it would utilized types for benefit both in performance and refactoring. 
solution: 

issue:  [<-CODE->] What's sugary about them? You literally can't represent these concepts otherwise. 
solution: 

issue: a hardcore smackdown to those advocating usingletinstead ofconst:) that said, everyone transpiles it down tovarso it doesn't matter 
solution: 

issue: qm3ster:  [<-LINK->] Theunknownis completely useless type.neverwas introduced to solve only one single problem that could have been solved by thousands simpler ways. webstrand:  [<-LINK->] Well we actually can see what's optimized and what's not by--print-bytecode-filter fooFn 
solution: 

issue: whats the easier way to fix this  [<-LINK->] without changing the config dont want to make a type just for this just add: anyto the var? 
solution: 

issue: TS doesn't honorexportsyet. probably matched the path?  [<-ISSUE->] learned all about it last weekend when I tried to go ESM for my node stuff while upgrading to node 14. Apparently stuff is starting to get close to stabilizing on the node side. 
solution: 

issue: ramda's typings are not so great for instance [<-CODE->]  [<-CODE->] 
solution: but I think there is some more fundamental type mismatch here, but it's not obvious to me at this point.. 

issue: text files and grep! Actually, we just send all of our data to google now yeah It's a nice interface, but I don't like sending people's browsing history to google. I wish everyone would turn on uBlock, and wipe out google analytics 
solution: 

issue: there's an error I'll uninstall recent packages and try a uninstall/reinstall to see 
solution: put "as const" on the end (note this SHOULD not be needed when colon casting is involved) but just want t osee. my thoughts are that there's a union member in Protocol that actually has an error somewhere in your project. 

issue: hmmmmmmmm.  trying to run some tests with ts-mocha, and just getting "Code generation failed" with no further clues.  any suggestions? just "Error: Debug Failure. Output generation failed" 
solution: @ShanonJacksonOk, I've solved it by re-defining Protocol without zodok seems like the tooling is playing me a bitI don't know if you're familiar with zod, if you are, I did something like [<-CODE->] Tooling tells me that Protocol = 'https' | 'sftp', but as we've seen above that doe snot to seem the case.I'll investigate the issue further later. 

issue: @ShanonJacksonI still have some issueSomething like basically [<-CODE->]  [<-CODE->] you told me there might be an issue somewhere with Protocol, but I looked every reference to it in my /src and I can't find anything wrongDo you have any lead, any how-to how I could investigate further the problem and find out what's wrong ? 
solution: I have performed a clean re-install of npm iin the project just in case. 

issue: You're using v2 I assume? playground will only use v1, as far as I can tell. ah Finally isolated it; here's one case where youhaveto useany: [<-CODE->] Type '(...args: P) => unknown' does not satisfy the constraint '(...args: never[]) => unknown'. Whereas with: [<-CODE->] there's no error this makes me sad can't useany[]either 
solution: 

issue: yeah you can, but that's defined astype Parameters<F extends (...args: any) => any> = F extends (...args: infer P) => any ? P : never; so it still has to useany In my program UnwrapParameters doesn't really exist, that's just for demonstration purposes. I am trying to pick parameters from a function type nested deeply in other types. in almost all cases (except for this one) you can replaceanywithnever. and get a little bit more type safety orunknowndepending on context 
solution: Alex DavidYeah, that's fair. Butunknownandneverare type safe, so it wouldn't seem bad to have that within your core application, but if I see ananytype in there I'd hope that it was wrapped in a helper type to prevent misuse or leaking ofany. 

issue: Does anyone know what the rule is, for how typescript decides if a type alias should be transparent or not? For instanceReadonly<T>isn't transparent, because when you look at the tooltip forReadonly<SomeType>all you see isReadonly<SomeType> 
solution: 

issue: Probably related to what's emitted. Sounds like@AnyhowStepterritory, since he's obsessed with that stuff. Is it explained anywherewhythe tricks to expand types for i.e. tooltips work? Like the identity mapped type 
solution: 

issue:  [<-LINK->] Someone from Bloomberg talks about TS experience. In short: it's a disaster.I think it's still worth to read it. They even touched such stuff as unimplementedexports:field inpackage.json. Pretty nice article. 
solution: 

issue: wasn't that the one with the  ? yep. My moment of fame. 
solution: 

issue: I've seen the same thing Seems like sometimes it works as expected, but often not I've gotten used to just writing<T,>there. webstrand: I don't think that's the issue It's just the playground AFAIK - it doesn't respectjsx: noneor whatever. I feel like I've hassled orta about it in the past, I think it's regressed several times <T extends unknown>might be just as confusing, depending. and a lot more typing :) Depends on the reader I guess - if I see<T,>I know immediately what that's about. The useless constraint I would immediately question if there's no comment or anything. 
solution: 

issue: It's built in, actually. So that seems odd. 
solution: 

issue:  [<-CODE->]  [<-CODE->] This causes type error everywhere in the project ... I tried many things but I run out of ideas. Anyone got some ? 
solution: Resynth  (moved to @synth:tedomum.net)I have never used it tho tbh. Resynth  (moved to @synth:tedomum.net)Actually that's a pretty good pattern, you can put documentation at the top. Hmm. 

issue:  [<-CODE->]  [<-CODE->]  [<-CODE->] webstrand: ok thanks :( 
solution: 

issue: Are you talking about a stand-alone client? Or another browser-based client, à la Riot/Element? AnyhowStep: For example, changes to whether or not the timezone is using DST or not. Some islands near the international date line have moved from one side to the other. 
solution: 

issue: I want permenant DST so that the sun doesn't set before I get off work. 
solution: If you just store a time and date and timezone you can convert it whenever you want :). 

issue: Yeah it's just determining when and why things are expanded or whatever is a total mystery to me. 
solution: 

issue: CropNamesis a type, you can't generate runtime values from a type. 
solution: it can be a constant, there's really no way to get the string values back out of that?. types and variables have different namespaces. 

issue: Hi,How comes I'm getting an error here?  [<-LINK->] Logic seems solid. But I don't want the user to pass children. And if ActionBtn requires children, then it should be in props [<-CODE->] The problem is ActionBtn has a rather complicated signature, and it can either receive label or children. 
solution: 

issue: jgeurts: one thing:asserts fooshould throw if it's not valid. 
solution: keithlayne: I think this is getting closer [<-LINK->]. 

issue: Keith's incredibly clean code ;) 
solution: must've gotten bored over at that other place. typedoc has a room over here so I still pop in weekly or so. fortnightly. 

issue:  [<-CODE->] The bridge is shit  [<-CODE->] SAME  [<-CODE->] Me: [<-CODE->] ResynthH ResynthSo yes this is my life Resynth(That's not even including services lmao) 
solution: ResynthI know decorators are megh. 

issue: so loopback is like, an api aggregator? @keithlayne How do you do DI with functions? I've run into this problem: [<-CODE->]  [<-CODE->] I've tended to use OOP to solve these kinds of problems, but I'm trying to learn a new way keithlayne: what kind of decorator isn't a function? if it's not a function, it can't do anything 
solution: 

issue: finally realized that it wouldn't install from usb to UEFI unless you format the usb as MBR. Haven't done this crap in a long time, what a pain. it's because you're usingexampleUser- it's complaining thatTUserResultmay be unrelated. I think I used the wrong name there 
solution: 

issue: I believe you can "easily" retrieve the password for every Windows version before 10. Not sure about 10, though 
solution: 

issue:  [<-CODE->] Yeah, Windows' password authentication is pretty bad Resynth (@synth:tedomum.net)There are shitloads of crackers Resynth (@synth:tedomum.net) [<-LINK->] Resynth (@synth:tedomum.net)My teacher told me to write more comments /s Resynth (@synth:tedomum.net)BTW that font is "Victor Sans", if anyone's curious. Dope font, and it's open-source Resynth (@synth:tedomum.net)Been using it for a few days now, it renders very well. Quite a welcome difference from the other Operator Mono-esque fonts (FiraFlott isn't that good IMHO) Resynth (@synth:tedomum.net)This font actually does look pretty damn professional, if I do say so myself Resynth (@synth:tedomum.net)Plus it's actually readable  [<-CODE->] Thanks lmao  [<-CODE->] I like putting my ideas into them, and actually explaining shit instead of letting the reader work out why X does Y Resynth (@synth:tedomum.net)(They aren't just for the word count, of course, they are actual comments that help the reader understand stuff.) 
solution: Resynth (@synth:tedomum.net)JSDoc in VSCode doesn't work like Discord's sexy Markdown editor lmao. 

issue: I've probably stared at this font more than any other font in my whole life, I figure that's worth paying for. eh. That's like a two weeks of meals. It's not so much, IMO. It's not like it's designed by some giant foundary, just some guy. I like eating food, I try to benchmark entertainment expenditures against food by comparing how much enjoyment I'd get out of spending the same cash on food. yeah. Font appearance can't be copyrighted If Operator was designed for windows rendering, it might look worse on linux 'cause windows does terrible things to fonts Oh, wow, I thought that was impossible. 
solution: 

issue: Damn, that's cool I'm way too used to seeing longif extends inferhacks for doing stuff like that tbh 'cause windows does terrible things to fontsProbably, knowing MS Man, that Gitter quote font looksreallybad on my screen tho 
solution: 

issue: yeah, as far as the applying regular mapped types to tuples without getting all the array keys. if that makes sense did you happen to try things with the mappedasfeature in 4.1 (IIRC)? I have a feeling they'd have the same issue, but not sure. So in the past I've done things sorta like this with dummy function types. They were a way to preserve labels sometimes before that feature landed. also, from experimentation I'm not sure if inferring with tuple spread retains labels or optionality. I seem to recall mixed results. 
solution: 

issue: yeah I did, theasfeature didn't help I need to preserve the optional, because expansing the tuple in a function(...args: Select<[foo: 1, bar?: 2], 1>) => voidneeds to have thebarargument optional Seems to work: [<-CODE->] 
solution: I could imaging something recursive doing what you want, but it'd be painful because you can't easily do stuff with numeric literals.. 

issue: Does anyone know why these 2 ways of defining a function are different? [<-CODE->] I'm getting different type inference when calling something inside the function that is defined as a generic of boolean the return type is the same for both cases, they call the same function that takes only one parameter, the boolean one. 
solution: 

issue: nonara: what does yournode_modules/typescriptpoint to, your version of the compiler, or the official one? I suspect thatts-nodeis loading the wrong compiler nonara: you might be able to use [<-LINK->] to ensure that everything in your project uses your own compiler code, and not the official one. 
solution: 

issue: Can't use...args: neveras a constraint everywhere, if you need to access...argsit'll have the type ofnever. 
solution: 

issue: Hey all. I'm trying to usetscto make a production build and there is no output when I run./node_modules/.bin/tsc -p tsconfig.build.json. My tsconfig.build.json does have anoutDirand aninclude. If I run it with--showConfig, files do show up. What else can I do to debug this? 
solution: 

issue: BuZZ-dEE if you want help you need to provide more info. BuZZ-dEE This is a point of confusion with overloads. Here's an example:  [<-CODE->] so in your example above, looks like you have one overload, and it doesn't match your implementation. It's a very very Mad World I'm using something from a component library that breaks when a child is conditionally added. When it reaches the state where it should display, it's added to the markup, but doesn't display. 
solution: 

issue: What's the best practice for pairing return value to a discriminated union parameter (since we can't narrow down union generic types microsoft/TypeScript#13995)?playground [<-CODE->] True, but that's not the problem. I may not have explained it well: the return type is correct, but the generic type inside function body isn't narrowed 
solution: I thought maybe there are some more safe workarounds I don't know about. 

